This file explains how to install Miro from sources.


Requirements:
=============

To compile Miro you need:

- ACE (>= 5.7.2): The source tarball and CVS access is available at:
  `http://www.cs.wustl.edu/~schmidt/ACE.html`. Please refer to the
  installation instruction their for building and installing ACE.

- TAO (>= 1.7.2): TAO can be found on `http://www.theaceorb.com/`.
  Building and installation should be quite similar to the ACE
  installation.

- Qt (>= 4.0.0): Recent versions of Qt can be found at
  `http://www.trolltech.com/`. Installation should be quite easy, as Qt
  uses a configure script for automatic system checks. Qt is installed
  on most modern Unix/Linux systems anyway, since KDE relies on it.


To build the documentation, your system should provide the following
tools:

- Doxygen (http://www.stack.nl/~dimitri/doxygen/ or
  http://sourceforge.net/projects/doxygen/) for the JavaDoc like
  reference documentation.

- The LaTeX package (either pdflatex or latex and dvips, bibtex and
  makeindex -- available via one of the CTAN server,
  e.g. dante.ctan.org) and the convert utility from the ImageMagick
  package (http://imagemagick.sourceforge.net/).


Download:
=========

As if you read this text, you already have a version of Miro, but if
you want to update this version, or need some additional information,
please have a look at

https://50763@svn.berlios.de/svnroot/repos/miro-middleware/branches/MiroMicro

Compilation:
============

Miro is now based on cmake.
To simplify installation it also has a small configure script that
combines all build steps into one command. The step by step instructions 
are further down. But in the ideal case, 
the package can be installed in a single step:

./configure.sh

The configure script looks automatically for the necessary and
optional software packages, and will stop or print a warning if some
of them are not found. If you install e.g. ACE in an unusual place, you
can pass the configure script some additional options.

Another way of telling the configure script where the packages are
installed is the use of environment variables. For the required
packages, these are ACE_ROOT, TAO_ROOT and QTDIR point to the base
directory of each package. Because ACE and TAO need this environment
variables anyway, this is the most comfortable way to point to the
directories. Note that all paths and environment variables are resolved
during the cmake-configure step. So subsequence building with "make"
does not require any of those values to be set - and also does not honor
them if they are.

Supported robot platforms:

This release does not support any robot platform.
None of the platforms are available for testing to the developers,
so we decided to skip them on this branch for now. If somebody is willing
to do the work, we would be happy to see them supported again.

Finally, you can choose if the documentation should be build or
not. Even if you choose not to build it, but the configure script
found all the necessary tools, the Makefiles are prepared. So you can
go to the `doc/tex` and `doc/html` directory later on and build the
documentation there with a simple make.

After running the configure script, Miro show up a summary of what
will be compiled and which features will not. If this is not what you
desired, please check the messages coming up during the configure run
for packages, Miro did not find.


Installation:
=============

Using 'make'
-----------
Miro can be installed with the a simple:

make install

By default, the package's files will be installed in `/usr/local/bin',
`/usr/local/lib', etc.  You can specify an installation prefix other
than `/usr/local' by giving `configure' the option `--prefix=PATH'.

Beside that, Miro can be used already without installation. Therefore,
a make run install the libraries and the binaries during the
compilation into the `lib/` and `bin/` directory. This enlarges the
Miro directory, but can be quite useful, if you work on Miro itself
and a derived application at the same time.


Using CPack:
------------
Miro also supports CPack (http://www.cmake.org/Wiki/CMake:Packaging_With_CPack) 
for packaging an installer. For example, to create and install a .deb package 
for Ubuntu:

cmake .. -DCMAKE_INSTALL_PREFIX=/usr
make
cpack -G DEB
dpkg -i miro-bots-tao-json_3.1.3_x86_64.deb

(Note that the name of the installer will be different depending on version, 
platform, and whether Miro was built with tao and/or json)

Developer information:
======================

If you want to change something within Miro like for example adding
additional files or installing several other data, there is an extra
small section within the Miro manual about this.




--------------------------------------------------------------------




Generic installation instructions:
----------------------------------

The above mentioned configure.sh script just sums up a small sequence of steps.
For development, most of them are not necessary after the initial top-level build.
So here are the step by step instructions:

The Miro packages has moved to a CMake based build system.
Miro uses an out-of-source build.
The install-directory by default is put parallel to the build-directory and has the generated name
of the machine-triple.
The configure.sh script puts the build directory under the Miro root directory.
When you manually follow the steps you can put it anywhere.

cd Miro
mkdir build
cd build
cmake ..
make

