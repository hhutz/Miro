This file explains how to install Miro from sources.


Requirements:
=============

To compile Miro you need:

- ACE (>= 5.2.2): The source tarball and CVS access is available at:
  `http://www.cs.wustl.edu/~schmidt/ACE.html`. Please refer to the
  installation instruction their for building and installing ACE.

- TAO (>= 1.2.2): TAO can be found on `http://www.theaceorb.com/`.
  Building and installation should be quite similar to the ACE
  installation.

- Qt (>= 2.2.4): Recent versions of Qt can be found at
  `http://www.trolltech.com/`. Installation should be quite easy, as Qt
  uses a configure script for automatic system checks. Qt is installed
  on most modern Unix/Linux systems anyway, since KDE relies on it.

If you want to compile the wrapper classes for the speech detection
system, you also need:

- Festival (http://www.cstr.ed.ac.uk/projects/festival.html)
- Sphinx (http://www.speech.cs.cmu.edu/sphinx)
- Speech tools (http://www.cstr.ed.ac.uk/projects/speech_tools)

Depending on your camera system, you need libraries for the IEEE1394
(aka. Firewire) support:

- libraw1394 (http://www.linux1394.org/ or
  http://sourceforge.net/projects/libraw1394/)
- libdc1394 (http://sourceforge.net/projects/libdc1394/)

Both libraries are available as compiled packages for the most modern
Linux systems too.

To build the documentation, your system should provide the following
tools:

- Doxygen (http://www.stack.nl/~dimitri/doxygen/ or
  http://sourceforge.net/projects/doxygen/) for the JavaDoc like
  reference documentation.

- The LaTeX package (either pdflatex or latex and dvips, bibtex and
  makeindex -- available via one of the CTAN server,
  e.g. dante.ctan.org) and the convert utility from the ImageMagick
  package (http://imagemagick.sourceforge.net/).


Download:
=========

As if you read this text, you already have a version of Miro, but if
you want to update this version, or need some additional information,
please have a look at

http://smart.informatik.uni-ulm.de/MIRO/index.html


Compilation:
============

Miro is now shipped with a configure script, so the package can be
installed with the usual steps:

./configure
make 
(make install)

The configure script looks automatically for the necessary and
optional software packages, and will stop or print a warning if some
of them are not found. If you install e.g. ACE in an unusual place, you
can pass the configure script some additional options like for example
--with-ACE=<ACE-root-directory>. For Qt, their are more flexible
command-line parameters, because Qt is often distributed over several
directories (like e.g. in a standard Debian installation). A complete
list of command-line options are accessible via ./configure --help.

Another way of telling the configure script where the packages are
installed is the use of environment variables. For the required
packages, these are ACE_ROOT, TAO_ROOT and QTDIR point to the base
directory of each package. Because ACE and TAO need this environment
variables anyway, this is the most comfortable way to point to the
directories. For the speech detection wrappers classes,
SPEECH_TOOLS_ROOT, SPHINX_ROOT and FESTIVAL_ROOT are possible. It can
be necessary, to let the LD_LIBRARY_PATH point to all the libraries
anyway.

If the configure script did not find the different packages anyhow, or
if your system require unusual options for compilation or linking that
the configure script does not know about, you can give configure
initial values for variables by setting them in the environment. Using
a Bourne-compatible shell, you can do that on the command line like
this:
    CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
    env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

On runtime, some applications rely on two environment variables,
namely MIRO_ROOT (the base directory) and MIRO_LOG (directory, where
logging data are stored), so please set these variables to the
appropriate values too.

Additionally, you can enable or disable several features, like the
support for different robot platforms and for different video devices.

Supported robot platforms:

- The B21 port is the oldest one and should therefore be the most
  stable, regarding the interfaces. All of the robots hardware
  components are supported by Miro.

- The Sparrow99 robots are our soccer robots. They are our
  testbed for multi-robot programming. Therefore most new technology
  is first tested on this platform. So even as you do not have a
  Sparrow99 robot (we built them ourselfs), it might be interesting
  to look at the sources for this robot if you are looking for group
  communication technology etc.

- The Pioneer1 platform is a complete port for the ActiveMedia robot
  series, based on the PSOS, P2OS and AROS protocols. But we could only
  test and extend it to the platforms available to us. 

  * The old Pioneer1 is supported, but lacks maintenance, as our model 
    is not used at the lab anymore.
  * The Performance PeopleBot is in active development and already
    mostly complete. Motors, Sonars, Bumpers and Video are working.
    PanTilt and Gripper are experimental, Zoom is to come next.

Supported video devices:

- Bttv Frame Grabbers: These frame grabber cards are supported via
  video for Linux.  This is the standard way of connecting standard
  analog video cameras to the computer.

- Firewire Digital Cameras: Miro supports the fire wire digital camera
  protocol using libraw1394 and libdc1394.

- Matrox Meteor Frame Grabbers: These rather old frame grabber cards
  are also supported by Miro. This device however, is mostly unmaintained.

Finally, you can choose if the documentation should be build or
not. Even if you choose not to build it, but the configure script
found all the necessary tools, the Makefiles are prepared. So you can
go to the `doc/tex` and `doc/html` directory later on and build the
documentation there with a simple make.

After running the configure script, Miro show up a summary of what
will be compiled and which features will not. If this is not what you
desired, please check the messages coming up during the configure run
for packages, Miro did not find.


Installation:
=============

Miro can be installed with the a simple:

make install

By default, the package's files will be installed in `/usr/local/bin',
`/usr/local/lib', etc.  You can specify an installation prefix other
than `/usr/local' by giving `configure' the option `--prefix=PATH'.

Beside that, Miro can be used already without installation. Therefor,
a make run install the libraries and the binaries during the
compilation into the `lib/` and `bin/` directory. This enlarges the
Miro directory, but can be quite useful, if you work on Miro itself
and a derived application at the same time.


Developer information:
======================

If you want to change something within Miro like for example adding
additional files or installing several other data, there is an extra
small section within the Miro manual about this.




--------------------------------------------------------------------




Generic installation instructions:
----------------------------------

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes a while.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  

Compilers and Options
---------------------

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
------------------------------------

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
------------------

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
-----------------

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
--------------------------

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
----------------

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
------------------

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

