message(STATUS "Include CPack")

set( GATHER_WHAT "RELEASE_ONLY" )
if( "${CMAKE_BUILD_TYPE}" MATCHES "Debug" )
  unset( GATHER_WHAT )
endif( "${CMAKE_BUILD_TYPE}" MATCHES "Debug" )

## Gather external dlls (win32 only)
######################################
include( GatherDlls )
gather_dlls( ${GATHER_WHAT} 
  ${ACE_LIBRARIES} 
  ${TAO_LIBRARIES}
  ${RTIDDS_LIBRARIES}
  ${QT_QTCORE_LIBRARY}
  ${QT_QTXML_LIBRARY}
  ${QT_QTGUI_LIBRARY}
  ${JSONCPP_LIBRARIES}
)
gather_dlls_install()

## Standard CPack stuff
######################################
include ( InstallRequiredSystemLibraries )

# copy macro, will create empty dest file if src doesn't exist
macro( filecopy SRC_FILE DST_FILE )
  if( EXISTS ${SRC_FILE} )
    exec_program("${CMAKE_COMMAND}" ARGS 
                  -E copy_if_different        
                  ${SRC_FILE}  
                  ${DST_FILE} 
    )
  else( EXISTS ${SRC_FILE} )
    file( WRITE ${DST_FILE} "" )
  endif( EXISTS ${SRC_FILE} )
endmacro( filecopy )

# mac installer won't accept files w/o an extension, so copy 
filecopy( "${PROJECT_SOURCE_DIR}/README"  "${PROJECT_BINARY_DIR}/README.txt"  )
filecopy( "${PROJECT_SOURCE_DIR}/COPYING" "${PROJECT_BINARY_DIR}/COPYING.txt" )


set( CPACK_PACKAGE_NAME                "miro-bots" )
if( MIRO_BUILD_WITH_TAO )
  set( CPACK_PACKAGE_NAME              "${CPACK_PACKAGE_NAME}-tao" )
endif( MIRO_BUILD_WITH_TAO )
if( MIRO_BUILD_WITH_JSON )
  set( CPACK_PACKAGE_NAME              "${CPACK_PACKAGE_NAME}-json" )
endif( MIRO_BUILD_WITH_JSON )

set( CPACK_PACKAGE_DESCRIPTION_SUMMARY "Miro - Middleware for Robots" )
set( CPACK_PACKAGE_VENDOR              "https://github.com/hhutz/Miro" )
set( CPACK_PACKAGE_DESCRIPTION_FILE    "${PROJECT_BINARY_DIR}/README.txt" )
set( CPACK_RESOURCE_FILE_LICENSE       "${PROJECT_BINARY_DIR}/COPYING.txt" )
set( CPACK_PACKAGE_VERSION_MAJOR       "${MIRO_SOVERSION_MAJOR}")
set( CPACK_PACKAGE_VERSION_MINOR       "${MIRO_SOVERSION_MINOR}")
set( CPACK_PACKAGE_VERSION_PATCH       "${MIRO_SOVERSION_PATCH}")
set( CPACK_PACKAGE_VERSION             ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH} )
set( CPACK_PACKAGE_INSTALL_DIRECTORY   "${PROJECT_NAME}")
set( CPACK_PACKAGE_CONTACT             "Hans Utz <hans.utz@gmx.de>")

set( CPACK_PACKAGE_FILE_NAME           "${CPACK_PACKAGE_NAME}_${CPACK_PACKAGE_VERSION}_${ARCH_CPU}" )


# executable-label pairs
set( MIRO_PACKAGE_EXECUTABLES
  ConfigEditor  "ConfigEditor" 
)
if( MIRO_BUILD_WITH_TAO )
  set( MIRO_PACKAGE_EXECUTABLES ${MIRO_PACKAGE_EXECUTABLES}
    LogPlayer     "LogPlayer"
  )
endif( MIRO_BUILD_WITH_TAO )
set( CPACK_PACKAGE_EXECUTABLES ${MIRO_PACKAGE_EXECUTABLES} )

## WIN32
######################################
if( WIN32 AND NOT UNIX )
  set( CPACK_NSIS_DISPLAY_NAME         "${CPACK_PACKAGE_INSTALL_DIRECTORY}")
  set( CPACK_NSIS_URL_INFO_ABOUT       "https://github.com/hhutz/Miro/wiki")
  set( CPACK_NSIS_HELP_LINK            "https://github.com/hhutz/Miro/wiki")
  set( CPACK_NSIS_CONTACT              "hans.utz@gmx.de")
  set( CPACK_NSIS_MODIFY_PATH          OFF) # ask whether bin should be added to system PATH variable
endif( WIN32 AND NOT UNIX )

## RPM
######################################
set( CPACK_RPM_PACKAGE_ARCHITECTURE   "${ARCH_CPU}" )
set( CPACK_RPM_PACKAGE_RELEASE        "${CPACK_PACKAGE_VERSION}" )
set( CPACK_RPM_PACKAGE_LICENSE        "LGPL" )
set( CPACK_RPM_PACKAGE_GROUP          "Development/Libraries" )

## DEB
######################################
find_program( DPKG_COMMAND dpkg )
if( DPKG_COMMAND )
  exec_program( ${DPKG_COMMAND} ARGS --print-architecture OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE )
endif( DPKG_COMMAND )
set( CPACK_DEBIAN_PACKAGE_SECTION    "Development" )
set( CPACK_DEBIAN_PACKAGE_PRIORITY   "optional" )
set( CPACK_DEBIAN_PACKAGE_RECOMMENDS "" )
set( CPACK_DEBIAN_PACKAGE_SUGGESTS   "" )
set( DEBIAN_PACKAGE_BUILDS_DEPENDS "debhelper, cmake, libqt4-dev, libace-dev")
set( CPACK_DEBIAN_PACKAGE_DEPENDS    "libace-${ACE_VERSION}, libqt4-qt3support, libqt4-xml" )
if( MIRO_BUILD_WITH_TAO )
  set( DEBIAN_PACKAGE_BUILDS_DEPENDS  "${DEBIAN_PACKAGE_BUILDS_DEPENDS}, libtao-dev, libtao-orbsvcs-dev" )
  set( CPACK_DEBIAN_PACKAGE_DEPENDS   "${CPACK_DEBIAN_PACKAGE_DEPENDS}, libtao-${TAO_VERSION}, libtao-orbsvcs-${TAO_VERSION}" )
endif( MIRO_BUILD_WITH_TAO )
if( MIRO_BUILD_WITH_JSON )
  set( DEBIAN_PACKAGE_BUILDS_DEPENDS  "${DEBIAN_PACKAGE_BUILDS_DEPENDS}, libjsoncpp-dev" )
  set( CPACK_DEBIAN_PACKAGE_DEPENDS   "${CPACK_DEBIAN_PACKAGE_DEPENDS}, libjsoncpp0" )
endif( MIRO_BUILD_WITH_JSON )
set( CPACK_DEBIAN_PACKAGE_BUILD_DEPENDS ${DEBIAN_PACKAGE_BUILDS_DEPENDS} )
set( CPACK_DEBIAN_CHANGELOG           "" )
set( CPACK_DEBIAN_PACKAGE_SOURCE_COPY rsync -av --exclude build --exclude .git )

set( CPACK_DEBIAN_DISTRIBUTION_NAME   "ubuntu" )
set( CPACK_DEBIAN_DISTRIBUTION_RELEASES precise )

include(CPack)
include( DebSourcePPA)

