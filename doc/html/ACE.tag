<tagfile>
  <compound kind="file">
    <name>Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Acceptor) template&lt; class SVC_HANDLER, ACE_PEER_ACCEPTOR_1 &gt; void ACE_Acceptor&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Acceptor_8h.html</filename>
    <class kind="class">ACE_Acceptor</class>
    <class kind="class">ACE_Oneshot_Acceptor</class>
    <class kind="class">ACE_Strategy_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>ACE-configuration.txt</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/docs/</path>
    <filename>ACE-configuration_8txt.html</filename>
    <member kind="variable">
      <type>*ACE configuration</type>
      <name>txt</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*ACE configuration</type>
      <name>v</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*ACE configuration do something like the</type>
      <name>following</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*ACE configuration do something like the the work being done by the ACE Configuration Project is being slowly introduced into the official ACE distribution Some of the functionality in the work created by the ACE Configuration Project has been removed so that ACE may be built in the usual fashion Once the ACE Configuration Project work stabilizes on more platforms that removed functionality may be added to ACE Currently the configure script contains most of the tests that are necessary to properly configure ACE on most platforms</type>
      <name>However</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*ACE configuration do something like the the work being done by the ACE Configuration Project is being slowly introduced into the official ACE distribution Some of the functionality in the work created by the ACE Configuration Project has been removed so that ACE may be built in the usual fashion Once the ACE Configuration Project work stabilizes on more platforms that removed functionality may be added to ACE Currently the configure script contains most of the tests that are necessary to properly configure ACE on most platforms there are still some autoconf tests that are missing As</type>
      <name>such</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*ACE configuration do something like the the work being done by the ACE Configuration Project is being slowly introduced into the official ACE distribution Some of the functionality in the work created by the ACE Configuration Project has been removed so that ACE may be built in the usual fashion Once the ACE Configuration Project work stabilizes on more platforms that removed functionality may be added to ACE Currently the configure script contains most of the tests that are necessary to properly configure ACE on most platforms there are still some autoconf tests that are missing As you may encounter and most likely will have compilation problems Please report any problems to the contacts listed at the end of this document The configure script that is currently being used has been modified from the ACE Configuration Project s configure script to prevent makefiles from being automatically generated since there are still some issues that must be addressed before automatically generated makefiles are incorporated into the official ACE distribution A listing of available configure script options can be shown by</type>
      <name>entering</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>*ACE configuration do something like the the work being done by the ACE Configuration Project is being slowly introduced into the official ACE distribution Some of the functionality in the work created by the ACE Configuration Project has been removed so that ACE may be built in the usual fashion Once the ACE Configuration Project work stabilizes on more platforms that removed functionality may be added to ACE Currently the configure script contains most of the tests that are necessary to properly configure ACE on most platforms there are still some autoconf tests that are missing As you may encounter and most likely will have compilation problems Please report any problems to the contacts listed at the end of this document The configure script that is currently being used has been modified from the ACE Configuration Project s configure script to prevent makefiles from being automatically generated since there are still some issues that must be addressed before automatically generated makefiles are incorporated into the official ACE distribution A listing of available configure script options can be shown by silent do not print checking messages version print the version of autoconf that created configure Directory and file</type>
      <name>names</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>*ACE configuration do something like the the work being done by the ACE Configuration Project is being slowly introduced into the official ACE distribution Some of the functionality in the work created by the ACE Configuration Project has been removed so that ACE may be built in the usual fashion Once the ACE Configuration Project work stabilizes on more platforms that removed functionality may be added to ACE Currently the configure script contains most of the tests that are necessary to properly configure ACE on most platforms there are still some autoconf tests that are missing As you may encounter and most likely will have compilation problems Please report any problems to the contacts listed at the end of this document The configure script that is currently being used has been modified from the ACE Configuration Project s configure script to prevent makefiles from being automatically generated since there are still some issues that must be addressed before automatically generated makefiles are incorporated into the official ACE distribution A listing of available configure script options can be shown by silent do not print checking messages version print the version of autoconf that created configure Directory and file e g Sun C[default=no] enable enable code inlining[default=yes] enable log msg prop enable threads inheriting ACE_Log_Msg properties from parent thread[default=yes] enable logging enable ACE logging macros[default=yes] enable malloc stats enable malloc statistics collection[default=no] enable optimize enable additional optimizations[default=yes] enable probe enable ACE_Timeprobes[default=no] enable profile enable profiling[default=no] enable purify Purify all executables[default=no] enable quantify Quantify all executables[default=no] enable reentrant enable reentrant functions[default=yes] enable repo use GNU template repository GNU C with repo patches and EGCS only[default=no] enable rtti enable run time type identification *Currently only for Sun C[default=no] enable static obj mgr enable Object_Manager[default=yes] enable threads enable thread support[default=yes] enable verb not sup enable verbose ENOTSUP reports[default=no] enable trace enable ACE tracing[default=no] enable xt reactor build support for the XtReactor[default=no] with x use the X Window System with gperf compile the gperf program[default=yes] with tli device[=DEV] device for TCP on TLI[default=/dev/tcp] To enable debugging and disable code</type>
      <name>inlining</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>*ACE configuration do something like the the work being done by the ACE Configuration Project is being slowly introduced into the official ACE distribution Some of the functionality in the work created by the ACE Configuration Project has been removed so that ACE may be built in the usual fashion Once the ACE Configuration Project work stabilizes on more platforms that removed functionality may be added to ACE Currently the configure script contains most of the tests that are necessary to properly configure ACE on most platforms there are still some autoconf tests that are missing As you may encounter and most likely will have compilation problems Please report any problems to the contacts listed at the end of this document The configure script that is currently being used has been modified from the ACE Configuration Project s configure script to prevent makefiles from being automatically generated since there are still some issues that must be addressed before automatically generated makefiles are incorporated into the official ACE distribution A listing of available configure script options can be shown by silent do not print checking messages version print the version of autoconf that created configure Directory and file e g Sun C[default=no] enable enable code inlining[default=yes] enable log msg prop enable threads inheriting ACE_Log_Msg properties from parent thread[default=yes] enable logging enable ACE logging macros[default=yes] enable malloc stats enable malloc statistics collection[default=no] enable optimize enable additional optimizations[default=yes] enable probe enable ACE_Timeprobes[default=no] enable profile enable profiling[default=no] enable purify Purify all executables[default=no] enable quantify Quantify all executables[default=no] enable reentrant enable reentrant functions[default=yes] enable repo use GNU template repository GNU C with repo patches and EGCS only[default=no] enable rtti enable run time type identification *Currently only for Sun C[default=no] enable static obj mgr enable Object_Manager[default=yes] enable threads enable thread support[default=yes] enable verb not sup enable verbose ENOTSUP reports[default=no] enable trace enable ACE tracing[default=no] enable xt reactor build support for the XtReactor[default=no] with x use the X Window System with gperf compile the gperf program[default=yes] with tli device[=DEV] device for TCP on TLI[default=/dev/tcp] To enable debugging and disable code for</type>
      <name>example</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>*ACE configuration do something like the the work being done by the ACE Configuration Project is being slowly introduced into the official ACE distribution Some of the functionality in the work created by the ACE Configuration Project has been removed so that ACE may be built in the usual fashion Once the ACE Configuration Project work stabilizes on more platforms that removed functionality may be added to ACE Currently the configure script contains most of the tests that are necessary to properly configure ACE on most platforms there are still some autoconf tests that are missing As you may encounter and most likely will have compilation problems Please report any problems to the contacts listed at the end of this document The configure script that is currently being used has been modified from the ACE Configuration Project s configure script to prevent makefiles from being automatically generated since there are still some issues that must be addressed before automatically generated makefiles are incorporated into the official ACE distribution A listing of available configure script options can be shown by silent do not print checking messages version print the version of autoconf that created configure Directory and file e g Sun C[default=no] enable enable code inlining[default=yes] enable log msg prop enable threads inheriting ACE_Log_Msg properties from parent thread[default=yes] enable logging enable ACE logging macros[default=yes] enable malloc stats enable malloc statistics collection[default=no] enable optimize enable additional optimizations[default=yes] enable probe enable ACE_Timeprobes[default=no] enable profile enable profiling[default=no] enable purify Purify all executables[default=no] enable quantify Quantify all executables[default=no] enable reentrant enable reentrant functions[default=yes] enable repo use GNU template repository GNU C with repo patches and EGCS only[default=no] enable rtti enable run time type identification *Currently only for Sun C[default=no] enable static obj mgr enable Object_Manager[default=yes] enable threads enable thread support[default=yes] enable verb not sup enable verbose ENOTSUP reports[default=no] enable trace enable ACE tracing[default=no] enable xt reactor build support for the XtReactor[default=no] with x use the X Window System with gperf compile the gperf program[default=yes] with tli device[=DEV] device for TCP on TLI[default=/dev/tcp] To enable debugging and disable code for just enter the following on the command</type>
      <name>line</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ACE.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ACE_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>COMPUTE</name>
      <anchor>a0</anchor>
      <arglist>(var, ch)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ACE</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ACE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ACE.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ACE_8h.html</filename>
    <class kind="class">ACE</class>
  </compound>
  <compound kind="file">
    <name>ACE.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ACE_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ACE_export.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ACE__export_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HAS_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Export</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SINGLETON_DECLARATION</name>
      <anchor>a2</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SINGLETON_DECLARE</name>
      <anchor>a3</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ace_wchar.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ace__wchar_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_USES_L_PREFIX</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEXT_WIDE_I</name>
      <anchor>a1</anchor>
      <arglist>(STRING)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEXT_WIDE</name>
      <anchor>a2</anchor>
      <arglist>(STRING)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LIB_TEXT</name>
      <anchor>a3</anchor>
      <arglist>(STRING)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEXT_ALWAYS_CHAR</name>
      <anchor>a4</anchor>
      <arglist>(STRING)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEXT_CHAR_TO_TCHAR</name>
      <anchor>a5</anchor>
      <arglist>(STRING)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEXT_WCHAR_TO_TCHAR</name>
      <anchor>a6</anchor>
      <arglist>(STRING)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEXT_ANTI_TO_TCHAR</name>
      <anchor>a7</anchor>
      <arglist>(STRING)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEXT</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>ACE_TCHAR</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>wchar_t</type>
      <name>ACE_ANTI_TCHAR</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ace_wchar.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ace__wchar_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Activation_Queue.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Activation__Queue_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Activation_Queue</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Activation_Queue</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Activation_Queue.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Activation__Queue_8h.html</filename>
    <class kind="class">ACE_Activation_Queue</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Activation_List</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Activation_Queue.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Activation__Queue_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Active_Map_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Active__Map__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Active_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Active_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Active_Map_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Active__Map__Manager_8h.html</filename>
    <class kind="class">ACE_Active_Map_Manager_Key</class>
    <class kind="struct">ACE_Active_Map_Manager_Key::key_data</class>
  </compound>
  <compound kind="file">
    <name>Active_Map_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Active__Map__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Active_Map_Manager_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Active__Map__Manager__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Active_Map_Manager_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Active_Map_Manager_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Active_Map_Manager_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Active__Map__Manager__T_8h.html</filename>
    <class kind="class">ACE_Active_Map_Manager</class>
  </compound>
  <compound kind="file">
    <name>Active_Map_Manager_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Active__Map__Manager__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Addr) void ACE_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Addr_8h.html</filename>
    <class kind="class">ACE_Addr</class>
  </compound>
  <compound kind="file">
    <name>Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Arg_Shifter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Arg__Shifter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Arg_Shifter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Arg_Shifter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Arg_Shifter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Arg__Shifter_8h.html</filename>
    <class kind="class">ACE_Arg_Shifter</class>
  </compound>
  <compound kind="file">
    <name>ARGV.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ARGV_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ARGV</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ARGV) void ACE_ARGV</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ARGV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ARGV.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ARGV_8h.html</filename>
    <class kind="class">ACE_ARGV</class>
  </compound>
  <compound kind="file">
    <name>ARGV.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ARGV_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Array.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Array_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Array_Base.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Array__Base_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Array_Base</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Array_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Array_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Array__Base_8h.html</filename>
    <class kind="class">ACE_Array_Base</class>
    <class kind="class">ACE_Array_Iterator</class>
  </compound>
  <compound kind="file">
    <name>Array_Base.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Array__Base_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Asynch_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Asynch__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Asynch_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Asynch_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Asynch_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Asynch__Acceptor_8h.html</filename>
    <class kind="class">ACE_Asynch_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>Asynch_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Asynch__IO_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Asynch_IO</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Asynch_IO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Asynch_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Asynch__IO_8h.html</filename>
    <class kind="class">ACE_Asynch_Accept</class>
    <class kind="class">ACE_Asynch_Accept::Result</class>
    <class kind="class">ACE_Asynch_Operation</class>
    <class kind="class">ACE_Asynch_Read_Dgram</class>
    <class kind="class">ACE_Asynch_Read_Dgram::Result</class>
    <class kind="class">ACE_Asynch_Read_File</class>
    <class kind="class">ACE_Asynch_Read_File::Result</class>
    <class kind="class">ACE_Asynch_Read_Stream</class>
    <class kind="class">ACE_Asynch_Read_Stream::Result</class>
    <class kind="class">ACE_Asynch_Result</class>
    <class kind="class">ACE_Asynch_Transmit_File</class>
    <class kind="class">ACE_Asynch_Transmit_File::Header_And_Trailer</class>
    <class kind="class">ACE_Asynch_Transmit_File::Result</class>
    <class kind="class">ACE_Asynch_Write_Dgram</class>
    <class kind="class">ACE_Asynch_Write_Dgram::Result</class>
    <class kind="class">ACE_Asynch_Write_File</class>
    <class kind="class">ACE_Asynch_Write_File::Result</class>
    <class kind="class">ACE_Asynch_Write_Stream</class>
    <class kind="class">ACE_Asynch_Write_Stream::Result</class>
    <class kind="class">ACE_Handler</class>
    <class kind="class">ACE_Service_Handler</class>
  </compound>
  <compound kind="file">
    <name>Asynch_IO_Impl.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Asynch__IO__Impl_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Asynch_IO_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Asynch__IO__Impl_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Asynch_IO_Impl.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Asynch__IO__Impl_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ATM_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ATM_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATM_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Acceptor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Acceptor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Acceptor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ATM_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ATM_Addr) const long ACE_ATM_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ATM_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATM_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Addr_8h.html</filename>
    <class kind="class">ACE_ATM_Addr</class>
    <member kind="typedef">
      <type>int</type>
      <name>ATM_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATM_Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ATM_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ATM_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATM_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Connector_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Params.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Params_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ATM_Params</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ATM_Params</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATM_Params.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Params_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Params.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Params_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_QoS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__QoS_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ATM_QoS</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ATM_QoS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATM_QoS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__QoS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_QoS.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__QoS_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_ATM_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_ATM_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATM_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Stream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ATM_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>ATM__Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Atomic_Op.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Atomic__Op_8cpp.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Atomic_Op_Ex) ACE_ALLOC_HOOK_DEFINE(ACE_Atomic_Op) inline const char *get_rcsid_ace_Atomic_Op(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Atomic_Op</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Atomic_Op.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Atomic__Op_8h.html</filename>
    <class kind="class">ACE_Atomic_Op</class>
    <class kind="class">ACE_Atomic_Op_Ex</class>
  </compound>
  <compound kind="file">
    <name>Atomic_Op.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Atomic__Op_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Auto_IncDec_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Auto__IncDec__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Auto_IncDec_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Auto_IncDec) template&lt; class ACE_SAFELY_INCREMENTABLE_DECREMENTABLE &gt; void ACE_Auto_IncDec&lt; ACE_SAFELY_INCREMENTABLE_DECREMENTABLE &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Auto_IncDec_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Auto_IncDec_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Auto__IncDec__T_8h.html</filename>
    <class kind="class">ACE_Auto_IncDec</class>
  </compound>
  <compound kind="file">
    <name>Auto_IncDec_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Auto__IncDec__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Auto_Ptr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Auto__Ptr_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_AUTO_PTR_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Auto_Ptr</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Auto_Basic_Ptr) template&lt; class X &gt; void ACE_Auto_Basic_Ptr&lt; X &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Auto_Ptr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Auto__Ptr_8h.html</filename>
    <class kind="class">ACE_Auto_Array_Ptr</class>
    <class kind="class">ACE_Auto_Basic_Array_Ptr</class>
    <class kind="class">ACE_Auto_Basic_Ptr</class>
    <class kind="class">auto_ptr</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_AUTO_PTR_RESET</name>
      <anchor>a0</anchor>
      <arglist>(X, Y, Z)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Auto_Ptr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Auto__Ptr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Base_Thread_Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Base__Thread__Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Base_Thread_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>ace_thread_adapter</name>
      <anchor>a2</anchor>
      <arglist>(void *args)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Base_Thread_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Base_Thread_Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Base__Thread__Adapter_8h.html</filename>
    <class kind="class">ACE_Base_Thread_Adapter</class>
    <class kind="class">ACE_OS_Thread_Descriptor</class>
    <member kind="function">
      <type>ACE_OS_Export void *</type>
      <name>ace_thread_adapter</name>
      <anchor>a0</anchor>
      <arglist>(void *args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Base_Thread_Adapter.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Base__Thread__Adapter_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Based_Pointer_Repository.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Based__Pointer__Repository_8cpp.html</filename>
    <class kind="class">ACE_Based_Pointer_Repository_Rep</class>
  </compound>
  <compound kind="file">
    <name>Based_Pointer_Repository.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Based__Pointer__Repository_8h.html</filename>
    <class kind="class">ACE_Based_Pointer_Repository</class>
    <member kind="typedef">
      <type>ACE_Singleton&lt; ACE_Based_Pointer_Repository, ACE_SYNCH_RW_MUTEX &gt;</type>
      <name>ACE_BASED_POINTER_REPOSITORY</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Based_Pointer_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Based__Pointer__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRACEX</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Based_Pointer_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Based__Pointer__T_8h.html</filename>
    <class kind="class">ACE_Based_Pointer</class>
    <class kind="class">ACE_Based_Pointer_Basic</class>
  </compound>
  <compound kind="file">
    <name>Based_Pointer_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Based__Pointer__T_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_COMPUTE_BASED_POINTER</name>
      <anchor>a0</anchor>
      <arglist>(P)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Basic_Stats.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Basic__Stats_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Basic_Stats</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Basic_Stats</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Basic_Stats.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Basic__Stats_8h.html</filename>
    <class kind="class">ACE_Basic_Stats</class>
  </compound>
  <compound kind="file">
    <name>Basic_Stats.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Basic__Stats_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Basic_Types.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Basic__Types_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Basic_Types</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Basic_Types</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Basic_Types.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Basic__Types_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIZEOF_CHAR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIZEOF_WCHAR</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIZEOF_LONG_LONG</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WINT_T</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WCHAR_T</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIZEOF_VOID_P</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LONGLONG_TO_PTR</name>
      <anchor>a6</anchor>
      <arglist>(PTR_TYPE, L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_U64_TO_U32</name>
      <anchor>a7</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CU64_TO_CU32</name>
      <anchor>a8</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UINT64_LITERAL</name>
      <anchor>a9</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT64_LITERAL</name>
      <anchor>a10</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UINT64_FORMAT_SPECIFIER</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT64_FORMAT_SPECIFIER</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SSIZE_T_FORMAT_SPECIFIER</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIZE_T_FORMAT_SPECIFIER</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UINT64_DBLCAST_ADAPTER</name>
      <anchor>a15</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CHAR_MAX</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CHAR_MIN</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OCTET_MAX</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT16_MAX</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT16_MIN</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UINT16_MAX</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WCHAR_MAX</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT32_MAX</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT32_MIN</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UINT32_MAX</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT64_MAX</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INT64_MIN</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UINT64_MAX</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FLT_MAX</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DBL_MAX</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BIG_ENDIAN</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BYTE_ORDER</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>ACE_UINT64</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_UINT16</type>
      <name>ACE_USHORT16</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int</type>
      <name>ptr_arith_t</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Basic_Types.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Basic__Types_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Bound_Ptr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Bound__Ptr_8h.html</filename>
    <class kind="class">ACE_Bound_Ptr_Counter</class>
    <class kind="class">ACE_Strong_Bound_Ptr</class>
    <class kind="class">ACE_Weak_Bound_Ptr</class>
  </compound>
  <compound kind="file">
    <name>Bound_Ptr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Bound__Ptr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Cache_Map_Manager_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Cache__Map__Manager__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Cache_Map_Manager_T</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Cache_Map_Manager) ACE_ALLOC_HOOK_DEFINE(ACE_Cache_Map_Iterator) ACE_ALLOC_HOOK_DEFINE(ACE_Cache_Map_Reverse_Iterator)#define ACE_T1#define ACE_T2 template&lt; ACE_T1 &gt; ACE_Cache_Map_Manager&lt; ACE_T2 &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Cache_Map_Manager_T</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cache_Map_Manager_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Cache__Map__Manager__T_8h.html</filename>
    <class kind="class">ACE_Cache_Map_Iterator</class>
    <class kind="class">ACE_Cache_Map_Manager</class>
    <class kind="class">ACE_Cache_Map_Reverse_Iterator</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LACKS_PRAGMA_ONCE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Cache_Map_Iterator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Cache_Map_Reverse_Iterator</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T1</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T2</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Cache_Map_Manager</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cache_Map_Manager_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Cache__Map__Manager__T_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T1</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T2</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T1</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T2</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cached_Connect_Strategy_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Cached__Connect__Strategy__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_T2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Cached_Connect_Strategy_T</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Cached_Connect_Strategy_Ex) template&lt; ACE_T1 &gt; ACE_Bounded_Cached_Connect_Strategy&lt; ACE_T2 &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Cached_Connect_Strategy_T</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cached_Connect_Strategy_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Cached__Connect__Strategy__T_8h.html</filename>
    <class kind="class">ACE_Bounded_Cached_Connect_Strategy</class>
    <class kind="class">ACE_Cached_Connect_Strategy_Ex</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LACKS_PRAGMA_ONCE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Cached_Connect_Strategy_Ex</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Bounded_Cached_Connect_Strategy</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Caching_Strategies_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Caching__Strategies__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Caching_Strategies_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Caching_Strategies_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Caching_Strategies_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Caching__Strategies__T_8h.html</filename>
    <class kind="class">ACE_Caching_Strategy</class>
    <class kind="class">ACE_Caching_Strategy_Adapter</class>
    <class kind="class">ACE_FIFO_Caching_Strategy</class>
    <class kind="class">ACE_LFU_Caching_Strategy</class>
    <class kind="class">ACE_LRU_Caching_Strategy</class>
    <class kind="class">ACE_Null_Caching_Strategy</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Caching_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Caching_Strategy_Adapter</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LRU_Caching_Strategy</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LFU_Caching_Strategy</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FIFO_Caching_Strategy</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Null_Caching_Strategy</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Caching_Strategies_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Caching__Strategies__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Caching_Utility_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Caching__Utility__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Caching_Utility_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Caching_Utility_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Caching_Utility_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Caching__Utility__T_8h.html</filename>
    <class kind="class">ACE_Handler_Caching_Utility</class>
    <class kind="class">ACE_Null_Caching_Utility</class>
    <class kind="class">ACE_Pair_Caching_Utility</class>
    <class kind="class">ACE_Recyclable_Handler_Caching_Utility</class>
    <class kind="class">ACE_Refcounted_Recyclable_Handler_Caching_Utility</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LACKS_PRAGMA_ONCE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Pair_Caching_Utility</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Recyclable_Handler_Caching_Utility</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Refcounted_Recyclable_Handler_Caching_Utility</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Null_Caching_Utility</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Capabilities.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Capabilities_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ESC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>is_line</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *line)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Capabilities.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Capabilities_8h.html</filename>
    <class kind="class">ACE_BoolCapEntry</class>
    <class kind="class">ACE_Capabilities</class>
    <class kind="class">ACE_CapEntry</class>
    <class kind="class">ACE_IntCapEntry</class>
    <class kind="class">ACE_StringCapEntry</class>
  </compound>
  <compound kind="file">
    <name>Capabilities.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Capabilities_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>CDR_Base.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>CDR__Base_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_CDR_Base</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_CDR_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>CDR__Base_8h.html</filename>
    <class kind="class">ACE_CDR</class>
    <class kind="struct">ACE_CDR::Double</class>
    <class kind="struct">ACE_CDR::Float</class>
    <class kind="struct">ACE_CDR::LongDouble</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CDR_LONGLONG_INITIALIZER</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NONNATIVE_LONGDOUBLE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CDR_LONG_DOUBLE_INITIALIZER</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CDR_GIOP_MAJOR_VERSION</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CDR_GIOP_MINOR_VERSION</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR_Base.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>CDR__Base_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>CDR_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>CDR__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_CDR_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ACE_OutputCDR &amp;os, const ACE_CString &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CString &amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_CDR_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>CDR__Stream_8h.html</filename>
    <class kind="class">ACE_Char_Codeset_Translator</class>
    <class kind="class">ACE_InputCDR</class>
    <class kind="struct">ACE_InputCDR::to_boolean</class>
    <class kind="struct">ACE_InputCDR::to_char</class>
    <class kind="struct">ACE_InputCDR::to_octet</class>
    <class kind="struct">ACE_InputCDR::to_string</class>
    <class kind="struct">ACE_InputCDR::to_wchar</class>
    <class kind="struct">ACE_InputCDR::to_wstring</class>
    <class kind="struct">ACE_InputCDR::Transfer_Contents</class>
    <class kind="class">ACE_OutputCDR</class>
    <class kind="struct">ACE_OutputCDR::from_boolean</class>
    <class kind="struct">ACE_OutputCDR::from_char</class>
    <class kind="struct">ACE_OutputCDR::from_octet</class>
    <class kind="struct">ACE_OutputCDR::from_string</class>
    <class kind="struct">ACE_OutputCDR::from_wchar</class>
    <class kind="struct">ACE_OutputCDR::from_wstring</class>
    <class kind="class">ACE_WChar_Codeset_Translator</class>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(ACE_OutputCDR &amp;os, const ACE_CString &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CString &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Char x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Short x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::UShort x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Long x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::ULong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::LongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::ULongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::LongDouble x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Float x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a11</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Double x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a12</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_boolean x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a13</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_char x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_wchar x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a15</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_octet x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_string x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a17</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_wstring x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a18</anchor>
      <arglist>(ACE_OutputCDR &amp;os, const ACE_CDR::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a19</anchor>
      <arglist>(ACE_OutputCDR &amp;os, const ACE_CDR::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::UShort &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Long &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a24</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::ULong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a26</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a27</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a28</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a29</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a30</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_boolean x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a31</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_char x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a32</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_wchar x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a33</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_octet x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a34</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_string x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a35</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_wstring x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a36</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Char *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a37</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::WChar *&amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>CDR__Stream_8i.html</filename>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Char x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Short x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::UShort x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Long x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::ULong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::LongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::ULongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::LongDouble x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Float x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_CDR::Double x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(ACE_OutputCDR &amp;os, const ACE_CDR::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a11</anchor>
      <arglist>(ACE_OutputCDR &amp;os, const ACE_CDR::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a12</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_boolean x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a13</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_char x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_wchar x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a15</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_octet x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_string x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a17</anchor>
      <arglist>(ACE_OutputCDR &amp;os, ACE_OutputCDR::from_wstring x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::UShort &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Long &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::ULong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a24</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a26</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a27</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a28</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::Char *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a29</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_CDR::WChar *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a30</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_boolean x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a31</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_char x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a32</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_wchar x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a33</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_octet x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a34</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_string x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_CDR::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a35</anchor>
      <arglist>(ACE_InputCDR &amp;is, ACE_InputCDR::to_wstring x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CE-status.txt</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/docs/</path>
    <filename>CE-status_8txt.html</filename>
  </compound>
  <compound kind="file">
    <name>Cleanup_Strategies_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Cleanup__Strategies__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Cleanup_Strategies_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Cleanup_Strategies_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cleanup_Strategies_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Cleanup__Strategies__T_8h.html</filename>
    <class kind="class">ACE_Cleanup_Strategy</class>
    <class kind="class">ACE_Handler_Cleanup_Strategy</class>
    <class kind="class">ACE_Null_Cleanup_Strategy</class>
    <class kind="class">ACE_Recyclable_Handler_Cleanup_Strategy</class>
    <class kind="class">ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LACKS_PRAGMA_ONCE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Cleanup_Strategy</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Recyclable_Handler_Cleanup_Strategy</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Null_Cleanup_Strategy</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Codeset_IBM1047.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Codeset__IBM1047_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Codeset_IBM1047.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Codeset__IBM1047_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Configuration.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Configuration_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Configuration.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Configuration_8h.html</filename>
    <class kind="class">ACE_Configuration</class>
    <class kind="class">ACE_Configuration_ExtId</class>
    <class kind="class">ACE_Configuration_Heap</class>
    <class kind="class">ACE_Configuration_Section_IntId</class>
    <class kind="class">ACE_Configuration_Section_Key</class>
    <class kind="class">ACE_Configuration_Section_Key_Heap</class>
    <class kind="class">ACE_Configuration_Value_IntId</class>
    <class kind="class">ACE_Configuration_Win32Registry</class>
    <class kind="class">ACE_Section_Key_Internal</class>
    <class kind="class">ACE_Section_Key_Win32</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CONFIG_SECTION_INDEX</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_CONFIG_SECTION_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Allocator_Adapter&lt; ACE_Malloc&lt; ACE_MMAP_MEMORY_POOL, ACE_SYNCH_MUTEX &gt; &gt;</type>
      <name>PERSISTENT_ALLOCATOR</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Allocator_Adapter&lt; ACE_Malloc&lt; ACE_LOCAL_MEMORY_POOL, ACE_SYNCH_MUTEX &gt; &gt;</type>
      <name>HEAP_ALLOCATOR</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_With_Allocator&lt; ACE_Configuration_ExtId, int &gt;</type>
      <name>SUBSECTION_MAP</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; ACE_Configuration_ExtId, int, ACE_Hash&lt; ACE_Configuration_ExtId &gt;, ACE_Equal_To&lt; ACE_Configuration_ExtId &gt;, ACE_Null_Mutex &gt;</type>
      <name>SUBSECTION_HASH</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; ACE_Configuration_ExtId, int &gt;</type>
      <name>SUBSECTION_ENTRY</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_With_Allocator&lt; ACE_Configuration_ExtId, ACE_Configuration_Value_IntId &gt;</type>
      <name>VALUE_MAP</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; ACE_Configuration_ExtId, ACE_Configuration_Value_IntId, ACE_Hash&lt; ACE_Configuration_ExtId &gt;, ACE_Equal_To&lt; ACE_Configuration_ExtId &gt;, ACE_Null_Mutex &gt;</type>
      <name>VALUE_HASH</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; ACE_Configuration_ExtId, ACE_Configuration_Value_IntId &gt;</type>
      <name>VALUE_ENTRY</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_With_Allocator&lt; ACE_Configuration_ExtId, ACE_Configuration_Section_IntId &gt;</type>
      <name>SECTION_MAP</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; ACE_Configuration_ExtId, ACE_Configuration_Section_IntId, ACE_Hash&lt; ACE_Configuration_ExtId &gt;, ACE_Equal_To&lt; ACE_Configuration_ExtId &gt;, ACE_Null_Mutex &gt;</type>
      <name>SECTION_HASH</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; ACE_Configuration_ExtId, ACE_Configuration_Section_IntId &gt;</type>
      <name>SECTION_ENTRY</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Configuration_Import_Export.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Configuration__Import__Export_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Configuration_Import_Export.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Configuration__Import__Export_8h.html</filename>
    <class kind="class">ACE_Config_ImpExp_Base</class>
    <class kind="class">ACE_Ini_ImpExp</class>
    <class kind="class">ACE_Registry_ImpExp</class>
  </compound>
  <compound kind="file">
    <name>Connection_Recycling_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Connection__Recycling__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Connection_Recycling_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Connection_Recycling_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connection_Recycling_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Connection__Recycling__Strategy_8h.html</filename>
    <class kind="class">ACE_Connection_Recycling_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Connector_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>SVH</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PR_CO_1</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PR_CO_2</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PR_AD</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Connector</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Connector) template&lt; class SVH, PR_CO_1 &gt; void ACE_Connector&lt; SVH, PR_CO_2 &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Connector</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Connector_8h.html</filename>
    <class kind="class">ACE_Connector</class>
    <class kind="class">ACE_Strategy_Connector</class>
    <class kind="class">ACE_Svc_Tuple</class>
  </compound>
  <compound kind="file">
    <name>Containers.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Containers_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Containers</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Containers</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Containers.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Containers_8h.html</filename>
    <class kind="class">ACE_DLList_Node</class>
  </compound>
  <compound kind="file">
    <name>Containers.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Containers_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Containers_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Containers__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Containers_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Bounded_Stack) template&lt; class T &gt; void ACE_Bounded_Stack&lt; T &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Containers_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Containers_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Containers__T_8h.html</filename>
    <class kind="class">ACE_Array</class>
    <class kind="class">ACE_Bounded_Set</class>
    <class kind="struct">ACE_Bounded_Set::Search_Structure</class>
    <class kind="class">ACE_Bounded_Set_Iterator</class>
    <class kind="class">ACE_Bounded_Stack</class>
    <class kind="class">ACE_DLList</class>
    <class kind="class">ACE_DLList_Iterator</class>
    <class kind="class">ACE_DLList_Reverse_Iterator</class>
    <class kind="class">ACE_DNode</class>
    <class kind="class">ACE_Double_Linked_List</class>
    <class kind="class">ACE_Double_Linked_List_Iterator</class>
    <class kind="class">ACE_Double_Linked_List_Iterator_Base</class>
    <class kind="class">ACE_Double_Linked_List_Reverse_Iterator</class>
    <class kind="class">ACE_Fixed_Set</class>
    <class kind="class">ACE_Fixed_Set_Const_Iterator</class>
    <class kind="class">ACE_Fixed_Set_Iterator</class>
    <class kind="class">ACE_Fixed_Stack</class>
    <class kind="class">ACE_Ordered_MultiSet</class>
    <class kind="class">ACE_Ordered_MultiSet_Iterator</class>
    <class kind="class">ACE_Unbounded_Stack</class>
    <class kind="class">ACE_Unbounded_Stack_Iterator</class>
    <member kind="typedef">
      <type>ACE_Double_Linked_List&lt; ACE_DLList_Node &gt;</type>
      <name>ACE_DLList_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Containers_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Containers__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>CORBA_macros.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>CORBA__macros_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_EMIT_CODE</name>
      <anchor>a27</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_EMIT_CODE2</name>
      <anchor>a28</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_EMIT_DUMMY</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_ARG_DECL</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_ARG_DECL_WITH_DEFAULTS</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_ARG_DECL_NOT_USED</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_SINGLE_ARG_DECL</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_SINGLE_ARG_DECL_NOT_USED</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_ARG_PARAMETER</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_SINGLE_ARG_PARAMETER</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_ARG_NOT_USED</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY_ENV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ANY_EXCEPTION</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CORBA_HAS_EXCEPTIONS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DECLARE_NEW_CORBA_ENV</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ADOPT_CORBA_ENV</name>
      <anchor>a4</anchor>
      <arglist>(ENV)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CHECK</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CHECK_RETURN</name>
      <anchor>a6</anchor>
      <arglist>(RETV)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THROW_INT</name>
      <anchor>a7</anchor>
      <arglist>(EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THROW</name>
      <anchor>a8</anchor>
      <arglist>(EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THROW_RETURN</name>
      <anchor>a9</anchor>
      <arglist>(EXCEPTION, RETV)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY_NEW_ENV</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY_EX</name>
      <anchor>a12</anchor>
      <arglist>(LABEL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY_CHECK</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY_CHECK_EX</name>
      <anchor>a14</anchor>
      <arglist>(LABEL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY_THROW</name>
      <anchor>a15</anchor>
      <arglist>(EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRY_THROW_EX</name>
      <anchor>a16</anchor>
      <arglist>(EXCEPTION, LABEL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CATCH</name>
      <anchor>a17</anchor>
      <arglist>(EXCEPTION, VAR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CATCHANY</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CATCHALL</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_RE_THROW</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_RE_THROW_EX</name>
      <anchor>a21</anchor>
      <arglist>(LABEL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENDTRY</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NEW_THROW_EX</name>
      <anchor>a23</anchor>
      <arglist>(POINTER, CONSTRUCTOR, EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_GUARD_THROW_EX</name>
      <anchor>a24</anchor>
      <arglist>(MUTEX, OBJ, LOCK, EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_READ_GUARD_THROW_EX</name>
      <anchor>a25</anchor>
      <arglist>(MUTEX, OBJ, LOCK, EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WRITE_GUARD_THROW_EX</name>
      <anchor>a26</anchor>
      <arglist>(MUTEX, OBJ, LOCK, EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_RAISE</name>
      <anchor>a39</anchor>
      <arglist>(ex)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PRINT_TAO_EXCEPTION</name>
      <anchor>a40</anchor>
      <arglist>(EX, INFO)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PRINT_EXCEPTION</name>
      <anchor>a41</anchor>
      <arglist>(EX, INFO)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Date_Time.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Date__Time_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Date_Time</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Date_Time</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Date_Time.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Date__Time_8h.html</filename>
    <class kind="class">ACE_Date_Time</class>
  </compound>
  <compound kind="file">
    <name>Date_Time.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Date__Time_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Default_Constants.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Default__Constants_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_CLOSE_ALL_HANDLES</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAX_FULLY_QUALIFIED_NAME_LEN</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_PAGEFILE_POOL_BASE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_PAGEFILE_POOL_SIZE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_PAGEFILE_POOL_CHUNK</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_PAGEFILE_POOL_NAME</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MESSAGE_BLOCK_PRIORITY</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SERVICE_REPOSITORY_SIZE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REACTOR_NOTIFICATION_ARRAY_SIZE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIMEOUT</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_BACKLOG</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THREADS</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_BROADCAST_PORT</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MULTICAST_PORT</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MULTICAST_ADDR</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_HTTP_SERVER_PORT</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SERVER_PORT</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_HTTP_PORT</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MAX_SOCKET_BUFSIZ</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SERVER_PORT_STR</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SERVICE_PORT</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THR_PORT</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOCAL_PORT</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOCAL_PORT_STR</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_NAME_SERVER_PORT</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_NAME_SERVER_PORT_STR</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TOKEN_SERVER_PORT</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TOKEN_SERVER_PORT_STR</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOGGING_SERVER_PORT</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOGGING_SERVER_PORT_STR</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THR_LOGGING_SERVER_PORT</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THR_LOGGING_SERVER_PORT_STR</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIME_SERVER_PORT</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIME_SERVER_PORT_STR</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIME_SERVER_STR</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_RENDEZVOUS</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SYSLOG_FACILITY</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOGGER_KEY</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LOCALHOST</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SERVER_HOST</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SHM_KEY</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SEGMENT_SIZE</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MAX_SEGMENTS</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NAME_SERVER_MAP</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_FILE_PERMS</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_DIR_PERMS</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIMEPROBE_TABLE_SIZE</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MAP_SIZE</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIMER_WHEEL_SIZE</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIMER_WHEEL_RESOLUTION</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIMER_HASH_TABLE_SIZE</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_FREE_LIST_PREALLOC</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_FREE_LIST_LWM</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_FREE_LIST_HWM</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_FREE_LIST_INC</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UNIQUE_NAME_LEN</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAX_DGRAM_SIZE</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_ARGV_BUFSIZ</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FREE_LIST_WITH_POOL</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PURE_FREE_LIST</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAX_USERID</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NON_BLOCKING_BUG_DELAY</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DEV.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_DEV</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_DEV) void ACE_DEV</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_DEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DEV.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV_8h.html</filename>
    <class kind="class">ACE_DEV</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEV_CONNECTOR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEV_STREAM</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DEV.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>DEV_Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_DEV_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_DEV_Addr) void ACE_DEV_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_DEV_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DEV_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__Addr_8h.html</filename>
    <class kind="class">ACE_DEV_Addr</class>
  </compound>
  <compound kind="file">
    <name>DEV_Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>DEV_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_DEV_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_DEV_Connector) void ACE_DEV_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_DEV_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DEV_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__Connector_8h.html</filename>
    <class kind="class">ACE_DEV_Connector</class>
  </compound>
  <compound kind="file">
    <name>DEV_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>DEV_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__IO_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_DEV_IO</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_DEV_IO) int ACE_DEV_IO</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_DEV_IO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DEV_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__IO_8h.html</filename>
    <class kind="class">ACE_DEV_IO</class>
  </compound>
  <compound kind="file">
    <name>DEV_IO.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DEV__IO_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Dirent.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dirent_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Dirent.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dirent_8h.html</filename>
    <class kind="class">ACE_Dirent</class>
  </compound>
  <compound kind="file">
    <name>Dirent.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dirent_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Dirent_Selector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dirent__Selector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Dirent_Selector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Dirent_Selector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dirent_Selector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dirent__Selector_8h.html</filename>
    <class kind="class">ACE_Dirent_Selector</class>
  </compound>
  <compound kind="file">
    <name>Dirent_Selector.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dirent__Selector_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>DLL.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DLL_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_DLL</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DLL.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>DLL_8h.html</filename>
    <class kind="class">ACE_DLL</class>
  </compound>
  <compound kind="file">
    <name>Dump.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dump_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Dump</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Dump</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dump.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dump_8h.html</filename>
    <class kind="class">ACE_Dumpable</class>
    <class kind="class">ACE_Dumpable_Ptr</class>
    <class kind="class">ACE_ODB</class>
    <class kind="struct">ACE_ODB::Tuple</class>
  </compound>
  <compound kind="file">
    <name>Dump_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dump__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Dump_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Dump_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dump_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dump__T_8h.html</filename>
    <class kind="class">ACE_Dumpable_Adapter</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REGISTER_OBJECT</name>
      <anchor>a0</anchor>
      <arglist>(CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REMOVE_OBJECT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Dynamic</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Dynamic</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic_8h.html</filename>
    <class kind="class">ACE_Dynamic</class>
  </compound>
  <compound kind="file">
    <name>Dynamic.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Dynamic_Service.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic__Service_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Dynamic_Service</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Dynamic_Service</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_Service.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic__Service_8h.html</filename>
    <class kind="class">ACE_Dynamic_Service</class>
  </compound>
  <compound kind="file">
    <name>Dynamic_Service.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic__Service_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Dynamic_Service_Base.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic__Service__Base_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Dynamic_Service_Base</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Dynamic_Service_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_Service_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic__Service__Base_8h.html</filename>
    <class kind="class">ACE_Dynamic_Service_Base</class>
  </compound>
  <compound kind="file">
    <name>Dynamic_Service_Base.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Dynamic__Service__Base_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Env_Value_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Env__Value__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENV_VALUE_T_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Env_Value_T</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Env_Value_T</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Env_Value_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Env__Value__T_8h.html</filename>
    <class kind="class">ACE_Env_Value</class>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *s, T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *s, ACE_TCHAR *&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *s, const ACE_TCHAR *&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *s, short &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *s, u_short &amp;us)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *s, u_int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_TCHAR *s, long &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_TCHAR *s, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR *s, u_long &amp;ul)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_Convert</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR *s, double &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Env_Value_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Env__Value__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Event_Handler.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Event__Handler_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Event_Handler</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Event_Handler</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Event_Handler.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Event__Handler_8h.html</filename>
    <class kind="class">ACE_Event_Handler</class>
    <class kind="class">ACE_Notification_Buffer</class>
    <member kind="typedef">
      <type>u_long</type>
      <name>ACE_Reactor_Mask</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Event_Handler.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Event__Handler_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Event_Handler_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Event__Handler__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Event_Handler_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Event_Handler_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Event_Handler_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Event__Handler__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Event_Handler_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Event__Handler__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FIFO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FIFO</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FIFO) void ACE_FIFO</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FIFO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FIFO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO_8h.html</filename>
    <class kind="class">ACE_FIFO</class>
  </compound>
  <compound kind="file">
    <name>FIFO.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FIFO_Recv.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Recv_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FIFO_Recv</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FIFO_Recv) void ACE_FIFO_Recv</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FIFO_Recv</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FIFO_Recv.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Recv_8h.html</filename>
    <class kind="class">ACE_FIFO_Recv</class>
  </compound>
  <compound kind="file">
    <name>FIFO_Recv.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Recv_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FIFO_Recv_Msg.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Recv__Msg_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FIFO_Recv_Msg</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FIFO_Recv_Msg) void ACE_FIFO_Recv_Msg</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FIFO_Recv_Msg</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FIFO_Recv_Msg.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Recv__Msg_8h.html</filename>
    <class kind="class">ACE_FIFO_Recv_Msg</class>
  </compound>
  <compound kind="file">
    <name>FIFO_Recv_Msg.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Recv__Msg_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FIFO_Send.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Send_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FIFO_Send</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FIFO_Send) void ACE_FIFO_Send</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FIFO_Send</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FIFO_Send.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Send_8h.html</filename>
    <class kind="class">ACE_FIFO_Send</class>
  </compound>
  <compound kind="file">
    <name>FIFO_Send.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Send_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FIFO_Send_Msg.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Send__Msg_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FIFO_Send_Msg</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FIFO_Send_Msg) void ACE_FIFO_Send_Msg</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FIFO_Send_Msg</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FIFO_Send_Msg.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Send__Msg_8h.html</filename>
    <class kind="class">ACE_FIFO_Send_Msg</class>
  </compound>
  <compound kind="file">
    <name>FIFO_Send_Msg.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FIFO__Send__Msg_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FILE.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FILE</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FILE) void ACE_FILE</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FILE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FILE.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE_8h.html</filename>
    <class kind="class">ACE_FILE</class>
    <class kind="class">ACE_FILE_Info</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FILE_CONNECTOR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FILE_STREAM</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FILE.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FILE_Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FILE_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FILE_Addr) ACE_FILE_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FILE_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FILE_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__Addr_8h.html</filename>
    <class kind="class">ACE_FILE_Addr</class>
  </compound>
  <compound kind="file">
    <name>FILE_Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FILE_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FILE_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FILE_Connector) void ACE_FILE_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FILE_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FILE_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__Connector_8h.html</filename>
    <class kind="class">ACE_FILE_Connector</class>
  </compound>
  <compound kind="file">
    <name>FILE_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FILE_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__IO_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FILE_IO</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FILE_IO) void ACE_FILE_IO</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FILE_IO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FILE_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__IO_8h.html</filename>
    <class kind="class">ACE_FILE_IO</class>
  </compound>
  <compound kind="file">
    <name>FILE_IO.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FILE__IO_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>File_Lock.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>File__Lock_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_File_Lock</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_File_Lock) void ACE_File_Lock</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_File_Lock</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>File_Lock.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>File__Lock_8h.html</filename>
    <class kind="class">ACE_File_Lock</class>
  </compound>
  <compound kind="file">
    <name>File_Lock.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>File__Lock_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Filecache.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Filecache_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>R_MASK</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>W_MASK</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>READ_FLAGS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WRITE_FLAGS</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Filecache</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Filecache</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Filecache.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Filecache_8h.html</filename>
    <class kind="class">ACE_Filecache</class>
    <class kind="class">ACE_Filecache_Handle</class>
    <class kind="class">ACE_Filecache_Object</class>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; ACE_TString, ACE_Filecache_Object *&gt;</type>
      <name>ACE_Filecache_Hash_Entry</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager&lt; ACE_TString, ACE_Filecache_Object *, ACE_Null_Mutex &gt;</type>
      <name>ACE_Filecache_Hash</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ACE_Filecache_Flag</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_NOMAP</name>
      <anchor>a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_MAPIT</name>
      <anchor>a4a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Flag_Manip.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Flag__Manip_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Flag_Manip</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Flag_Manip</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Flag_Manip.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Flag__Manip_8h.html</filename>
    <class kind="class">ACE_Flag_Manip</class>
  </compound>
  <compound kind="file">
    <name>Flag_Manip.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Flag__Manip_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FlReactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FlReactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_FlReactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FlReactor) ACE_FlReactor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_FlReactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlReactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FlReactor_8h.html</filename>
    <class kind="class">ACE_FlReactor</class>
  </compound>
  <compound kind="file">
    <name>FlReactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>FlReactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Framework_Component.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Framework__Component_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Framework_Component</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Framework_Repository) ACE_Framework_Repository *ACE_Framework_Repository</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Framework_Component</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Framework_Component.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Framework__Component_8h.html</filename>
    <class kind="class">ACE_Framework_Component</class>
    <class kind="class">ACE_Framework_Repository</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_FRAMEWORK_REPOSITORY_SIZE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Framework_Component.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Framework__Component_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Framework_Component_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Framework__Component__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Framework_Component_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Framework_Component_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Framework_Component_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Framework__Component__T_8h.html</filename>
    <class kind="class">ACE_Framework_Component_T</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REGISTER_FRAMEWORK_COMPONENT</name>
      <anchor>a0</anchor>
      <arglist>(CLASS, INSTANCE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Framework_Component_T.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Framework__Component__T_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Free_List.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Free__List_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Free_List</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Free_List</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Free_List.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Free__List_8h.html</filename>
    <class kind="class">ACE_Free_List</class>
    <class kind="class">ACE_Locked_Free_List</class>
  </compound>
  <compound kind="file">
    <name>Free_List.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Free__List_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Functor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Functor_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FUNCTOR_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Functor</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Functor</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Functor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Functor_8h.html</filename>
    <class kind="class">ACE_Command_Base</class>
    <class kind="class">ACE_Hash&lt; char &gt;</class>
  </compound>
  <compound kind="file">
    <name>Functor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Functor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Functor_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Functor__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Functor_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Command_Callback) template&lt; class RECEIVER, class ACTION &gt; ACE_Command_Callback&lt; RECEIVER, ACTION &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Functor_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Functor_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Functor__T_8h.html</filename>
    <class kind="class">ACE_Command_Callback</class>
    <class kind="class">ACE_Equal_To</class>
    <class kind="class">ACE_Hash</class>
    <class kind="class">ACE_Less_Than</class>
    <class kind="class">ACE_Pointer_Hash</class>
  </compound>
  <compound kind="file">
    <name>Functor_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Functor__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Future.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Future_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Future</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Future</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Future.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Future_8h.html</filename>
    <class kind="class">ACE_Future</class>
    <class kind="class">ACE_Future_Holder</class>
    <class kind="class">ACE_Future_Observer</class>
    <class kind="class">ACE_Future_Rep</class>
  </compound>
  <compound kind="file">
    <name>Future_Set.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Future__Set_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Future_Set</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Future_Set</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Future_Set.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Future__Set_8h.html</filename>
    <class kind="class">ACE_Future_Set</class>
  </compound>
  <compound kind="file">
    <name>Get_Opt.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Get__Opt_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Get_Opt</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Get_Opt) ACE_Get_Opt</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Get_Opt</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Get_Opt.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Get__Opt_8h.html</filename>
    <class kind="class">ACE_Get_Opt</class>
    <class kind="class">ACE_Get_Opt::ACE_Get_Opt_Long_Option</class>
  </compound>
  <compound kind="file">
    <name>Get_Opt.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Get__Opt_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>gethrtime.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>gethrtime_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_gethrtime</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_hrtime_t</type>
      <name>ACE_gethrtime</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_gethrtime</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Global_Macros.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Global__Macros_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BEGIN_DUMP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_END_DUMP</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DB</name>
      <anchor>a2</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NO_HEAP_CHECK</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ITOA</name>
      <anchor>a4</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SERVER_ADDRESS</name>
      <anchor>a5</anchor>
      <arglist>(H, P)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_POW</name>
      <anchor>a6</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_EVEN</name>
      <anchor>a7</anchor>
      <arglist>(NUM)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ODD</name>
      <anchor>a8</anchor>
      <arglist>(NUM)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BIT_ENABLED</name>
      <anchor>a9</anchor>
      <arglist>(WORD, BIT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BIT_DISABLED</name>
      <anchor>a10</anchor>
      <arglist>(WORD, BIT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BIT_CMP_MASK</name>
      <anchor>a11</anchor>
      <arglist>(WORD, BIT, MASK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SET_BITS</name>
      <anchor>a12</anchor>
      <arglist>(WORD, BITS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CLR_BITS</name>
      <anchor>a13</anchor>
      <arglist>(WORD, BITS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENDLESS_LOOP</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UNIMPLEMENTED_FUNC</name>
      <anchor>a15</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CLASS_IS_NAMESPACE</name>
      <anchor>a16</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TRACE</name>
      <anchor>a17</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Handle_Gobbler.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Gobbler_8h.html</filename>
    <class kind="class">ACE_Handle_Gobbler</class>
  </compound>
  <compound kind="file">
    <name>Handle_Gobbler.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Gobbler_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Handle_Ops.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Ops_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Handle_Ops</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Handle_Ops</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Handle_Ops.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Ops_8h.html</filename>
    <class kind="class">ACE_Handle_Ops</class>
  </compound>
  <compound kind="file">
    <name>Handle_Ops.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Ops_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Handle_Set.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Set_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DIV_BY_WORDSIZE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MULT_BY_WORDSIZE</name>
      <anchor>a1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Handle_Set</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Handle_Set) void ACE_Handle_Set</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Handle_Set</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Handle_Set.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Set_8h.html</filename>
    <class kind="class">ACE_Handle_Set</class>
    <class kind="class">ACE_Handle_Set_Iterator</class>
  </compound>
  <compound kind="file">
    <name>Handle_Set.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Handle__Set_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Hash_Cache_Map_Manager_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Cache__Map__Manager__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>T_1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Hash_Cache_Map_Manager_T</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Hash_Cache_Map_Manager)#define T_1#define T_2 template&lt; T_1 &gt; ACE_Hash_Cache_Map_Manager&lt; T_2 &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Hash_Cache_Map_Manager_T</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_Cache_Map_Manager_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Cache__Map__Manager__T_8h.html</filename>
    <class kind="class">ACE_Hash_Cache_Map_Manager</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CACHE_MAP_MANAGER</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Hash_Cache_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_Cache_Map_Manager_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Cache__Map__Manager__T_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>T_1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_Map_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Hash_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Hash_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_Map_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__Manager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Hash_Map_Manager_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__Manager__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Hash_Map_Manager_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Hash_Map_Iterator_Base_Ex) template&lt; class EXT_ID, class INT_ID, class HASH_KEY, class COMPARE_KEYS, class ACE_LOCK &gt; void ACE_Hash_Map_Iterator_Base_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Hash_Map_Manager_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_Map_Manager_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__Manager__T_8h.html</filename>
    <class kind="class">ACE_Hash_Map_Bucket_Iterator</class>
    <class kind="class">ACE_Hash_Map_Const_Iterator</class>
    <class kind="class">ACE_Hash_Map_Const_Iterator_Base_Ex</class>
    <class kind="class">ACE_Hash_Map_Const_Iterator_Ex</class>
    <class kind="class">ACE_Hash_Map_Entry</class>
    <class kind="class">ACE_Hash_Map_Iterator</class>
    <class kind="class">ACE_Hash_Map_Iterator_Base_Ex</class>
    <class kind="class">ACE_Hash_Map_Iterator_Ex</class>
    <class kind="class">ACE_Hash_Map_Manager</class>
    <class kind="class">ACE_Hash_Map_Manager_Ex</class>
    <class kind="class">ACE_Hash_Map_Reverse_Iterator</class>
    <class kind="class">ACE_Hash_Map_Reverse_Iterator_Ex</class>
  </compound>
  <compound kind="file">
    <name>Hash_Map_Manager_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__Manager__T_8i.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Hash_Map_Iterator_Ex) template&lt; class EXT_ID, class INT_ID, class HASH_KEY, class COMPARE_KEYS, class ACE_LOCK &gt; ACE_INLINE void ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_Map_With_Allocator_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__With__Allocator__T_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Hash_Map_With_Allocator_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__With__Allocator__T_8h.html</filename>
    <class kind="class">ACE_Hash_Map_With_Allocator</class>
  </compound>
  <compound kind="file">
    <name>Hash_Map_With_Allocator_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hash__Map__With__Allocator__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Hashable.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hashable_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Hashable</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Hashable</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hashable.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hashable_8h.html</filename>
    <class kind="class">ACE_Hashable</class>
  </compound>
  <compound kind="file">
    <name>Hashable.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Hashable_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>High_Res_Timer.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>High__Res__Timer_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_High_Res_Timer</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_High_Res_Timer) ACE_UINT32 ACE_High_Res_Timer</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_High_Res_Timer</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>High_Res_Timer.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>High__Res__Timer_8h.html</filename>
    <class kind="class">ACE_High_Res_Timer</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HR_SCALE_CONVERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>High_Res_Timer.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>High__Res__Timer_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>INET_Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>INET__Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_INET_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_INET_Addr) int ACE_INET_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_INET_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>INET_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>INET__Addr_8h.html</filename>
    <class kind="class">ACE_INET_Addr</class>
  </compound>
  <compound kind="file">
    <name>INET_Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>INET__Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Init_ACE.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Init__ACE_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Init_ACE</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Init_ACE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Init_ACE.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Init__ACE_8h.html</filename>
    <class kind="class">ACE_Init_ACE</class>
  </compound>
  <compound kind="file">
    <name>Init_ACE.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Init__ACE_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Intrusive_List.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Intrusive__List_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Intrusive_List</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Intrusive_List</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Intrusive_List.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Intrusive__List_8h.html</filename>
    <class kind="class">ACE_Intrusive_List</class>
  </compound>
  <compound kind="file">
    <name>Intrusive_List.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Intrusive__List_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Intrusive_List_Node.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Intrusive__List__Node_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Intrusive_List_Node</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Intrusive_List_Node</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Intrusive_List_Node.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Intrusive__List__Node_8h.html</filename>
    <class kind="class">ACE_Intrusive_List_Node</class>
  </compound>
  <compound kind="file">
    <name>Intrusive_List_Node.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Intrusive__List__Node_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>IO_Cntl_Msg.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IO__Cntl__Msg_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>IO_Cntl_Msg.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IO__Cntl__Msg_8h.html</filename>
    <class kind="class">ACE_IO_Cntl_Msg</class>
  </compound>
  <compound kind="file">
    <name>IO_SAP.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IO__SAP_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_IO_SAP</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_IO_SAP) ACE_IO_SAP</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_IO_SAP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IO_SAP.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IO__SAP_8h.html</filename>
    <class kind="class">ACE_IO_SAP</class>
  </compound>
  <compound kind="file">
    <name>IO_SAP.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IO__SAP_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>iosfwd.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>iosfwd_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>IOStream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IOStream_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_IOSTREAM_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_IOStream</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_IOStream</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOStream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IOStream_8h.html</filename>
    <class kind="class">ACE_Streambuf</class>
    <member kind="define">
      <type>#define</type>
      <name>GET_SIG</name>
      <anchor>a0</anchor>
      <arglist>(MT, DT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_CODE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_PROT</name>
      <anchor>a2</anchor>
      <arglist>(MT, DT, CODE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_FUNC</name>
      <anchor>a3</anchor>
      <arglist>(MT, DT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_SIG</name>
      <anchor>a4</anchor>
      <arglist>(MT, DT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_CODE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_PROT</name>
      <anchor>a6</anchor>
      <arglist>(MT, DT, CODE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_FUNC</name>
      <anchor>a7</anchor>
      <arglist>(MT, DT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_FUNC_SET0</name>
      <anchor>a8</anchor>
      <arglist>(MT, CODE, CODE2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_FUNC_SET0</name>
      <anchor>a9</anchor>
      <arglist>(MT, CODE, CODE2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_FUNC_SET1</name>
      <anchor>a10</anchor>
      <arglist>(MT, CODE, CODE2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_FUNC_SET1</name>
      <anchor>a11</anchor>
      <arglist>(MT, CODE, CODE2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_MANIP_CODE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_MANIP_CODE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_FUNC_SET</name>
      <anchor>a14</anchor>
      <arglist>(MT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_FUNC_SET</name>
      <anchor>a15</anchor>
      <arglist>(MT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETPUT_FUNC_SET</name>
      <anchor>a16</anchor>
      <arglist>(MT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_SIG_SET</name>
      <anchor>a17</anchor>
      <arglist>(MT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUT_SIG_SET</name>
      <anchor>a18</anchor>
      <arglist>(MT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETPUT_SIG_SET</name>
      <anchor>a19</anchor>
      <arglist>(MT)</arglist>
    </member>
    <member kind="typedef">
      <type>ios &amp;(*</type>
      <name>__manip_</name>
      <anchor>a20</anchor>
      <arglist>)(ios &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>istream &amp;(*</type>
      <name>__imanip_</name>
      <anchor>a21</anchor>
      <arglist>)(istream &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>ostream &amp;(*</type>
      <name>__omanip_</name>
      <anchor>a22</anchor>
      <arglist>)(ostream &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOStream_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IOStream__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_IOStream_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_IOStream_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOStream_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IOStream__T_8h.html</filename>
    <class kind="class">ACE_IOStream</class>
    <class kind="class">ACE_SOCK_Dgram_SC</class>
    <class kind="class">ACE_Streambuf_T</class>
  </compound>
  <compound kind="file">
    <name>IOStream_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IOStream__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IPC_SAP.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IPC__SAP_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_IPC_SAP</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_IPC_SAP) void ACE_IPC_SAP</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_IPC_SAP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPC_SAP.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IPC__SAP_8h.html</filename>
    <class kind="class">ACE_IPC_SAP</class>
  </compound>
  <compound kind="file">
    <name>IPC_SAP.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>IPC__SAP_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Lib_Find.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Lib__Find_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Lib_Find</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Lib_Find</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Lib_Find.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Lib__Find_8h.html</filename>
    <class kind="class">ACE_Lib_Find</class>
  </compound>
  <compound kind="file">
    <name>Lib_Find.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Lib__Find_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Local_Name_Space.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Local__Name__Space_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LOCAL_NAME_SPACE_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Local_Name_Space</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Local_Name_Space</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Local_Name_Space.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Local__Name__Space_8h.html</filename>
    <class kind="class">ACE_NS_Internal</class>
    <class kind="class">ACE_NS_String</class>
  </compound>
  <compound kind="file">
    <name>Local_Name_Space_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Local__Name__Space__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Local_Name_Space_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Local_Name_Space_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Local_Name_Space_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Local__Name__Space__T_8h.html</filename>
    <class kind="class">ACE_Local_Name_Space</class>
    <class kind="class">ACE_Name_Space_Map</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; ACE_NS_WString &gt;</type>
      <name>ACE_WSTRING_SET</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager&lt; ACE_NS_String, ACE_NS_Internal, ACE_Null_Mutex &gt;</type>
      <name>MAP_MANAGER</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Iterator&lt; ACE_NS_String, ACE_NS_Internal, ACE_Null_Mutex &gt;</type>
      <name>MAP_ITERATOR</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; ACE_NS_String, ACE_NS_Internal &gt;</type>
      <name>MAP_ENTRY</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Local_Tokens.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Local__Tokens_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Local_Tokens.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Local__Tokens_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Local_Tokens.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Local__Tokens_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>LOCK_SOCK_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LOCK__SOCK__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_LOCK_SOCK_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_LOCK_SOCK_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LOCK_SOCK_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LOCK__SOCK__Acceptor_8h.html</filename>
    <class kind="class">ACE_LOCK_SOCK_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>Log_Msg.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NTRACE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LOG_MSG_SYSLOG_BACKEND</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NEW_RETURN_I</name>
      <anchor>a2</anchor>
      <arglist>(POINTER, CONSTRUCTOR, RET_VAL)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Log_Msg</name>
      <anchor>a4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Log_Msg)#define ACE_LOG_MSG_SYSLOG_BACKEND#define ACE_NEW_RETURN_I(POINTER, CONSTRUCTOR, RET_VAL) int ACE_Log_Msg</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Log_Msg</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Msg.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg_8h.html</filename>
    <class kind="class">ACE_Log_Msg</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ASSERT</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HEX_DUMP</name>
      <anchor>a1</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_RETURN</name>
      <anchor>a2</anchor>
      <arglist>(Y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ERROR_RETURN</name>
      <anchor>a3</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ERROR</name>
      <anchor>a4</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEBUG</name>
      <anchor>a5</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ERROR_INIT</name>
      <anchor>a6</anchor>
      <arglist>(VALUE, FLAGS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ERROR_BREAK</name>
      <anchor>a7</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LOG_MSG</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Msg_Backend.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__Backend_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Log_Msg_Backend</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Log_Msg_Backend</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Msg_Backend.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__Backend_8h.html</filename>
    <class kind="class">ACE_Log_Msg_Backend</class>
  </compound>
  <compound kind="file">
    <name>Log_Msg_Callback.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__Callback_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Log_Msg_Callback</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Log_Msg_Callback</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Msg_Callback.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__Callback_8h.html</filename>
    <class kind="class">ACE_Log_Msg_Callback</class>
  </compound>
  <compound kind="file">
    <name>Log_Msg_IPC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__IPC_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Log_Msg_IPC</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Log_Msg_IPC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Msg_IPC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__IPC_8h.html</filename>
    <class kind="class">ACE_Log_Msg_IPC</class>
    <member kind="typedef">
      <type>ACE_SOCK_Stream</type>
      <name>ACE_LOG_MSG_IPC_STREAM</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_SOCK_Connector</type>
      <name>ACE_LOG_MSG_IPC_CONNECTOR</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>ACE_LOG_MSG_IPC_ADDR</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Msg_NT_Event_Log.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__NT__Event__Log_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Log_Msg_NT_Event_Log</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Log_Msg_NT_Event_Log</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Msg_NT_Event_Log.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__NT__Event__Log_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Log_Msg_UNIX_Syslog.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__UNIX__Syslog_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Log_Msg_UNIX_Syslog.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Msg__UNIX__Syslog_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Log_Priority.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Priority_8h.html</filename>
    <member kind="enumeration">
      <name>ACE_Log_Priority</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_SHUTDOWN</name>
      <anchor>a13a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_TRACE</name>
      <anchor>a13a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_DEBUG</name>
      <anchor>a13a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_INFO</name>
      <anchor>a13a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_NOTICE</name>
      <anchor>a13a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_WARNING</name>
      <anchor>a13a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_STARTUP</name>
      <anchor>a13a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_ERROR</name>
      <anchor>a13a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_CRITICAL</name>
      <anchor>a13a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_ALERT</name>
      <anchor>a13a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_EMERGENCY</name>
      <anchor>a13a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_MAX</name>
      <anchor>a13a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_ENSURE_32_BITS</name>
      <anchor>a13a12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Record.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Record_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Log_Record</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Log_Record) const ACE_TCHAR *ACE_Log_Record</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Log_Record</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log_Record.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Record_8h.html</filename>
    <class kind="class">ACE_Log_Record</class>
  </compound>
  <compound kind="file">
    <name>Log_Record.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Log__Record_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Logging_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Logging__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_lib_Logging_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_lib_Logging_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logging_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Logging__Strategy_8h.html</filename>
    <class kind="class">ACE_Logging_Strategy</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOGFILE_POLL_INTERVAL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSOCK.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_LSOCK</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LSOCK) void ACE_LSOCK</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_LSOCK</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSOCK.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK_8h.html</filename>
    <class kind="class">ACE_LSOCK</class>
  </compound>
  <compound kind="file">
    <name>LSOCK.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>LSOCK_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_LSOCK_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LSOCK_Acceptor) int ACE_LSOCK_Acceptor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_LSOCK_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSOCK_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Acceptor_8h.html</filename>
    <class kind="class">ACE_LSOCK_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>LSOCK_CODgram.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__CODgram_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_LSOCK_CODgram</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LSOCK_CODgram) void ACE_LSOCK_CODgram</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_LSOCK_CODgram</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSOCK_CODgram.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__CODgram_8h.html</filename>
    <class kind="class">ACE_LSOCK_CODgram</class>
  </compound>
  <compound kind="file">
    <name>LSOCK_CODgram.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__CODgram_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>LSOCK_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_LSOCK_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LSOCK_Connector) void ACE_LSOCK_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_LSOCK_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSOCK_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Connector_8h.html</filename>
    <class kind="class">ACE_LSOCK_Connector</class>
  </compound>
  <compound kind="file">
    <name>LSOCK_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>LSOCK_Dgram.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Dgram_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_LSOCK_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LSOCK_Dgram) void ACE_LSOCK_Dgram</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_LSOCK_Dgram</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSOCK_Dgram.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Dgram_8h.html</filename>
    <class kind="class">ACE_LSOCK_Dgram</class>
  </compound>
  <compound kind="file">
    <name>LSOCK_Dgram.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Dgram_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>LSOCK_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_LSOCK_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LSOCK_Stream) int ACE_LSOCK_Stream</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_LSOCK_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSOCK_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Stream_8h.html</filename>
    <class kind="class">ACE_LSOCK_Stream</class>
  </compound>
  <compound kind="file">
    <name>LSOCK_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>LSOCK__Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Malloc.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Malloc</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Malloc</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Malloc.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc_8h.html</filename>
    <class kind="class">ACE_Control_Block</class>
    <class kind="class">ACE_Control_Block::ACE_Malloc_Header</class>
    <class kind="class">ACE_Control_Block::ACE_Name_Node</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_STATS</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_PADDING</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_HEADER_SIZE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_PADDING_SIZE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CONTROL_BLOCK_SIZE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CONTROL_BLOCK_ALIGN_LONGS</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Malloc.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Malloc_Allocator.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__Allocator_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_ALLOCATOR_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Malloc_Allocator</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Malloc_Allocator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Malloc_Allocator.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__Allocator_8h.html</filename>
    <class kind="class">ACE_New_Allocator</class>
    <class kind="class">ACE_Static_Allocator_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_STATS</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Malloc_Allocator.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__Allocator_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Malloc_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__Base_8h.html</filename>
    <class kind="class">ACE_Allocator</class>
  </compound>
  <compound kind="file">
    <name>Malloc_Instantiations.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__Instantiations_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Malloc_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Malloc_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Malloc_T) template&lt; class MALLOC &gt; int ACE_Allocator_Adapter&lt; MALLOC &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Malloc_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Malloc_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__T_8h.html</filename>
    <class kind="class">ACE_Allocator_Adapter</class>
    <class kind="class">ACE_Cached_Allocator</class>
    <class kind="class">ACE_Cached_Mem_Pool_Node</class>
    <class kind="class">ACE_Malloc</class>
    <class kind="class">ACE_Malloc_FIFO_Iterator</class>
    <class kind="class">ACE_Malloc_FIFO_Iterator_T</class>
    <class kind="class">ACE_Malloc_LIFO_Iterator</class>
    <class kind="class">ACE_Malloc_LIFO_Iterator_T</class>
    <class kind="class">ACE_Malloc_T</class>
    <class kind="class">ACE_Static_Allocator</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Malloc_Iterator</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Malloc_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Malloc__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Managed_Object.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Managed__Object_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Managed_Object</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Managed_Object</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Managed_Object.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Managed__Object_8h.html</filename>
    <class kind="class">ACE_Cleanup_Adapter</class>
    <class kind="class">ACE_Managed_Object</class>
  </compound>
  <compound kind="file">
    <name>Managed_Object.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Managed__Object_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Map.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Map</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Map</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Map_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Map_Entry) ACE_ALLOC_HOOK_DEFINE(ACE_Map_Manager) ACE_ALLOC_HOOK_DEFINE(ACE_Map_Const_Iterator_Base) ACE_ALLOC_HOOK_DEFINE(ACE_Map_Iterator_Base) ACE_ALLOC_HOOK_DEFINE(ACE_Map_Const_Iterator) ACE_ALLOC_HOOK_DEFINE(ACE_Map_Iterator) ACE_ALLOC_HOOK_DEFINE(ACE_Map_Reverse_Iterator) template&lt; class EXT_ID, class INT_ID, class ACE_LOCK &gt; int ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map__Manager_8h.html</filename>
    <class kind="class">ACE_Map_Const_Iterator</class>
    <class kind="class">ACE_Map_Const_Iterator_Base</class>
    <class kind="class">ACE_Map_Entry</class>
    <class kind="class">ACE_Map_Iterator</class>
    <class kind="class">ACE_Map_Iterator_Base</class>
    <class kind="class">ACE_Map_Manager</class>
    <class kind="class">ACE_Map_Reverse_Iterator</class>
  </compound>
  <compound kind="file">
    <name>Map_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Map_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Map_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Map_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map__T_8h.html</filename>
    <class kind="class">ACE_Active_Map_Manager_Adapter</class>
    <class kind="class">ACE_Active_Map_Manager_Iterator_Adapter</class>
    <class kind="class">ACE_Active_Map_Manager_Reverse_Iterator_Adapter</class>
    <class kind="class">ACE_Hash_Map_Manager_Ex_Adapter</class>
    <class kind="class">ACE_Hash_Map_Manager_Ex_Iterator_Adapter</class>
    <class kind="class">ACE_Hash_Map_Manager_Ex_Reverse_Iterator_Adapter</class>
    <class kind="class">ACE_Incremental_Key_Generator</class>
    <class kind="class">ACE_Iterator</class>
    <class kind="class">ACE_Iterator_Impl</class>
    <class kind="class">ACE_Map</class>
    <class kind="class">ACE_Map_Impl</class>
    <class kind="class">ACE_Map_Impl_Iterator_Adapter</class>
    <class kind="class">ACE_Map_Impl_Reverse_Iterator_Adapter</class>
    <class kind="class">ACE_Map_Manager_Adapter</class>
    <class kind="class">ACE_Map_Manager_Iterator_Adapter</class>
    <class kind="class">ACE_Map_Manager_Reverse_Iterator_Adapter</class>
    <class kind="class">ACE_Noop_Key_Generator</class>
    <class kind="class">ACE_Reverse_Iterator</class>
    <class kind="class">ACE_Reverse_Iterator_Impl</class>
  </compound>
  <compound kind="file">
    <name>Map_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Map__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>MEM_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_MEM_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_MEM_Acceptor) void ACE_MEM_Acceptor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_MEM_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MEM_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Acceptor_8h.html</filename>
    <class kind="class">ACE_MEM_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>MEM_Acceptor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Acceptor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>MEM_Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_MEM_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_MEM_Addr) ACE_MEM_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_MEM_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MEM_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Addr_8h.html</filename>
    <class kind="class">ACE_MEM_Addr</class>
  </compound>
  <compound kind="file">
    <name>MEM_Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>MEM_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_MEM_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_MEM_Connector) void ACE_MEM_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_MEM_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MEM_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Connector_8h.html</filename>
    <class kind="class">ACE_MEM_Connector</class>
  </compound>
  <compound kind="file">
    <name>MEM_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>MEM_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__IO_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_MEM_IO</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_MEM_IO) ACE_Reactive_MEM_IO</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_MEM_IO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MEM_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__IO_8h.html</filename>
    <class kind="class">ACE_MEM_IO</class>
    <class kind="class">ACE_MT_MEM_IO</class>
    <class kind="struct">ACE_MT_MEM_IO::Channel</class>
    <class kind="struct">ACE_MT_MEM_IO::MQ_Struct</class>
    <class kind="class">ACE_MT_MEM_IO::Simple_Queue</class>
    <class kind="class">ACE_Reactive_MEM_IO</class>
  </compound>
  <compound kind="file">
    <name>MEM_IO.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__IO_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Mem_Map.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Mem__Map_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_USE_MAPPING_NAME</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Mem_Map</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Mem_Map) static void to_mapping_name(ACE_TCHAR *mapobjname, const ACE_TCHAR *filename, size_t len)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Mem_Map</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mem_Map.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Mem__Map_8h.html</filename>
    <class kind="class">ACE_Mem_Map</class>
  </compound>
  <compound kind="file">
    <name>Mem_Map.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Mem__Map_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>MEM_SAP.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__SAP_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_MEM_SAP</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_IPC_SAP) void ACE_MEM_SAP</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_MEM_SAP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MEM_SAP.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__SAP_8h.html</filename>
    <class kind="class">ACE_MEM_SAP</class>
    <class kind="class">ACE_MEM_SAP_Node</class>
  </compound>
  <compound kind="file">
    <name>MEM_SAP.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__SAP_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>MEM_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_MEM_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_MEM_Stream) void ACE_MEM_Stream</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_MEM_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MEM_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Stream_8h.html</filename>
    <class kind="class">ACE_MEM_Stream</class>
  </compound>
  <compound kind="file">
    <name>MEM_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>MEM__Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Memory_Pool.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Memory__Pool_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAP_FILE</name>
      <anchor>a0</anchor>
      <arglist>(_hnd, _access, _offHigh, _offLow, _nBytes, _baseAdd)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Memory_Pool</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Local_Memory_Pool) void ACE_Local_Memory_Pool</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Memory_Pool</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Memory_Pool.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Memory__Pool_8h.html</filename>
    <class kind="class">ACE_Lite_MMAP_Memory_Pool</class>
    <class kind="class">ACE_Local_Memory_Pool</class>
    <class kind="class">ACE_Local_Memory_Pool_Options</class>
    <class kind="class">ACE_MMAP_Memory_Pool</class>
    <class kind="class">ACE_MMAP_Memory_Pool_Options</class>
    <class kind="class">ACE_Pagefile_Memory_Pool</class>
    <class kind="class">ACE_Pagefile_Memory_Pool::Control_Block</class>
    <class kind="class">ACE_Pagefile_Memory_Pool::Control_Block::Shared_Control_Block</class>
    <class kind="class">ACE_Pagefile_Memory_Pool_Options</class>
    <class kind="class">ACE_Sbrk_Memory_Pool</class>
    <class kind="class">ACE_Sbrk_Memory_Pool_Options</class>
    <class kind="class">ACE_Shared_Memory_Pool</class>
    <class kind="struct">ACE_Shared_Memory_Pool::SHM_TABLE</class>
    <class kind="class">ACE_Shared_Memory_Pool_Options</class>
  </compound>
  <compound kind="file">
    <name>Memory_Pool.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Memory__Pool_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Message_Block.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Block_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_EXECUTION_TIME</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEADLINE_TIME</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Message_Block</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block) void ACE_Message_Block</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Message_Block</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Message_Block.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Block_8h.html</filename>
    <class kind="class">ACE_Data_Block</class>
    <class kind="class">ACE_Deadline_Message_Strategy</class>
    <class kind="class">ACE_Dynamic_Message_Strategy</class>
    <class kind="class">ACE_Laxity_Message_Strategy</class>
    <class kind="class">ACE_Message_Block</class>
  </compound>
  <compound kind="file">
    <name>Message_Block.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Block_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Message_Block_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Block__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MESSAGE_BLOCK_T_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_RCSID</name>
      <anchor>a1</anchor>
      <arglist>(ace, Message_Block_T,&quot;Message_Block_T.cpp, v 4.6 2001/03/04 00:55:28 brunsch Exp&quot;) template&lt; class L &gt; ACE_Locked_Data_Block&lt; L &gt;</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Message_Block_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Block__T_8h.html</filename>
    <class kind="class">ACE_Locked_Data_Block</class>
  </compound>
  <compound kind="file">
    <name>Message_Block_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Block__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Message_Queue.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Queue_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MESSAGE_QUEUE_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Message_Queue</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Message_Queue.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Queue_8h.html</filename>
    <class kind="class">ACE_Message_Queue_Base</class>
  </compound>
  <compound kind="file">
    <name>Message_Queue.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Queue_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Message_Queue_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Queue__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Message_Queue_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Queue) ACE_ALLOC_HOOK_DEFINE(ACE_Dynamic_Message_Queue) ACE_ALLOC_HOOK_DEFINE(ACE_Message_Queue_Ex) template&lt; class ACE_MESSAGE_TYPE, ACE_SYNCH_DECL &gt; void ACE_Message_Queue_Ex&lt; ACE_MESSAGE_TYPE, ACE_SYNCH_USE &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Message_Queue_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Message_Queue_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Queue__T_8h.html</filename>
    <class kind="class">ACE_Dynamic_Message_Queue</class>
    <class kind="class">ACE_Message_Queue</class>
    <class kind="class">ACE_Message_Queue_Ex</class>
    <class kind="class">ACE_Message_Queue_Factory</class>
    <class kind="class">ACE_Message_Queue_Iterator</class>
    <class kind="class">ACE_Message_Queue_Reverse_Iterator</class>
    <member kind="typedef">
      <type>ACE_Message_Queue&lt; ACE_SYNCH &gt;</type>
      <name>ACE_DEFAULT_MESSAGE_QUEUE_TYPE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Message_Queue_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Message__Queue__T_8i.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Message_Queue_Reverse_Iterator) template&lt; class ACE_MESSAGE_TYPE, ACE_SYNCH_DECL &gt; ACE_INLINE int ACE_Message_Queue_Ex&lt; ACE_MESSAGE_TYPE, ACE_SYNCH_USE &gt;</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Method_Object.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Method__Object_8h.html</filename>
    <member kind="typedef">
      <type>ACE_Method_Request</type>
      <name>ACE_Method_Object</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Method_Request.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Method__Request_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Method_Request</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Method_Request</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Method_Request.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Method__Request_8h.html</filename>
    <class kind="class">ACE_Method_Request</class>
  </compound>
  <compound kind="file">
    <name>Min_Max.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Min__Max_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MIN</name>
      <anchor>a0</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAX</name>
      <anchor>a1</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_RANGE</name>
      <anchor>a2</anchor>
      <arglist>(a, b, c)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>ace_min</name>
      <anchor>a3</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>ace_max</name>
      <anchor>a4</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>ace_min</name>
      <anchor>a5</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2, const T &amp;t3)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>ace_max</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2, const T &amp;t3)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>ace_range</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;min, const T &amp;max, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Module.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Module_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Module</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Module) template&lt; ACE_SYNCH_DECL &gt; void ACE_Module&lt; ACE_SYNCH_USE &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Module</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Module.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Module_8h.html</filename>
    <class kind="class">ACE_Module</class>
    <class kind="class">ACE_Module_Base</class>
  </compound>
  <compound kind="file">
    <name>Module.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Module_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Msg_WFMO_Reactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Msg__WFMO__Reactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Msg_WFMO_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Msg_WFMO_Reactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Msg_WFMO_Reactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Msg__WFMO__Reactor_8h.html</filename>
    <class kind="class">ACE_Msg_WFMO_Reactor</class>
  </compound>
  <compound kind="file">
    <name>Msg_WFMO_Reactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Msg__WFMO__Reactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>msvc_notes.txt</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/docs/</path>
    <filename>msvc__notes_8txt.html</filename>
  </compound>
  <compound kind="file">
    <name>Multiplexor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Multiplexor_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Multiplexor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Multiplexor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Multiplexor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Multiplexor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Name_Proxy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Name__Proxy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Name_Proxy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Name_Proxy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Name_Proxy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Name__Proxy_8h.html</filename>
    <class kind="class">ACE_Name_Proxy</class>
  </compound>
  <compound kind="file">
    <name>Name_Request_Reply.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Name__Request__Reply_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Name_Request_Reply</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Name_Request_Reply</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Name_Request_Reply.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Name__Request__Reply_8h.html</filename>
    <class kind="class">ACE_Name_Reply</class>
    <class kind="struct">ACE_Name_Reply::Transfer</class>
    <class kind="class">ACE_Name_Request</class>
    <class kind="struct">ACE_Name_Request::Transfer</class>
  </compound>
  <compound kind="file">
    <name>Name_Space.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Name__Space_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Name_Space</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Name_Space</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Name_Space.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Name__Space_8h.html</filename>
    <class kind="class">ACE_Name_Binding</class>
    <class kind="class">ACE_Name_Space</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; ACE_NS_WString &gt;</type>
      <name>ACE_WSTRING_SET</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; ACE_Name_Binding &gt;</type>
      <name>ACE_BINDING_SET</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; ACE_Name_Binding &gt;</type>
      <name>ACE_BINDING_ITERATOR</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; ACE_NS_WString &gt;</type>
      <name>ACE_PWSTRING_SET</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; ACE_NS_WString &gt;</type>
      <name>ACE_PWSTRING_ITERATOR</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Naming_Context.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Naming__Context_8cpp.html</filename>
    <member kind="typedef">
      <type>ACE_Local_Name_Space&lt; ACE_MMAP_MEMORY_POOL, ACE_RW_Process_Mutex &gt;</type>
      <name>LOCAL_NAME_SPACE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Local_Name_Space&lt; ACE_LITE_MMAP_MEMORY_POOL, ACE_RW_Process_Mutex &gt;</type>
      <name>LITE_LOCAL_NAME_SPACE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Naming_Context</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FACTORY_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE, ACE_Naming_Context) ACE_STATIC_SVC_DEFINE(ACE_Naming_Context, ACE_LIB_TEXT(&quot;ACE_Naming_Context&quot;), ACE_SVC_OBJ_T,&amp;ACE_SVC_NAME(ACE_Naming_Context), ACE_Service_Type</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Naming_Context</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Naming_Context.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Naming__Context_8h.html</filename>
    <class kind="class">ACE_Name_Options</class>
    <class kind="class">ACE_Naming_Context</class>
  </compound>
  <compound kind="file">
    <name>Node.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Node_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Node</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Node) template&lt; class T &gt; ACE_Node&lt; T &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Node</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Node.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Node_8h.html</filename>
    <class kind="class">ACE_Node</class>
  </compound>
  <compound kind="file">
    <name>Notification_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Notification__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Strategies</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Strategies</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Notification_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Notification__Strategy_8h.html</filename>
    <class kind="class">ACE_Notification_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Notification_Strategy.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Notification__Strategy_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>NT_Service.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>NT__Service_8cpp.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a0</anchor>
      <arglist>(ACE_NT_Service) ACE_NT_Service</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NT_Service.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>NT__Service_8h.html</filename>
    <class kind="class">ACE_NT_Service</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NT_SERVICE_START_TIMEOUT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NT_SERVICE_DEFINE</name>
      <anchor>a1</anchor>
      <arglist>(SVCNAME, SVCCLASS, SVCDESC)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NT_SERVICE_REFERENCE</name>
      <anchor>a2</anchor>
      <arglist>(SVCNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NT_SERVICE_ENTRY</name>
      <anchor>a3</anchor>
      <arglist>(SVCDESC, SVCNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NT_SERVICE_RUN</name>
      <anchor>a4</anchor>
      <arglist>(SVCNAME, SVCINSTANCE, RET)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NT_Service.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>NT__Service_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Obchunk.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obchunk_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Obchunk</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Obchunk) void ACE_Obchunk</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Obchunk</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Obchunk.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obchunk_8h.html</filename>
    <class kind="class">ACE_Obchunk</class>
  </compound>
  <compound kind="file">
    <name>Obchunk.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obchunk_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Object_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Object__Manager_8cpp.html</filename>
    <class kind="class">ACE_Object_Manager_Manager</class>
    <class kind="class">ACE_Object_Manager_Preallocations</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_APPLICATION_PREALLOCATED_OBJECT_DEFINITIONS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_APPLICATION_PREALLOCATED_ARRAY_DEFINITIONS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_APPLICATION_PREALLOCATED_OBJECT_DELETIONS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_APPLICATION_PREALLOCATED_ARRAY_DELETIONS</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PREALLOCATE_OBJECT</name>
      <anchor>a4</anchor>
      <arglist>(TYPE, ID)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PREALLOCATE_ARRAY</name>
      <anchor>a5</anchor>
      <arglist>(TYPE, ID, COUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DELETE_PREALLOCATED_OBJECT</name>
      <anchor>a6</anchor>
      <arglist>(TYPE, ID)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DELETE_PREALLOCATED_ARRAY</name>
      <anchor>a7</anchor>
      <arglist>(TYPE, ID, COUNT)</arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cleanup_Adapter&lt; ACE_Recursive_Thread_Mutex &gt;</type>
      <name>ACE_Static_Object_Lock_Type</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Object_Manager</name>
      <anchor>a12</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Object_Manager</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_Object_Manager_Manager</type>
      <name>ACE_Object_Manager_Manager_instance</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_Static_Object_Lock_Type *</type>
      <name>ACE_Static_Object_Lock_lock</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Object__Manager_8h.html</filename>
    <class kind="class">ACE_Object_Manager</class>
    <class kind="class">ACE_Static_Object_Lock</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAX_MANAGED_OBJECTS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_APPLICATION_PREALLOCATED_OBJECT_DECLARATIONS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_APPLICATION_PREALLOCATED_ARRAY_DECLARATIONS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_Service_Object *</type>
      <name>_make_ACE_Service_Manager</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Service_Object_Exterminator *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Object__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Obstack.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obstack_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Obstack</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Obstack</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Obstack.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obstack_8h.html</filename>
    <member kind="typedef">
      <type>ACE_Obstack_T&lt; char &gt;</type>
      <name>ACE_Obstack</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Obstack_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obstack__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Obstack_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Obstack_T) template&lt; class CHAR &gt; void ACE_Obstack_T&lt; CHAR &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Obstack_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Obstack_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obstack__T_8h.html</filename>
    <class kind="class">ACE_Obstack_T</class>
  </compound>
  <compound kind="file">
    <name>Obstack_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Obstack__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>OS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS_8cpp.html</filename>
    <class kind="class">ACE_Cleanup_Info_Node</class>
    <class kind="class">ACE_OS_Object_Manager_Manager</class>
    <class kind="class">ACE_TSS_Cleanup</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_GUARD</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TSS_CLEANUP_GUARD</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TSS_BASE_GUARD</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THREAD_FUNCTION</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THREAD_ARGUMENT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_PREALLOCATE_OBJECT</name>
      <anchor>a5</anchor>
      <arglist>(TYPE, ID)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_DELETE_PREALLOCATED_OBJECT</name>
      <anchor>a6</anchor>
      <arglist>(TYPE, ID)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS</name>
      <anchor>a10</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Time_Value) ACE_Time_Value ACE_Time_Value</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_TSS_Cleanup_keys_destroyer</name>
      <anchor>a12</anchor>
      <arglist>(void *tss_keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_cleanup_destroyer</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Cleanup *object, void *param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_mutex_lock_cleanup_adapter</name>
      <anchor>a14</anchor>
      <arglist>(void *args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_OS_Object_Manager_Internal_Exit_Hook</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_exit_hook_marker</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_OS_Object_Manager_Manager</type>
      <name>ACE_OS_Object_Manager_Manager_instance</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS_8h.html</filename>
    <class kind="class">ACE_Cleanup</class>
    <class kind="class">ACE_Cleanup_Info</class>
    <class kind="class">ACE_Countdown_Time</class>
    <class kind="class">ACE_Object_Manager_Base</class>
    <class kind="class">ACE_OS</class>
    <class kind="class">ACE_OS::ace_flock_t</class>
    <class kind="class">ACE_OS_Exit_Info</class>
    <class kind="class">ACE_OS_Object_Manager</class>
    <class kind="struct">ACE_Protocol_Info</class>
    <class kind="class">ACE_recursive_thread_mutex_t</class>
    <class kind="class">ACE_Str_Buf</class>
    <class kind="class">ACE_Thread_ID</class>
    <class kind="class">ACE_Time_Value</class>
    <class kind="class">ACE_TSS_Info</class>
    <class kind="class">ACE_TSS_Keys</class>
    <class kind="class">ACE_TSS_Ref</class>
    <class kind="struct">cancel_state</class>
    <class kind="struct">iovec</class>
    <class kind="struct">ip_mreq</class>
    <class kind="struct">msghdr</class>
    <class kind="struct">msghdr</class>
    <class kind="struct">msqid_ds</class>
    <class kind="struct">rusage</class>
    <class kind="union">semun</class>
    <class kind="struct">shmaddr</class>
    <class kind="struct">siginfo_t</class>
    <class kind="struct">strbuf</class>
    <class kind="struct">timespec</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATIC_SVC_DECLARE</name>
      <anchor>a71</anchor>
      <arglist>(SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATIC_SVC_DECLARE_EXPORT</name>
      <anchor>a72</anchor>
      <arglist>(EXPORT_NAME, SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATIC_SVC_DEFINE</name>
      <anchor>a73</anchor>
      <arglist>(SERVICE_CLASS, NAME, TYPE, FN, FLAGS, ACTIVE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATIC_SVC_REQUIRE</name>
      <anchor>a74</anchor>
      <arglist>(SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATIC_SVC_REGISTER</name>
      <anchor>a75</anchor>
      <arglist>(SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FACTORY_DECLARE</name>
      <anchor>a76</anchor>
      <arglist>(CLS, SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FACTORY_DEFINE</name>
      <anchor>a77</anchor>
      <arglist>(CLS, SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_NAME</name>
      <anchor>a78</anchor>
      <arglist>(SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_INVOKE</name>
      <anchor>a79</anchor>
      <arglist>(SERVICE_CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_FACTORY_DECLARE</name>
      <anchor>a80</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_FACTORY_DEFINE</name>
      <anchor>a81</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_OPEN_PERMS</name>
      <anchor>a299</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_CDR_BUFSIZE</name>
      <anchor>a346</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_CDR_EXP_GROWTH_MAX</name>
      <anchor>a347</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_CDR_LINEAR_GROWTH_CHUNK</name>
      <anchor>a348</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_align_binary</name>
      <anchor>a350</anchor>
      <arglist>(ptr, alignment)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ptr_align_binary</name>
      <anchor>a351</anchor>
      <arglist>(ptr, alignment)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_SC_AIO_MAX</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ASCII_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_EBCDIC_SIZE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HAS_ASCII</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STANDARD_CHARACTER_SET_SIZE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CORBA_1</name>
      <anchor>a5</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CORBA_2</name>
      <anchor>a6</anchor>
      <arglist>(TYPE, NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CORBA_3</name>
      <anchor>a7</anchor>
      <arglist>(TYPE, NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NESTED_CLASS</name>
      <anchor>a8</anchor>
      <arglist>(TYPE, NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FD_SETSIZE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SELECT_REACTOR_SIZE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SPRINTF_ADAPTER</name>
      <anchor>a11</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_BASE_ADDR</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMER_SKEW</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_TRACE</name>
      <anchor>a14</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLOCK_REALTIME</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_USING</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TYPENAME</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEMPLATE_SPECIALIZATION</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TEMPLATE_METHOD_SPECIALIZATION</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_DECL</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_USE</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_MUTEX_T</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_CONDITION_T</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_SEMAPHORE_T</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MEM_POOL_1</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MEM_POOL_2</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MEM_POOL</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MEM_POOL_OPTIONS</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_STREAM_1</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_STREAM_2</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_STREAM</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_STREAM_ADDR</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_ACCEPTOR_1</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_ACCEPTOR_2</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_ACCEPTOR</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_ACCEPTOR_ADDR</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_CONNECTOR_1</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_CONNECTOR_2</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_CONNECTOR</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_CONNECTOR_ADDR</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PEER_CONNECTOR_ADDR_ANY</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SOCK_ACCEPTOR</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SOCK_CONNECTOR</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SOCK_STREAM</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MEM_ACCEPTOR</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MEM_CONNECTOR</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MEM_STREAM</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LSOCK_ACCEPTOR</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LSOCK_CONNECTOR</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LSOCK_STREAM</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TLI_ACCEPTOR</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TLI_CONNECTOR</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TLI_STREAM</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SPIPE_ACCEPTOR</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SPIPE_CONNECTOR</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SPIPE_STREAM</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UPIPE_ACCEPTOR</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UPIPE_CONNECTOR</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_UPIPE_STREAM</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FILE_CONNECTOR</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FILE_STREAM</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MMAP_MEMORY_POOL</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LITE_MMAP_MEMORY_POOL</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SBRK_MEMORY_POOL</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SHARED_MEMORY_POOL</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LOCAL_MEMORY_POOL</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PAGEFILE_MEMORY_POOL</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_1</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_2</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WSOCK_VERSION</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TSS_TYPE</name>
      <anchor>a82</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TSS_GET</name>
      <anchor>a83</anchor>
      <arglist>(I, T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MT</name>
      <anchor>a84</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THREAD_PRIORITY</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_GUARD_ACTION</name>
      <anchor>a86</anchor>
      <arglist>(MUTEX, OBJ, LOCK, ACTION, REACTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_GUARD_REACTION</name>
      <anchor>a87</anchor>
      <arglist>(MUTEX, OBJ, LOCK, REACTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_GUARD</name>
      <anchor>a88</anchor>
      <arglist>(MUTEX, OBJ, LOCK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_GUARD_RETURN</name>
      <anchor>a89</anchor>
      <arglist>(MUTEX, OBJ, LOCK, RETURN)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WRITE_GUARD</name>
      <anchor>a90</anchor>
      <arglist>(MUTEX, OBJ, LOCK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WRITE_GUARD_RETURN</name>
      <anchor>a91</anchor>
      <arglist>(MUTEX, OBJ, LOCK, RETURN)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_READ_GUARD</name>
      <anchor>a92</anchor>
      <arglist>(MUTEX, OBJ, LOCK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_READ_GUARD_RETURN</name>
      <anchor>a93</anchor>
      <arglist>(MUTEX, OBJ, LOCK, RETURN)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THROW_SPEC</name>
      <anchor>a94</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SCOPE_PROCESS</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SCOPE_LWP</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SCOPE_THREAD</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SCHED_OTHER</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SCHED_FIFO</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SCHED_RR</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THR_PRI_FIFO_DEF</name>
      <anchor>a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THR_PRI_OTHER_DEF</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DONT_INCLUDE_ACE_SIGNAL_H</name>
      <anchor>a103</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IOV_MAX</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_IOV_MAX</name>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OSTREAM_TYPE</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOG_STREAM</name>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ONE_SECOND_IN_MSECS</name>
      <anchor>a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ONE_SECOND_IN_USECS</name>
      <anchor>a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ONE_SECOND_IN_NSECS</name>
      <anchor>a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STREAMBUF_SIZE</name>
      <anchor>a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAX_DEFAULT_PORT</name>
      <anchor>a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PLATFORM_A</name>
      <anchor>a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PLATFORM_EXE_SUFFIX_A</name>
      <anchor>a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SVC_CONF</name>
      <anchor>a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STDIN</name>
      <anchor>a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STDOUT</name>
      <anchor>a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STDERR</name>
      <anchor>a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SEM_KEY</name>
      <anchor>a119</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INVALID_SEM_KEY</name>
      <anchor>a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SEH_TRY</name>
      <anchor>a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SEH_EXCEPT</name>
      <anchor>a122</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SEH_FINALLY</name>
      <anchor>a123</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEV_NULL</name>
      <anchor>a124</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DIRECTORY_SEPARATOR_STR_A</name>
      <anchor>a125</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DIRECTORY_SEPARATOR_CHAR_A</name>
      <anchor>a126</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LD_SEARCH_PATH</name>
      <anchor>a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LD_SEARCH_PATH_SEPARATOR_STR</name>
      <anchor>a128</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DLL_SUFFIX</name>
      <anchor>a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DLL_PREFIX</name>
      <anchor>a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NFDBITS</name>
      <anchor>a131</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_PRIVATE</name>
      <anchor>a132</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_SHARED</name>
      <anchor>a133</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_FIXED</name>
      <anchor>a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RUSAGE_SELF</name>
      <anchor>a135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROT_READ</name>
      <anchor>a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROT_WRITE</name>
      <anchor>a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROT_RDWR</name>
      <anchor>a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETIME</name>
      <anchor>a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EWOULDBLOCK</name>
      <anchor>a140</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EINPROGRESS</name>
      <anchor>a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EALREADY</name>
      <anchor>a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENOTSOCK</name>
      <anchor>a143</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EDESTADDRREQ</name>
      <anchor>a144</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EMSGSIZE</name>
      <anchor>a145</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPROTOTYPE</name>
      <anchor>a146</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENOPROTOOPT</name>
      <anchor>a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPROTONOSUPPORT</name>
      <anchor>a148</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ESOCKTNOSUPPORT</name>
      <anchor>a149</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOPNOTSUPP</name>
      <anchor>a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPFNOSUPPORT</name>
      <anchor>a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EAFNOSUPPORT</name>
      <anchor>a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EADDRINUSE</name>
      <anchor>a153</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EADDRNOTAVAIL</name>
      <anchor>a154</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENETDOWN</name>
      <anchor>a155</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENETUNREACH</name>
      <anchor>a156</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENETRESET</name>
      <anchor>a157</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECONNABORTED</name>
      <anchor>a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECONNRESET</name>
      <anchor>a159</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENOBUFS</name>
      <anchor>a160</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EISCONN</name>
      <anchor>a161</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENOTCONN</name>
      <anchor>a162</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ESHUTDOWN</name>
      <anchor>a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETOOMANYREFS</name>
      <anchor>a164</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETIMEDOUT</name>
      <anchor>a165</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECONNREFUSED</name>
      <anchor>a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ELOOP</name>
      <anchor>a167</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EHOSTDOWN</name>
      <anchor>a168</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EHOSTUNREACH</name>
      <anchor>a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPROCLIM</name>
      <anchor>a170</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EUSERS</name>
      <anchor>a171</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EDQUOT</name>
      <anchor>a172</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ESTALE</name>
      <anchor>a173</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EREMOTE</name>
      <anchor>a174</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INVALID_PID</name>
      <anchor>a175</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYSCALL_FAILED</name>
      <anchor>a176</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MS_ASYNC</name>
      <anchor>a177</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MS_INVALIDATE</name>
      <anchor>a178</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>O_NDELAY</name>
      <anchor>a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXPATHLEN</name>
      <anchor>a180</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXNAMLEN</name>
      <anchor>a181</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EADDRINUSE</name>
      <anchor>a182</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SELF</name>
      <anchor>a183</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SHLIB_INVALID_HANDLE</name>
      <anchor>a184</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SHLIB_MODE</name>
      <anchor>a185</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DIRECTORY_SEPARATOR_STR_W</name>
      <anchor>a186</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DIRECTORY_SEPARATOR_CHAR_W</name>
      <anchor>a187</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PLATFORM_W</name>
      <anchor>a188</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PLATFORM_EXE_SUFFIX_W</name>
      <anchor>a189</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DIRECTORY_SEPARATOR_STR</name>
      <anchor>a190</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DIRECTORY_SEPARATOR_CHAR</name>
      <anchor>a191</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PLATFORM</name>
      <anchor>a192</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PLATFORM_EXE_SUFFIX</name>
      <anchor>a193</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOCALNAME_A</name>
      <anchor>a194</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_GLOBALNAME_A</name>
      <anchor>a195</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOCALNAME_W</name>
      <anchor>a196</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_GLOBALNAME_W</name>
      <anchor>a197</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_LOCALNAME</name>
      <anchor>a198</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_GLOBALNAME</name>
      <anchor>a199</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>O_BINARY</name>
      <anchor>a200</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_O_BINARY</name>
      <anchor>a201</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>O_TEXT</name>
      <anchor>a202</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_O_TEXT</name>
      <anchor>a203</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>O_RAW</name>
      <anchor>a204</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_O_RAW</name>
      <anchor>a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_SYNCH_TYPE</name>
      <anchor>a206</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAP_PRIVATE</name>
      <anchor>a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAP_SHARED</name>
      <anchor>a208</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAP_FIXED</name>
      <anchor>a209</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AF_ANY</name>
      <anchor>a210</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AF_SPIPE</name>
      <anchor>a211</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AF_FILE</name>
      <anchor>a212</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AF_DEV</name>
      <anchor>a213</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AF_UPIPE</name>
      <anchor>a214</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXNAMELEN</name>
      <anchor>a215</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXHOSTNAMELEN</name>
      <anchor>a216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INADDR_LOOPBACK</name>
      <anchor>a217</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INADDR_NONE</name>
      <anchor>a218</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INET_ADDRSTRLEN</name>
      <anchor>a219</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INET6_ADDRSTRLEN</name>
      <anchor>a220</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ADDRESS_FAMILY_INET</name>
      <anchor>a221</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PROTOCOL_FAMILY_INET</name>
      <anchor>a222</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGHUP</name>
      <anchor>a223</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGINT</name>
      <anchor>a224</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGSEGV</name>
      <anchor>a225</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGIO</name>
      <anchor>a226</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGUSR1</name>
      <anchor>a227</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGUSR2</name>
      <anchor>a228</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGCHLD</name>
      <anchor>a229</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGCLD</name>
      <anchor>a230</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGQUIT</name>
      <anchor>a231</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGPIPE</name>
      <anchor>a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGALRM</name>
      <anchor>a233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIG_DFL</name>
      <anchor>a234</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIG_IGN</name>
      <anchor>a235</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIG_ERR</name>
      <anchor>a236</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>O_NONBLOCK</name>
      <anchor>a237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIG_BLOCK</name>
      <anchor>a238</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIG_UNBLOCK</name>
      <anchor>a239</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIG_SETMASK</name>
      <anchor>a240</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPC_CREAT</name>
      <anchor>a241</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPC_NOWAIT</name>
      <anchor>a242</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPC_RMID</name>
      <anchor>a243</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPC_EXCL</name>
      <anchor>a244</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DROP_MEMBERSHIP</name>
      <anchor>a245</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_ADD_MEMBERSHIP</name>
      <anchor>a246</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LACKS_IP_ADD_MEMBERSHIP</name>
      <anchor>a247</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DEFAULT_MULTICAST_TTL</name>
      <anchor>a248</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DEFAULT_MULTICAST_LOOP</name>
      <anchor>a249</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MULTICAST_IF</name>
      <anchor>a250</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MULTICAST_TTL</name>
      <anchor>a251</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAX_MEMBERSHIPS</name>
      <anchor>a252</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIOCGIFBRDADDR</name>
      <anchor>a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIOCGIFADDR</name>
      <anchor>a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPC_PRIVATE</name>
      <anchor>a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPC_STAT</name>
      <anchor>a256</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETVAL</name>
      <anchor>a257</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F_GETFL</name>
      <anchor>a258</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETVAL</name>
      <anchor>a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETALL</name>
      <anchor>a260</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETALL</name>
      <anchor>a261</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEM_UNDO</name>
      <anchor>a262</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NSIG</name>
      <anchor>a263</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>R_OK</name>
      <anchor>a264</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>W_OK</name>
      <anchor>a265</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>X_OK</name>
      <anchor>a266</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F_OK</name>
      <anchor>a267</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ESUCCESS</name>
      <anchor>a268</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EIDRM</name>
      <anchor>a269</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENFILE</name>
      <anchor>a270</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECOMM</name>
      <anchor>a271</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WNOHANG</name>
      <anchor>a272</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EDEADLK</name>
      <anchor>a273</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MS_SYNC</name>
      <anchor>a274</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIPE_BUF</name>
      <anchor>a275</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NONBLOCK</name>
      <anchor>a276</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIGIO</name>
      <anchor>a277</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIGURG</name>
      <anchor>a278</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CLOEXEC</name>
      <anchor>a279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOCALNAME</name>
      <anchor>a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOTENAME</name>
      <anchor>a281</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EBUSY</name>
      <anchor>a282</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_SC_TIMER_MAX</name>
      <anchor>a283</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_TIMERS</name>
      <anchor>a284</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HOSTENT_DATA_SIZE</name>
      <anchor>a285</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SERVENT_DATA_SIZE</name>
      <anchor>a286</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PROTOENT_DATA_SIZE</name>
      <anchor>a287</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAXLOGMSGLEN</name>
      <anchor>a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAXTOKENNAMELEN</name>
      <anchor>a289</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAXCLIENTIDLEN</name>
      <anchor>a290</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_FAILED</name>
      <anchor>a291</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SA_SIGINFO</name>
      <anchor>a292</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SA_RESTART</name>
      <anchor>a293</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MSB_MASK</name>
      <anchor>a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_IPPROTO_TCP</name>
      <anchor>a295</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SHUTDOWN_READ</name>
      <anchor>a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SHUTDOWN_WRITE</name>
      <anchor>a297</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SHUTDOWN_BOTH</name>
      <anchor>a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_KEY_INDEX</name>
      <anchor>a300</anchor>
      <arglist>(OBJ, KEY)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ALLOCATOR_RETURN</name>
      <anchor>a301</anchor>
      <arglist>(POINTER, ALLOCATOR, RET_VAL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ALLOCATOR</name>
      <anchor>a302</anchor>
      <arglist>(POINTER, ALLOCATOR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NEW_MALLOC_RETURN</name>
      <anchor>a303</anchor>
      <arglist>(POINTER, ALLOCATOR, CONSTRUCTOR, RET_VAL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NEW_MALLOC</name>
      <anchor>a304</anchor>
      <arglist>(POINTER, ALLOCATOR, CONSTRUCTOR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NOOP</name>
      <anchor>a305</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_NOFREE</name>
      <anchor>a306</anchor>
      <arglist>(POINTER, CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_ARRAY_NOFREE</name>
      <anchor>a307</anchor>
      <arglist>(POINTER, SIZE, CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_FREE</name>
      <anchor>a308</anchor>
      <arglist>(POINTER, DEALLOCATOR, CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_ARRAY_FREE</name>
      <anchor>a309</anchor>
      <arglist>(POINTER, SIZE, DEALLOCATOR, CLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_NOFREE_TEMPLATE</name>
      <anchor>a310</anchor>
      <arglist>(POINTER, T_CLASS, T_PARAMETER)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_ARRAY_NOFREE_TEMPLATE</name>
      <anchor>a311</anchor>
      <arglist>(POINTER, SIZE, T_CLASS, T_PARAMETER)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_FREE_TEMPLATE</name>
      <anchor>a312</anchor>
      <arglist>(POINTER, DEALLOCATOR, T_CLASS, T_PARAMETER)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_ARRAY_FREE_TEMPLATE</name>
      <anchor>a313</anchor>
      <arglist>(POINTER, SIZE, DEALLOCATOR, T_CLASS, T_PARAMETER)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_FREE_TEMPLATE2</name>
      <anchor>a314</anchor>
      <arglist>(POINTER, DEALLOCATOR, T_CLASS, T_PARAM1, T_PARAM2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_FREE_TEMPLATE3</name>
      <anchor>a315</anchor>
      <arglist>(POINTER, DEALLOCATOR, T_CLASS, T_PARAM1, T_PARAM2, T_PARAM3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_FREE_TEMPLATE4</name>
      <anchor>a316</anchor>
      <arglist>(POINTER, DEALLOCATOR, T_CLASS, T_PARAM1, T_PARAM2, T_PARAM3, T_PARAM4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DES_ARRAY_FREE_TEMPLATE2</name>
      <anchor>a317</anchor>
      <arglist>(POINTER, SIZE, DEALLOCATOR, T_CLASS, T_PARAM1, T_PARAM2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PTHREAD_CLEANUP_PUSH</name>
      <anchor>a318</anchor>
      <arglist>(A)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PTHREAD_CLEANUP_POP</name>
      <anchor>a319</anchor>
      <arglist>(A)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MUTEX_A</name>
      <anchor>a320</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MUTEX_W</name>
      <anchor>a321</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_MUTEX</name>
      <anchor>a322</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAIN</name>
      <anchor>a323</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INFINITE</name>
      <anchor>a324</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATUS_TIMEOUT</name>
      <anchor>a325</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WAIT_FAILED</name>
      <anchor>a326</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_WAIT_TIMEOUT</name>
      <anchor>a327</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SWAP_LONG</name>
      <anchor>a328</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SWAP_WORD</name>
      <anchor>a329</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HTONL</name>
      <anchor>a330</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NTOHL</name>
      <anchor>a331</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_IDL_NCTOHL</name>
      <anchor>a332</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_IDL_NSTOHL</name>
      <anchor>a333</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HTONS</name>
      <anchor>a334</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NTOHS</name>
      <anchor>a335</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_RTSIG_MAX</name>
      <anchor>a336</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WIFEXITED</name>
      <anchor>a337</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WEXITSTATUS</name>
      <anchor>a338</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WIFSIGNALED</name>
      <anchor>a339</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WTERMSIG</name>
      <anchor>a340</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WIFSTOPPED</name>
      <anchor>a341</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WSTOPSIG</name>
      <anchor>a342</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WIFCONTINUED</name>
      <anchor>a343</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WCOREDUMP</name>
      <anchor>a344</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CDR_BYTE_ORDER</name>
      <anchor>a345</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_CDR_MEMCPY_TRADEOFF</name>
      <anchor>a349</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIGRTMIN</name>
      <anchor>a352</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIGRTMAX</name>
      <anchor>a353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>clockid_t</name>
      <anchor>a355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ACE_Service_Object_Exterminator</name>
      <anchor>a356</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>const struct iovec</type>
      <name>ACE_WRITEV_TYPE</name>
      <anchor>a357</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iovec</type>
      <name>ACE_READV_TYPE</name>
      <anchor>a358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const struct rlimit</type>
      <name>ACE_SETRLIMIT_TYPE</name>
      <anchor>a359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const struct msghdr</type>
      <name>ACE_SENDMSG_TYPE</name>
      <anchor>a363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int</type>
      <name>ACE_RANDR_TYPE</name>
      <anchor>a364</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>sig_atomic_t</name>
      <anchor>a365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ssize_t</name>
      <anchor>a366</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OVERLAPPED</type>
      <name>ACE_OVERLAPPED</name>
      <anchor>a367</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DWORD</type>
      <name>ACE_thread_t</name>
      <anchor>a368</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>pid_t</name>
      <anchor>a369</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HANDLE</type>
      <name>ACE_hthread_t</name>
      <anchor>a370</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DWORD</type>
      <name>ACE_thread_key_t</name>
      <anchor>a371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned __int64</type>
      <name>ACE_QWORD</name>
      <anchor>a372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned __int64</type>
      <name>ACE_hrtime_t</name>
      <anchor>a373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DWORD</type>
      <name>nlink_t</name>
      <anchor>a374</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_short</type>
      <name>mode_t</name>
      <anchor>a375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>uid_t</name>
      <anchor>a376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>gid_t</name>
      <anchor>a377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char *</type>
      <name>caddr_t</name>
      <anchor>a378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DWORD</type>
      <name>ACE_exitcode</name>
      <anchor>a379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ACE_idtype_t</name>
      <anchor>a380</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DWORD</type>
      <name>ACE_id_t</name>
      <anchor>a381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ACE_pri_t</name>
      <anchor>a382</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HINSTANCE</type>
      <name>ACE_SHLIB_HANDLE</name>
      <anchor>a383</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>utsname</type>
      <name>ACE_utsname</name>
      <anchor>a384</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fd_set</type>
      <name>ACE_FD_SET_TYPE</name>
      <anchor>a385</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>ACE_HOSTENT_DATA</name>
      <anchor>a386</anchor>
      <arglist>[ACE_HOSTENT_DATA_SIZE]</arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>ACE_SERVENT_DATA</name>
      <anchor>a387</anchor>
      <arglist>[ACE_SERVENT_DATA_SIZE]</arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>ACE_PROTOENT_DATA</name>
      <anchor>a388</anchor>
      <arglist>[ACE_PROTOENT_DATA_SIZE]</arglist>
    </member>
    <member kind="typedef">
      <type>const char **</type>
      <name>SYS_SIGLIST</name>
      <anchor>a389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_THR_FUNC</type>
      <name>ACE_THR_FUNC_INTERNAL</name>
      <anchor>a390</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ACE_THR_C_DEST</name>
      <anchor>a391</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ACE_THR_DEST</name>
      <anchor>a392</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>const ACE_TCHAR *</type>
      <name>ACE_DL_TYPE</name>
      <anchor>a393</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ACE_SIGNAL_C_FUNC</name>
      <anchor>a394</anchor>
      <arglist>)(int, siginfo_t *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ucontext_t</name>
      <anchor>a395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ACE_Sig_Handler_Ex</name>
      <anchor>a396</anchor>
      <arglist>)(int, siginfo_t *siginfo, ucontext_t *ucontext)</arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ACE_Sched_Priority</name>
      <anchor>a397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ACE_CLEANUP_FUNC</name>
      <anchor>a398</anchor>
      <arglist>)(void *object, void *param)</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ACE_timer_t</name>
      <anchor>a399</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ACE_Rusage</name>
      <anchor>a400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_stat</type>
      <name>ACE_stat</name>
      <anchor>a401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>ACE_COMPARE_FUNC</name>
      <anchor>a402</anchor>
      <arglist>)(const void *, const void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ACE_OVERLAPPED_COMPLETION_FUNC</name>
      <anchor>a403</anchor>
      <arglist>)(u_long error, u_long bytes_transferred, ACE_OVERLAPPED *overlapped, u_long flags)</arglist>
    </member>
    <member kind="typedef">
      <type>u_long</type>
      <name>ACE_SOCK_GROUP</name>
      <anchor>a404</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TRANSMIT_FILE_BUFFERS</type>
      <name>ACE_TRANSMIT_FILE_BUFFERS</name>
      <anchor>a405</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LPTRANSMIT_FILE_BUFFERS</type>
      <name>ACE_LPTRANSMIT_FILE_BUFFERS</name>
      <anchor>a406</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PTRANSMIT_FILE_BUFFERS</type>
      <name>ACE_PTRANSMIT_FILE_BUFFERS</name>
      <anchor>a407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ACE_OS_Export ACE_Time_Value</type>
      <name>operator+</name>
      <anchor>a408</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OS_Export ACE_Time_Value</type>
      <name>operator-</name>
      <anchor>a409</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>void</name>
      <anchor>a410</anchor>
      <arglist>(__cdecl *ACE_SignalHandler)(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_QWORD</type>
      <name>ACE_MAKE_QWORD</name>
      <anchor>a411</anchor>
      <arglist>(DWORD lo, DWORD hi)</arglist>
    </member>
    <member kind="function">
      <type>DWORD</type>
      <name>ACE_LOW_DWORD</name>
      <anchor>a412</anchor>
      <arglist>(ACE_QWORD q)</arglist>
    </member>
    <member kind="function">
      <type>DWORD</type>
      <name>ACE_HIGH_DWORD</name>
      <anchor>a413</anchor>
      <arglist>(ACE_QWORD q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ACE_SEH_Default_Exception_Selector</name>
      <anchor>a414</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ACE_SEH_Default_Exception_Handler</name>
      <anchor>a415</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OS_Export void</type>
      <name>ace_cleanup_destroyer</name>
      <anchor>a416</anchor>
      <arglist>(ACE_Cleanup *, void *param=0)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>ace_timezone</name>
      <anchor>a417</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ace_difftime</name>
      <anchor>a418</anchor>
      <arglist>(time_t t1, time_t t0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_OS_Object_Manager_Internal_Exit_Hook</name>
      <anchor>a419</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>timespec</type>
      <name>timespec_t</name>
      <anchor>a354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_UINT32</type>
      <name>ACE_U_ONE_SECOND_IN_MSECS</name>
      <anchor>a360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_UINT32</type>
      <name>ACE_U_ONE_SECOND_IN_USECS</name>
      <anchor>a361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_UINT32</type>
      <name>ACE_U_ONE_SECOND_IN_NSECS</name>
      <anchor>a362</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INLINE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>strerror</name>
      <anchor>a1</anchor>
      <arglist>(err)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ADAPT_RETVAL</name>
      <anchor>a2</anchor>
      <arglist>(OP, RESULT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SOCKCALL_RETURN</name>
      <anchor>a3</anchor>
      <arglist>(OP, TYPE, FAILVALUE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___ACE_TIMEOUT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ACE_SOCKET_LEN</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const struct strbuf *</type>
      <name>ACE_STRBUF_TYPE</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const char *</type>
      <name>ACE_SOCKOPT_TYPE1</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char *</type>
      <name>ACE_MMAP_TYPE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const struct timespec *</type>
      <name>ACE_TIMESPEC_PTR</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_Time_Value</type>
      <name>operator *</name>
      <anchor>a10</anchor>
      <arglist>(double d, const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_Time_Value</type>
      <name>operator *</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, double d)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE int</type>
      <name>operator&gt;</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE int</type>
      <name>operator&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE int</type>
      <name>operator&lt;</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE int</type>
      <name>operator&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE int</type>
      <name>operator==</name>
      <anchor>a16</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE int</type>
      <name>operator!=</name>
      <anchor>a17</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_Time_Value</type>
      <name>operator+</name>
      <anchor>a18</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_Time_Value</type>
      <name>operator-</name>
      <anchor>a19</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isastream</name>
      <anchor>a20</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getrusage</name>
      <anchor>a21</anchor>
      <arglist>(int who, struct rusage *rusage)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Dirent.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Dirent_8cpp.html</filename>
    <member kind="typedef">
      <type>int(*</type>
      <name>ACE_SCANDIR_COMPARATOR</name>
      <anchor>a1</anchor>
      <arglist>)(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS_Dirent</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS_Dirent</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Dirent.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Dirent_8h.html</filename>
    <class kind="class">ACE_OS_Dirent</class>
    <class kind="struct">dirent</class>
    <member kind="typedef">
      <type>int</type>
      <name>ACE_DIR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Dirent.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Dirent_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>OS_Errno.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Errno_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS_Errno</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS_Errno</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Errno.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Errno_8h.html</filename>
    <class kind="class">ACE_Errno_Guard</class>
    <member kind="define">
      <type>#define</type>
      <name>ENOSYS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENOTSUP</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ERRNO_TYPE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Errno.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Errno_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>OS_Export.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Export_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_EXPORT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_HAS_DLL</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_Export</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_SINGLETON_DECLARATION</name>
      <anchor>a3</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OS_SINGLETON_DECLARE</name>
      <anchor>a4</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Log_Msg_Attributes.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Log__Msg__Attributes_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS_Log_Msg_Attributes</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS_Log_Msg_Attributes</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Log_Msg_Attributes.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Log__Msg__Attributes_8h.html</filename>
    <class kind="class">ACE_OS_Log_Msg_Attributes</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OSTREAM_TYPE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Log_Msg_Attributes.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Log__Msg__Attributes_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>OS_Memory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Memory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS_Memory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS_Memory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Memory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Memory_8h.html</filename>
    <class kind="class">ACE_OS_Memory</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_ALIGN</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HAS_POSITION_INDEPENDENT_POINTERS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MALLOC_FUNC</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_CALLOC_FUNC</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FREE_FUNC</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REALLOC_FUNC</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>ACE_MALLOC_T</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Memory.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Memory_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>OS_QoS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__QoS_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>OS_QoS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__QoS_8h.html</filename>
    <class kind="class">ACE_Accept_QoS_Params</class>
    <class kind="class">ACE_Flow_Spec</class>
    <class kind="class">ACE_QoS</class>
    <class kind="class">ACE_QoS_Params</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_OVERLAPPED_SOCKET_FLAG</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_XP1_QOS_SUPPORTED</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_XP1_SUPPORT_MULTIPOINT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BASEERR</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ENOBUFS</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FROM_PROTOCOL_INFO</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FLAG_MULTIPOINT_C_ROOT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FLAG_MULTIPOINT_C_LEAF</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FLAG_MULTIPOINT_D_ROOT</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FLAG_MULTIPOINT_D_LEAF</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_QOS_NOT_SPECIFIED</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SERVICETYPE_NOTRAFFIC</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SERVICETYPE_CONTROLLEDLOAD</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SERVICETYPE_GUARANTEED</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_JL_SENDER_ONLY</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_JL_BOTH</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIO_GET_QOS</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIO_MULTIPOINT_LOOPBACK</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIO_MULTICAST_SCOPE</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SIO_SET_QOS</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_long</type>
      <name>ACE_SERVICE_TYPE</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>ACE_QOS_CONDITION_FUNC</name>
      <anchor>a21</anchor>
      <arglist>)(iovec *caller_id, iovec *caller_data, ACE_QoS *socket_qos, ACE_QoS *group_socket_qos, iovec *callee_id, iovec *callee_data, ACE_SOCK_GROUP *g, u_long callbackdata)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_String.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__String_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS_String</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS_String</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_String.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__String_8h.html</filename>
    <class kind="class">ACE_OS_String</class>
  </compound>
  <compound kind="file">
    <name>OS_String.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__String_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>OS_Thread_Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Thread__Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS_Thread_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS_Thread_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_Thread_Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Thread__Adapter_8h.html</filename>
    <class kind="class">ACE_OS_Thread_Adapter</class>
  </compound>
  <compound kind="file">
    <name>OS_Thread_Adapter.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__Thread__Adapter_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>OS_TLI.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__TLI_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_OS_TLI</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_OS_TLI</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_TLI.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__TLI_8h.html</filename>
    <class kind="class">ACE_OS_TLI</class>
    <member kind="function">
      <type>int</type>
      <name>t_accept</name>
      <anchor>a0</anchor>
      <arglist>(int fildes, int resfd, struct t_call *call)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>t_alloc</name>
      <anchor>a1</anchor>
      <arglist>(int fildes, int struct_type, int fields)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_bind</name>
      <anchor>a2</anchor>
      <arglist>(int fildes, struct t_bind *req, struct t_bind *ret)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_close</name>
      <anchor>a3</anchor>
      <arglist>(int fildes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_connect</name>
      <anchor>a4</anchor>
      <arglist>(int fildes, struct t_call *sndcall, struct t_call *rcvcall)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>t_error</name>
      <anchor>a5</anchor>
      <arglist>(const char *errmsg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_free</name>
      <anchor>a6</anchor>
      <arglist>(char *ptr, int struct_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_getinfo</name>
      <anchor>a7</anchor>
      <arglist>(int fildes, struct t_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_getname</name>
      <anchor>a8</anchor>
      <arglist>(int fildes, struct netbuf *namep, int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_getstate</name>
      <anchor>a9</anchor>
      <arglist>(int fildes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_listen</name>
      <anchor>a10</anchor>
      <arglist>(int fildes, struct t_call *call)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_look</name>
      <anchor>a11</anchor>
      <arglist>(int fildes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_open</name>
      <anchor>a12</anchor>
      <arglist>(char *path, int oflag, struct t_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_optmgmt</name>
      <anchor>a13</anchor>
      <arglist>(int fildes, struct t_optmgmt *req, struct t_optmgmt *ret)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_rcv</name>
      <anchor>a14</anchor>
      <arglist>(int fildes, char *buf, unsigned int nbytes, int *flags)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_rcvconnect</name>
      <anchor>a15</anchor>
      <arglist>(int fildes, struct t_call *call)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_rcvdis</name>
      <anchor>a16</anchor>
      <arglist>(int fildes, struct t_discon *discon)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_rcvrel</name>
      <anchor>a17</anchor>
      <arglist>(int fildes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_rcvudata</name>
      <anchor>a18</anchor>
      <arglist>(int fildes, struct t_unitdata *unitdata, int *flags)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_rcvuderr</name>
      <anchor>a19</anchor>
      <arglist>(int fildes, struct t_uderr *uderr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_snd</name>
      <anchor>a20</anchor>
      <arglist>(int fildes, const char *buf, unsigned int nbytes, int flags)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_snddis</name>
      <anchor>a21</anchor>
      <arglist>(int fildes, struct t_call *call)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_sndrel</name>
      <anchor>a22</anchor>
      <arglist>(int fildes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_sndudata</name>
      <anchor>a23</anchor>
      <arglist>(int fildes, struct t_unitdata *unitdata)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_sync</name>
      <anchor>a24</anchor>
      <arglist>(int fildes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_unbind</name>
      <anchor>a25</anchor>
      <arglist>(int fildes)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OS_TLI.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>OS__TLI_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Pair.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pair_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Pair</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Pair</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pair.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pair_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Pair_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pair__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Pair_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Pair_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pair_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pair__T_8h.html</filename>
    <class kind="class">ACE_Pair</class>
    <class kind="class">ACE_Reference_Pair</class>
  </compound>
  <compound kind="file">
    <name>Pair_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pair__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Parse_Node.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Parse__Node_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Parse_Node</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Stream_Node) void ACE_Stream_Node</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Parse_Node</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parse_Node.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Parse__Node_8h.html</filename>
    <class kind="class">ACE_Dummy_Node</class>
    <class kind="class">ACE_Dynamic_Node</class>
    <class kind="class">ACE_Function_Node</class>
    <class kind="class">ACE_Location_Node</class>
    <class kind="class">ACE_Object_Node</class>
    <class kind="class">ACE_Parse_Node</class>
    <class kind="class">ACE_Remove_Node</class>
    <class kind="class">ACE_Resume_Node</class>
    <class kind="class">ACE_Static_Function_Node</class>
    <class kind="class">ACE_Static_Node</class>
    <class kind="class">ACE_Stream_Node</class>
    <class kind="class">ACE_Suspend_Node</class>
    <member kind="variable">
      <type>int</type>
      <name>ace_yyerrno</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Service_Config *</type>
      <name>ace_this_svc</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parse_Node.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Parse__Node_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>PI_Malloc.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>PI__Malloc_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PI_MALLOC_CPP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_PI_Malloc</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_PI_Malloc</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PI_Malloc.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>PI__Malloc_8h.html</filename>
    <class kind="class">ACE_PI_Control_Block</class>
    <class kind="class">ACE_PI_Control_Block::ACE_Malloc_Header</class>
    <class kind="class">ACE_PI_Control_Block::ACE_Name_Node</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PI_MALLOC_PADDING_SIZE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PI_CONTROL_BLOCK_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PI_CONTROL_BLOCK_ALIGN_LONGS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PI_Malloc.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>PI__Malloc_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Pipe.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pipe_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Pipe</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Pipe</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pipe.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pipe_8h.html</filename>
    <class kind="class">ACE_Pipe</class>
  </compound>
  <compound kind="file">
    <name>Pipe.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Pipe_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>POSIX_Asynch_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>POSIX__Asynch__IO_8cpp.html</filename>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Transmit_Handler</class>
    <class kind="class">ACE_POSIX_Asynch_Accept_Handler</class>
    <class kind="class">ACE_POSIX_Asynch_Transmit_Handler</class>
  </compound>
  <compound kind="file">
    <name>POSIX_Asynch_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>POSIX__Asynch__IO_8h.html</filename>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Operation</class>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Read_Dgram</class>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Read_File</class>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Read_Stream</class>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Transmit_File</class>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Write_Dgram</class>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Write_File</class>
    <class kind="class">ACE_POSIX_AIOCB_Asynch_Write_Stream</class>
    <class kind="class">ACE_POSIX_Asynch_Accept</class>
    <class kind="class">ACE_POSIX_Asynch_Accept_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Operation</class>
    <class kind="class">ACE_POSIX_Asynch_Read_Dgram_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Read_File_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Read_Stream_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Transmit_File_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Write_Dgram_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Write_File_Result</class>
    <class kind="class">ACE_POSIX_Asynch_Write_Stream_Result</class>
  </compound>
  <compound kind="file">
    <name>POSIX_Asynch_IO.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>POSIX__Asynch__IO_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>POSIX_Proactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>POSIX__Proactor_8cpp.html</filename>
    <class kind="class">ACE_AIOCB_Notify_Pipe_Manager</class>
    <class kind="class">ACE_POSIX_Wakeup_Completion</class>
    <member kind="function">
      <type>void</type>
      <name>sig_handler</name>
      <anchor>a0</anchor>
      <arglist>(int sig_num, siginfo_t *, ucontext_t *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>POSIX_Proactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>POSIX__Proactor_8h.html</filename>
    <class kind="class">ACE_POSIX_AIOCB_Proactor</class>
    <class kind="class">ACE_POSIX_Asynch_Timer</class>
    <class kind="class">ACE_POSIX_Proactor</class>
    <class kind="class">ACE_POSIX_SIG_Proactor</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_AIO_MAX_SIZE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_AIO_DEFAULT_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>POSIX_Proactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>POSIX__Proactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>post.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>post_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>pre.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>pre_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Priority_Reactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Priority__Reactor_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>npriorities</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue_Iterator&lt; ACE_Event_Tuple &gt;</type>
      <name>QUEUE_ITERATOR</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cached_Allocator&lt; ACE_Node&lt; ACE_Event_Tuple &gt;, ACE_SYNCH_NULL_MUTEX &gt;</type>
      <name>TUPLE_ALLOCATOR</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Priority_Reactor</name>
      <anchor>a4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Priority_Reactor)#define npriorities void ACE_Priority_Reactor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Priority_Reactor</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Priority_Reactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Priority__Reactor_8h.html</filename>
    <class kind="class">ACE_Priority_Reactor</class>
  </compound>
  <compound kind="file">
    <name>Proactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Proactor_8cpp.html</filename>
    <class kind="class">ACE_Proactor_Timer_Handler</class>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Proactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Proactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Proactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Proactor_8h.html</filename>
    <class kind="class">ACE_Proactor</class>
    <class kind="class">ACE_Proactor_Handle_Timeout_Upcall</class>
  </compound>
  <compound kind="file">
    <name>Proactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Proactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Proactor_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Proactor__Impl_8h.html</filename>
    <class kind="class">ACE_Proactor_Impl</class>
  </compound>
  <compound kind="file">
    <name>Process.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Process</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Process</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Process.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process_8h.html</filename>
    <class kind="class">ACE_Managed_Process</class>
    <class kind="class">ACE_Process</class>
    <class kind="class">ACE_Process_Options</class>
  </compound>
  <compound kind="file">
    <name>Process.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Process_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Process_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Process_Manager) ACE_Process_Manager *ACE_Process_Manager</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Process_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Process_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Manager_8h.html</filename>
    <class kind="class">ACE_Process_Descriptor</class>
    <class kind="class">ACE_Process_Manager</class>
  </compound>
  <compound kind="file">
    <name>Process_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Process_Mutex.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Mutex_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Process_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Process_Mutex) void ACE_Process_Mutex</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Process_Mutex</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Process_Mutex.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Mutex_8h.html</filename>
    <class kind="class">ACE_Process_Mutex</class>
  </compound>
  <compound kind="file">
    <name>Process_Mutex.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Mutex_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Process_Semaphore.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Semaphore_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Process_Semaphore</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Process_Semaphore</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Process_Semaphore.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Semaphore_8h.html</filename>
    <class kind="class">ACE_Process_Semaphore</class>
  </compound>
  <compound kind="file">
    <name>Process_Semaphore.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Process__Semaphore_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Profile_Timer.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Profile__Timer_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Profile_Timer</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Profile_Timer) void ACE_Profile_Timer</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Profile_Timer</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Profile_Timer.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Profile__Timer_8h.html</filename>
    <class kind="class">ACE_Profile_Timer</class>
    <class kind="class">ACE_Profile_Timer::ACE_Elapsed_Time</class>
  </compound>
  <compound kind="file">
    <name>Profile_Timer.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Profile__Timer_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>QtReactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>QtReactor_8cpp.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a0</anchor>
      <arglist>(ACE_QtReactor) ACE_QtReactor</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QtReactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>QtReactor_8h.html</filename>
    <class kind="class">ACE_QtReactor</class>
  </compound>
  <compound kind="file">
    <name>QtReactor_moc.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>QtReactor__moc_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>Q_MOC_OUTPUT_REVISION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RB_Tree.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>RB__Tree_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_RB_Tree</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_RB_Tree_Iterator_Base) template&lt; class EXT_ID, class INT_ID, class COMPARE_KEYS, class ACE_LOCK &gt; ACE_RB_Tree_Iterator_Base&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_RB_Tree</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RB_Tree.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>RB__Tree_8h.html</filename>
    <class kind="class">ACE_RB_Tree</class>
    <class kind="class">ACE_RB_Tree_Base</class>
    <class kind="class">ACE_RB_Tree_Iterator</class>
    <class kind="class">ACE_RB_Tree_Iterator_Base</class>
    <class kind="class">ACE_RB_Tree_Node</class>
    <class kind="class">ACE_RB_Tree_Node_Base</class>
    <class kind="class">ACE_RB_Tree_Reverse_Iterator</class>
  </compound>
  <compound kind="file">
    <name>RB_Tree.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>RB__Tree_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Reactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Reactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Reactor) ACE_Reactor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Reactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Reactor_8h.html</filename>
    <class kind="class">ACE_Reactor</class>
  </compound>
  <compound kind="file">
    <name>Reactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Reactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Reactor_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Reactor__Impl_8h.html</filename>
    <class kind="class">ACE_Reactor_Impl</class>
    <class kind="class">ACE_Reactor_Notify</class>
  </compound>
  <compound kind="file">
    <name>Reactor_Notification_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Reactor__Notification__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Reactor_Notification_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Reactor_Notification_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reactor_Notification_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Reactor__Notification__Strategy_8h.html</filename>
    <class kind="class">ACE_Reactor_Notification_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Reactor_Notification_Strategy.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Reactor__Notification__Strategy_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Read_Buffer.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Read__Buffer_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Read_Buffer</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Read_Buffer</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Read_Buffer.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Read__Buffer_8h.html</filename>
    <class kind="class">ACE_Read_Buffer</class>
  </compound>
  <compound kind="file">
    <name>Read_Buffer.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Read__Buffer_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Recyclable.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Recyclable_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Recyclable</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Recyclable</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Recyclable.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Recyclable_8h.html</filename>
    <class kind="class">ACE_Recyclable</class>
    <member kind="enumeration">
      <name>ACE_Recyclable_State</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_RECYCLABLE_IDLE_AND_PURGABLE</name>
      <anchor>a6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_RECYCLABLE_IDLE_BUT_NOT_PURGABLE</name>
      <anchor>a6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_RECYCLABLE_PURGABLE_BUT_NOT_IDLE</name>
      <anchor>a6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_RECYCLABLE_BUSY</name>
      <anchor>a6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_RECYCLABLE_CLOSED</name>
      <anchor>a6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_RECYCLABLE_UNKNOWN</name>
      <anchor>a6a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Recyclable.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Recyclable_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Refcountable.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Refcountable_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Refcountable</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Refcountable</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Refcountable.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Refcountable_8h.html</filename>
    <class kind="class">ACE_Refcountable</class>
  </compound>
  <compound kind="file">
    <name>Refcountable.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Refcountable_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Refcounted_Auto_Ptr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Refcounted__Auto__Ptr_8h.html</filename>
    <class kind="class">ACE_Refcounted_Auto_Ptr</class>
    <class kind="class">ACE_Refcounted_Auto_Ptr_Rep</class>
  </compound>
  <compound kind="file">
    <name>Refcounted_Auto_Ptr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Refcounted__Auto__Ptr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Registry.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Registry_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REGISTRY_CALL_RETURN</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Registry</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Registry</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Registry.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Registry_8h.html</filename>
    <class kind="class">ACE_Predefined_Naming_Contexts</class>
    <class kind="class">ACE_Registry</class>
    <class kind="struct">ACE_Registry::Binding</class>
    <class kind="class">ACE_Registry::Binding_Iterator</class>
    <class kind="class">ACE_Registry::Binding_Iterator::Context_Iteration</class>
    <class kind="class">ACE_Registry::Binding_Iterator::Iteration_Complete</class>
    <class kind="class">ACE_Registry::Binding_Iterator::Iteration_State</class>
    <class kind="class">ACE_Registry::Binding_Iterator::Object_Iteration</class>
    <class kind="struct">ACE_Registry::Name_Component</class>
    <class kind="class">ACE_Registry::Naming_Context</class>
    <class kind="class">ACE_Registry::Object</class>
  </compound>
  <compound kind="file">
    <name>Registry_Name_Space.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Registry__Name__Space_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Registry_Name_Space</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Registry_Name_Space</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Registry_Name_Space.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Registry__Name__Space_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Remote_Name_Space.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Remote__Name__Space_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Remote_Name_Space</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Remote_Name_Space</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Remote_Name_Space.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Remote__Name__Space_8h.html</filename>
    <class kind="class">ACE_Remote_Name_Space</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; ACE_NS_WString &gt;</type>
      <name>ACE_WSTRING_SET</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Remote_Tokens.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Remote__Tokens_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Remote_Tokens.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Remote__Tokens_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Remote_Tokens.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Remote__Tokens_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>run_test.txt</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/docs/</path>
    <filename>run__test_8txt.html</filename>
  </compound>
  <compound kind="file">
    <name>RW_Process_Mutex.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>RW__Process__Mutex_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_RW_Process_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_RW_Process_Mutex) const ACE_TCHAR *ACE_RW_Process_Mutex</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_RW_Process_Mutex</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RW_Process_Mutex.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>RW__Process__Mutex_8h.html</filename>
    <class kind="class">ACE_RW_Process_Mutex</class>
  </compound>
  <compound kind="file">
    <name>RW_Process_Mutex.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>RW__Process__Mutex_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Sample_History.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sample__History_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Sample_History</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Sample_History</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sample_History.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sample__History_8h.html</filename>
    <class kind="class">ACE_Sample_History</class>
  </compound>
  <compound kind="file">
    <name>Sample_History.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sample__History_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Sched_Params.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sched__Params_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Sched_Params</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Sched_Params</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sched_Params.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sched__Params_8h.html</filename>
    <class kind="class">ACE_Sched_Params</class>
    <class kind="class">ACE_Sched_Priority_Iterator</class>
  </compound>
  <compound kind="file">
    <name>Sched_Params.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sched__Params_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Select_Reactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Select_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Select_Reactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Select_Reactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor_8h.html</filename>
    <class kind="class">ACE_Guard&lt; ACE_Select_Reactor_Token_T&lt; ACE_Noop_Token &gt; &gt;</class>
    <member kind="typedef">
      <type>ACE_Select_Reactor_Token_T&lt; ACE_Noop_Token &gt;</type>
      <name>ACE_Select_Reactor_Token</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Select_Reactor_T&lt; ACE_Select_Reactor_Token &gt;</type>
      <name>ACE_Select_Reactor</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Select_Reactor_Base.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor__Base_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SELECT_REACTOR_HANDLE</name>
      <anchor>a0</anchor>
      <arglist>(H)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SELECT_REACTOR_EVENT_HANDLER</name>
      <anchor>a1</anchor>
      <arglist>(THIS, H)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Select_Reactor_Base</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Select_Reactor_Handler_Repository_Iterator) ACE_Select_Reactor_Notify</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Select_Reactor_Base</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Select_Reactor_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor__Base_8h.html</filename>
    <class kind="class">ACE_Event_Tuple</class>
    <class kind="class">ACE_Select_Reactor_Handle_Set</class>
    <class kind="class">ACE_Select_Reactor_Handler_Repository</class>
    <class kind="class">ACE_Select_Reactor_Handler_Repository_Iterator</class>
    <class kind="class">ACE_Select_Reactor_Impl</class>
    <class kind="class">ACE_Select_Reactor_Notify</class>
    <member kind="typedef">
      <type>void(ACE_Handle_Set::*</type>
      <name>ACE_FDS_PTMF</name>
      <anchor>a0</anchor>
      <arglist>)(ACE_HANDLE)</arglist>
    </member>
    <member kind="typedef">
      <type>int(ACE_Event_Handler::*</type>
      <name>ACE_EH_PTMF</name>
      <anchor>a1</anchor>
      <arglist>)(ACE_HANDLE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Select_Reactor_Base.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor__Base_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Select_Reactor_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SELECT_REACTOR_HANDLE</name>
      <anchor>a0</anchor>
      <arglist>(H)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SELECT_REACTOR_EVENT_HANDLER</name>
      <anchor>a1</anchor>
      <arglist>(THIS, H)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Select_Reactor_T</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Select_Reactor_T)#define ACE_SELECT_REACTOR_HANDLE(H)#define ACE_SELECT_REACTOR_EVENT_HANDLER(THIS, H) template&lt; class ACE_SELECT_REACTOR_TOKEN &gt; int ACE_Select_Reactor_T&lt; ACE_SELECT_REACTOR_TOKEN &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Select_Reactor_T</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Select_Reactor_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor__T_8h.html</filename>
    <class kind="class">ACE_Select_Reactor_T</class>
    <class kind="class">ACE_Select_Reactor_Token_T</class>
  </compound>
  <compound kind="file">
    <name>Select_Reactor_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Select__Reactor__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Config.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Config_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Service_Config</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Service_Config) void ACE_Service_Config</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FACTORY_DEFINE</name>
      <anchor>a3</anchor>
      <arglist>(ACE, ACE_Service_Manager) ACE_Sig_Adapter *ACE_Service_Config</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Service_Config</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Config.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Config_8h.html</filename>
    <class kind="class">ACE_Service_Config</class>
    <class kind="class">ACE_Static_Svc_Descriptor</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Component_Config</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Service_Object *(*</type>
      <name>ACE_SERVICE_ALLOCATOR</name>
      <anchor>a1</anchor>
      <arglist>)(ACE_Service_Object_Exterminator *)</arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; ACE_Static_Svc_Descriptor *&gt;</type>
      <name>ACE_STATIC_SVCS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; ACE_Static_Svc_Descriptor *&gt;</type>
      <name>ACE_STATIC_SVCS_ITERATOR</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue&lt; ACE_TString &gt;</type>
      <name>ACE_SVC_QUEUE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue_Iterator&lt; ACE_TString &gt;</type>
      <name>ACE_SVC_QUEUE_ITERATOR</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Config.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Config_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Service_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Service_Manager) void ACE_Service_Manager</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Service_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Manager_8h.html</filename>
    <class kind="class">ACE_Service_Manager</class>
  </compound>
  <compound kind="file">
    <name>Service_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Object.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Object_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Service_Object</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Service_Object) ACE_ALLOC_HOOK_DEFINE(ACE_Service_Type) void ACE_Service_Type</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Service_Object</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Object.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Object_8h.html</filename>
    <class kind="class">ACE_Service_Object</class>
    <class kind="class">ACE_Service_Object_Ptr</class>
    <class kind="class">ACE_Service_Type</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Component</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Object.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Object_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Repository.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Repository_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Service_Repository</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Service_Repository) ACE_Service_Repository *ACE_Service_Repository</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Service_Repository</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Repository.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Repository_8h.html</filename>
    <class kind="class">ACE_Service_Repository</class>
    <class kind="class">ACE_Service_Repository_Iterator</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Component_Repository</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Repository.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Repository_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Templates.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Templates_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Templates.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Templates_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Types.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Types_8cpp.html</filename>
    <member kind="typedef">
      <type>ACE_Stream&lt; ACE_SYNCH &gt;</type>
      <name>MT_Stream</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Module&lt; ACE_SYNCH &gt;</type>
      <name>MT_Module</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Task&lt; ACE_SYNCH &gt;</type>
      <name>MT_Task</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Service_Types</name>
      <anchor>a4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Service_Type_Impl) void ACE_Service_Type_Impl</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Service_Types</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Types.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Types_8h.html</filename>
    <class kind="class">ACE_Module_Type</class>
    <class kind="class">ACE_Service_Object_Type</class>
    <class kind="class">ACE_Service_Type_Impl</class>
    <class kind="class">ACE_Stream_Type</class>
  </compound>
  <compound kind="file">
    <name>Service_Types.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Service__Types_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Shared_Memory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Shared_Memory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Shared_Memory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shared_Memory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory_8h.html</filename>
    <class kind="class">ACE_Shared_Memory</class>
  </compound>
  <compound kind="file">
    <name>Shared_Memory_MM.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory__MM_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Shared_Memory_MM</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Shared_Memory_MM) void ACE_Shared_Memory_MM</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Shared_Memory_MM</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shared_Memory_MM.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory__MM_8h.html</filename>
    <class kind="class">ACE_Shared_Memory_MM</class>
  </compound>
  <compound kind="file">
    <name>Shared_Memory_MM.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory__MM_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Shared_Memory_SV.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory__SV_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Shared_Memory_SV</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Shared_Memory_SV) void ACE_Shared_Memory_SV</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Shared_Memory_SV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shared_Memory_SV.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory__SV_8h.html</filename>
    <class kind="class">ACE_Shared_Memory_SV</class>
  </compound>
  <compound kind="file">
    <name>Shared_Memory_SV.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Memory__SV_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Shared_Object.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Object_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Shared_Object</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Shared_Object</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shared_Object.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Object_8h.html</filename>
    <class kind="class">ACE_Shared_Object</class>
  </compound>
  <compound kind="file">
    <name>Shared_Object.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Shared__Object_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Signal.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Signal_8cpp.html</filename>
    <class kind="class">ACE_Sig_Handlers_Set</class>
    <member kind="define">
      <type>#define</type>
      <name>ace_signal_handler_dispatcher</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_signal_handlers_dispatcher</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAX_SIGNAL_HANDLERS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Fixed_Set&lt; ACE_Event_Handler *, ACE_MAX_SIGNAL_HANDLERS &gt;</type>
      <name>ACE_SIG_HANDLERS_SET</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Fixed_Set_Iterator&lt; ACE_Event_Handler *, ACE_MAX_SIGNAL_HANDLERS &gt;</type>
      <name>ACE_SIG_HANDLERS_ITERATOR</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Signal</name>
      <anchor>a6</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Sig_Action) void ACE_Sig_Action</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Signal</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Signal.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Signal_8h.html</filename>
    <class kind="class">ACE_Sig_Action</class>
    <class kind="class">ACE_Sig_Adapter</class>
    <class kind="class">ACE_Sig_Guard</class>
    <class kind="class">ACE_Sig_Handler</class>
    <class kind="class">ACE_Sig_Handlers</class>
    <class kind="class">ACE_Sig_Set</class>
    <member kind="typedef">
      <type>sigaction</type>
      <name>ACE_SIGACTION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Signal.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Signal_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Singleton.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Singleton_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Singleton</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Singleton</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Singleton.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Singleton_8h.html</filename>
    <class kind="class">ACE_Singleton</class>
    <class kind="class">ACE_TSS_Singleton</class>
    <class kind="class">ACE_Unmanaged_Singleton</class>
    <class kind="class">ACE_Unmanaged_TSS_Singleton</class>
  </compound>
  <compound kind="file">
    <name>Singleton.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Singleton_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK) void ACE_SOCK</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK_8h.html</filename>
    <class kind="class">ACE_SOCK</class>
  </compound>
  <compound kind="file">
    <name>SOCK.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_Acceptor) ACE_SOCK_Acceptor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Acceptor_8h.html</filename>
    <class kind="class">ACE_SOCK_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>SOCK_Acceptor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Acceptor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_CODgram.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__CODgram_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_CODgram</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_CODgram) void ACE_SOCK_CODgram</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_CODgram</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_CODgram.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__CODgram_8h.html</filename>
    <class kind="class">ACE_SOCK_CODgram</class>
  </compound>
  <compound kind="file">
    <name>SOCK_CODgram.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__CODgram_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Sock_Connect.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sock__Connect_8cpp.html</filename>
    <member kind="enumeration">
      <name>ACE_WINDOWS_VERSION</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WINDOWS_IS_UNKNOWN</name>
      <anchor>a11a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WINDOWS_IS_WIN95</name>
      <anchor>a11a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WINDOWS_IS_WIN98</name>
      <anchor>a11a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WINDOWS_IS_WINME</name>
      <anchor>a11a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WINDOWS_IS_WINNT</name>
      <anchor>a11a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WINDOWS_IS_WIN2K</name>
      <anchor>a11a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Sock_Connect</name>
      <anchor>a7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_reg_subkeys</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR *key, ACE_TCHAR *buffer, DWORD &amp;buf_len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_reg_value</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR *key, const ACE_TCHAR *name, ACE_TCHAR *buffer, DWORD &amp;buf_len, int all_subkeys=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_WINDOWS_VERSION</type>
      <name>get_windows_version</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Sock_Connect</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sock_Connect.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sock__Connect_8h.html</filename>
    <class kind="class">ACE_Sock_Connect</class>
  </compound>
  <compound kind="file">
    <name>Sock_Connect.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Sock__Connect_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_Connector) void ACE_SOCK_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Connector_8h.html</filename>
    <class kind="class">ACE_SOCK_Connector</class>
  </compound>
  <compound kind="file">
    <name>SOCK_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_Dgram) void ACE_SOCK_Dgram</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_Dgram</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram_8h.html</filename>
    <class kind="class">ACE_SOCK_Dgram</class>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram_Bcast.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram__Bcast_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_Dgram_Bcast</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_Dgram_Bcast) ACE_Bcast_Node</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_Dgram_Bcast</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram_Bcast.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram__Bcast_8h.html</filename>
    <class kind="class">ACE_Bcast_Node</class>
    <class kind="class">ACE_SOCK_Dgram_Bcast</class>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram_Bcast.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram__Bcast_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram_Mcast.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram__Mcast_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMR_MULTIADDR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_Dgram_Mcast</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a3</anchor>
      <arglist>(ACE_SOCK_Dgram_Mcast) void ACE_SOCK_Dgram_Mcast</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_Dgram_Mcast</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram_Mcast.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram__Mcast_8h.html</filename>
    <class kind="class">ACE_SOCK_Dgram_Mcast</class>
  </compound>
  <compound kind="file">
    <name>SOCK_Dgram_Mcast.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Dgram__Mcast_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__IO_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_IO</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_IO) void ACE_SOCK_IO</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_IO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__IO_8h.html</filename>
    <class kind="class">ACE_SOCK_IO</class>
  </compound>
  <compound kind="file">
    <name>SOCK_IO.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__IO_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SOCK_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SOCK_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_Stream) void ACE_SOCK_Stream</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SOCK_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOCK_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Stream_8h.html</filename>
    <class kind="class">ACE_SOCK_Stream</class>
  </compound>
  <compound kind="file">
    <name>SOCK_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SOCK__Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SPIPE.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SPIPE</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SPIPE) ACE_SPIPE</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SPIPE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SPIPE.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE_8h.html</filename>
    <class kind="class">ACE_SPIPE</class>
  </compound>
  <compound kind="file">
    <name>SPIPE.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SPIPE_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SPIPE_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SPIPE_Acceptor) void ACE_SPIPE_Acceptor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SPIPE_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SPIPE_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Acceptor_8h.html</filename>
    <class kind="class">ACE_SPIPE_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>SPIPE_Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SPIPE_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SPIPE_Addr) void ACE_SPIPE_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SPIPE_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SPIPE_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Addr_8h.html</filename>
    <class kind="class">ACE_SPIPE_Addr</class>
    <class kind="struct">ACE_SPIPE_Addr::SPIPE_Addr</class>
  </compound>
  <compound kind="file">
    <name>SPIPE_Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SPIPE_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SPIPE_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SPIPE_Connector) ACE_SPIPE_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SPIPE_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SPIPE_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Connector_8h.html</filename>
    <class kind="class">ACE_SPIPE_Connector</class>
  </compound>
  <compound kind="file">
    <name>SPIPE_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SPIPE_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SPIPE_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SPIPE_Stream) void ACE_SPIPE_Stream</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SPIPE_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SPIPE_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Stream_8h.html</filename>
    <class kind="class">ACE_SPIPE_Stream</class>
  </compound>
  <compound kind="file">
    <name>SPIPE_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SPIPE__Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SString.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SString_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SString</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;os, const ACE_CString &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;os, const ACE_WString &amp;ws)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;os, const ACE_SString &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a5</anchor>
      <arglist>(ACE_SString) ACE_NS_WString</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SString</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SString.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SString_8h.html</filename>
    <class kind="class">ACE_Auto_String_Free</class>
    <class kind="class">ACE_NS_WString</class>
    <class kind="class">ACE_SString</class>
    <class kind="class">ACE_Tokenizer</class>
    <class kind="class">ACE_Tokenizer::Delimiter_Entry</class>
    <class kind="class">ACE_Tokenizer::Preserve_Entry</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_GROWSIZE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_WCHAR_T</type>
      <name>ACE_WSTRING_TYPE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_String_Base&lt; char &gt;</type>
      <name>ACE_CString</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_String_Base&lt; ACE_WSTRING_TYPE &gt;</type>
      <name>ACE_WString</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CString</type>
      <name>ACE_TString</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;, const ACE_CString &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;, const ACE_WString &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_INLINE ACE_NS_WString</type>
      <name>operator+</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_NS_WString &amp;, const ACE_NS_WString &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Export ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;, const ACE_SString &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SString.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SString_8i.html</filename>
    <member kind="function">
      <type>ACE_INLINE ACE_NS_WString</type>
      <name>operator+</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_NS_WString &amp;s, const ACE_NS_WString &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stats.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stats_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Stats</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Stats</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stats.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stats_8h.html</filename>
    <class kind="class">ACE_Stats</class>
    <class kind="class">ACE_Stats_Value</class>
    <class kind="class">ACE_Throughput_Stats</class>
  </compound>
  <compound kind="file">
    <name>Stats.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stats_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Strategies_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Strategies__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Strategies_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Strategies_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Strategies_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Strategies__T_8h.html</filename>
    <class kind="class">ACE_Accept_Strategy</class>
    <class kind="class">ACE_Cached_Connect_Strategy</class>
    <class kind="class">ACE_Concurrency_Strategy</class>
    <class kind="class">ACE_Connect_Strategy</class>
    <class kind="class">ACE_Creation_Strategy</class>
    <class kind="class">ACE_DLL_Strategy</class>
    <class kind="class">ACE_NOOP_Concurrency_Strategy</class>
    <class kind="class">ACE_NOOP_Creation_Strategy</class>
    <class kind="class">ACE_Process_Strategy</class>
    <class kind="class">ACE_Reactive_Strategy</class>
    <class kind="class">ACE_Recycling_Strategy</class>
    <class kind="class">ACE_Refcounted_Hash_Recyclable</class>
    <class kind="class">ACE_Schedule_All_Reactive_Strategy</class>
    <class kind="class">ACE_Schedule_All_Threaded_Strategy</class>
    <class kind="class">ACE_Scheduling_Strategy</class>
    <class kind="class">ACE_Singleton_Strategy</class>
    <class kind="class">ACE_Thread_Strategy</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Refcounted_Hash_Recyclable</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Strategies_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Strategies__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Stream) template&lt; ACE_SYNCH_DECL &gt; void ACE_Stream&lt; ACE_SYNCH_USE &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stream_8h.html</filename>
    <class kind="class">ACE_Stream</class>
    <class kind="class">ACE_Stream_Iterator</class>
  </compound>
  <compound kind="file">
    <name>Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Stream_Modules.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stream__Modules_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Stream_Modules</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Stream_Head) template&lt; ACE_SYNCH_DECL &gt; ACE_Stream_Head&lt; ACE_SYNCH_USE &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Stream_Modules</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stream_Modules.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Stream__Modules_8h.html</filename>
    <class kind="class">ACE_Stream_Head</class>
    <class kind="class">ACE_Stream_Tail</class>
    <class kind="class">ACE_Thru_Task</class>
  </compound>
  <compound kind="file">
    <name>streams.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>streams_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>String_Base.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>String__Base_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_String_Base</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_String_Base) template&lt; class CHAR &gt; CHAR ACE_String_Base&lt; CHAR &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_String_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>String_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>String__Base_8h.html</filename>
    <class kind="class">ACE_String_Base</class>
    <member kind="function">
      <type>ACE_INLINE ACE_String_Base&lt; CHAR &gt;</type>
      <name>operator+</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;, const ACE_String_Base&lt; CHAR &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_String_Base&lt; CHAR &gt;</type>
      <name>operator+</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;, const CHAR *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_String_Base&lt; CHAR &gt;</type>
      <name>operator+</name>
      <anchor>a2</anchor>
      <arglist>(const CHAR *, const ACE_String_Base&lt; CHAR &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>String_Base.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>String__Base_8i.html</filename>
    <member kind="function">
      <type>ACE_INLINE ACE_String_Base&lt; CHAR &gt;</type>
      <name>operator+</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s, const ACE_String_Base&lt; CHAR &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_String_Base&lt; CHAR &gt;</type>
      <name>operator+</name>
      <anchor>a1</anchor>
      <arglist>(const CHAR *s, const ACE_String_Base&lt; CHAR &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE ACE_String_Base&lt; CHAR &gt;</type>
      <name>operator+</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s, const CHAR *t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>String_Base_Const.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>String__Base__Const_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>String_Base_Const.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>String__Base__Const_8h.html</filename>
    <class kind="class">ACE_String_Base_Const</class>
  </compound>
  <compound kind="file">
    <name>SUN_Proactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SUN__Proactor_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>SUN_Proactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SUN__Proactor_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>SUN_Proactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SUN__Proactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SV_Message.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Message_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SV_Message</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SV_Message) void ACE_SV_Message</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SV_Message</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SV_Message.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Message_8h.html</filename>
    <class kind="class">ACE_SV_Message</class>
  </compound>
  <compound kind="file">
    <name>SV_Message.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Message_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SV_Message_Queue.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Message__Queue_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SV_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SV_Message_Queue) void ACE_SV_Message_Queue</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SV_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SV_Message_Queue.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Message__Queue_8h.html</filename>
    <class kind="class">ACE_SV_Message_Queue</class>
  </compound>
  <compound kind="file">
    <name>SV_Message_Queue.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Message__Queue_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SV_Semaphore_Complex.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Semaphore__Complex_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SV_Semaphore_Complex</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SV_Semaphore_Complex) void ACE_SV_Semaphore_Complex</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SV_Semaphore_Complex</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SV_Semaphore_Complex.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Semaphore__Complex_8h.html</filename>
    <class kind="class">ACE_SV_Semaphore_Complex</class>
  </compound>
  <compound kind="file">
    <name>SV_Semaphore_Complex.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Semaphore__Complex_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SV_Semaphore_Simple.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Semaphore__Simple_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SV_Semaphore_Simple</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SV_Semaphore_Simple) void ACE_SV_Semaphore_Simple</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SV_Semaphore_Simple</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SV_Semaphore_Simple.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Semaphore__Simple_8h.html</filename>
    <class kind="class">ACE_SV_Semaphore_Simple</class>
  </compound>
  <compound kind="file">
    <name>SV_Semaphore_Simple.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Semaphore__Simple_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>SV_Shared_Memory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Shared__Memory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_SV_Shared_Memory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SV_Shared_Memory) void ACE_SV_Shared_Memory</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_SV_Shared_Memory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SV_Shared_Memory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Shared__Memory_8h.html</filename>
    <class kind="class">ACE_SV_Shared_Memory</class>
  </compound>
  <compound kind="file">
    <name>SV_Shared_Memory.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>SV__Shared__Memory_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Svc_Conf.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Conf_8h.html</filename>
    <class kind="class">ACE_Svc_Conf_Param</class>
    <class kind="union">ACE_YYSTYPE</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_DECL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYPARSE_PARAM</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYLEX_PARAM</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_CONF_PARAM</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_yy_delete_buffer</name>
      <anchor>a9</anchor>
      <arglist>(ace_yy_buffer_state *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_yy_push_buffer</name>
      <anchor>a10</anchor>
      <arglist>(FILE *file, ace_yy_buffer_state *&amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_yy_push_buffer</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_TCHAR *directive, ace_yy_buffer_state *&amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_yy_pop_buffer</name>
      <anchor>a12</anchor>
      <arglist>(ace_yy_buffer_state *buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ace_yyparse</name>
      <anchor>a13</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_yyerror</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_TCHAR *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Service_Type_Impl *</type>
      <name>ace_create_service_type</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_TCHAR *, int, void *, unsigned int, ACE_Service_Object_Exterminator=0)</arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>ace_yyin</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yylineno</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yyerrno</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>ace_yytext</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yyleng</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Svc_Conf_l.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Conf__l_8cpp.html</filename>
    <class kind="struct">ace_yy_buffer_state</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_NO_UNPUT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLEX_SCANNER</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_FLEX_MAJOR_VERSION</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_FLEX_MINOR_VERSION</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yyconst</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a5</anchor>
      <arglist>(proto)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_NULL</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_SC_TO_UI</name>
      <anchor>a7</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_START</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYSTATE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_STATE_EOF</name>
      <anchor>a11</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_NEW_FILE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_END_OF_BUFFER_CHAR</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_BUF_SIZE</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_CONTINUE_SCAN</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_END_OF_FILE</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_LAST_MATCH</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yyless</name>
      <anchor>a18</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_BUFFER_NEW</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_BUFFER_NORMAL</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_BUFFER_EOF_PENDING</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_CURRENT_BUFFER</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_FLUSH_BUFFER</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yy_new_buffer</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yy_set_interactive</name>
      <anchor>a25</anchor>
      <arglist>(is_interactive)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yy_set_bol</name>
      <anchor>a26</anchor>
      <arglist>(at_bol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_AT_BOL</name>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yytext_ptr</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_DO_BEFORE_ACTION</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_NUM_RULES</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_END_OF_BUFFER</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REJECT</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yymore</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_MORE_ADJ</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_RESTORE_ACE_YY_MORE_OFFSET</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INITIAL</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>token</name>
      <anchor>a37</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARAMETERS</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NORMAL</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_NO_PUSH_STATE</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_NO_POP_STATE</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_NO_TOP_STATE</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_READ_BUF_SIZE</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_CONF_ECHO</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_INPUT</name>
      <anchor>a45</anchor>
      <arglist>(buf, result, max_size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yyterminate</name>
      <anchor>a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_START_STACK_INCR</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_FATAL_ERROR</name>
      <anchor>a48</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_BREAK</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_RULE_SETUP</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YY_EXIT_FAILURE</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yyless</name>
      <anchor>a52</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="typedef">
      <type>ace_yy_buffer_state *</type>
      <name>ACE_YY_BUFFER_STATE</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>ace_yy_size_t</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TCHAR</type>
      <name>ACE_YY_CHAR</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ace_yy_state_type</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void ace_yyrestart</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a82</anchor>
      <arglist>((FILE *input_file))</arglist>
    </member>
    <member kind="function">
      <type>void ace_yy_switch_to_buffer</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a83</anchor>
      <arglist>((ACE_YY_BUFFER_STATE new_buffer))</arglist>
    </member>
    <member kind="function">
      <type>void ace_yy_load_buffer_state</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a84</anchor>
      <arglist>((void))</arglist>
    </member>
    <member kind="function">
      <type>ACE_YY_BUFFER_STATE ace_yy_create_buffer</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a85</anchor>
      <arglist>((FILE *file, int size))</arglist>
    </member>
    <member kind="function">
      <type>void ace_yy_delete_buffer</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a86</anchor>
      <arglist>((ACE_YY_BUFFER_STATE b))</arglist>
    </member>
    <member kind="function">
      <type>void ace_yy_init_buffer</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a87</anchor>
      <arglist>((ACE_YY_BUFFER_STATE b, FILE *file))</arglist>
    </member>
    <member kind="function">
      <type>ACE_YY_BUFFER_STATE ace_yy_scan_buffer</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a88</anchor>
      <arglist>((ACE_TCHAR *base, ace_yy_size_t size))</arglist>
    </member>
    <member kind="function">
      <type>ACE_YY_BUFFER_STATE ace_yy_scan_string</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a89</anchor>
      <arglist>((ace_yyconst ACE_TCHAR *ace_yy_str))</arglist>
    </member>
    <member kind="function">
      <type>ACE_YY_BUFFER_STATE ace_yy_scan_bytes</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a90</anchor>
      <arglist>((ace_yyconst ACE_TCHAR *bytes, int len))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *ace_yy_flex_alloc</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a91</anchor>
      <arglist>((ace_yy_size_t))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *ace_yy_flex_realloc</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a92</anchor>
      <arglist>((void *, ace_yy_size_t))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void ace_yy_flex_free</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a93</anchor>
      <arglist>((void *))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ace_yy_state_type ace_yy_try_NUL_trans</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a94</anchor>
      <arglist>((ace_yy_state_type current_state))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void ace_yy_fatal_error</type>
      <name>ACE_YY_PROTO</name>
      <anchor>a95</anchor>
      <arglist>((ace_yyconst ACE_TCHAR msg[]))</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Svc_Conf_l</name>
      <anchor>a96</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_yy_init_buffer</name>
      <anchor>a97</anchor>
      <arglist>(b, file) ACE_YY_BUFFER_STATE b</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yyleng</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>ace_yyin</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>ace_yyout</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_YY_BUFFER_STATE</type>
      <name>ace_yy_current_buffer</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_TCHAR</type>
      <name>ace_yy_hold_char</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>ace_yy_n_chars</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_TCHAR *</type>
      <name>ace_yy_c_buf_p</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>ace_yy_init</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>ace_yy_start</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>ace_yy_did_buffer_switch_on_eof</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>ace_yytext</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yyconst short int</type>
      <name>ace_yy_accept</name>
      <anchor>a68</anchor>
      <arglist>[107]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yyconst int</type>
      <name>ace_yy_ec</name>
      <anchor>a69</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yyconst int</type>
      <name>ace_yy_meta</name>
      <anchor>a70</anchor>
      <arglist>[45]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yyconst short int</type>
      <name>ace_yy_base</name>
      <anchor>a71</anchor>
      <arglist>[112]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yyconst short int</type>
      <name>ace_yy_def</name>
      <anchor>a72</anchor>
      <arglist>[112]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yyconst short int</type>
      <name>ace_yy_nxt</name>
      <anchor>a73</anchor>
      <arglist>[482]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yyconst short int</type>
      <name>ace_yy_chk</name>
      <anchor>a74</anchor>
      <arglist>[482]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ace_yy_state_type</type>
      <name>ace_yy_last_accepting_state</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_TCHAR *</type>
      <name>ace_yy_last_accepting_cpos</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Svc_Conf_l</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yylineno</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>file</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>len</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Svc_Conf_Lexer_Guard.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Conf__Lexer__Guard_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Svc_Conf_Lexer_Guard</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Svc_Conf_Lexer_Guard</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Svc_Conf_Lexer_Guard.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Conf__Lexer__Guard_8h.html</filename>
    <class kind="class">ACE_Svc_Conf_Lexer_Guard</class>
  </compound>
  <compound kind="file">
    <name>Svc_Conf_Tokens.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Conf__Tokens_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DYNAMIC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATIC</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SUSPEND</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_RESUME</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REMOVE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_USTREAM</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MODULE_T</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STREAM_T</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_OBJ_T</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ACTIVE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INACTIVE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PATHNAME</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_IDENT</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STRING</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Svc_Conf_y.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Conf__y_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYBISON</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DYNAMIC</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STATIC</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SUSPEND</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_RESUME</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_REMOVE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_USTREAM</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MODULE_T</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STREAM_T</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_OBJ_T</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_ACTIVE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_INACTIVE</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_PATHNAME</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_IDENT</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_STRING</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYDEBUG_LEXER_TEXT</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>const</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYFINAL</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYFLAG</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYNTBASE</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYTRANSLATE</name>
      <anchor>a20</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYLAST</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYPURE</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYSTACK_ALLOC</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yyerrok</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ace_yyclearin</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYEMPTY</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYEOF</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYACCEPT</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYABORT</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYERROR</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYFAIL</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYRECOVERING</name>
      <anchor>a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYBACKUP</name>
      <anchor>a33</anchor>
      <arglist>(token, value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYTERROR</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYERRCODE</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYLEX</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYINITDEPTH</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYMAXDEPTH</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYPARSE_PARAM_ARG</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYPARSE_PARAM_DECL</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_YYPOPSTACK</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Svc_Conf_y</name>
      <anchor>a55</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Module_Type *</type>
      <name>ace_get_module</name>
      <anchor>a56</anchor>
      <arglist>(ACE_Static_Node *str_rec, ACE_Static_Node *svc_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Module_Type *</type>
      <name>ace_get_module</name>
      <anchor>a57</anchor>
      <arglist>(ACE_Static_Node *str_rec, const ACE_TCHAR *svc_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>__ace_yy_memcpy</name>
      <anchor>a58</anchor>
      <arglist>(to, from, count) ACE_TCHAR *to</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Svc_Conf_y</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yyerrno</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_TCHAR</type>
      <name>ace_yytranslate</name>
      <anchor>a44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yyr1</name>
      <anchor>a45</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yyr2</name>
      <anchor>a46</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yydefact</name>
      <anchor>a47</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yydefgoto</name>
      <anchor>a48</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yypact</name>
      <anchor>a49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yypgoto</name>
      <anchor>a50</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yytable</name>
      <anchor>a51</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const short</type>
      <name>ace_yycheck</name>
      <anchor>a52</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>from</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>count</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>svc_export.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>svc__export_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_EXPORT_H</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_HAS_DLL</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_Svc_Export</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SVC_SINGLETON_DECLARATION</name>
      <anchor>a3</anchor>
      <arglist>(T)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Svc_Handler.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Handler_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PR_ST_1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PR_ST_2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Svc_Handler</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Svc_Handler</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Svc_Handler.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Svc__Handler_8h.html</filename>
    <class kind="class">ACE_Buffered_Svc_Handler</class>
    <class kind="class">ACE_Svc_Handler</class>
  </compound>
  <compound kind="file">
    <name>Synch.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Synch</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Null_Mutex) ACE_Lock</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ACE_TSS_C_cleanup</name>
      <anchor>a3</anchor>
      <arglist>(void *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Synch</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synch.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch_8h.html</filename>
    <class kind="class">ACE_Adaptive_Lock</class>
    <class kind="class">ACE_Auto_Event</class>
    <class kind="class">ACE_Barrier</class>
    <class kind="class">ACE_Condition_Attributes</class>
    <class kind="class">ACE_Condition_Thread_Mutex</class>
    <class kind="class">ACE_Event</class>
    <class kind="class">ACE_Guard&lt; ACE_Null_Mutex &gt;</class>
    <class kind="class">ACE_Lock</class>
    <class kind="class">ACE_Manual_Event</class>
    <class kind="class">ACE_Mutex</class>
    <class kind="class">ACE_Noop_Token</class>
    <class kind="class">ACE_Null_Barrier</class>
    <class kind="class">ACE_Null_Condition</class>
    <class kind="class">ACE_Null_Mutex</class>
    <class kind="class">ACE_Null_Semaphore</class>
    <class kind="class">ACE_Read_Guard&lt; ACE_Null_Mutex &gt;</class>
    <class kind="class">ACE_Recursive_Thread_Mutex</class>
    <class kind="class">ACE_RW_Mutex</class>
    <class kind="class">ACE_RW_Thread_Mutex</class>
    <class kind="class">ACE_Semaphore</class>
    <class kind="struct">ACE_Sub_Barrier</class>
    <class kind="class">ACE_Thread_Barrier</class>
    <class kind="class">ACE_Thread_Mutex</class>
    <class kind="class">ACE_Thread_Semaphore</class>
    <class kind="class">ACE_TSS_Adapter</class>
    <class kind="class">ACE_Write_Guard&lt; ACE_Null_Mutex &gt;</class>
  </compound>
  <compound kind="file">
    <name>Synch.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Synch_Options.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch__Options_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Synch_Options</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Synch_Options) void ACE_Synch_Options</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Synch_Options</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synch_Options.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch__Options_8h.html</filename>
    <class kind="class">ACE_Synch_Options</class>
  </compound>
  <compound kind="file">
    <name>Synch_Options.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch__Options_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Synch_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Synch_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Condition) template&lt; class MUTEX &gt; void ACE_Condition&lt; MUTEX &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Synch_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synch_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch__T_8h.html</filename>
    <class kind="class">ACE_Acquire_Method</class>
    <class kind="class">ACE_Condition</class>
    <class kind="class">ACE_Guard</class>
    <class kind="class">ACE_Lock_Adapter</class>
    <class kind="class">ACE_Read_Guard</class>
    <class kind="class">ACE_Reverse_Lock</class>
    <class kind="class">ACE_Thread_Condition</class>
    <class kind="class">ACE_TSS</class>
    <class kind="class">ACE_TSS_Type_Adapter</class>
    <class kind="class">ACE_Write_Guard</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TSS_Guard</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TSS_Write_GUARD</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TSS_Read_GUARD</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NULL_SYNCH</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MT_SYNCH</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_MUTEX</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_NULL_MUTEX</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_RECURSIVE_MUTEX</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_RW_MUTEX</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_CONDITION</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_SEMAPHORE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_NULL_SEMAPHORE</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_PROCESS_SEMAPHORE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH_PROCESS_MUTEX</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_SYNCH</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synch_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Synch__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>System_Time.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>System__Time_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_System_Time</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_System_Time</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>System_Time.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>System__Time_8h.html</filename>
    <class kind="class">ACE_System_Time</class>
  </compound>
  <compound kind="file">
    <name>Task.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Task_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Task</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Task</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Task.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Task_8h.html</filename>
    <class kind="class">ACE_Task_Base</class>
    <class kind="class">ACE_Task_Flags</class>
  </compound>
  <compound kind="file">
    <name>Task.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Task_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Task_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Task__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Task_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Task_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Task_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Task__T_8h.html</filename>
    <class kind="class">ACE_Task</class>
  </compound>
  <compound kind="file">
    <name>Task_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Task__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Template_Instantiations.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Template__Instantiations_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Test_and_Set.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Test__and__Set_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Test_and_Set</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Test_and_Set</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Test_and_Set.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Test__and__Set_8h.html</filename>
    <class kind="class">ACE_Test_and_Set</class>
  </compound>
  <compound kind="file">
    <name>Test_and_Set.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Test__and__Set_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Thread.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Thread</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Thread</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread_8h.html</filename>
    <class kind="class">ACE_Thread</class>
  </compound>
  <compound kind="file">
    <name>Thread.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Thread_Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Thread_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Thread_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Adapter_8h.html</filename>
    <class kind="class">ACE_Thread_Adapter</class>
  </compound>
  <compound kind="file">
    <name>Thread_Adapter.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Adapter_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Thread_Control.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Control_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Thread_Control</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Thread_Control</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Control.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Control_8h.html</filename>
    <class kind="class">ACE_Thread_Control</class>
  </compound>
  <compound kind="file">
    <name>Thread_Control.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Control_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Thread_Exit.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Exit_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Thread_Exit</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Thread_Exit</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Exit.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Exit_8h.html</filename>
    <class kind="class">ACE_Thread_Exit</class>
    <class kind="class">ACE_Thread_Exit_Maybe</class>
  </compound>
  <compound kind="file">
    <name>Thread_Hook.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Hook_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Thread_Hook</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Thread_Hook</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Hook.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Hook_8h.html</filename>
    <class kind="class">ACE_Thread_Hook</class>
  </compound>
  <compound kind="file">
    <name>Thread_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Manager_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FIND</name>
      <anchor>a0</anchor>
      <arglist>(OP, INDEX)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_THR_OP</name>
      <anchor>a1</anchor>
      <arglist>(OP, STATE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_EXECUTE_OP</name>
      <anchor>a2</anchor>
      <arglist>(OP, ARG)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Thread_Manager</name>
      <anchor>a4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Thread_Control) ACE_ALLOC_HOOK_DEFINE(ACE_Thread_Manager) ACE_Thread_Manager *ACE_Thread_Manager</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Thread_Manager</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Manager_8h.html</filename>
    <class kind="class">ACE_At_Thread_Exit</class>
    <class kind="class">ACE_At_Thread_Exit_Func</class>
    <class kind="class">ACE_Thread_Descriptor</class>
    <class kind="class">ACE_Thread_Descriptor_Base</class>
    <class kind="class">ACE_Thread_Manager</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THREAD_MANAGER_PREALLOC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THREAD_MANAGER_LWM</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THREAD_MANAGER_INC</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THREAD_MANAGER_HWM</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_DEFAULT_THREAD_MANAGER_LOCK</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Thread__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Time_Request_Reply.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Time__Request__Reply_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Time_Request_Reply</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Time_Request_Reply</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Time_Request_Reply.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Time__Request__Reply_8h.html</filename>
    <class kind="class">ACE_Time_Request</class>
    <class kind="struct">ACE_Time_Request::Transfer</class>
  </compound>
  <compound kind="file">
    <name>Time_Value.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Time__Value_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Timeprobe.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timeprobe_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timeprobe</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timeprobe</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timeprobe.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timeprobe_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMEPROBE_RESET</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMEPROBE</name>
      <anchor>a1</anchor>
      <arglist>(id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMEPROBE_PRINT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMEPROBE_PRINT_ABSOLUTE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMEPROBE_EVENT_DESCRIPTIONS</name>
      <anchor>a4</anchor>
      <arglist>(descriptions, minimum_id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_FUNCTION_TIMEPROBE</name>
      <anchor>a5</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timeprobe.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timeprobe_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Timeprobe_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timeprobe__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timeprobe_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timeprobe_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timeprobe_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timeprobe__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Timer_Hash.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Hash_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMER_HASH_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Hash</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Hash</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Hash.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Hash_8h.html</filename>
    <member kind="typedef">
      <type>ACE_Timer_Hash_Upcall&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Hash_Upcall</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_List_T&lt; ACE_Event_Handler *, ACE_Hash_Upcall, ACE_Null_Mutex &gt;</type>
      <name>ACE_Hash_Timer_List</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Heap_T&lt; ACE_Event_Handler *, ACE_Hash_Upcall, ACE_Null_Mutex &gt;</type>
      <name>ACE_Hash_Timer_Heap</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Hash_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX, ACE_Hash_Timer_List &gt;</type>
      <name>ACE_Timer_Hash</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Hash_Iterator_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX, ACE_Hash_Timer_List &gt;</type>
      <name>ACE_Timer_Hash_Iterator</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Hash_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX, ACE_Hash_Timer_Heap &gt;</type>
      <name>ACE_Timer_Hash_Heap</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Hash_Iterator_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX, ACE_Hash_Timer_Heap &gt;</type>
      <name>ACE_Timer_Hash_Heap_Iterator</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Hash_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Hash__T_8cpp.html</filename>
    <class kind="struct">Hash_Token</class>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Hash_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Hash_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Hash_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Hash__T_8h.html</filename>
    <class kind="class">ACE_Timer_Hash_Iterator_T</class>
    <class kind="class">ACE_Timer_Hash_T</class>
    <class kind="class">ACE_Timer_Hash_Upcall</class>
  </compound>
  <compound kind="file">
    <name>Timer_Heap.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Heap_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMER_HEAP_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Heap</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Heap</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Heap.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Heap_8h.html</filename>
    <member kind="typedef">
      <type>ACE_Timer_Heap_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_Heap</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Heap_Iterator_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_Heap_Iterator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Heap_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Heap__T_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HEAP_PARENT</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_HEAP_LCHILD</name>
      <anchor>a1</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Heap_T</name>
      <anchor>a3</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Heap_T</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Heap_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Heap__T_8h.html</filename>
    <class kind="class">ACE_Timer_Heap_Iterator_T</class>
    <class kind="class">ACE_Timer_Heap_T</class>
  </compound>
  <compound kind="file">
    <name>Timer_List.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__List_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMER_LIST_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_List</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_List</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_List.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__List_8h.html</filename>
    <member kind="typedef">
      <type>ACE_Timer_List_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_List</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_List_Iterator_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_List_Iterator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_List_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__List__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_List_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_List_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_List_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__List__T_8h.html</filename>
    <class kind="class">ACE_Timer_List_Iterator_T</class>
    <class kind="class">ACE_Timer_List_T</class>
  </compound>
  <compound kind="file">
    <name>Timer_Queue.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMER_QUEUE_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Queue</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Queue</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Queue.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue_8h.html</filename>
    <member kind="typedef">
      <type>ACE_Timer_Node_Dispatch_Info_T&lt; ACE_Event_Handler *&gt;</type>
      <name>ACE_Timer_Node_Dispatch_Info</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Node_T&lt; ACE_Event_Handler *&gt;</type>
      <name>ACE_Timer_Node</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_Queue</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Queue_Iterator_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_Queue_Iterator</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Queue_Adapters.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue__Adapters_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Queue_Adapters</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Queue_Adapters</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Queue_Adapters.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue__Adapters_8h.html</filename>
    <class kind="class">ACE_Async_Timer_Queue_Adapter</class>
    <class kind="class">ACE_Thread_Timer_Queue_Adapter</class>
  </compound>
  <compound kind="file">
    <name>Timer_Queue_Adapters.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue__Adapters_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Timer_Queue_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Queue_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Queue_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Queue_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue__T_8h.html</filename>
    <class kind="class">ACE_Event_Handler_Handle_Timeout_Upcall</class>
    <class kind="class">ACE_Timer_Node_Dispatch_Info_T</class>
    <class kind="class">ACE_Timer_Node_T</class>
    <class kind="class">ACE_Timer_Queue_Iterator_T</class>
    <class kind="class">ACE_Timer_Queue_T</class>
  </compound>
  <compound kind="file">
    <name>Timer_Queue_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Queue__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Timer_Wheel.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Wheel_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TIMER_WHEEL_C</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Wheel</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Wheel</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Wheel.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Wheel_8h.html</filename>
    <member kind="typedef">
      <type>ACE_Timer_Wheel_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_Wheel</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Wheel_Iterator_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_SYNCH_RECURSIVE_MUTEX &gt;, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>ACE_Timer_Wheel_Iterator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Wheel_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Wheel__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Timer_Wheel_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Timer_Wheel_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_Wheel_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Timer__Wheel__T_8h.html</filename>
    <class kind="class">ACE_Timer_Wheel_Iterator_T</class>
    <class kind="class">ACE_Timer_Wheel_T</class>
  </compound>
  <compound kind="file">
    <name>TkReactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TkReactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_TkReactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TkReactor) ACE_TkReactor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_TkReactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TkReactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TkReactor_8h.html</filename>
    <class kind="class">ACE_TkReactor</class>
    <class kind="class">ACE_TkReactor_Input_Callback</class>
    <class kind="class">ACE_TkReactorID</class>
  </compound>
  <compound kind="file">
    <name>TLI.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_TLI</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TLI) void ACE_TLI</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_TLI</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TLI.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI_8h.html</filename>
    <class kind="class">ACE_TLI</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TLI_TCP_DEVICE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_XTI_ATM_DEVICE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TLI.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TLI_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Acceptor_8cpp.html</filename>
    <class kind="struct">ACE_TLI_Request</class>
    <class kind="class">ACE_TLI_Request_Queue</class>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_TLI_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TLI_Request_Queue) void ACE_TLI_Request_Queue</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>open_new_endpoint</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE listen_handle, const char dev[], struct t_call *callp, int rwf, ACE_Addr *remote_sap=0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_TLI_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TLI_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Acceptor_8h.html</filename>
    <class kind="class">ACE_TLI_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>TLI_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_TLI_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TLI_Connector) void ACE_TLI_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_TLI_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TLI_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Connector_8h.html</filename>
    <class kind="class">ACE_TLI_Connector</class>
  </compound>
  <compound kind="file">
    <name>TLI_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TLI_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_TLI_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TLI_Stream) void ACE_TLI_Stream</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_TLI_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TLI_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Stream_8h.html</filename>
    <class kind="class">ACE_TLI_Stream</class>
  </compound>
  <compound kind="file">
    <name>TLI_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TLI__Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Token.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Token</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Token) void ACE_Token</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Token</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Token.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token_8h.html</filename>
    <class kind="class">ACE_Token</class>
    <class kind="struct">ACE_Token::ACE_Token_Queue</class>
    <class kind="struct">ACE_Token::ACE_Token_Queue_Entry</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_TOKEN_USES_SEMAPHORE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Token.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Collection.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Collection_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Collection.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Collection_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Collection.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Collection_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Invariants.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Invariants_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Invariants.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Invariants_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Manager_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Manager_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Request_Reply.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Request__Reply_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Request_Reply.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Request__Reply_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Token_Request_Reply.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Token__Request__Reply_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TP_Reactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TP__Reactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_TP_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TP_Reactor) int ACE_TP_Token_Guard</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_TP_Reactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TP_Reactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TP__Reactor_8h.html</filename>
    <class kind="class">ACE_EH_Dispatch_Info</class>
    <class kind="class">ACE_TP_Reactor</class>
    <class kind="class">ACE_TP_Token_Guard</class>
  </compound>
  <compound kind="file">
    <name>TP_Reactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TP__Reactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Trace.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Trace_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_NTRACE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Trace</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Trace) void ACE_Trace</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Trace</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Trace.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Trace_8h.html</filename>
    <class kind="class">ACE_Trace</class>
  </compound>
  <compound kind="file">
    <name>TTY_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TTY__IO_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_TTY_IO</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_TTY_IO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TTY_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>TTY__IO_8h.html</filename>
    <class kind="class">ACE_TTY_IO</class>
    <class kind="struct">ACE_TTY_IO::Serial_Params</class>
  </compound>
  <compound kind="file">
    <name>Typed_SV_Message.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Typed__SV__Message_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Typed_SV_Message</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Typed_SV_Message) template&lt; class T &gt; void ACE_Typed_SV_Message&lt; T &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Typed_SV_Message</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typed_SV_Message.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Typed__SV__Message_8h.html</filename>
    <class kind="class">ACE_Typed_SV_Message</class>
  </compound>
  <compound kind="file">
    <name>Typed_SV_Message.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Typed__SV__Message_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Typed_SV_Message_Queue.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Typed__SV__Message__Queue_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Typed_SV_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Typed_SV_Message_Queue) template&lt; class T &gt; void ACE_Typed_SV_Message_Queue&lt; T &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Typed_SV_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typed_SV_Message_Queue.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Typed__SV__Message__Queue_8h.html</filename>
    <class kind="class">ACE_Typed_SV_Message_Queue</class>
  </compound>
  <compound kind="file">
    <name>Typed_SV_Message_Queue.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Typed__SV__Message__Queue_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Unbounded_Queue.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Unbounded__Queue_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Unbounded_Queue</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Unbounded_Queue) template&lt; class T &gt; ACE_Unbounded_Queue&lt; T &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Unbounded_Queue</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Unbounded_Queue.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Unbounded__Queue_8h.html</filename>
    <class kind="class">ACE_Unbounded_Queue</class>
    <class kind="class">ACE_Unbounded_Queue_Const_Iterator</class>
    <class kind="class">ACE_Unbounded_Queue_Iterator</class>
  </compound>
  <compound kind="file">
    <name>Unbounded_Queue.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Unbounded__Queue_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Unbounded_Set.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Unbounded__Set_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Unbounded_Set</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Unbounded_Set) template&lt; class T &gt; size_t ACE_Unbounded_Set&lt; T &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Unbounded_Set</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Unbounded_Set.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Unbounded__Set_8h.html</filename>
    <class kind="class">ACE_Unbounded_Set</class>
    <class kind="class">ACE_Unbounded_Set_Const_Iterator</class>
    <class kind="class">ACE_Unbounded_Set_Iterator</class>
  </compound>
  <compound kind="file">
    <name>Unbounded_Set.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Unbounded__Set_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>UNIX_Addr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UNIX__Addr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_UNIX_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UNIX_Addr) void ACE_UNIX_Addr</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_UNIX_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UNIX_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UNIX__Addr_8h.html</filename>
    <class kind="class">ACE_UNIX_Addr</class>
  </compound>
  <compound kind="file">
    <name>UNIX_Addr.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UNIX__Addr_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>UPIPE_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_UPIPE_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UPIPE_Acceptor) void ACE_UPIPE_Acceptor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_UPIPE_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UPIPE_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Acceptor_8h.html</filename>
    <class kind="class">ACE_UPIPE_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>UPIPE_Acceptor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Acceptor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>UPIPE_Addr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Addr_8h.html</filename>
    <member kind="typedef">
      <type>ACE_SPIPE_Addr</type>
      <name>ACE_UPIPE_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UPIPE_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_UPIPE_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UPIPE_Connector) void ACE_UPIPE_Connector</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_UPIPE_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UPIPE_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Connector_8h.html</filename>
    <class kind="class">ACE_UPIPE_Connector</class>
  </compound>
  <compound kind="file">
    <name>UPIPE_Connector.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Connector_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>UPIPE_Stream.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Stream_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_UPIPE_Stream</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UPIPE_Stream) ACE_UPIPE_Stream</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_UPIPE_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UPIPE_Stream.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Stream_8h.html</filename>
    <class kind="class">ACE_UPIPE_Stream</class>
    <member kind="typedef">
      <type>ACE_Stream&lt; ACE_SYNCH &gt;</type>
      <name>MT_Stream</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UPIPE_Stream.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>UPIPE__Stream_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Vector_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Vector__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_Vector_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Vector) template&lt; class T, size_t DEFAULT_SIZE &gt; void ACE_Vector&lt; T, DEFAULT_SIZE &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_Vector_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Vector__T_8h.html</filename>
    <class kind="class">ACE_Vector</class>
    <member kind="variable">
      <type>const size_t</type>
      <name>ACE_VECTOR_DEFAULT_SIZE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Vector__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Version.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>Version_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MAJOR_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_MINOR_VERSION</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_BETA_VERSION</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ACE_VERSION</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wchar.txt</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/docs/</path>
    <filename>wchar_8txt.html</filename>
  </compound>
  <compound kind="file">
    <name>WFMO_Reactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>WFMO__Reactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_WFMO_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WSAEventSelect</name>
      <anchor>a2</anchor>
      <arglist>(SOCKET s, WSAEVENT hEventObject, long lNetworkEvents)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WSAEnumNetworkEvents</name>
      <anchor>a3</anchor>
      <arglist>(SOCKET s, WSAEVENT hEventObject, LPWSANETWORKEVENTS lpNetworkEvents)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_WFMO_Reactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WFMO_Reactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>WFMO__Reactor_8h.html</filename>
    <class kind="struct">_WSANETWORKEVENTS</class>
    <class kind="class">ACE_Wakeup_All_Threads_Handler</class>
    <class kind="class">ACE_WFMO_Reactor</class>
    <class kind="class">ACE_WFMO_Reactor_Handler_Repository</class>
    <class kind="class">ACE_WFMO_Reactor_Handler_Repository::Common_Info</class>
    <class kind="class">ACE_WFMO_Reactor_Handler_Repository::Current_Info</class>
    <class kind="class">ACE_WFMO_Reactor_Handler_Repository::Suspended_Info</class>
    <class kind="class">ACE_WFMO_Reactor_Handler_Repository::To_Be_Added_Info</class>
    <class kind="class">ACE_WFMO_Reactor_Notify</class>
    <member kind="define">
      <type>#define</type>
      <name>FD_READ_BIT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_WRITE_BIT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_OOB_BIT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_ACCEPT_BIT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_CONNECT_BIT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_CLOSE_BIT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_QOS_BIT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_GROUP_QOS_BIT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_QOS</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_GROUP_QOS</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_MAX_EVENTS</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FD_ALL_EVENTS</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WSAEVENT</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WSAEventSelect</name>
      <anchor>a15</anchor>
      <arglist>(SOCKET s, WSAEVENT hEventObject, long lNetworkEvents)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WSAEnumNetworkEvents</name>
      <anchor>a16</anchor>
      <arglist>(SOCKET s, WSAEVENT hEventObject, LPWSANETWORKEVENTS lpNetworkEvents)</arglist>
    </member>
    <member kind="variable">
      <type>_WSANETWORKEVENTS</type>
      <name>WSANETWORKEVENTS</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>_WSANETWORKEVENTS *</type>
      <name>LPWSANETWORKEVENTS</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WFMO_Reactor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>WFMO__Reactor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>WIN32_Asynch_IO.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>WIN32__Asynch__IO_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>WIN32_Asynch_IO.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>WIN32__Asynch__IO_8h.html</filename>
    <class kind="class">ACE_WIN32_Asynch_Accept</class>
    <class kind="class">ACE_WIN32_Asynch_Accept_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Operation</class>
    <class kind="class">ACE_WIN32_Asynch_Read_Dgram</class>
    <class kind="class">ACE_WIN32_Asynch_Read_Dgram_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Read_File</class>
    <class kind="class">ACE_WIN32_Asynch_Read_File_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Read_Stream</class>
    <class kind="class">ACE_WIN32_Asynch_Read_Stream_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Transmit_File</class>
    <class kind="class">ACE_WIN32_Asynch_Transmit_File_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Write_Dgram</class>
    <class kind="class">ACE_WIN32_Asynch_Write_Dgram_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Write_File</class>
    <class kind="class">ACE_WIN32_Asynch_Write_File_Result</class>
    <class kind="class">ACE_WIN32_Asynch_Write_Stream</class>
    <class kind="class">ACE_WIN32_Asynch_Write_Stream_Result</class>
  </compound>
  <compound kind="file">
    <name>WIN32_Proactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>WIN32__Proactor_8cpp.html</filename>
    <class kind="class">ACE_WIN32_Wakeup_Completion</class>
  </compound>
  <compound kind="file">
    <name>WIN32_Proactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>WIN32__Proactor_8h.html</filename>
    <class kind="class">ACE_WIN32_Asynch_Timer</class>
    <class kind="class">ACE_WIN32_Proactor</class>
  </compound>
  <compound kind="file">
    <name>XTI_ATM_Mcast.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>XTI__ATM__Mcast_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_XTI_ATM_Mcast</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_XTI_ATM_Mcast</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XTI_ATM_Mcast.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>XTI__ATM__Mcast_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>XTI_ATM_Mcast.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>XTI__ATM__Mcast_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>XtReactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>XtReactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_ace_XtReactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ALLOC_HOOK_DEFINE</name>
      <anchor>a2</anchor>
      <arglist>(ACE_XtReactor) ACE_XtReactor</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_ace_XtReactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XtReactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/ace/</path>
    <filename>XtReactor_8h.html</filename>
    <class kind="class">ACE_XtReactor</class>
    <class kind="class">ACE_XtReactorID</class>
  </compound>
  <compound kind="struct">
    <name>_WSANETWORKEVENTS</name>
    <filename>struct__WSANETWORKEVENTS.html</filename>
    <member kind="variable">
      <type>long</type>
      <name>lNetworkEvents</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iErrorCode</name>
      <anchor>m1</anchor>
      <arglist>[FD_MAX_EVENTS]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE</name>
    <filename>classACE.html</filename>
    <base>ACE_Flag_Manip</base>
    <base>ACE_Handle_Ops</base>
    <base>ACE_Lib_Find</base>
    <base>ACE_Init_ACE</base>
    <base>ACE_Sock_Connect</base>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>major_version</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>minor_version</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>beta_version</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>compiler_name</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>compiler_major_version</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>compiler_minor_version</name>
      <anchor>d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>compiler_beta_version</name>
      <anchor>d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>out_of_handles</name>
      <anchor>d7</anchor>
      <arglist>(int error)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>handle_timed_accept</name>
      <anchor>d37</anchor>
      <arglist>(ACE_HANDLE listener, ACE_Time_Value *timeout, int restart)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>handle_timed_complete</name>
      <anchor>d38</anchor>
      <arglist>(ACE_HANDLE listener, const ACE_Time_Value *timeout, int is_tli=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>set_handle_limit</name>
      <anchor>d39</anchor>
      <arglist>(int new_limit=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>max_handles</name>
      <anchor>d40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>strenvdup</name>
      <anchor>d41</anchor>
      <arglist>(const ACE_TCHAR *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>strend</name>
      <anchor>d42</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strnew</name>
      <anchor>d43</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strndup</name>
      <anchor>d44</anchor>
      <arglist>(const char *str, size_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strnnew</name>
      <anchor>d45</anchor>
      <arglist>(const char *str, size_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const wchar_t *</type>
      <name>strend</name>
      <anchor>d46</anchor>
      <arglist>(const wchar_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strnew</name>
      <anchor>d47</anchor>
      <arglist>(const wchar_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strndup</name>
      <anchor>d48</anchor>
      <arglist>(const wchar_t *str, size_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strnnew</name>
      <anchor>d49</anchor>
      <arglist>(const wchar_t *str, size_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>execname</name>
      <anchor>d50</anchor>
      <arglist>(const ACE_TCHAR *pathname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>basename</name>
      <anchor>d51</anchor>
      <arglist>(const ACE_TCHAR *pathname, ACE_TCHAR delim=ACE_DIRECTORY_SEPARATOR_CHAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>dirname</name>
      <anchor>d52</anchor>
      <arglist>(const ACE_TCHAR *pathname, ACE_TCHAR delim=ACE_DIRECTORY_SEPARATOR_CHAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>timestamp</name>
      <anchor>d53</anchor>
      <arglist>(ACE_TCHAR date_and_time[], int time_len, int return_pointer_to_first_digit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>fork</name>
      <anchor>d54</anchor>
      <arglist>(const ACE_TCHAR *program_name=ACE_LIB_TEXT(&quot;&lt; unknown &gt;&quot;), int avoid_zombies=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>daemonize</name>
      <anchor>d55</anchor>
      <arglist>(const ACE_TCHAR pathname[]=ACE_LIB_TEXT(&quot;/&quot;), int close_all_handles=ACE_DEFAULT_CLOSE_ALL_HANDLES, const ACE_TCHAR program_name[]=ACE_LIB_TEXT(&quot;&lt; unknown &gt;&quot;))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>round_to_pagesize</name>
      <anchor>d56</anchor>
      <arglist>(off_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>round_to_allocation_granularity</name>
      <anchor>d57</anchor>
      <arglist>(off_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>format_hexdump</name>
      <anchor>d58</anchor>
      <arglist>(const char *buffer, int size, ACE_TCHAR *obuf, int obuf_sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>hash_pjw</name>
      <anchor>d59</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>hash_pjw</name>
      <anchor>d60</anchor>
      <arglist>(const char *str, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>hash_pjw</name>
      <anchor>d61</anchor>
      <arglist>(const wchar_t *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>hash_pjw</name>
      <anchor>d62</anchor>
      <arglist>(const wchar_t *str, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>crc32</name>
      <anchor>d63</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>crc32</name>
      <anchor>d64</anchor>
      <arglist>(const char *buf, ACE_UINT32 len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>gcd</name>
      <anchor>d65</anchor>
      <arglist>(u_long x, u_long y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>minimum_frame_size</name>
      <anchor>d66</anchor>
      <arglist>(u_long period1, u_long period2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>is_prime</name>
      <anchor>d67</anchor>
      <arglist>(const u_long n, const u_long min_factor, const u_long max_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>map_errno</name>
      <anchor>d68</anchor>
      <arglist>(int error)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>sock_error</name>
      <anchor>d69</anchor>
      <arglist>(int error)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>process_active</name>
      <anchor>d70</anchor>
      <arglist>(pid_t pid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>terminate_process</name>
      <anchor>d71</anchor>
      <arglist>(pid_t pid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>unique_name</name>
      <anchor>d72</anchor>
      <arglist>(const void *object, ACE_TCHAR *name, size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_long</type>
      <name>log2</name>
      <anchor>d73</anchor>
      <arglist>(u_long num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR</type>
      <name>nibble2hex</name>
      <anchor>d74</anchor>
      <arglist>(u_int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_char</type>
      <name>hex2byte</name>
      <anchor>d75</anchor>
      <arglist>(ACE_TCHAR c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char</type>
      <name>debug</name>
      <anchor>d76</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>debug</name>
      <anchor>d77</anchor>
      <arglist>(char d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>select</name>
      <anchor>d78</anchor>
      <arglist>(int width, ACE_Handle_Set *readfds, ACE_Handle_Set *writefds=0, ACE_Handle_Set *exceptfds=0, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>select</name>
      <anchor>d79</anchor>
      <arglist>(int width, ACE_Handle_Set &amp;readfds, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>handle_read_ready</name>
      <anchor>d80</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>handle_write_ready</name>
      <anchor>d81</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>handle_exception_ready</name>
      <anchor>d82</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>handle_ready</name>
      <anchor>d83</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Time_Value *timeout, int read_ready, int write_ready, int exception_ready)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>enter_recv_timedwait</name>
      <anchor>d84</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Time_Value *timeout, int &amp;val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>enter_send_timedwait</name>
      <anchor>d85</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Time_Value *timeout, int &amp;val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>record_and_set_non_blocking_mode</name>
      <anchor>d86</anchor>
      <arglist>(ACE_HANDLE handle, int &amp;val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>restore_non_blocking_mode</name>
      <anchor>d87</anchor>
      <arglist>(ACE_HANDLE handle, int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>d8</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>t_rcv</name>
      <anchor>d9</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int *flags, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>d10</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recvmsg</name>
      <anchor>d11</anchor>
      <arglist>(ACE_HANDLE handle, struct msghdr *msg, int flags, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recvfrom</name>
      <anchor>d12</anchor>
      <arglist>(ACE_HANDLE handle, char *buf, int len, int flags, struct sockaddr *addr, int *addrlen, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>d13</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>t_rcv_n</name>
      <anchor>d14</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int *flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>d15</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>d16</anchor>
      <arglist>(ACE_HANDLE handle, size_t n,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recvv</name>
      <anchor>d17</anchor>
      <arglist>(ACE_HANDLE handle, iovec *iov, int iovcnt, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recvv_n</name>
      <anchor>d18</anchor>
      <arglist>(ACE_HANDLE handle, iovec *iov, int iovcnt, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>d19</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Message_Block *message_block, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>d20</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>t_snd</name>
      <anchor>d21</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>d22</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>sendmsg</name>
      <anchor>d23</anchor>
      <arglist>(ACE_HANDLE handle, const struct msghdr *msg, int flags, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>sendto</name>
      <anchor>d24</anchor>
      <arglist>(ACE_HANDLE handle, const char *buf, int len, int flags, const struct sockaddr *addr, int addrlen, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>d25</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>t_snd_n</name>
      <anchor>d26</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>d27</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>d28</anchor>
      <arglist>(ACE_HANDLE handle, size_t n,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>sendv</name>
      <anchor>d29</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *iov, int iovcnt, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>sendv_n</name>
      <anchor>d30</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *iov, int iovcnt, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>d31</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Message_Block *message_block, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>read_n</name>
      <anchor>d32</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>write_n</name>
      <anchor>d33</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>write_n</name>
      <anchor>d34</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_Message_Block *message_block, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>readv_n</name>
      <anchor>d35</anchor>
      <arglist>(ACE_HANDLE handle, iovec *iov, int iovcnt, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>writev_n</name>
      <anchor>d36</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *iov, int iovcnt, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_CLASS_IS_NAMESPACE</name>
      <anchor>c0</anchor>
      <arglist>(ACE)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>recv_i</name>
      <anchor>f0</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>recv_n_i</name>
      <anchor>f1</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int flags, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>recv_n_i</name>
      <anchor>f2</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int flags, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>t_rcv_n_i</name>
      <anchor>f3</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int *flags, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>t_rcv_n_i</name>
      <anchor>f4</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, int *flags, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>recv_n_i</name>
      <anchor>f5</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>recv_n_i</name>
      <anchor>f6</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>recvv_n_i</name>
      <anchor>f7</anchor>
      <arglist>(ACE_HANDLE handle, iovec *iov, int iovcnt, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>recvv_n_i</name>
      <anchor>f8</anchor>
      <arglist>(ACE_HANDLE handle, iovec *iov, int iovcnt, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>send_i</name>
      <anchor>f9</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>send_n_i</name>
      <anchor>f10</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>send_n_i</name>
      <anchor>f11</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>t_snd_n_i</name>
      <anchor>f12</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>t_snd_n_i</name>
      <anchor>f13</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, int flags, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>send_n_i</name>
      <anchor>f14</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>send_n_i</name>
      <anchor>f15</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>sendv_n_i</name>
      <anchor>f16</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *iov, int iovcnt, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ssize_t</type>
      <name>sendv_n_i</name>
      <anchor>f17</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *iov, int iovcnt, const ACE_Time_Value *timeout, size_t *bytes_transferred)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>size_t</type>
      <name>pagesize_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>size_t</type>
      <name>allocation_granularity_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>u_long</type>
      <name>crc_table_</name>
      <anchor>r2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const ACE_TCHAR</type>
      <name>hex_chars_</name>
      <anchor>r3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>char</type>
      <name>debug_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Accept_QoS_Params</name>
    <filename>classACE__Accept__QoS__Params.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Accept_QoS_Params</name>
      <anchor>a0</anchor>
      <arglist>(ACE_QOS_CONDITION_FUNC qos_condition_callback=0, u_long callback_data=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_QOS_CONDITION_FUNC</type>
      <name>qos_condition_callback</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qos_condition_callback</name>
      <anchor>a2</anchor>
      <arglist>(ACE_QOS_CONDITION_FUNC qcc)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>callback_data</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callback_data</name>
      <anchor>a4</anchor>
      <arglist>(u_long cd)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_QOS_CONDITION_FUNC</type>
      <name>qos_condition_callback_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>callback_data_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Accept_Strategy</name>
    <filename>classACE__Accept__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Accept_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reactor *reactor=ACE_Reactor::instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Accept_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;local_addr, int restart=0, ACE_Reactor *reactor=ACE_Reactor::instance())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;local_addr, int reuse_addr=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_PEER_ACCEPTOR &amp;</type>
      <name>acceptor</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Accept_Strategy</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>accept_svc_handler</name>
      <anchor>a6</anchor>
      <arglist>(SVC_HANDLER *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_PEER_ACCEPTOR</type>
      <name>peer_acceptor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>reuse_addr_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_PEER_ACCEPTOR_ADDR</type>
      <name>peer_acceptor_addr_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Acceptor</name>
    <filename>classACE__Acceptor.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>ACE_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reactor *=0, int use_select=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;local_addr, ACE_Reactor *=ACE_Reactor::instance(), int flags=0, int use_select=1, int reuse_addr=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;, ACE_Reactor *=ACE_Reactor::instance(), int flags=0, int use_select=1, int reuse_addr=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Acceptor</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator ACE_PEER_ACCEPTOR &amp;</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_PEER_ACCEPTOR &amp;</type>
      <name>acceptor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>b0</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>accept_svc_handler</name>
      <anchor>b1</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>b2</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>b3</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>b4</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>b5</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>b7</anchor>
      <arglist>(ACE_TCHAR **buf, size_t) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_PEER_ACCEPTOR</type>
      <name>peer_acceptor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_PEER_ACCEPTOR_ADDR</type>
      <name>peer_acceptor_addr_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>flags_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>use_select_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>reuse_addr_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Acquire_Method</name>
    <filename>classACE__Acquire__Method.html</filename>
    <member kind="enumeration">
      <name>METHOD_TYPE</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_REGULAR</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_READ</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WRITE</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Activation_Queue</name>
    <filename>classACE__Activation__Queue.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Activation_Queue</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Message_Queue&lt; ACE_SYNCH &gt; *new_queue=0, ACE_Allocator *alloc=0, ACE_Allocator *db_alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Activation_Queue</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Method_Request *</type>
      <name>dequeue</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enqueue</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Method_Request *new_method_request, ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>method_count</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Queue&lt; ACE_SYNCH &gt; *</type>
      <name>queue</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queue</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Queue&lt; ACE_SYNCH &gt; *q)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Queue&lt; ACE_SYNCH &gt; *</type>
      <name>queue_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_queue_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Activation_Queue &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Activation_Queue</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Activation_Queue &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>data_block_allocator_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Active_Map_Manager</name>
    <filename>classACE__Active__Map__Manager.html</filename>
    <templarg>T</templarg>
    <base>ACE_Map_Manager&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</base>
    <member kind="typedef">
      <type>ACE_Active_Map_Manager_Key</type>
      <name>key_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>mapped_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Entry&lt; ACE_Active_Map_Manager_Key, T &gt;</type>
      <name>ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Iterator&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</type>
      <name>ITERATOR</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Reverse_Iterator&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</type>
      <name>REVERSE_ITERATOR</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ENTRY</type>
      <name>entry</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ITERATOR</type>
      <name>iterator</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REVERSE_ITERATOR</type>
      <name>reverse_iterator</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Active_Map_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const T &amp;value, ACE_Active_Map_Manager_Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Active_Map_Manager_Key &amp;key, T *&amp;internal_value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key, const T &amp;value, T &amp;old_value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key, const T &amp;value, ACE_Active_Map_Manager_Key &amp;old_key, T &amp;old_value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key, T &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key, T *&amp;internal_value) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key, T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a16</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;key, T *&amp;internal_value)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_size</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</type>
      <name>begin</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</type>
      <name>end</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</type>
      <name>rbegin</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</type>
      <name>rend</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_Active_Map_Manager_Key</type>
      <name>npos</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Map_Manager&lt; ACE_Active_Map_Manager_Key, T, ACE_Null_Mutex &gt;</type>
      <name>ACE_AMM_BASE</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Active_Map_Manager&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Active_Map_Manager</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Active_Map_Manager&lt; T &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Active_Map_Manager_Adapter</name>
    <filename>classACE__Active__Map__Manager__Adapter.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>KEY_ADAPTER</templarg>
    <base>ACE_Map</base>
    <member kind="typedef">
      <type>ACE_Pair&lt; KEY, VALUE &gt;</type>
      <name>expanded_value</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Active_Map_Manager_Iterator_Adapter&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt;, expanded_value &gt;</type>
      <name>iterator_impl</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Active_Map_Manager_Reverse_Iterator_Adapter&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt;, expanded_value &gt;</type>
      <name>reverse_iterator_impl</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Active_Map_Manager&lt; expanded_value &gt;</type>
      <name>implementation</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Active_Map_Manager_Adapter</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_modify_key</name>
      <anchor>a6</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create_key</name>
      <anchor>a7</anchor>
      <arglist>(KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a8</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a9</anchor>
      <arglist>(const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recover_key</name>
      <anchor>a10</anchor>
      <arglist>(const KEY &amp;modified_key, KEY &amp;original_key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a11</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a12</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a13</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, KEY &amp;old_key, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a14</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a15</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a16</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a17</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a18</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>current_size</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>total_size</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Active_Map_Manager&lt; ACE_Pair&lt; KEY, VALUE &gt; &gt; &amp;</type>
      <name>impl</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>KEY_ADAPTER &amp;</type>
      <name>key_adapter</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>b0</anchor>
      <arglist>(const KEY &amp;key, expanded_value *&amp;internal_value)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>b1</anchor>
      <arglist>(const KEY &amp;key, expanded_value *&amp;internal_value)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>begin_impl</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>end_impl</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rbegin_impl</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rend_impl</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Active_Map_Manager&lt; ACE_Pair&lt; KEY, VALUE &gt; &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>KEY_ADAPTER</type>
      <name>key_adapter_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Active_Map_Manager_Adapter&lt; KEY, VALUE, KEY_ADAPTER &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Active_Map_Manager_Adapter</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Active_Map_Manager_Adapter&lt; KEY, VALUE, KEY_ADAPTER &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Active_Map_Manager_Iterator_Adapter</name>
    <filename>classACE__Active__Map__Manager__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>VALUE</templarg>
    <base>ACE_Iterator_Impl</base>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_Active_Map_Manager&lt; VALUE &gt;::iterator</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Map_Iterator&lt; ACE_Active_Map_Manager_Key, VALUE, ACE_Null_Mutex &gt; &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Active_Map_Manager_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; ACE_Active_Map_Manager_Key, VALUE, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Iterator&lt; ACE_Active_Map_Manager_Key, VALUE, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Active_Map_Manager_Key</name>
    <filename>classACE__Active__Map__Manager__Key.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager_Key</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager_Key</name>
      <anchor>a1</anchor>
      <arglist>(ACE_UINT32 slot_index, ACE_UINT32 slot_generation)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>slot_index</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>slot_index</name>
      <anchor>a3</anchor>
      <arglist>(ACE_UINT32 i)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>slot_generation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>slot_generation</name>
      <anchor>a5</anchor>
      <arglist>(ACE_UINT32 g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decode</name>
      <anchor>a6</anchor>
      <arglist>(const void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encode</name>
      <anchor>a7</anchor>
      <arglist>(void *data) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Active_Map_Manager_Key &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment_slot_generation_count</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>size</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>key_data</type>
      <name>key_data_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Active_Map_Manager_Key::key_data</name>
    <filename>structACE__Active__Map__Manager__Key_1_1key__data.html</filename>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>slot_index_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>slot_generation_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Active_Map_Manager_Reverse_Iterator_Adapter</name>
    <filename>classACE__Active__Map__Manager__Reverse__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>VALUE</templarg>
    <base>ACE_Reverse_Iterator_Impl</base>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_Active_Map_Manager&lt; VALUE &gt;::reverse_iterator</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Active_Map_Manager_Reverse_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Map_Reverse_Iterator&lt; ACE_Active_Map_Manager_Key, VALUE, ACE_Null_Mutex &gt; &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Active_Map_Manager_Reverse_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Reverse_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; ACE_Active_Map_Manager_Key, VALUE, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Reverse_Iterator&lt; ACE_Active_Map_Manager_Key, VALUE, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Adaptive_Lock</name>
    <filename>classACE__Adaptive__Lock.html</filename>
    <base>ACE_Lock</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Adaptive_Lock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire_read</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire_write</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_read</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_write</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Adaptive_Lock</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock *</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Addr</name>
    <filename>classACE__Addr.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Addr</name>
      <anchor>a0</anchor>
      <arglist>(int type=-1, int size=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Addr</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_size</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_size</name>
      <anchor>a3</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_type</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_type</name>
      <anchor>a5</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_addr</name>
      <anchor>a7</anchor>
      <arglist>(void *, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Addr &amp;sap) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Addr &amp;sap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base_set</name>
      <anchor>a10</anchor>
      <arglist>(int type, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_Addr</type>
      <name>sap_any</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>addr_type_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>addr_size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_AIOCB_Notify_Pipe_Manager</name>
    <filename>classACE__AIOCB__Notify__Pipe__Manager.html</filename>
    <base>ACE_Handler</base>
    <member kind="function">
      <type></type>
      <name>ACE_AIOCB_Notify_Pipe_Manager</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_AIOCB_Notify_Pipe_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_read_stream</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Asynch_Read_Stream::Result &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_AIOCB_Notify_Pipe_Manager</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_POSIX_AIOCB_Proactor *</type>
      <name>posix_aiocb_proactor_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block</type>
      <name>message_block_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Pipe</type>
      <name>pipe_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_POSIX_AIOCB_Asynch_Read_Stream</type>
      <name>read_stream_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Allocator</name>
    <filename>classACE__Allocator.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Allocator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Allocator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>malloc</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a3</anchor>
      <arglist>(size_t nbytes, char initial_value=&apos;\0&apos;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a4</anchor>
      <arglist>(size_t n_elem, size_t elem_size, char initial_value=&apos;\0&apos;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free</name>
      <anchor>a5</anchor>
      <arglist>(void *ptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a7</anchor>
      <arglist>(const char *name, void *pointer, int duplicates=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a8</anchor>
      <arglist>(const char *name, void *&amp;pointer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a9</anchor>
      <arglist>(const char *name, void *&amp;pointer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a10</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a11</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a12</anchor>
      <arglist>(const char *name, void *&amp;pointer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a13</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a14</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a15</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a16</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a17</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Allocator *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Allocator *</type>
      <name>instance</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Allocator *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_singleton</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>delete_allocator_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Allocator_Adapter</name>
    <filename>classACE__Allocator__Adapter.html</filename>
    <templarg>MALLOC</templarg>
    <base>ACE_Allocator</base>
    <member kind="typedef">
      <type>MALLOC</type>
      <name>ALLOCATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void *</type>
      <name>MEMORY_POOL_OPTIONS</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Allocator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const char *pool_name=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Allocator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *pool_name, const char *lock_name, MEMORY_POOL_OPTIONS options=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Allocator_Adapter</name>
      <anchor>a2</anchor>
      <arglist>(const wchar_t *pool_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Allocator_Adapter</name>
      <anchor>a3</anchor>
      <arglist>(const wchar_t *pool_name, const wchar_t *lock_name, MEMORY_POOL_OPTIONS options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Allocator_Adapter</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>malloc</name>
      <anchor>a5</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a6</anchor>
      <arglist>(size_t nbytes, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a7</anchor>
      <arglist>(size_t n_elem, size_t elem_size, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free</name>
      <anchor>a8</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a10</anchor>
      <arglist>(const char *name, void *pointer, int duplicates=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a11</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a12</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a13</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a14</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a15</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a16</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a17</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a18</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a19</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function">
      <type>ALLOCATOR &amp;</type>
      <name>alloc</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALLOCATOR</type>
      <name>allocator_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Arg_Shifter</name>
    <filename>classACE__Arg__Shifter.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Arg_Shifter</name>
      <anchor>a0</anchor>
      <arglist>(int &amp;argc, const ACE_TCHAR **argv, const ACE_TCHAR **temp=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Arg_Shifter</name>
      <anchor>a1</anchor>
      <arglist>(int &amp;argc, ACE_TCHAR **argv, ACE_TCHAR **temp=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Arg_Shifter</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>get_current</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>get_the_parameter</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cur_arg_strncasecmp</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>consume_arg</name>
      <anchor>a6</anchor>
      <arglist>(int number=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ignore_arg</name>
      <anchor>a7</anchor>
      <arglist>(int number=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_anything_left</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_option_next</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_parameter_next</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_ignored_args</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int &amp;</type>
      <name>argc_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>total_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR **</type>
      <name>temp_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR **</type>
      <name>argv_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_index_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>back_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>front_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_ARGV</name>
    <filename>classACE__ARGV.html</filename>
    <member kind="enumeration">
      <name>States</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TO_STRING</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TO_PTR_ARRAY</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATIVE</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ARGV</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR buf[], int substitute_env_args=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ARGV</name>
      <anchor>a1</anchor>
      <arglist>(ACE_TCHAR *argv[], int substitute_env_args=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ARGV</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TCHAR *first_argv[], ACE_TCHAR *second_argv[], int substitute_env_args=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ARGV</name>
      <anchor>a3</anchor>
      <arglist>(int substitute_env_args=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_ARGV</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR **</type>
      <name>argv</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>argc</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>buf</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_TCHAR *next_arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchor>a11</anchor>
      <arglist>(ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>state</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_buf_from_queue</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>string_to_argv</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>argv_to_string</name>
      <anchor>c2</anchor>
      <arglist>(ACE_TCHAR **argv, ACE_TCHAR *&amp;buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>substitute_env_args_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>argc_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR **</type>
      <name>argv_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>buf_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>length_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Unbounded_Queue&lt; ACE_TCHAR *&gt;</type>
      <name>queue_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Array</name>
    <filename>classACE__Array.html</filename>
    <templarg>T</templarg>
    <base>ACE_Array_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Array_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Array</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=0, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Array</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, const T &amp;default_value, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Array</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Array&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Array&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Array&lt; T &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Array&lt; T &gt; &amp;s) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Array_Base</name>
    <filename>classACE__Array__Base.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Array_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Array_Base</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=0, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Array_Base</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, const T &amp;default_value, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Array_Base</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Array_Base&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Array_Base&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Array_Base</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(size_t slot)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(size_t slot) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;new_item, size_t slot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchor>a8</anchor>
      <arglist>(T &amp;item, size_t slot) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchor>a10</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_size</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_size</name>
      <anchor>a12</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>in_range</name>
      <anchor>c0</anchor>
      <arglist>(size_t slot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>array_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Array_Iterator&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Array_Iterator</name>
    <filename>classACE__Array__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Array_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Array_Base&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>current_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Array_Base&lt; T &gt; &amp;</type>
      <name>array_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Async_Timer_Queue_Adapter</name>
    <filename>classACE__Async__Timer__Queue__Adapter.html</filename>
    <templarg>TQ</templarg>
    <base>ACE_Event_Handler</base>
    <member kind="typedef">
      <type>TQ</type>
      <name>TIMER_QUEUE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Async_Timer_Queue_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Set *mask=0)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>schedule</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Event_Handler *type, const void *act, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a2</anchor>
      <arglist>(long timer_id, const void **act=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TQ &amp;</type>
      <name>timer_queue</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_ualarm</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>c1</anchor>
      <arglist>(int signum, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sig_Handler</type>
      <name>sig_handler_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TQ</type>
      <name>timer_queue_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sig_Set</type>
      <name>mask_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Accept</name>
    <filename>classACE__Asynch__Accept.html</filename>
    <base>ACE_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Accept</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Accept</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, ACE_HANDLE accept_handle=ACE_INVALID_HANDLE, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Accept_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Accept_Impl *implementation)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Accept_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Accept::Result</name>
    <filename>classACE__Asynch__Accept_1_1Result.html</filename>
    <base>ACE_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>listen_handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>accept_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Accept_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Accept_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Accept_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Accept_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Accept_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Accept_Impl</name>
    <filename>classACE__Asynch__Accept__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Accept_Result_Impl</name>
    <filename>classACE__Asynch__Accept__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Acceptor</name>
    <filename>classACE__Asynch__Acceptor.html</filename>
    <templarg>HANDLER</templarg>
    <base>ACE_Handler</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_INET_Addr &amp;address, size_t bytes_to_read=0, int pass_addresses=0, int backlog=ACE_DEFAULT_BACKLOG, int reuse_addr=1, ACE_Proactor *proactor=0, int validate_new_connection=0, int reissue_accept=1, int number_of_initial_accepts=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_handle</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>accept</name>
      <anchor>a5</anchor>
      <arglist>(size_t bytes_to_read=0, const void *act=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>validate_new_connection</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_INET_Addr &amp;remote_address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>should_reissue_accept</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pass_addresses</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pass_addresses</name>
      <anchor>a10</anchor>
      <arglist>(int new_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>validate_new_connection</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validate_new_connection</name>
      <anchor>a12</anchor>
      <arglist>(int new_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reissue_accept</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reissue_accept</name>
      <anchor>a14</anchor>
      <arglist>(int new_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bytes_to_read</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bytes_to_read</name>
      <anchor>a16</anchor>
      <arglist>(int new_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>address_size</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_accept</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_Asynch_Accept::Result &amp;result)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>b1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>handle</name>
      <anchor>b2</anchor>
      <arglist>(ACE_HANDLE h)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>parse_address</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Asynch_Accept::Result &amp;result, ACE_INET_Addr &amp;remote_address, ACE_INET_Addr &amp;local_address)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Asynch_Accept &amp;</type>
      <name>asynch_accept</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual HANDLER *</type>
      <name>make_handler</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>listen_handle_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Asynch_Accept</type>
      <name>asynch_accept_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pass_addresses_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>validate_new_connection_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reissue_accept_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytes_to_read_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Operation</name>
    <filename>classACE__Asynch__Operation.html</filename>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Operation</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Asynch_Operation</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Asynch_Operation_Impl *</type>
      <name>implementation</name>
      <anchor>b1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b2</anchor>
      <arglist>(ACE_Asynch_Operation_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Proactor *</type>
      <name>get_proactor</name>
      <anchor>b3</anchor>
      <arglist>(ACE_Proactor *user_proactor, ACE_Handler &amp;handler) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Operation_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Operation_Impl</name>
    <filename>classACE__Asynch__Operation__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Dgram</name>
    <filename>classACE__Asynch__Read__Dgram.html</filename>
    <base>ACE_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Read_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Read_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block *message_block, size_t &amp;number_of_bytes_recvd, int flags, int protocol_family=PF_INET, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Read_Dgram_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Read_Dgram_Impl *implementation)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Read_Dgram_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Dgram::Result</name>
    <filename>classACE__Asynch__Read__Dgram_1_1Result.html</filename>
    <base>ACE_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remote_address</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Addr &amp;addr) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Read_Dgram_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Read_Dgram_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Read_Dgram_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Read_Dgram_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Read_Dgram_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Dgram_Impl</name>
    <filename>classACE__Asynch__Read__Dgram__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Dgram_Result_Impl</name>
    <filename>classACE__Asynch__Read__Dgram__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_File</name>
    <filename>classACE__Asynch__Read__File.html</filename>
    <base>ACE_Asynch_Read_Stream</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Read_File</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Read_File</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, u_long offset=0, u_long offset_high=0, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Read_File_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Read_File_Impl *implementation)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Read_File_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_File::Result</name>
    <filename>classACE__Asynch__Read__File_1_1Result.html</filename>
    <base>ACE_Asynch_Read_Stream::Result</base>
    <member kind="function">
      <type>ACE_Asynch_Read_File_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Read_File_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Read_File_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(Result &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Read_File_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Read_File_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_File_Impl</name>
    <filename>classACE__Asynch__Read__File__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_File_Result_Impl</name>
    <filename>classACE__Asynch__Read__File__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Stream</name>
    <filename>classACE__Asynch__Read__Stream.html</filename>
    <base>ACE_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Read_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Read_Stream</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long num_bytes_to_read, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Read_Stream_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Read_Stream_Impl *implementation)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Read_Stream_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Stream::Result</name>
    <filename>classACE__Asynch__Read__Stream_1_1Result.html</filename>
    <base>ACE_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Read_Stream_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Read_Stream_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Read_Stream_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Read_Stream_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Read_Stream_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Stream_Impl</name>
    <filename>classACE__Asynch__Read__Stream__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Read_Stream_Result_Impl</name>
    <filename>classACE__Asynch__Read__Stream__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Result</name>
    <filename>classACE__Asynch__Result.html</filename>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Result</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Asynch_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Asynch_Result_Impl *</type>
      <name>implementation</name>
      <anchor>b1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Result_Impl</name>
    <filename>classACE__Asynch__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Transmit_File</name>
    <filename>classACE__Asynch__Transmit__File.html</filename>
    <base>ACE_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Transmit_File</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Transmit_File</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transmit_file</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE file, Header_And_Trailer *header_and_trailer=0, u_long bytes_to_write=0, u_long offset=0, u_long offset_high=0, u_long bytes_per_send=0, u_long flags=0, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Transmit_File_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Transmit_File_Impl *)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Transmit_File_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Transmit_File::Header_And_Trailer</name>
    <filename>classACE__Asynch__Transmit__File_1_1Header__And__Trailer.html</filename>
    <member kind="function">
      <type></type>
      <name>Header_And_Trailer</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Message_Block *header=0, u_long header_bytes=0, ACE_Message_Block *trailer=0, u_long trailer_bytes=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Header_And_Trailer</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>header_and_trailer</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *header=0, u_long header_bytes=0, ACE_Message_Block *trailer=0, u_long trailer_bytes=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>header</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>header</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *message_block)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>header_bytes</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>header_bytes</name>
      <anchor>a6</anchor>
      <arglist>(u_long bytes)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>trailer</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trailer</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Message_Block *message_block)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>trailer_bytes</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trailer_bytes</name>
      <anchor>a10</anchor>
      <arglist>(u_long bytes)</arglist>
    </member>
    <member kind="function">
      <type>ACE_LPTRANSMIT_FILE_BUFFERS</type>
      <name>transmit_buffers</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>header_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>header_bytes_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>trailer_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>trailer_bytes_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TRANSMIT_FILE_BUFFERS</type>
      <name>transmit_buffers_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Transmit_File::Result</name>
    <filename>classACE__Asynch__Transmit__File_1_1Result.html</filename>
    <base>ACE_Asynch_Result</base>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>socket</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>file</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Header_And_Trailer *</type>
      <name>header_and_trailer</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_per_send</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>flags</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Transmit_File_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Transmit_File_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Transmit_File_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Transmit_File_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Transmit_File_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Transmit_File_Impl</name>
    <filename>classACE__Asynch__Transmit__File__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Transmit_File_Result_Impl</name>
    <filename>classACE__Asynch__Transmit__File__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Dgram</name>
    <filename>classACE__Asynch__Write__Dgram.html</filename>
    <base>ACE_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Write_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Write_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block *message_block, size_t &amp;number_of_bytes_sent, int flags, const ACE_Addr &amp;remote_addr, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Write_Dgram_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Write_Dgram_Impl *implementation)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Write_Dgram_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Dgram::Result</name>
    <filename>classACE__Asynch__Write__Dgram_1_1Result.html</filename>
    <base>ACE_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Write_Dgram_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Write_Dgram_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Write_Dgram_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Write_Dgram_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Write_Dgram_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Dgram_Impl</name>
    <filename>classACE__Asynch__Write__Dgram__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Dgram_Result_Impl</name>
    <filename>classACE__Asynch__Write__Dgram__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_File</name>
    <filename>classACE__Asynch__Write__File.html</filename>
    <base>ACE_Asynch_Write_Stream</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Write_File</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Write_File</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, u_long offset=0, u_long offset_high=0, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Write_File_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Write_File_Impl *implementation)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Write_File_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_File::Result</name>
    <filename>classACE__Asynch__Write__File_1_1Result.html</filename>
    <base>ACE_Asynch_Write_Stream::Result</base>
    <member kind="function">
      <type>ACE_Asynch_Write_File_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Write_File_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Write_File_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(Result &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Write_File_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Write_File_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_File_Impl</name>
    <filename>classACE__Asynch__Write__File__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_File_Result_Impl</name>
    <filename>classACE__Asynch__Write__File__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Stream</name>
    <filename>classACE__Asynch__Write__Stream.html</filename>
    <base>ACE_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_Asynch_Write_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Asynch_Write_Stream</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle=ACE_INVALID_HANDLE, const void *completion_key=0, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act=0, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Write_Stream_Impl *</type>
      <name>implementation</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Write_Stream_Impl *implementation)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Write_Stream_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Stream::Result</name>
    <filename>classACE__Asynch__Write__Stream_1_1Result.html</filename>
    <base>ACE_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Write_Stream_Result_Impl *</type>
      <name>implementation</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Asynch_Write_Stream_Result_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Write_Stream_Result_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Write_Stream_Result</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Write_Stream_Result</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Stream_Impl</name>
    <filename>classACE__Asynch__Write__Stream__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Asynch_Write_Stream_Result_Impl</name>
    <filename>classACE__Asynch__Write__Stream__Result__Impl.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_At_Thread_Exit</name>
    <filename>classACE__At__Thread__Exit.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_At_Thread_Exit</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_At_Thread_Exit</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_owner</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_owner</name>
      <anchor>a3</anchor>
      <arglist>(int owner)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>was_applied</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>was_applied</name>
      <anchor>a5</anchor>
      <arglist>(int applied)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>do_apply</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_At_Thread_Exit *</type>
      <name>next_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Descriptor *</type>
      <name>td_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>was_applied_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>is_owner_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Thread_Descriptor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Thread_Manager</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_At_Thread_Exit_Func</name>
    <filename>classACE__At__Thread__Exit__Func.html</filename>
    <base>ACE_At_Thread_Exit</base>
    <member kind="function">
      <type></type>
      <name>ACE_At_Thread_Exit_Func</name>
      <anchor>a0</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC func, void *param=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_At_Thread_Exit_Func</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>apply</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>object_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_CLEANUP_FUNC</type>
      <name>func_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>param_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_ATM_Addr</name>
    <filename>classACE__ATM__Addr.html</filename>
    <base>ACE_Addr</base>
    <member kind="function">
      <type></type>
      <name>ACE_ATM_Addr</name>
      <anchor>a0</anchor>
      <arglist>(u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ATM_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_ATM_Addr &amp;, u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ATM_Addr</name>
      <anchor>a2</anchor>
      <arglist>(const ATM_Addr *, u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_ATM_Addr</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR sap[], u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_ATM_Addr</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a5</anchor>
      <arglist>(u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_ATM_Addr &amp;, u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a7</anchor>
      <arglist>(const ATM_Addr *, u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR sap[], u_char selector=DEFAULT_SELECTOR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>string_to_addr</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR sap[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a10</anchor>
      <arglist>(ACE_TCHAR addr[], size_t addrlen) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>addr_to_string</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_addr</name>
      <anchor>a13</anchor>
      <arglist>(void *, int)</arglist>
    </member>
    <member kind="function">
      <type>u_char</type>
      <name>get_selector</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_selector</name>
      <anchor>a15</anchor>
      <arglist>(u_char)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a16</anchor>
      <arglist>(const ACE_ATM_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a17</anchor>
      <arglist>(const ACE_ATM_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const long</type>
      <name>LINE_RATE</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const int</type>
      <name>OPT_FLAGS_CPID</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const int</type>
      <name>OPT_FLAGS_PMP</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const int</type>
      <name>DEFAULT_SELECTOR</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ATM_Addr</type>
      <name>atm_addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Atomic_Op</name>
    <filename>classACE__Atomic__Op.html</filename>
    <templarg>ACE_LOCK</templarg>
    <templarg>TYPE</templarg>
    <base>ACE_Atomic_Op_Ex</base>
    <member kind="function">
      <type></type>
      <name>ACE_Atomic_Op</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Atomic_Op</name>
      <anchor>a1</anchor>
      <arglist>(const TYPE &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Atomic_Op</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Atomic_Op&lt; ACE_LOCK, TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TYPE &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Atomic_Op_Ex&lt; ACE_LOCK, TYPE &gt; &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK</type>
      <name>own_mutex_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Atomic_Op_Ex</name>
    <filename>classACE__Atomic__Op__Ex.html</filename>
    <templarg>ACE_LOCK</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Atomic_Op_Ex</name>
      <anchor>a0</anchor>
      <arglist>(ACE_LOCK &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Atomic_Op_Ex</name>
      <anchor>a1</anchor>
      <arglist>(ACE_LOCK &amp;mtx, const TYPE &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>operator++</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>operator+=</name>
      <anchor>a4</anchor>
      <arglist>(const TYPE &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>operator--</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>operator-=</name>
      <anchor>a7</anchor>
      <arglist>(const TYPE &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(const TYPE &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a9</anchor>
      <arglist>(const TYPE &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const TYPE &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchor>a11</anchor>
      <arglist>(const TYPE &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(const TYPE &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchor>a13</anchor>
      <arglist>(const TYPE &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a14</anchor>
      <arglist>(const TYPE &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_Atomic_Op_Ex&lt; ACE_LOCK, TYPE &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>value</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Atomic_Op_Ex</name>
      <anchor>a18</anchor>
      <arglist>(const ACE_Atomic_Op_Ex&lt; ACE_LOCK, TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_LOCK &amp;</type>
      <name>mutex</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>value_i</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK &amp;</type>
      <name>mutex_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>value_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Auto_Array_Ptr</name>
    <filename>classACE__Auto__Array__Ptr.html</filename>
    <templarg>X</templarg>
    <base>ACE_Auto_Basic_Array_Ptr</base>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Auto_Array_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>operator-&gt;</name>
      <anchor>a1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Auto_Basic_Array_Ptr</name>
    <filename>classACE__Auto__Basic__Array__Ptr.html</filename>
    <templarg>X</templarg>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Auto_Basic_Array_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Auto_Basic_Array_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Auto_Basic_Array_Ptr&lt; X &gt; &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Auto_Basic_Array_Ptr&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Auto_Basic_Array_Ptr&lt; X &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Auto_Basic_Array_Ptr</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator *</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>get</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a8</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>X *</type>
      <name>p_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Auto_Basic_Ptr</name>
    <filename>classACE__Auto__Basic__Ptr.html</filename>
    <templarg>X</templarg>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Auto_Basic_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Auto_Basic_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Auto_Basic_Ptr&lt; X &gt; &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Auto_Basic_Ptr&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Auto_Basic_Ptr&lt; X &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Auto_Basic_Ptr</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator *</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>get</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>release</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a7</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>X *</type>
      <name>p_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Auto_Event</name>
    <filename>classACE__Auto__Event.html</filename>
    <base>ACE_Event</base>
    <member kind="function">
      <type></type>
      <name>ACE_Auto_Event</name>
      <anchor>a0</anchor>
      <arglist>(int initial_state=0, int type=USYNC_THREAD, const char *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Auto_Event</name>
      <anchor>a1</anchor>
      <arglist>(int initial_state, int type, const wchar_t *name, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Auto_Event</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Auto_IncDec</name>
    <filename>classACE__Auto__IncDec.html</filename>
    <templarg>ACE_SAFELY_INCREMENTABLE_DECREMENTABLE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Auto_IncDec</name>
      <anchor>a0</anchor>
      <arglist>(ACE_SAFELY_INCREMENTABLE_DECREMENTABLE &amp;counter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Auto_IncDec</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SAFELY_INCREMENTABLE_DECREMENTABLE &amp;</type>
      <name>counter_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Auto_IncDec&lt; ACE_SAFELY_INCREMENTABLE_DECREMENTABLE &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Auto_IncDec</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Auto_IncDec&lt; ACE_SAFELY_INCREMENTABLE_DECREMENTABLE &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Auto_String_Free</name>
    <filename>classACE__Auto__String__Free.html</filename>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Auto_String_Free</name>
      <anchor>a0</anchor>
      <arglist>(char *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Auto_String_Free</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Auto_String_Free &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Auto_String_Free &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Auto_String_Free &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Auto_String_Free</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>operator *</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>get</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a8</anchor>
      <arglist>(char *p=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>p_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Barrier</name>
    <filename>classACE__Barrier.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Barrier</name>
      <anchor>a0</anchor>
      <arglist>(u_int count, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Barrier</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Mutex</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>current_generation_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>count_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Sub_Barrier</type>
      <name>sub_barrier_1_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Sub_Barrier</type>
      <name>sub_barrier_2_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Sub_Barrier *</type>
      <name>sub_barrier_</name>
      <anchor>n5</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Barrier &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Barrier</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Barrier &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Base_Thread_Adapter</name>
    <filename>classACE__Base__Thread__Adapter.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Base_Thread_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_THR_FUNC user_func, void *arg, ACE_THR_C_FUNC entry_point=(ACE_THR_C_FUNC) ace_thread_adapter, ACE_OS_Thread_Descriptor *td=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>invoke</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>ACE_THR_C_FUNC</type>
      <name>entry_point</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_log_msg</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>sync_log_msg</name>
      <anchor>d1</anchor>
      <arglist>(const ACE_TCHAR *prog_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_OS_Thread_Descriptor *</type>
      <name>thr_desc_log_msg</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Base_Thread_Adapter</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>inherit_log_msg</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_THR_FUNC</type>
      <name>user_func_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>arg_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_THR_C_FUNC</type>
      <name>entry_point_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_OS_Thread_Descriptor *</type>
      <name>thr_desc_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_OS_Log_Msg_Attributes</type>
      <name>log_msg_attributes_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>set_log_msg_hooks</name>
      <anchor>f0</anchor>
      <arglist>(ACE_INIT_LOG_MSG_HOOK init_hook, ACE_INHERIT_LOG_MSG_HOOK inherit_hook, ACE_CLOSE_LOG_MSG_HOOK close_hook, ACE_SYNC_LOG_MSG_HOOK sync_hook, ACE_THR_DESC_LOG_MSG_HOOK thr_desc)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_INIT_LOG_MSG_HOOK</type>
      <name>init_log_msg_hook_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_INHERIT_LOG_MSG_HOOK</type>
      <name>inherit_log_msg_hook_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_CLOSE_LOG_MSG_HOOK</type>
      <name>close_log_msg_hook_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_SYNC_LOG_MSG_HOOK</type>
      <name>sync_log_msg_hook_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_THR_DESC_LOG_MSG_HOOK</type>
      <name>thr_desc_log_msg_hook_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Log_Msg</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="public">
      <type>friend class</type>
      <name>ACE_Thread_Adapter_Has_Private_Destructor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Based_Pointer</name>
    <filename>classACE__Based__Pointer.html</filename>
    <templarg>CONCRETE</templarg>
    <base>ACE_Based_Pointer_Basic</base>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer</name>
      <anchor>a1</anchor>
      <arglist>(CONCRETE *initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer</name>
      <anchor>a2</anchor>
      <arglist>(const void *base_addr, int dummy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Based_Pointer&lt; CONCRETE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Based_Pointer&lt; CONCRETE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CONCRETE *from)</arglist>
    </member>
    <member kind="function">
      <type>CONCRETE *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Based_Pointer_Basic</name>
    <filename>classACE__Based__Pointer__Basic.html</filename>
    <templarg>CONCRETE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer_Basic</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer_Basic</name>
      <anchor>a1</anchor>
      <arglist>(CONCRETE *initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer_Basic</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer_Basic</name>
      <anchor>a3</anchor>
      <arglist>(const void *base_addr, int o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CONCRETE *from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CONCRETE</type>
      <name>operator *</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_Based_Pointer_Basic&lt; CONCRETE &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CONCRETE</type>
      <name>operator[]</name>
      <anchor>a13</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchor>a14</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CONCRETE *</name>
      <anchor>a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CONCRETE *</type>
      <name>addr</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>long</type>
      <name>target_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>long</type>
      <name>base_offset_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Based_Pointer_Repository</name>
    <filename>classACE__Based__Pointer__Repository.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Based_Pointer_Repository</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Based_Pointer_Repository</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a2</anchor>
      <arglist>(void *addr, void *&amp;base_addr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a3</anchor>
      <arglist>(void *addr, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a4</anchor>
      <arglist>(void *addr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Based_Pointer_Repository_Rep *</type>
      <name>rep_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Based_Pointer_Repository_Rep</name>
    <filename>classACE__Based__Pointer__Repository__Rep.html</filename>
    <member kind="typedef">
      <type>ACE_Map_Manager&lt; void *, size_t, ACE_Null_Mutex &gt;</type>
      <name>MAP_MANAGER</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Iterator&lt; void *, size_t, ACE_Null_Mutex &gt;</type>
      <name>MAP_ITERATOR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Entry&lt; void *, size_t &gt;</type>
      <name>MAP_ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MAP_MANAGER</type>
      <name>addr_map_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Basic_Stats</name>
    <filename>classACE__Basic__Stats.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Basic_Stats</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>samples_count</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UINT64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Basic_Stats &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_results</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *msg, ACE_UINT32 scale_factor) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>samples_count_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT64</type>
      <name>min_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>min_at_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT64</type>
      <name>max_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>max_at_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT64</type>
      <name>sum_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT64</type>
      <name>sum2_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Bcast_Node</name>
    <filename>classACE__Bcast__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Bcast_Node</name>
      <anchor>a0</anchor>
      <arglist>(ACE_INET_Addr &amp;, ACE_Bcast_Node *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Bcast_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_INET_Addr</type>
      <name>bcast_addr_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Bcast_Node *</type>
      <name>next_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_BoolCapEntry</name>
    <filename>classACE__BoolCapEntry.html</filename>
    <base>ACE_CapEntry</base>
    <member kind="function">
      <type></type>
      <name>ACE_BoolCapEntry</name>
      <anchor>a0</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getval</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>val_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Bound_Ptr_Counter</name>
    <filename>classACE__Bound__Ptr__Counter.html</filename>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Bound_Ptr_Counter</name>
      <anchor>a0</anchor>
      <arglist>(int init_obj_ref_count=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Bound_Ptr_Counter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *</type>
      <name>create_strong</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>attach_strong</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *counter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>detach_strong</name>
      <anchor>d2</anchor>
      <arglist>(ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *counter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *</type>
      <name>create_weak</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>attach_weak</name>
      <anchor>d4</anchor>
      <arglist>(ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *counter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>detach_weak</name>
      <anchor>d5</anchor>
      <arglist>(ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *counter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>object_was_deleted</name>
      <anchor>d6</anchor>
      <arglist>(ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *counter)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt; *</type>
      <name>internal_create</name>
      <anchor>f0</anchor>
      <arglist>(int init_obj_ref_count)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>obj_ref_count_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>self_ref_count_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Bounded_Cached_Connect_Strategy</name>
    <filename>classACE__Bounded__Cached__Connect__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <templarg>CACHING_STRATEGY</templarg>
    <templarg>ATTRIBUTES</templarg>
    <templarg>MUTEX</templarg>
    <base>ACE_Cached_Connect_Strategy_Ex&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2, CACHING_STRATEGY, ATTRIBUTES, MUTEX &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Bounded_Cached_Connect_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(size_t max_size, CACHING_STRATEGY &amp;caching_s, ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *cre_s=0, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *con_s=0, ACE_Recycling_Strategy&lt; SVC_HANDLER &gt; *rec_s=0, MUTEX *lock=0, int delete_lock=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Bounded_Cached_Connect_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>find_or_create_svc_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms, ACE_Hash_Map_Entry&lt; ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;, ACE_Pair&lt; SVC_HANDLER *, ATTRIBUTES &gt; &gt; *&amp;entry, int &amp;found)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Cached_Connect_Strategy_Ex&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2, CACHING_STRATEGY, ATTRIBUTES, MUTEX &gt;</type>
      <name>CCSEBASE</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;</type>
      <name>REFCOUNTED_HASH_RECYCLABLE_ADDRESS</name>
      <anchor>u1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Bounded_Set</name>
    <filename>classACE__Bounded__Set.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ACE_Bounded_Set_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_SIZE</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Bounded_Set</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Bounded_Set</name>
      <anchor>a1</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Bounded_Set</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Bounded_Set&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Bounded_Set&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Bounded_Set</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a9</anchor>
      <arglist>(const T &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Search_Structure *</type>
      <name>search_structure_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Bounded_Set_Iterator&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Bounded_Set::Search_Structure</name>
    <filename>structACE__Bounded__Set_1_1Search__Structure.html</filename>
    <member kind="variable">
      <type>T</type>
      <name>item_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>is_free_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Bounded_Set_Iterator</name>
    <filename>classACE__Bounded__Set__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Bounded_Set_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Bounded_Set&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Bounded_Set&lt; T &gt; &amp;</type>
      <name>s_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ssize_t</type>
      <name>next_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Bounded_Stack</name>
    <filename>classACE__Bounded__Stack.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Bounded_Stack</name>
      <anchor>a0</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Bounded_Stack</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Bounded_Stack&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Bounded_Stack&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Bounded_Stack</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>push</name>
      <anchor>a4</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pop</name>
      <anchor>a5</anchor>
      <arglist>(T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>top</name>
      <anchor>a6</anchor>
      <arglist>(T &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>top_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>stack_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Buffered_Svc_Handler</name>
    <filename>classACE__Buffered__Svc__Handler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ACE_Svc_Handler&lt; ACE_PEER_STREAM_2, ACE_SYNCH_USE &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Buffered_Svc_Handler</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *thr_mgr=0, ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; *mq=0, ACE_Reactor *reactor=ACE_Reactor::instance(), size_t max_buffer_size=0, ACE_Time_Value *relative_timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Buffered_Svc_Handler</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>put</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *message_block, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Time_Value &amp;time, const void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>maximum_buffer_size_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>current_buffer_size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>next_timeout_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>interval_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value *</type>
      <name>timeoutp_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cache_Map_Iterator</name>
    <filename>classACE__Cache__Map__Iterator.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>IMPLEMENTATION</templarg>
    <templarg>CACHING_STRATEGY</templarg>
    <templarg>ATTRIBUTES</templarg>
    <member kind="typedef">
      <type>ACE_Reference_Pair&lt; KEY, VALUE &gt;</type>
      <name>value_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Pair&lt; VALUE, ATTRIBUTES &gt;</type>
      <name>CACHE_VALUE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cache_Map_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const IMPLEMENTATION &amp;iterator_impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cache_Map_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Cache_Map_Iterator</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reference_Pair&lt; KEY, VALUE &gt;</type>
      <name>operator *</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>operator++</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Iterator&lt; KEY, VALUE, IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>operator--</name>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>IMPLEMENTATION &amp;</type>
      <name>iterator_implementation</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IMPLEMENTATION</type>
      <name>iterator_implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cache_Map_Manager</name>
    <filename>classACE__Cache__Map__Manager.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KEY</type>
      <name>key_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VALUE</type>
      <name>mapped_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MAP</type>
      <name>map_type</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CACHING_STRATEGY</type>
      <name>caching_strategy_type</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ITERATOR_IMPL</type>
      <name>ITERATOR_IMPLEMENTATION</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REVERSE_ITERATOR_IMPL</type>
      <name>REVERSE_ITERATOR_IMPLEMENTATION</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cache_Map_Iterator&lt; KEY, VALUE, ITERATOR_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>ITERATOR</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_ITERATOR_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>REVERSE_ITERATOR</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ITERATOR</type>
      <name>iterator</name>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REVERSE_ITERATOR</type>
      <name>reverse_iterator</name>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Pair&lt; VALUE, ATTRIBUTES &gt;</type>
      <name>CACHE_VALUE</name>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cache_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist>(CACHING_STRATEGY &amp;caching_strategy, size_t size=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Cache_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a4</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a5</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a6</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a7</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a8</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a9</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, KEY &amp;old_key, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a10</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a11</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a12</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>purge</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_size</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ITERATOR</type>
      <name>begin</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ITERATOR</type>
      <name>end</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>REVERSE_ITERATOR</type>
      <name>rbegin</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>REVERSE_ITERATOR</type>
      <name>rend</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>MAP &amp;</type>
      <name>map</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CACHING_STRATEGY &amp;</type>
      <name>caching_strategy</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MAP</type>
      <name>map_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CACHING_STRATEGY &amp;</type>
      <name>caching_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACMM&lt; KEY, VALUE, MAP, ITERATOR_IMPL, REVERSE_ITERATOR_IMPL, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACMM</name>
      <anchor>c1</anchor>
      <arglist>(const ACMM&lt; KEY, VALUE, MAP, ITERATOR_IMPL, REVERSE_ITERATOR_IMPL, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Cache_Map_Iterator&lt; KEY, VALUE, ITERATOR_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_ITERATOR_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cache_Map_Reverse_Iterator</name>
    <filename>classACE__Cache__Map__Reverse__Iterator.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>REVERSE_IMPLEMENTATION</templarg>
    <templarg>CACHING_STRATEGY</templarg>
    <templarg>ATTRIBUTES</templarg>
    <member kind="typedef">
      <type>ACE_Reference_Pair&lt; KEY, VALUE &gt;</type>
      <name>value_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Pair&lt; VALUE, ATTRIBUTES &gt;</type>
      <name>CACHE_VALUE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cache_Map_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const REVERSE_IMPLEMENTATION &amp;iterator_impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cache_Map_Reverse_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Cache_Map_Reverse_Iterator</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reference_Pair&lt; KEY, VALUE &gt;</type>
      <name>operator *</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>operator++</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cache_Map_Reverse_Iterator&lt; KEY, VALUE, REVERSE_IMPLEMENTATION, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>operator--</name>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>REVERSE_IMPLEMENTATION &amp;</type>
      <name>iterator_implementation</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>REVERSE_IMPLEMENTATION</type>
      <name>reverse_iterator_implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cached_Allocator</name>
    <filename>classACE__Cached__Allocator.html</filename>
    <templarg>T</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_New_Allocator</base>
    <member kind="function">
      <type></type>
      <name>ACE_Cached_Allocator</name>
      <anchor>a0</anchor>
      <arglist>(size_t n_chunks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Cached_Allocator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>malloc</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes=sizeof(T))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a3</anchor>
      <arglist>(size_t nbytes, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a4</anchor>
      <arglist>(size_t n_elem, size_t elem_size, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchor>a5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>pool_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Locked_Free_List&lt; ACE_Cached_Mem_Pool_Node&lt; T &gt;, ACE_LOCK &gt;</type>
      <name>free_list_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cached_Connect_Strategy</name>
    <filename>classACE__Cached__Connect__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <templarg>MUTEX</templarg>
    <base>ACE_Connection_Recycling_Strategy</base>
    <base>ACE_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt;</base>
    <member kind="typedef">
      <type>ACE_Cached_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX &gt;</type>
      <name>SELF</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Creation_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>CREATION_STRATEGY</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>CONCURRENCY_STRATEGY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Recycling_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>RECYCLING_STRATEGY</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt;</type>
      <name>CONNECT_STRATEGY</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;</type>
      <name>REFCOUNTED_HASH_RECYCLABLE_ADDRESS</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS, SVC_HANDLER *, ACE_Null_Mutex &gt;</type>
      <name>CONNECTION_MAP</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Iterator&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS, SVC_HANDLER *, ACE_Null_Mutex &gt;</type>
      <name>CONNECTION_MAP_ITERATOR</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS, SVC_HANDLER *&gt;</type>
      <name>CONNECTION_MAP_ENTRY</name>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Reverse_Lock&lt; MUTEX &gt;</type>
      <name>REVERSE_MUTEX</name>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cached_Connect_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *cre_s=0, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *con_s=0, ACE_Recycling_Strategy&lt; SVC_HANDLER &gt; *rec_s=0, MUTEX *mutex=0, int delete_mutex=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Cached_Connect_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *cre_s, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *con_s, ACE_Recycling_Strategy&lt; SVC_HANDLER &gt; *rec_s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>a3</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>a4</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>assign_recycler</name>
      <anchor>a5</anchor>
      <arglist>(SVC_HANDLER *svc_handler, ACE_Connection_Recycling_Strategy *recycler, const void *recycling_act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>prepare_for_recycling</name>
      <anchor>a6</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>a7</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>a8</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, SVC_HANDLER *&amp;sh_copy, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge</name>
      <anchor>a9</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cache</name>
      <anchor>a10</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recycle_state</name>
      <anchor>a11</anchor>
      <arglist>(const void *recycling_act, ACE_Recyclable_State new_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Recyclable_State</type>
      <name>recycle_state</name>
      <anchor>a12</anchor>
      <arglist>(const void *recycling_act) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mark_as_closed</name>
      <anchor>a13</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mark_as_closed_i</name>
      <anchor>a14</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup_hint</name>
      <anchor>a15</anchor>
      <arglist>(const void *recycling_act, void **act_holder=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *</type>
      <name>creation_strategy</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Recycling_Strategy&lt; SVC_HANDLER &gt; *</type>
      <name>recycling_strategy</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *</type>
      <name>concurrency_strategy</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>new_connection</name>
      <anchor>b0</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt; &amp;search_addr, ACE_Hash_Map_Entry&lt; ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;, SVC_HANDLER *&gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_i</name>
      <anchor>b2</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_i</name>
      <anchor>b3</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>recycle_state_i</name>
      <anchor>b4</anchor>
      <arglist>(const void *recycling_act, ACE_Recyclable_State new_state)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Recyclable_State</type>
      <name>recycle_state_i</name>
      <anchor>b5</anchor>
      <arglist>(const void *recycling_act) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup_hint_i</name>
      <anchor>b6</anchor>
      <arglist>(const void *recycling_act, void **act_holder)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>check_hint_i</name>
      <anchor>b7</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms, ACE_Hash_Map_Entry&lt; ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;, SVC_HANDLER *&gt; *&amp;entry, int &amp;found)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find_or_create_svc_handler_i</name>
      <anchor>b8</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms, ACE_Hash_Map_Entry&lt; ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;, SVC_HANDLER *&gt; *&amp;entry, int &amp;found)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler_i</name>
      <anchor>b9</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms, int &amp;found)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CONNECTION_MAP</type>
      <name>connection_map_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MUTEX *</type>
      <name>lock_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_lock_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>REVERSE_MUTEX *</type>
      <name>reverse_lock_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CREATION_STRATEGY *</type>
      <name>creation_strategy_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_creation_strategy_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CONCURRENCY_STRATEGY *</type>
      <name>concurrency_strategy_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_concurrency_strategy_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>RECYCLING_STRATEGY *</type>
      <name>recycling_strategy_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_recycling_strategy_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cached_Connect_Strategy_Ex</name>
    <filename>classACE__Cached__Connect__Strategy__Ex.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <templarg>CACHING_STRATEGY</templarg>
    <templarg>ATTRIBUTES</templarg>
    <templarg>MUTEX</templarg>
    <base>ACE_Cached_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX &gt;</base>
    <member kind="typedef">
      <type>ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;</type>
      <name>REFCOUNTED_HASH_RECYCLABLE_ADDRESS</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Cache_Map_Manager&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS, SVC_HANDLER *, ACE_Hash&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS &gt;, ACE_Equal_To&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS &gt;, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>CONNECTION_CACHE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TYPENAME CONNECTION_CACHE::CACHE_ENTRY</type>
      <name>CONNECTION_CACHE_ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TYPENAME CONNECTION_CACHE::key_type</type>
      <name>KEY</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TYPENAME CONNECTION_CACHE::mapped_type</type>
      <name>VALUE</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Recyclable_Handler_Cleanup_Strategy&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS, ACE_Pair&lt; SVC_HANDLER *, ATTRIBUTES &gt;, ACE_Hash_Map_Manager_Ex&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS, ACE_Pair&lt; SVC_HANDLER *, ATTRIBUTES &gt;, ACE_Hash&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS &gt;, ACE_Equal_To&lt; REFCOUNTED_HASH_RECYCLABLE_ADDRESS &gt;, MUTEX &gt; &gt;</type>
      <name>CLEANUP_STRATEGY</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cached_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX &gt;</type>
      <name>CCSBASE</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cached_Connect_Strategy_Ex</name>
      <anchor>a0</anchor>
      <arglist>(CACHING_STRATEGY &amp;caching_s, ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *cre_s=0, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *con_s=0, ACE_Recycling_Strategy&lt; SVC_HANDLER &gt; *rec_s=0, MUTEX *lock=0, int delete_lock=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Cached_Connect_Strategy_Ex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_connections</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mark_as_closed_i</name>
      <anchor>a3</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CACHING_STRATEGY &amp;</type>
      <name>caching_strategy</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt; &amp;search_addr, ACE_Hash_Map_Entry&lt; ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;, ACE_Pair&lt; SVC_HANDLER *, ATTRIBUTES &gt; &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_i</name>
      <anchor>b1</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_i</name>
      <anchor>b2</anchor>
      <arglist>(const void *recycling_act)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>recycle_state_i</name>
      <anchor>b3</anchor>
      <arglist>(const void *recycling_act, ACE_Recyclable_State new_state)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Recyclable_State</type>
      <name>recycle_state_i</name>
      <anchor>b4</anchor>
      <arglist>(const void *recycling_act) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup_hint_i</name>
      <anchor>b5</anchor>
      <arglist>(const void *recycling_act, void **act_holder)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>check_hint_i</name>
      <anchor>b6</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms, ACE_Hash_Map_Entry&lt; ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;, ACE_Pair&lt; SVC_HANDLER *, ATTRIBUTES &gt; &gt; *&amp;entry, int &amp;found)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>find_or_create_svc_handler_i</name>
      <anchor>b7</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms, ACE_Hash_Map_Entry&lt; ACE_Refcounted_Hash_Recyclable&lt; ACE_PEER_CONNECTOR_ADDR &gt;, ACE_Pair&lt; SVC_HANDLER *, ATTRIBUTES &gt; &gt; *&amp;entry, int &amp;found)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler_i</name>
      <anchor>b8</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms, int &amp;found)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>cached_connect</name>
      <anchor>b9</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CONNECTION_CACHE</type>
      <name>connection_cache_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cached_Mem_Pool_Node</name>
    <filename>classACE__Cached__Mem__Pool__Node.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>T *</type>
      <name>addr</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cached_Mem_Pool_Node&lt; T &gt; *</type>
      <name>get_next</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_next</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Cached_Mem_Pool_Node&lt; T &gt; *ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Cached_Mem_Pool_Node&lt; T &gt; *</type>
      <name>next_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Caching_Strategy</name>
    <filename>classACE__Caching__Strategy.html</filename>
    <templarg>ATTRIBUTES</templarg>
    <templarg>CACHING_UTILITY</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Caching_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ATTRIBUTES</type>
      <name>attributes</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>purge_percent</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>purge_percent</name>
      <anchor>a3</anchor>
      <arglist>(double percentage)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify_bind</name>
      <anchor>a4</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify_find</name>
      <anchor>a5</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify_unbind</name>
      <anchor>a6</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify_trybind</name>
      <anchor>a7</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify_rebind</name>
      <anchor>a8</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CACHING_UTILITY &amp;</type>
      <name>caching_utility</name>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Caching_Strategy_Adapter</name>
    <filename>classACE__Caching__Strategy__Adapter.html</filename>
    <templarg>ATTRIBUTES</templarg>
    <templarg>CACHING_UTILITY</templarg>
    <templarg>IMPLEMENTATION</templarg>
    <base>ACE_Caching_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Caching_Strategy_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(IMPLEMENTATION *implementation=0, int delete_implementation=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Caching_Strategy_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ATTRIBUTES</type>
      <name>attributes</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>purge_percent</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge_percent</name>
      <anchor>a4</anchor>
      <arglist>(double percentage)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_bind</name>
      <anchor>a5</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_find</name>
      <anchor>a6</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_unbind</name>
      <anchor>a7</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_trybind</name>
      <anchor>a8</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_rebind</name>
      <anchor>a9</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>IMPLEMENTATION &amp;</type>
      <name>implementation</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CACHING_UTILITY &amp;</type>
      <name>caching_utility</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IMPLEMENTATION *</type>
      <name>implementation_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>delete_implementation_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Capabilities</name>
    <filename>classACE__Capabilities.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Capabilities</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Capabilities</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getval</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *ent, ACE_TString &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getval</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *ent, int &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getent</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *fname, const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>const ACE_TCHAR *</type>
      <name>parse</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_TCHAR *buf, int &amp;cap)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>const ACE_TCHAR *</type>
      <name>parse</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_TCHAR *buf, ACE_TString &amp;cap)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>fillent</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_TCHAR *ent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>parseent</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_TCHAR *name, ACE_TCHAR *line)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>getline</name>
      <anchor>b4</anchor>
      <arglist>(FILE *fp, ACE_TString &amp;line)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>is_entry</name>
      <anchor>b5</anchor>
      <arglist>(const ACE_TCHAR *name, const ACE_TCHAR *line)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>resetcaps</name>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Hash_Map_Manager&lt; ACE_TString, ACE_CapEntry *, ACE_Null_Mutex &gt;</type>
      <name>caps_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_CapEntry</name>
    <filename>classACE__CapEntry.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_CapEntry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_INTCAP</name>
      <anchor>t3t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_STRINGCAP</name>
      <anchor>t3t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_BOOLCAP</name>
      <anchor>t3t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_CapEntry</name>
      <anchor>b0</anchor>
      <arglist>(int captype)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>captype_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_CDR</name>
    <filename>classACE__CDR.html</filename>
    <member kind="typedef">
      <type>u_char</type>
      <name>Boolean</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_char</type>
      <name>Octet</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>Char</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OS::WChar</type>
      <name>WChar</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_INT16</type>
      <name>Short</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_UINT16</type>
      <name>UShort</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_INT32</type>
      <name>Long</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_UINT32</type>
      <name>ULong</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_UINT64</type>
      <name>ULongLong</name>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>LongLong</name>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTET_SIZE</name>
      <anchor>s24s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT_SIZE</name>
      <anchor>s24s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONG_SIZE</name>
      <anchor>s24s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONGLONG_SIZE</name>
      <anchor>s24s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONGDOUBLE_SIZE</name>
      <anchor>s24s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTET_ALIGN</name>
      <anchor>s24s15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT_ALIGN</name>
      <anchor>s24s16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONG_ALIGN</name>
      <anchor>s24s17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONGLONG_ALIGN</name>
      <anchor>s24s18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONGDOUBLE_ALIGN</name>
      <anchor>s24s19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_ALIGNMENT</name>
      <anchor>s24s20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_BUFSIZE</name>
      <anchor>s24s21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXP_GROWTH_MAX</name>
      <anchor>s24s22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR_GROWTH_CHUNK</name>
      <anchor>s24s23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_2</name>
      <anchor>d0</anchor>
      <arglist>(const char *orig, char *target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_4</name>
      <anchor>d1</anchor>
      <arglist>(const char *orig, char *target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_8</name>
      <anchor>d2</anchor>
      <arglist>(const char *orig, char *target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_16</name>
      <anchor>d3</anchor>
      <arglist>(const char *orig, char *target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_2_array</name>
      <anchor>d4</anchor>
      <arglist>(const char *orig, char *target, size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_4_array</name>
      <anchor>d5</anchor>
      <arglist>(const char *orig, char *target, size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_8_array</name>
      <anchor>d6</anchor>
      <arglist>(const char *orig, char *target, size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>swap_16_array</name>
      <anchor>d7</anchor>
      <arglist>(const char *orig, char *target, size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>mb_align</name>
      <anchor>d8</anchor>
      <arglist>(ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>first_size</name>
      <anchor>d9</anchor>
      <arglist>(size_t minsize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>next_size</name>
      <anchor>d10</anchor>
      <arglist>(size_t minsize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>grow</name>
      <anchor>d11</anchor>
      <arglist>(ACE_Message_Block *mb, size_t minsize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>consolidate</name>
      <anchor>d12</anchor>
      <arglist>(ACE_Message_Block *dst, const ACE_Message_Block *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>total_length</name>
      <anchor>d13</anchor>
      <arglist>(const ACE_Message_Block *begin, const ACE_Message_Block *end)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_CDR::Double</name>
    <filename>structACE__CDR_1_1Double.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>f</name>
      <anchor>m0</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_CDR::Float</name>
    <filename>structACE__CDR_1_1Float.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>f</name>
      <anchor>m0</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_CDR::LongDouble</name>
    <filename>structACE__CDR_1_1LongDouble.html</filename>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a0</anchor>
      <arglist>(const LongDouble &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a1</anchor>
      <arglist>(const LongDouble &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>ld</name>
      <anchor>m0</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Char_Codeset_Translator</name>
    <filename>classACE__Char__Codeset__Translator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_char</name>
      <anchor>a0</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::Char &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_string</name>
      <anchor>a1</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::Char *&amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_char_array</name>
      <anchor>a2</anchor>
      <arglist>(ACE_InputCDR &amp;, const ACE_CDR::Char *, ACE_CDR::ULong)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_char</name>
      <anchor>a3</anchor>
      <arglist>(ACE_OutputCDR &amp;, ACE_CDR::Char)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_string</name>
      <anchor>a4</anchor>
      <arglist>(ACE_OutputCDR &amp;, ACE_CDR::ULong, const ACE_CDR::Char *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_char_array</name>
      <anchor>a5</anchor>
      <arglist>(ACE_OutputCDR &amp;, const ACE_CDR::Char *, ACE_CDR::ULong)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>read_1</name>
      <anchor>b0</anchor>
      <arglist>(ACE_InputCDR &amp;input, ACE_CDR::Octet *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>write_1</name>
      <anchor>b1</anchor>
      <arglist>(ACE_OutputCDR &amp;output, const ACE_CDR::Octet *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>read_array</name>
      <anchor>b2</anchor>
      <arglist>(ACE_InputCDR &amp;input, void *x, size_t size, size_t align, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>write_array</name>
      <anchor>b3</anchor>
      <arglist>(ACE_OutputCDR &amp;output, const void *x, size_t size, size_t align, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>adjust</name>
      <anchor>b4</anchor>
      <arglist>(ACE_OutputCDR &amp;out, size_t size, size_t align, char *&amp;buf)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>good_bit</name>
      <anchor>b5</anchor>
      <arglist>(ACE_OutputCDR &amp;out, int bit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cleanup</name>
    <filename>classACE__Cleanup.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Cleanup</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchor>a2</anchor>
      <arglist>(void *param=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cleanup_Adapter</name>
    <filename>classACE__Cleanup__Adapter.html</filename>
    <templarg>TYPE</templarg>
    <base>ACE_Cleanup</base>
    <member kind="function">
      <type></type>
      <name>ACE_Cleanup_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Cleanup_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>object</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Cleanup_Adapter</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Cleanup_Adapter&lt; TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Cleanup_Adapter&lt; TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>object_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cleanup_Info</name>
    <filename>classACE__Cleanup__Info.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Cleanup_Info</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Cleanup_Info &amp;o) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Cleanup_Info &amp;o) const</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>object_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CLEANUP_FUNC</type>
      <name>cleanup_hook_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>param_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cleanup_Info_Node</name>
    <filename>classACE__Cleanup__Info__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Cleanup_Info_Node</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Cleanup_Info_Node</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Cleanup_Info &amp;new_info, ACE_Cleanup_Info_Node *next)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Cleanup_Info_Node</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Cleanup_Info_Node *</type>
      <name>insert</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Cleanup_Info &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Cleanup_Info</type>
      <name>cleanup_info_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Cleanup_Info_Node *</type>
      <name>next_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_OS_Exit_Info</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Cleanup_Strategy</name>
    <filename>classACE__Cleanup__Strategy.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *key, VALUE *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Command_Base</name>
    <filename>classACE__Command__Base.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Command_Base</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Command_Base</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>(void *arg=0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Command_Callback</name>
    <filename>classACE__Command__Callback.html</filename>
    <templarg>RECEIVER</templarg>
    <templarg>ACTION</templarg>
    <base>ACE_Command_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Command_Callback</name>
      <anchor>a0</anchor>
      <arglist>(RECEIVER &amp;recvr, ACTION action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Command_Callback</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>(void *arg=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RECEIVER &amp;</type>
      <name>receiver_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACTION</type>
      <name>action_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Concurrency_Strategy</name>
    <filename>classACE__Concurrency__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Concurrency_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Concurrency_Strategy</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>flags_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Condition</name>
    <filename>classACE__Condition.html</filename>
    <templarg>MUTEX</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Condition</name>
      <anchor>a0</anchor>
      <arglist>(MUTEX &amp;m, int type=USYNC_THREAD, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Condition</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Time_Value *abstime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a4</anchor>
      <arglist>(MUTEX &amp;mutex, const ACE_Time_Value *abstime=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>broadcast</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>MUTEX &amp;</type>
      <name>mutex</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_cond_t</type>
      <name>cond_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MUTEX &amp;</type>
      <name>mutex_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Condition&lt; MUTEX &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Condition</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Condition&lt; MUTEX &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Condition_Attributes</name>
    <filename>classACE__Condition__Attributes.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Condition_Attributes</name>
      <anchor>a0</anchor>
      <arglist>(int type=ACE_DEFAULT_SYNCH_TYPE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Condition_Attributes</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Condition_Attributes &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Condition_Attributes</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Condition_Attributes &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_condattr_t</type>
      <name>attributes_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Condition_Thread_Mutex</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Condition_Thread_Mutex</name>
    <filename>classACE__Condition__Thread__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Condition_Thread_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Thread_Mutex &amp;m, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Condition_Thread_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Thread_Mutex &amp;m, ACE_Condition_Attributes &amp;attributes, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Condition_Thread_Mutex</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Time_Value *abstime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Thread_Mutex &amp;mutex, const ACE_Time_Value *abstime=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>broadcast</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Mutex &amp;</type>
      <name>mutex</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_cond_t</type>
      <name>cond_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Mutex &amp;</type>
      <name>mutex_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>removed_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Condition_Thread_Mutex &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Condition_Thread_Mutex</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Condition_Thread_Mutex &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Config_ImpExp_Base</name>
    <filename>classACE__Config__ImpExp__Base.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Config_ImpExp_Base</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Configuration &amp;config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Config_ImpExp_Base</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>import_config</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>export_config</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *filename)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Configuration &amp;</type>
      <name>config_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Config_ImpExp_Base</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Config_ImpExp_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Config_ImpExp_Base &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Config_ImpExp_Base &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration</name>
    <filename>classACE__Configuration.html</filename>
    <member kind="enumeration">
      <name>VALUETYPE</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTEGER</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINARY</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Configuration</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ACE_Configuration_Section_Key &amp;</type>
      <name>root_section</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open_section</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;base, const ACE_TCHAR *sub_section, int create, ACE_Configuration_Section_Key &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove_section</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *sub_section, int recursive)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>enumerate_values</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, int index, ACE_TString &amp;name, VALUETYPE &amp;type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>enumerate_sections</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, int index, ACE_TString &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_string_value</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, const ACE_TString &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_integer_value</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, u_int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_binary_value</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, const void *data, u_int length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_string_value</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, ACE_TString &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_integer_value</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, u_int &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_binary_value</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, void *&amp;data, u_int &amp;length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>find_value</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, VALUETYPE &amp;type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove_value</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expand_path</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TString &amp;path_in, ACE_Configuration_Section_Key &amp;key_out, int create=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>export_config</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>import_config</name>
      <anchor>a16</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a17</anchor>
      <arglist>(const ACE_Configuration &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a18</anchor>
      <arglist>(const ACE_Configuration &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Configuration</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Section_Key_Internal *</type>
      <name>get_internal_key</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>validate_name</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Configuration</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Configuration &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Configuration &amp;</type>
      <name>operator=</name>
      <anchor>b4</anchor>
      <arglist>(const ACE_Configuration &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Configuration_Section_Key</type>
      <name>root_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration_ExtId</name>
    <filename>classACE__Configuration__ExtId.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_ExtId</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Configuration_ExtId</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_ExtId</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Configuration_ExtId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Configuration_ExtId</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Configuration_ExtId &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Configuration_ExtId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Configuration_ExtId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Configuration_ExtId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>hash</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>name</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>const ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration_Heap</name>
    <filename>classACE__Configuration__Heap.html</filename>
    <base>ACE_Configuration</base>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Heap</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Configuration_Heap</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *file_name, void *base_address=ACE_DEFAULT_BASE_ADDR, int default_map_size=ACE_DEFAULT_CONFIG_SECTION_SIZE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(int default_map_size=ACE_DEFAULT_CONFIG_SECTION_SIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open_section</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;base, const ACE_TCHAR *sub_section, int create, ACE_Configuration_Section_Key &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_section</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *sub_section, int recursive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enumerate_values</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, int Index, ACE_TString &amp;name, VALUETYPE &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enumerate_sections</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, int Index, ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_string_value</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, const ACE_TString &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_integer_value</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, u_int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_binary_value</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, const void *data, u_int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_string_value</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, ACE_TString &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_integer_value</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, u_int &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_binary_value</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, void *&amp;data, u_int &amp;length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find_value</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, VALUETYPE &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_value</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>add_section</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;base, const ACE_TCHAR *sub_section, ACE_Configuration_Section_Key &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_index</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_index_helper</name>
      <anchor>c2</anchor>
      <arglist>(void *buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>value_open_helper</name>
      <anchor>c3</anchor>
      <arglist>(size_t hash_table_size, void *buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>section_open_helper</name>
      <anchor>c4</anchor>
      <arglist>(size_t hash_table_size, void *buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>load_key</name>
      <anchor>c5</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>new_section</name>
      <anchor>c6</anchor>
      <arglist>(const ACE_TString &amp;section, ACE_Configuration_Section_Key &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Configuration_Heap</name>
      <anchor>c7</anchor>
      <arglist>(const ACE_Configuration_Heap &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Configuration_Heap &amp;</type>
      <name>operator=</name>
      <anchor>c8</anchor>
      <arglist>(const ACE_Configuration_Heap &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SECTION_MAP *</type>
      <name>index_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>default_map_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration_Section_IntId</name>
    <filename>classACE__Configuration__Section__IntId.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Section_IntId</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Configuration_Section_IntId</name>
      <anchor>a1</anchor>
      <arglist>(VALUE_MAP *value_hash_map, SUBSECTION_MAP *section_hash_map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Section_IntId</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Configuration_Section_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Configuration_Section_IntId</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Configuration_Section_IntId &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Configuration_Section_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="variable">
      <type>VALUE_MAP *</type>
      <name>value_hash_map_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SUBSECTION_MAP *</type>
      <name>section_hash_map_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration_Section_Key</name>
    <filename>classACE__Configuration__Section__Key.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Section_Key</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Configuration_Section_Key</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Section_Key_Internal *key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Section_Key</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Configuration_Section_Key</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Configuration_Section_Key &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Section_Key_Internal *</type>
      <name>key_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Configuration</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration_Section_Key_Heap</name>
    <filename>classACE__Configuration__Section__Key__Heap.html</filename>
    <base>ACE_Section_Key_Internal</base>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Section_Key_Heap</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *path)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>path_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VALUE_HASH::ITERATOR *</type>
      <name>value_iter_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SUBSECTION_HASH::ITERATOR *</type>
      <name>section_iter_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Configuration_Section_Key_Heap</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Configuration_Section_Key_Heap</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Configuration_Section_Key_Heap &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Configuration_Section_Key_Heap &amp;</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_Configuration_Section_Key_Heap &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration_Value_IntId</name>
    <filename>classACE__Configuration__Value__IntId.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Value_IntId</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Configuration_Value_IntId</name>
      <anchor>a1</anchor>
      <arglist>(ACE_TCHAR *string)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Configuration_Value_IntId</name>
      <anchor>a2</anchor>
      <arglist>(u_int integer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Value_IntId</name>
      <anchor>a3</anchor>
      <arglist>(void *data, u_int length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Configuration_Value_IntId</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Configuration_Value_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Configuration_Value_IntId</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Configuration_Value_IntId &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Configuration_Value_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Configuration::VALUETYPE</type>
      <name>type_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int</type>
      <name>length_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Configuration_Win32Registry</name>
    <filename>classACE__Configuration__Win32Registry.html</filename>
    <base>ACE_Configuration</base>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Configuration_Win32Registry</name>
      <anchor>a0</anchor>
      <arglist>(HKEY hKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Configuration_Win32Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open_section</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;base, const ACE_TCHAR *sub_section, int create, ACE_Configuration_Section_Key &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_section</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *sub_section, int recursive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enumerate_values</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, int Index, ACE_TString &amp;name, VALUETYPE &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enumerate_sections</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, int Index, ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_string_value</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, const ACE_TString &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_integer_value</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, u_int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_binary_value</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, const void *data, u_int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_string_value</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, ACE_TString &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_integer_value</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, u_int &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_binary_value</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, void *&amp;data, u_int &amp;length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find_value</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name, VALUETYPE &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_value</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>operator==</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_Configuration_Win32Registry &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>operator!=</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_Configuration_Win32Registry &amp;rhs) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>HKEY</type>
      <name>resolve_key</name>
      <anchor>d0</anchor>
      <arglist>(HKEY hKey, const ACE_TCHAR *path, int create=1)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>load_key</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;key, HKEY &amp;hKey)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Configuration_Win32Registry</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Configuration_Win32Registry</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_Configuration_Win32Registry &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Configuration_Win32Registry &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Configuration_Win32Registry &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Connect_Strategy</name>
    <filename>classACE__Connect__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Connect_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_PEER_CONNECTOR &amp;</type>
      <name>connector</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Connect_Strategy</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>a3</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>a4</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, SVC_HANDLER *&amp;sh_copy, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_PEER_CONNECTOR</type>
      <name>connector_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Connection_Recycling_Strategy</name>
    <filename>classACE__Connection__Recycling__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Connection_Recycling_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>purge</name>
      <anchor>a1</anchor>
      <arglist>(const void *recycling_act)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cache</name>
      <anchor>a2</anchor>
      <arglist>(const void *recycling_act)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>recycle_state</name>
      <anchor>a3</anchor>
      <arglist>(const void *recycling_act, ACE_Recyclable_State new_state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Recyclable_State</type>
      <name>recycle_state</name>
      <anchor>a4</anchor>
      <arglist>(const void *recycling_act) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>mark_as_closed</name>
      <anchor>a5</anchor>
      <arglist>(const void *recycling_act)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>mark_as_closed_i</name>
      <anchor>a6</anchor>
      <arglist>(const void *recycling_act)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cleanup_hint</name>
      <anchor>a7</anchor>
      <arglist>(const void *recycling_act, void **act_holder=0)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Connection_Recycling_Strategy</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Connector</name>
    <filename>classACE__Connector.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <base>ACE_Service_Object</base>
    <member kind="typedef">
      <type>ACE_TYPENAME _ACE_PEER_CONNECTOR::PEER_ADDR</type>
      <name>ACE_TYPENAME_ACE_PEER_CONNECTOR_PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Connector</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reactor *r=ACE_Reactor::instance(), int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Reactor *r=ACE_Reactor::instance(), int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Connector</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connect</name>
      <anchor>a3</anchor>
      <arglist>(SVC_HANDLER *&amp;svc_handler, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, const ACE_Synch_Options &amp;synch_options=ACE_Synch_Options::defaults, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr=(ACE_TYPENAME_ACE_PEER_CONNECTOR_PEER_ADDR &amp;) ACE_PEER_CONNECTOR_ADDR_ANY, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connect</name>
      <anchor>a4</anchor>
      <arglist>(SVC_HANDLER *&amp;svc_handler_hint, SVC_HANDLER *&amp;svc_handler, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, const ACE_Synch_Options &amp;synch_options=ACE_Synch_Options::defaults, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr=(ACE_TYPENAME_ACE_PEER_CONNECTOR_PEER_ADDR &amp;) ACE_PEER_CONNECTOR_ADDR_ANY, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_n</name>
      <anchor>a5</anchor>
      <arglist>(size_t n, SVC_HANDLER *svc_handlers[], ACE_PEER_CONNECTOR_ADDR remote_addrs[], ACE_TCHAR *failed_svc_handlers=0, const ACE_Synch_Options &amp;synch_options=ACE_Synch_Options::defaults)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a6</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_PEER_CONNECTOR &amp;</type>
      <name>connector</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Svc_Tuple&lt; SVC_HANDLER &gt;</type>
      <name>AST</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Map_Manager&lt; ACE_HANDLE, ACE_Svc_Tuple&lt; SVC_HANDLER &gt; *, ACE_SYNCH_RW_MUTEX &gt;</type>
      <name>MAP_MANAGER</name>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Map_Iterator&lt; ACE_HANDLE, ACE_Svc_Tuple&lt; SVC_HANDLER &gt; *, ACE_SYNCH_RW_MUTEX &gt;</type>
      <name>MAP_ITERATOR</name>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Map_Entry&lt; ACE_HANDLE, ACE_Svc_Tuple&lt; SVC_HANDLER &gt; *&gt;</type>
      <name>MAP_ENTRY</name>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>b0</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>b1</anchor>
      <arglist>(SVC_HANDLER *&amp;svc_handler, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>b2</anchor>
      <arglist>(SVC_HANDLER *&amp;svc_handler, SVC_HANDLER *&amp;sh_copy, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>b3</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>b4</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_output</name>
      <anchor>b5</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_exception</name>
      <anchor>b6</anchor>
      <arglist>(ACE_HANDLE fd=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>b7</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>b9</anchor>
      <arglist>(ACE_TCHAR **, size_t) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>b10</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>b11</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, const void *arg)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>b12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>b13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>create_AST</name>
      <anchor>b14</anchor>
      <arglist>(SVC_HANDLER *, const ACE_Synch_Options &amp;)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>cleanup_AST</name>
      <anchor>b15</anchor>
      <arglist>(ACE_HANDLE, AST *&amp;)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_i</name>
      <anchor>b16</anchor>
      <arglist>(SVC_HANDLER *&amp;svc_handler, SVC_HANDLER **sh_copy, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, const ACE_Synch_Options &amp;synch_options, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MAP_MANAGER</type>
      <name>handler_map_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_PEER_CONNECTOR</type>
      <name>connector_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>closing_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>flags_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Control_Block</name>
    <filename>classACE__Control__Block.html</filename>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>print_alignment_info</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ref_counter_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Name_Node *</type>
      <name>name_head_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Malloc_Header *</type>
      <name>freep_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>lock_name_</name>
      <anchor>m3</anchor>
      <arglist>[MAXNAMELEN]</arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>align_</name>
      <anchor>m4</anchor>
      <arglist>[ACE_CONTROL_BLOCK_ALIGN_LONGS&lt; 1?1:ACE_CONTROL_BLOCK_ALIGN_LONGS]</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Malloc_Header</type>
      <name>base_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Control_Block::ACE_Malloc_Header</name>
    <filename>classACE__Control__Block_1_1ACE__Malloc__Header.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_Header</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init_ptr</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Malloc_Header **ptr, ACE_Malloc_Header *init, void *base_addr)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Malloc_Header *</type>
      <name>next_block_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>padding_</name>
      <anchor>m2</anchor>
      <arglist>[ACE_MALLOC_PADDING_SIZE&lt; 1?1:ACE_MALLOC_PADDING_SIZE]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Control_Block::ACE_Name_Node</name>
    <filename>classACE__Control__Block_1_1ACE__Name__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Node</name>
      <anchor>a0</anchor>
      <arglist>(const char *name, char *name_ptr, char *pointer, ACE_Name_Node *head)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Node</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Name_Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Node</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Name_Node</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init_ptr</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Name_Node **ptr, ACE_Name_Node *init, void *base_addr)</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>pointer_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Name_Node *</type>
      <name>next_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Name_Node *</type>
      <name>prev_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Countdown_Time</name>
    <filename>classACE__Countdown__Time.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Countdown_Time</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Countdown_Time</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stop</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>update</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value *</type>
      <name>max_wait_time_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>start_time_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stopped_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Creation_Strategy</name>
    <filename>classACE__Creation__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Creation_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *=0, ACE_Reactor *=ACE_Reactor::instance())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Thread_Manager *=0, ACE_Reactor *=ACE_Reactor::instance())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Creation_Strategy</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>a3</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Data_Block</name>
    <filename>classACE__Data__Block.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Data_Block</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Data_Block</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Message_Block::ACE_Message_Type msg_type, const char *msg_data, ACE_Allocator *allocator_strategy, ACE_Lock *locking_strategy, ACE_Message_Block::Message_Flags flags, ACE_Allocator *data_block_allocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Data_Block</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block::ACE_Message_Type</type>
      <name>msg_type</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_type</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block::ACE_Message_Type type)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>base</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base</name>
      <anchor>a6</anchor>
      <arglist>(char *data, size_t size, ACE_Message_Block::Message_Flags mflags=ACE_Message_Block::DONT_DELETE)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>end</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>mark</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchor>a10</anchor>
      <arglist>(size_t length)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Data_Block *</type>
      <name>clone</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Message_Block::Message_Flags mask=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Data_Block *</type>
      <name>clone_nocopy</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Message_Block::Message_Flags mask=0) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>duplicate</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>release</name>
      <anchor>a15</anchor>
      <arglist>(ACE_Lock *lock=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block::Message_Flags</type>
      <name>set_flags</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Message_Block::Message_Flags more_flags)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block::Message_Flags</type>
      <name>clr_flags</name>
      <anchor>a17</anchor>
      <arglist>(ACE_Message_Block::Message_Flags less_flags)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block::Message_Flags</type>
      <name>flags</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>allocator_strategy</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>locking_strategy</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>locking_strategy</name>
      <anchor>a21</anchor>
      <arglist>(ACE_Lock *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reference_count</name>
      <anchor>a23</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>data_block_allocator</name>
      <anchor>a24</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Data_Block *</type>
      <name>release_i</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Data_Block *</type>
      <name>release_no_delete</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Lock *lock)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block::ACE_Message_Type</type>
      <name>type_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block::Message_Flags</type>
      <name>flags_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>base_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>allocator_strategy_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock *</type>
      <name>locking_strategy_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>reference_count_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>data_block_allocator_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Data_Block &amp;</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Data_Block &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Data_Block</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Data_Block &amp;)</arglist>
    </member>
    <member kind="friend" protection="public">
      <type>friend class</type>
      <name>ACE_Message_Block</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Date_Time</name>
    <filename>classACE__Date__Time.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Date_Time</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Date_Time</name>
      <anchor>a1</anchor>
      <arglist>(long day, long month=0, long year=0, long hour=0, long minute=0, long second=0, long microsec=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>day</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>day</name>
      <anchor>a4</anchor>
      <arglist>(long day)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>month</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>month</name>
      <anchor>a6</anchor>
      <arglist>(long month)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>year</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>year</name>
      <anchor>a8</anchor>
      <arglist>(long year)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>hour</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hour</name>
      <anchor>a10</anchor>
      <arglist>(long hour)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>minute</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minute</name>
      <anchor>a12</anchor>
      <arglist>(long minute)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>second</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>second</name>
      <anchor>a14</anchor>
      <arglist>(long second)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>microsec</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>microsec</name>
      <anchor>a16</anchor>
      <arglist>(long microsec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>day_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>month_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>year_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>hour_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>minute_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>second_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>microsec_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Deadline_Message_Strategy</name>
    <filename>classACE__Deadline__Message__Strategy.html</filename>
    <base>ACE_Dynamic_Message_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Deadline_Message_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(u_long static_bit_field_mask=0x3FFUL, u_long static_bit_field_shift=10, u_long dynamic_priority_max=0x3FFFFFUL, u_long dynamic_priority_offset=0x200000UL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Deadline_Message_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convert_priority</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value &amp;priority, const ACE_Message_Block &amp;mb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DEV</name>
    <filename>classACE__DEV.html</filename>
    <base>ACE_IO_SAP</base>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>disable</name>
      <anchor>a2</anchor>
      <arglist>(int signum) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_DEV</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DEV_Addr</name>
    <filename>classACE__DEV__Addr.html</filename>
    <base>ACE_Addr</base>
    <member kind="function">
      <type></type>
      <name>ACE_DEV_Addr</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DEV_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_DEV_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_DEV_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_DEV_Addr</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *devname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *devname)</arglist>
    </member>
    <member kind="function">
      <type>ACE_DEV_Addr &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_DEV_Addr &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a7</anchor>
      <arglist>(ACE_TCHAR *addr, size_t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_DEV_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_DEV_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>get_path_name</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>devname_</name>
      <anchor>o0</anchor>
      <arglist>[MAXNAMLEN+1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DEV_Connector</name>
    <filename>classACE__DEV__Connector.html</filename>
    <member kind="typedef">
      <type>ACE_DEV_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_DEV_IO</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DEV_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DEV_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_DEV_IO &amp;new_io, const ACE_DEV_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a2</anchor>
      <arglist>(ACE_DEV_IO &amp;new_io, const ACE_DEV_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset_new_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DEV_IO</name>
    <filename>classACE__DEV__IO.html</filename>
    <base>ACE_DEV</base>
    <member kind="typedef">
      <type>ACE_DEV_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DEV_IO</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a1</anchor>
      <arglist>(const void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a2</anchor>
      <arglist>(void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a3</anchor>
      <arglist>(const void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a4</anchor>
      <arglist>(void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a5</anchor>
      <arglist>(const iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a6</anchor>
      <arglist>(iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a7</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a8</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a9</anchor>
      <arglist>(const void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a10</anchor>
      <arglist>(void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a12</anchor>
      <arglist>(ACE_DEV_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a13</anchor>
      <arglist>(ACE_DEV_Addr &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DEV_Addr</type>
      <name>addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_DEV_Connector</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dirent</name>
    <filename>classACE__Dirent.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Dirent</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Dirent</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *dirname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Dirent</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>dirent *</type>
      <name>read</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchor>a6</anchor>
      <arglist>(struct dirent *entry, struct dirent **result)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>tell</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seek</name>
      <anchor>a8</anchor>
      <arglist>(long loc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DIR *</type>
      <name>dirp_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dirent_Selector</name>
    <filename>classACE__Dirent__Selector.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Dirent_Selector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Dirent_Selector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>dirent *</type>
      <name>operator[]</name>
      <anchor>a3</anchor>
      <arglist>(const int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *dir, int(*selector)(const dirent *d)=0, int(*comparator)(const dirent **d1, const dirent **d2)=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>dirent **</type>
      <name>namelist_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>n_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DLL</name>
    <filename>classACE__DLL.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_DLL</name>
      <anchor>a0</anchor>
      <arglist>(int close_on_destruction=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DLL</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *dll_name, int open_mode=ACE_DEFAULT_SHLIB_MODE, int close_on_destruction=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *dll_name, int open_mode=ACE_DEFAULT_SHLIB_MODE, int close_on_destruction=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_DLL</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>symbol</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *symbol_name)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *</type>
      <name>error</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SHLIB_HANDLE</type>
      <name>get_handle</name>
      <anchor>a7</anchor>
      <arglist>(int become_owner=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_handle</name>
      <anchor>a8</anchor>
      <arglist>(ACE_SHLIB_HANDLE handle, int close_on_destruction=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_DLL</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_DLL &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_DLL &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SHLIB_HANDLE</type>
      <name>handle_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>close_on_destruction_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DLL_Strategy</name>
    <filename>classACE__DLL__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Creation_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_DLL_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DLL_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char dll_name[], const char factory_function[], const char svc_name[], ACE_Service_Repository *, ACE_Thread_Manager *=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const char dll_name[], const char factory_function[], const char svc_name[], ACE_Service_Repository *, ACE_Thread_Manager *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>a3</anchor>
      <arglist>(SVC_HANDLER *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Creation_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>inherited</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char</type>
      <name>dll_name_</name>
      <anchor>n0</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char</type>
      <name>factory_function_</name>
      <anchor>n1</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char</type>
      <name>svc_name_</name>
      <anchor>n2</anchor>
      <arglist>[MAXNAMELEN+1]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Service_Repository *</type>
      <name>svc_rep_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DLList</name>
    <filename>classACE__DLList.html</filename>
    <templarg>T</templarg>
    <base>ACE_Double_Linked_List&lt; ACE_DLList_Node &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_DLList&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert_tail</name>
      <anchor>a1</anchor>
      <arglist>(T *new_item)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert_head</name>
      <anchor>a2</anchor>
      <arglist>(T *new_item)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>delete_head</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>delete_tail</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchor>a5</anchor>
      <arglist>(T *&amp;item, size_t slot=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(ACE_DLList_Node *n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DLList</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_DLList</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_DLList&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_DLList</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_DLList_Node</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator&lt; T &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_DLList_Iterator&lt; T &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_DLList_Reverse_Iterator&lt; T &gt;</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DLList_Iterator</name>
    <filename>classACE__DLList__Iterator.html</filename>
    <templarg>T</templarg>
    <base>ACE_Double_Linked_List_Iterator&lt; ACE_DLList_Node &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_DLList_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_DLList&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(ACE_DLList&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(T *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>next</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DLList&lt; T &gt; *</type>
      <name>list_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_DLList&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_DLList_Node</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DLList_Node</name>
    <filename>classACE__DLList__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_DLList_Node</name>
      <anchor>a0</anchor>
      <arglist>(void *&amp;i, ACE_DLList_Node *n=0, ACE_DLList_Node *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_DLList_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>item_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_DLList_Node *</type>
      <name>next_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_DLList_Node *</type>
      <name>prev_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_DLList_Node</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Double_Linked_List&lt; ACE_DLList_Node &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator_Base&lt; ACE_DLList_Node &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator&lt; ACE_DLList_Node &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Reverse_Iterator&lt; ACE_DLList_Node &gt;</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DLList_Reverse_Iterator</name>
    <filename>classACE__DLList__Reverse__Iterator.html</filename>
    <templarg>T</templarg>
    <base>ACE_Double_Linked_List_Reverse_Iterator&lt; ACE_DLList_Node &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_DLList_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_DLList&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(ACE_DLList&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(T *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>next</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DLList&lt; T &gt; *</type>
      <name>list_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_DLList&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_DLList_Node</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_DNode</name>
    <filename>classACE__DNode.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>~ACE_DNode</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_DNode</name>
      <anchor>c0</anchor>
      <arglist>(const T &amp;i, ACE_DNode&lt; T &gt; *n=0, ACE_DNode&lt; T &gt; *p=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DNode&lt; T &gt; *</type>
      <name>next_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DNode&lt; T &gt; *</type>
      <name>prev_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>item_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Ordered_MultiSet&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Ordered_MultiSet_Iterator&lt; T &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Double_Linked_List</name>
    <filename>classACE__Double__Linked__List.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ACE_Double_Linked_List_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Double_Linked_List_Reverse_Iterator&lt; T &gt;</type>
      <name>REVERSE_ITERATOR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Double_Linked_List</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Double_Linked_List</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Double_Linked_List</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert_tail</name>
      <anchor>a6</anchor>
      <arglist>(T *new_item)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert_head</name>
      <anchor>a7</anchor>
      <arglist>(T *new_item)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>delete_head</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>delete_tail</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchor>a11</anchor>
      <arglist>(T *&amp;item, size_t slot=0)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a14</anchor>
      <arglist>(T *n)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>delete_nodes</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>copy_nodes</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Double_Linked_List&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>init_head</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>insert_element</name>
      <anchor>b3</anchor>
      <arglist>(T *new_item, int before=0, T *old_item=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>remove_element</name>
      <anchor>b4</anchor>
      <arglist>(T *item)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T *</type>
      <name>head_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator_Base&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator&lt; T &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Reverse_Iterator&lt; T &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Double_Linked_List_Iterator</name>
    <filename>classACE__Double__Linked__List__Iterator.html</filename>
    <templarg>T</templarg>
    <base>ACE_Double_Linked_List_Iterator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Double_Linked_List_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>advance_and_remove</name>
      <anchor>a4</anchor>
      <arglist>(int dont_remove)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Double_Linked_List_Iterator_Base</name>
    <filename>classACE__Double__Linked__List__Iterator__Base.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a0</anchor>
      <arglist>(T *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator *</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Double_Linked_List_Iterator_Base</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Double_Linked_List_Iterator_Base</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Double_Linked_List_Iterator_Base&lt; T &gt; &amp;iter)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>go_head</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>go_tail</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>T *</type>
      <name>not_done</name>
      <anchor>b4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>T *</type>
      <name>do_advance</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>T *</type>
      <name>do_retreat</name>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_i</name>
      <anchor>b7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T *</type>
      <name>current_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const ACE_Double_Linked_List&lt; T &gt; *</type>
      <name>dllist_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Double_Linked_List_Reverse_Iterator</name>
    <filename>classACE__Double__Linked__List__Reverse__Iterator.html</filename>
    <templarg>T</templarg>
    <base>ACE_Double_Linked_List_Iterator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Double_Linked_List_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Double_Linked_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>advance_and_remove</name>
      <anchor>a4</anchor>
      <arglist>(int dont_remove)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Reverse_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Reverse_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Reverse_Iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Double_Linked_List_Reverse_Iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dummy_Node</name>
    <filename>classACE__Dummy__Node.html</filename>
    <base>ACE_Parse_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Dummy_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Static_Node *, const ACE_Parse_Node *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Dummy_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Static_Node *</type>
      <name>node_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Parse_Node *</type>
      <name>mods_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dumpable</name>
    <filename>classACE__Dumpable.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Dumpable</name>
      <anchor>a0</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Dumpable</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>this_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_ODB</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Dumpable_Ptr</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dumpable_Adapter</name>
    <filename>classACE__Dumpable__Adapter.html</filename>
    <templarg>Concrete</templarg>
    <base>ACE_Dumpable</base>
    <member kind="function">
      <type></type>
      <name>ACE_Dumpable_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const Concrete *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Dumpable_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Concrete *</type>
      <name>operator-&gt;</name>
      <anchor>a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Concrete *</type>
      <name>this_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dumpable_Ptr</name>
    <filename>classACE__Dumpable__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Dumpable_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Dumpable *dumper=0)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Dumpable *</type>
      <name>operator-&gt;</name>
      <anchor>a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Dumpable *dumper) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Dumpable *</type>
      <name>dumper_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dynamic</name>
    <filename>classACE__Dynamic.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Dynamic</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Dynamic</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_dynamic</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Dynamic *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>is_dynamic_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dynamic_Message_Queue</name>
    <filename>classACE__Dynamic__Message__Queue.html</filename>
    <templarg></templarg>
    <base>ACE_Message_Queue&lt; ACE_SYNCH_USE &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Dynamic_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Dynamic_Message_Strategy &amp;message_strategy, size_t hwm=ACE_Message_Queue_Base::DEFAULT_HWM, size_t lwm=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Dynamic_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_messages</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *&amp;list_head, ACE_Message_Block *&amp;list_tail, u_int status_flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_head</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_tail</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_head</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Message_Block *new_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>sublist_enqueue_i</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Message_Block *new_item, const ACE_Time_Value &amp;current_time, ACE_Message_Block *&amp;sublist_head, ACE_Message_Block *&amp;sublist_tail, ACE_Dynamic_Message_Strategy::Priority_Status status)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_head_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>refresh_queue</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>refresh_pending_queue</name>
      <anchor>b4</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>refresh_late_queue</name>
      <anchor>b5</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>pending_head_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>pending_tail_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>late_head_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>late_tail_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>beyond_late_head_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>beyond_late_tail_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Dynamic_Message_Strategy &amp;</type>
      <name>message_strategy_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Dynamic_Message_Queue&lt; _ACE_SYNCH_MUTEX_T, _ACE_SYNCH_CONDITION_T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Dynamic_Message_Queue</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Dynamic_Message_Queue&lt; _ACE_SYNCH_MUTEX_T, _ACE_SYNCH_CONDITION_T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>peek_dequeue_head</name>
      <anchor>c2</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dynamic_Message_Strategy</name>
    <filename>classACE__Dynamic__Message__Strategy.html</filename>
    <member kind="enumeration">
      <name>Priority_Status</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PENDING</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LATE</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEYOND_LATE</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANY_STATUS</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Dynamic_Message_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(u_long static_bit_field_mask, u_long static_bit_field_shift, u_long dynamic_priority_max, u_long dynamic_priority_offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Dynamic_Message_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Priority_Status</type>
      <name>priority_status</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block &amp;mb, const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>static_bit_field_mask</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>static_bit_field_mask</name>
      <anchor>a4</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>static_bit_field_shift</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>static_bit_field_shift</name>
      <anchor>a6</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>dynamic_priority_max</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dynamic_priority_max</name>
      <anchor>a8</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>dynamic_priority_offset</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dynamic_priority_offset</name>
      <anchor>a10</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>convert_priority</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Time_Value &amp;priority, const ACE_Message_Block &amp;mb)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>static_bit_field_mask_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>static_bit_field_shift_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>dynamic_priority_max_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>dynamic_priority_offset_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>max_late_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>min_pending_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>pending_shift_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dynamic_Node</name>
    <filename>classACE__Dynamic__Node.html</filename>
    <base>ACE_Static_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Dynamic_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Service_Type *, ACE_TCHAR *params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Dynamic_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ACE_Service_Type *</type>
      <name>record</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Service_Type *</type>
      <name>record_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dynamic_Service</name>
    <filename>classACE__Dynamic__Service.html</filename>
    <templarg>TYPE</templarg>
    <base>ACE_Dynamic_Service_Base</base>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Dynamic_Service_Base</name>
    <filename>classACE__Dynamic__Service__Base.html</filename>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>void *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_EH_Dispatch_Info</name>
    <filename>classACE__EH__Dispatch__Info.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_EH_Dispatch_Info</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask, ACE_EH_PTMF callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dispatch</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Event_Handler *</type>
      <name>event_handler_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Reactor_Mask</type>
      <name>mask_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_EH_PTMF</type>
      <name>callback_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dispatch_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_EH_Dispatch_Info</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_EH_Dispatch_Info &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_EH_Dispatch_Info &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_EH_Dispatch_Info &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Env_Value</name>
    <filename>classACE__Env__Value.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Env_Value</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Env_Value</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *varname, const T &amp;vardefault)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Env_Value</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *varname, const T &amp;defval)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>varname</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Env_Value</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Env_Value&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Env_Value&lt; T &gt;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Env_Value&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fetch_value</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>varname_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>value_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Equal_To</name>
    <filename>classACE__Equal__To.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TYPE &amp;lhs, const TYPE &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Errno_Guard</name>
    <filename>classACE__Errno__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Errno_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_ERRNO_TYPE &amp;errno_ref, int error)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Errno_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ERRNO_TYPE &amp;errno_ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Errno_Guard</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(int error)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(int error)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(int error)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>error_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Event</name>
    <filename>classACE__Event.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Event</name>
      <anchor>a0</anchor>
      <arglist>(int manual_reset=0, int initial_state=0, int type=USYNC_THREAD, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Event</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_event_t</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(ACE_event_t new_handle)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Time_Value *abstime, int use_absolute_time=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pulse</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_event_t</type>
      <name>handle_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>removed_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Event</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Event &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ACE_Event &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Event &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Event_Handler</name>
    <filename>classACE__Event__Handler.html</filename>
    <member kind="enumvalue">
      <name>LO_PRIORITY</name>
      <anchor>s15s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HI_PRIORITY</name>
      <anchor>s15s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NULL_MASK</name>
      <anchor>s15s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_MASK</name>
      <anchor>s15s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_MASK</name>
      <anchor>s15s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXCEPT_MASK</name>
      <anchor>s15s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCEPT_MASK</name>
      <anchor>s15s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECT_MASK</name>
      <anchor>s15s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMER_MASK</name>
      <anchor>s15s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QOS_MASK</name>
      <anchor>s15s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUP_QOS_MASK</name>
      <anchor>s15s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_MASK</name>
      <anchor>s15s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_EVENTS_MASK</name>
      <anchor>s15s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RWE_MASK</name>
      <anchor>s15s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DONT_CALL</name>
      <anchor>s15s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Event_Handler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_handle</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>priority</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>priority</name>
      <anchor>a4</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>a5</anchor>
      <arglist>(ACE_HANDLE fd=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_output</name>
      <anchor>a6</anchor>
      <arglist>(ACE_HANDLE fd=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_exception</name>
      <anchor>a7</anchor>
      <arglist>(ACE_HANDLE fd=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, const void *act=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_exit</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Process *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>a10</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask close_mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>a11</anchor>
      <arglist>(int signum, siginfo_t *=0, ucontext_t *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_qos</name>
      <anchor>a13</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_group_qos</name>
      <anchor>a14</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reactor</name>
      <anchor>a15</anchor>
      <arglist>(ACE_Reactor *reactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor *</type>
      <name>reactor</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>read_adapter</name>
      <anchor>d0</anchor>
      <arglist>(void *event_handler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>register_stdin_handler</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor *reactor, ACE_Thread_Manager *thr_mgr, int flags=THR_DETACHED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>remove_stdin_handler</name>
      <anchor>d2</anchor>
      <arglist>(ACE_Reactor *reactor, ACE_Thread_Manager *thr_mgr)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Event_Handler</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Reactor *=0, int priority=ACE_Event_Handler::LO_PRIORITY)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>priority_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Event_Handler_Handle_Timeout_Upcall</name>
    <filename>classACE__Event__Handler__Handle__Timeout__Upcall.html</filename>
    <templarg>ACE_LOCK</templarg>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; ACE_Event_Handler *, ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_LOCK &gt;, ACE_LOCK &gt;</type>
      <name>TIMER_QUEUE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Event_Handler_Handle_Timeout_Upcall</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Event_Handler_Handle_Timeout_Upcall</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>timeout</name>
      <anchor>a2</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Event_Handler *handler, const void *arg, const ACE_Time_Value &amp;cur_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancellation</name>
      <anchor>a3</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Event_Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deletion</name>
      <anchor>a4</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Event_Handler *handler, const void *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Event_Handler_Handle_Timeout_Upcall</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Event_Handler_Handle_Timeout_Upcall&lt; ACE_LOCK &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Event_Tuple</name>
    <filename>classACE__Event__Tuple.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Event_Tuple</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Event_Tuple</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_HANDLE h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Event_Tuple</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Event_Tuple &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Event_Tuple &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Event_Handler *</type>
      <name>event_handler_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FIFO</name>
    <filename>classACE__FIFO.html</filename>
    <base>ACE_IPC_SAP</base>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags, int perms, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *&amp;rendezvous) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_FIFO</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_FIFO</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags, int perms, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>rendezvous_</name>
      <anchor>o0</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FIFO_Caching_Strategy</name>
    <filename>classACE__FIFO__Caching__Strategy.html</filename>
    <templarg>ATTRIBUTES</templarg>
    <templarg>CACHING_UTILITY</templarg>
    <member kind="typedef">
      <type>ATTRIBUTES</type>
      <name>CACHING_ATTRIBUTES</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Caching_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ATTRIBUTES</type>
      <name>attributes</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>purge_percent</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge_percent</name>
      <anchor>a3</anchor>
      <arglist>(double percentage)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_bind</name>
      <anchor>a4</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_find</name>
      <anchor>a5</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_unbind</name>
      <anchor>a6</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_trybind</name>
      <anchor>a7</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_rebind</name>
      <anchor>a8</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>CACHING_UTILITY &amp;</type>
      <name>caching_utility</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ATTRIBUTES</type>
      <name>order_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>purge_percent_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CACHING_UTILITY</type>
      <name>caching_utility_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FIFO_Recv</name>
    <filename>classACE__FIFO__Recv.html</filename>
    <base>ACE_FIFO</base>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Recv</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Recv</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_CREAT|O_RDONLY, int perms=ACE_DEFAULT_FILE_PERMS, int persistent=1, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_CREAT|O_RDONLY, int perms=ACE_DEFAULT_FILE_PERMS, int persistent=1, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a4</anchor>
      <arglist>(void *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a5</anchor>
      <arglist>(void *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>aux_handle_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FIFO_Recv_Msg</name>
    <filename>classACE__FIFO__Recv__Msg.html</filename>
    <base>ACE_FIFO_Recv</base>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Recv_Msg</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Recv_Msg</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_CREAT|O_RDONLY, int perms=ACE_DEFAULT_FILE_PERMS, int persistent=1, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_CREAT|O_RDONLY, int perms=ACE_DEFAULT_FILE_PERMS, int persistent=1, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Str_Buf &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a4</anchor>
      <arglist>(void *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FIFO_Send</name>
    <filename>classACE__FIFO__Send.html</filename>
    <base>ACE_FIFO</base>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Send</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Send</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_WRONLY, int perms=ACE_DEFAULT_FILE_PERMS, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_WRONLY, int perms=ACE_DEFAULT_FILE_PERMS, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a3</anchor>
      <arglist>(const void *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a4</anchor>
      <arglist>(const void *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FIFO_Send_Msg</name>
    <filename>classACE__FIFO__Send__Msg.html</filename>
    <base>ACE_FIFO_Send</base>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Send_Msg</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FIFO_Send_Msg</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_WRONLY, int perms=ACE_DEFAULT_FILE_PERMS, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *rendezvous, int flags=O_WRONLY, int perms=ACE_DEFAULT_FILE_PERMS, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Str_Buf &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a4</anchor>
      <arglist>(const void *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FILE</name>
    <filename>classACE__FILE.html</filename>
    <base>ACE_IO_SAP</base>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unlink</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_info</name>
      <anchor>a3</anchor>
      <arglist>(ACE_FILE_Info *finfo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_info</name>
      <anchor>a4</anchor>
      <arglist>(ACE_FILE_Info &amp;finfo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>truncate</name>
      <anchor>a5</anchor>
      <arglist>(off_t length)</arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>seek</name>
      <anchor>a6</anchor>
      <arglist>(off_t offset, int whence=SEEK_CUR)</arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>position</name>
      <anchor>a7</anchor>
      <arglist>(long offset, int startpos)</arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>tell</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>position</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>disable</name>
      <anchor>a10</anchor>
      <arglist>(int signum) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_FILE</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_FILE_Addr</type>
      <name>addr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FILE_Addr</name>
    <filename>classACE__FILE__Addr.html</filename>
    <base>ACE_Addr</base>
    <member kind="function">
      <type></type>
      <name>ACE_FILE_Addr</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FILE_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_FILE_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_FILE_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_FILE_Addr</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function">
      <type>ACE_FILE_Addr &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_FILE_Addr &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a7</anchor>
      <arglist>(ACE_TCHAR *addr, size_t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_FILE_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_FILE_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>get_path_name</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>filename_</name>
      <anchor>o0</anchor>
      <arglist>[MAXNAMLEN+1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FILE_Connector</name>
    <filename>classACE__FILE__Connector.html</filename>
    <member kind="typedef">
      <type>ACE_FILE_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_FILE_IO</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FILE_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FILE_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_FILE_IO &amp;new_io, const ACE_FILE_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR|O_CREAT, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a2</anchor>
      <arglist>(ACE_FILE_IO &amp;new_io, const ACE_FILE_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR|O_CREAT, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset_new_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FILE_Info</name>
    <filename>classACE__FILE__Info.html</filename>
    <member kind="variable">
      <type>mode_t</type>
      <name>mode_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>nlink_t</type>
      <name>nlink_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>off_t</type>
      <name>size_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FILE_IO</name>
    <filename>classACE__FILE__IO.html</filename>
    <base>ACE_FILE</base>
    <member kind="typedef">
      <type>ACE_FILE_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_FILE_IO</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a1</anchor>
      <arglist>(const void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a2</anchor>
      <arglist>(void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a3</anchor>
      <arglist>(const void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Message_Block *message_block, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a5</anchor>
      <arglist>(void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a6</anchor>
      <arglist>(const iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a7</anchor>
      <arglist>(iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a8</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a9</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a10</anchor>
      <arglist>(const void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a11</anchor>
      <arglist>(void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>sendv</name>
      <anchor>a12</anchor>
      <arglist>(const iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recvv</name>
      <anchor>a13</anchor>
      <arglist>(iovec *io_vec)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>sendv_n</name>
      <anchor>a14</anchor>
      <arglist>(const iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recvv_n</name>
      <anchor>a15</anchor>
      <arglist>(iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_FILE_Connector</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_File_Lock</name>
    <filename>classACE__File__Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_File_Lock</name>
      <anchor>a0</anchor>
      <arglist>(ACE_HANDLE handle=ACE_INVALID_HANDLE, int unlink_in_destructor=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_File_Lock</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *filename, int flags, mode_t mode=0, int unlink_in_destructor=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *filename, int flags, mode_t mode=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_File_Lock</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a4</anchor>
      <arglist>(int unlink_file=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a5</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a8</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a9</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a10</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a11</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a12</anchor>
      <arglist>(short whence=0, off_t start=0, off_t len=1)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchor>a14</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_OS::ace_flock_t</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>removed_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>unlink_in_destructor_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_File_Lock &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_File_Lock</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_File_Lock &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Filecache</name>
    <filename>classACE__Filecache.html</filename>
    <member kind="enumvalue">
      <name>ACE_DEFAULT_VIRTUAL_FILESYSTEM_TABLE_SIZE</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_DEFAULT_VIRTUAL_FILESYSTEM_CACHE_SIZE</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Filecache</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Filecache_Object *</type>
      <name>fetch</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *filename, int mapit=1)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Filecache_Object *</type>
      <name>remove</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Filecache_Object *</type>
      <name>create</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *filename, int size)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Filecache_Object *</type>
      <name>finish</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Filecache_Object *&amp;new_file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Filecache *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Filecache_Object *</type>
      <name>insert_i</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_TCHAR *filename, ACE_SYNCH_RW_MUTEX &amp;filelock, int mapit)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Filecache_Object *</type>
      <name>remove_i</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Filecache_Object *</type>
      <name>update_i</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_TCHAR *filename, ACE_SYNCH_RW_MUTEX &amp;filelock, int mapit)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Filecache</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Filecache_Hash</type>
      <name>hash_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_RW_MUTEX</type>
      <name>hash_lock_</name>
      <anchor>o2</anchor>
      <arglist>[ACE_DEFAULT_VIRTUAL_FILESYSTEM_TABLE_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_RW_MUTEX</type>
      <name>file_lock_</name>
      <anchor>o3</anchor>
      <arglist>[ACE_DEFAULT_VIRTUAL_FILESYSTEM_TABLE_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Filecache *</type>
      <name>cvf_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Filecache_Handle</name>
    <filename>classACE__Filecache__Handle.html</filename>
    <member kind="enumvalue">
      <name>ACE_SUCCESS</name>
      <anchor>s7s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_ACCESS_FAILED</name>
      <anchor>s7s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN_FAILED</name>
      <anchor>s7s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_COPY_FAILED</name>
      <anchor>s7s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_STAT_FAILED</name>
      <anchor>s7s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_MEMMAP_FAILED</name>
      <anchor>s7s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WRITE_FAILED</name>
      <anchor>s7s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Filecache_Handle</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *filename, ACE_Filecache_Flag mapit=ACE_MAPIT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Filecache_Handle</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *filename, int size, ACE_Filecache_Flag mapit=ACE_MAPIT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Filecache_Handle</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>address</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Filecache_Handle</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>init</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Filecache_Object *</type>
      <name>file_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mapit_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Filecache_Object</name>
    <filename>classACE__Filecache__Object.html</filename>
    <member kind="enumeration">
      <name>Creation_States</name>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_READING</name>
      <anchor>s9s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WRITING</name>
      <anchor>s9s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Error_Conditions</name>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_SUCCESS</name>
      <anchor>s10s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_ACCESS_FAILED</name>
      <anchor>s10s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN_FAILED</name>
      <anchor>s10s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_COPY_FAILED</name>
      <anchor>s10s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_STAT_FAILED</name>
      <anchor>s10s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_MEMMAP_FAILED</name>
      <anchor>s10s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WRITE_FAILED</name>
      <anchor>s10s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Filecache_Object</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *filename, ACE_SYNCH_RW_MUTEX &amp;lock, LPSECURITY_ATTRIBUTES sa=0, int mapit=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Filecache_Object</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *filename, int size, ACE_SYNCH_RW_MUTEX &amp;lock, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Filecache_Object</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error</name>
      <anchor>a6</anchor>
      <arglist>(int error_value, const ACE_TCHAR *s=ACE_LIB_TEXT(&quot;ACE_Filecache_Object&quot;))</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>filename</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>address</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>update</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Filecache_Object</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>init</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>error_i</name>
      <anchor>c0</anchor>
      <arglist>(int error_value, const ACE_TCHAR *s=ACE_LIB_TEXT(&quot;ACE_Filecache_Object&quot;))</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>tempname_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>filename_</name>
      <anchor>o1</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Mem_Map</type>
      <name>mmap_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_stat</type>
      <name>stat_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>action_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>error_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stale_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>sa_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_RW_MUTEX</type>
      <name>junklock_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_RW_MUTEX &amp;</type>
      <name>lock_</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Filecache</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Fixed_Set</name>
    <filename>classACE__Fixed__Set.html</filename>
    <templarg>T</templarg>
    <templarg>ACE_SIZE</templarg>
    <member kind="typedef">
      <type>ACE_Fixed_Set_Iterator&lt; T, ACE_SIZE &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Fixed_Set_Iterator&lt; T, ACE_SIZE &gt;</type>
      <name>CONST_ITERATOR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Fixed_Set</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Fixed_Set</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Fixed_Set&lt; T, ACE_SIZE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Fixed_Set&lt; T, ACE_SIZE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Fixed_Set</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a8</anchor>
      <arglist>(const T &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>item_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>is_free_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Fixed_Set::@2</type>
      <name>search_structure_</name>
      <anchor>o0</anchor>
      <arglist>[ACE_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Fixed_Set_Iterator&lt; T, ACE_SIZE &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Fixed_Set_Const_Iterator&lt; T, ACE_SIZE &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Fixed_Set_Const_Iterator</name>
    <filename>classACE__Fixed__Set__Const__Iterator.html</filename>
    <templarg>T</templarg>
    <templarg>ACE_SIZE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Fixed_Set_Const_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Fixed_Set&lt; T, ACE_SIZE &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Fixed_Set&lt; T, ACE_SIZE &gt; &amp;</type>
      <name>s_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ssize_t</type>
      <name>next_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Fixed_Set_Iterator</name>
    <filename>classACE__Fixed__Set__Iterator.html</filename>
    <templarg>T</templarg>
    <templarg>ACE_SIZE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Fixed_Set_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Fixed_Set&lt; T, ACE_SIZE &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Fixed_Set&lt; T, ACE_SIZE &gt; &amp;</type>
      <name>s_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ssize_t</type>
      <name>next_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Fixed_Stack</name>
    <filename>classACE__Fixed__Stack.html</filename>
    <templarg>T</templarg>
    <templarg>ACE_SIZE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Fixed_Stack</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Fixed_Stack</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Fixed_Stack&lt; T, ACE_SIZE &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Fixed_Stack&lt; T, ACE_SIZE &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Fixed_Stack</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>push</name>
      <anchor>a4</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pop</name>
      <anchor>a5</anchor>
      <arglist>(T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>top</name>
      <anchor>a6</anchor>
      <arglist>(T &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>top_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>stack_</name>
      <anchor>o2</anchor>
      <arglist>[ACE_SIZE]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Flag_Manip</name>
    <filename>classACE__Flag__Manip.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>set_flags</name>
      <anchor>d0</anchor>
      <arglist>(ACE_HANDLE handle, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>clr_flags</name>
      <anchor>d1</anchor>
      <arglist>(ACE_HANDLE handle, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_flags</name>
      <anchor>d2</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Flow_Spec</name>
    <filename>classACE__Flow__Spec.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Flow_Spec</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Flow_Spec</name>
      <anchor>a1</anchor>
      <arglist>(u_long token_rate, u_long token_bucket_size, u_long peak_bandwidth, u_long latency, u_long delay_variation, ACE_SERVICE_TYPE service_type, u_long max_sdu_size, u_long minimum_policed_size, int ttl, int priority)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>token_rate</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>token_rate</name>
      <anchor>a3</anchor>
      <arglist>(u_long tr)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>token_bucket_size</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>token_bucket_size</name>
      <anchor>a5</anchor>
      <arglist>(u_long tbs)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>peak_bandwidth</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peak_bandwidth</name>
      <anchor>a7</anchor>
      <arglist>(u_long pb)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>latency</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>latency</name>
      <anchor>a9</anchor>
      <arglist>(u_long l)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>delay_variation</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delay_variation</name>
      <anchor>a11</anchor>
      <arglist>(u_long dv)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SERVICE_TYPE</type>
      <name>service_type</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>service_type</name>
      <anchor>a13</anchor>
      <arglist>(ACE_SERVICE_TYPE st)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>max_sdu_size</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max_sdu_size</name>
      <anchor>a15</anchor>
      <arglist>(u_long mss)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>minimum_policed_size</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimum_policed_size</name>
      <anchor>a17</anchor>
      <arglist>(u_long mps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ttl</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ttl</name>
      <anchor>a19</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>priority</name>
      <anchor>a21</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>token_rate_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>token_bucket_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>peak_bandwidth_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>latency_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>delay_variation_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SERVICE_TYPE</type>
      <name>service_type_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>max_sdu_size_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>minimum_policed_size_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ttl_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>priority_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_FlReactor</name>
    <filename>classACE__FlReactor.html</filename>
    <base>ACE_Select_Reactor_T&lt; ACE_Select_Reactor_Token &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_FlReactor</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=DEFAULT_SIZE, int restart=0, ACE_Sig_Handler *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_FlReactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Event_Handler *handler, const void *arg, const ACE_Time_Value &amp;delay_time, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_timer_interval</name>
      <anchor>a3</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Event_Handler *handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a5</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_for_multiple_events</name>
      <anchor>b4</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;, ACE_Time_Value *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_timeout</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_FlReactor</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_FlReactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_FlReactor &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_FlReactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>fl_io_proc</name>
      <anchor>f0</anchor>
      <arglist>(int fd, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>fl_timeout_proc</name>
      <anchor>f1</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Framework_Component</name>
    <filename>classACE__Framework__Component.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Framework_Component</name>
      <anchor>a0</anchor>
      <arglist>(const void *_this)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Framework_Component</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>this_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Framework_Repository</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Framework_Component_T</name>
    <filename>classACE__Framework__Component__T.html</filename>
    <templarg>Concrete</templarg>
    <base>ACE_Framework_Component</base>
    <member kind="function">
      <type></type>
      <name>ACE_Framework_Component_T</name>
      <anchor>a0</anchor>
      <arglist>(const Concrete *concrete)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Framework_Component_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Framework_Repository</name>
    <filename>classACE__Framework__Repository.html</filename>
    <member kind="enumvalue">
      <name>DEFAULT_SIZE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Framework_Repository</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(int size=DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_component</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Framework_Component *fc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current_size</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>total_size</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Framework_Repository *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(int size=ACE_Framework_Repository::DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_singleton</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Framework_Repository</name>
      <anchor>c0</anchor>
      <arglist>(int size=ACE_Framework_Repository::DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Framework_Repository</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Framework_Repository &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Framework_Repository &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Framework_Repository &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Framework_Component **</type>
      <name>component_vector_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>total_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Framework_Repository *</type>
      <name>repository_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Framework_Component</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Free_List</name>
    <filename>classACE__Free__List.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Free_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a1</anchor>
      <arglist>(T *element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T *</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resize</name>
      <anchor>a4</anchor>
      <arglist>(size_t newsize)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Free_List&lt; ACE_Cached_Mem_Pool_Node&lt; T &gt;&gt;</name>
    <filename>classACE__Free__List_3_01ACE__Cached__Mem__Pool__Node_3_01T_01_4_4.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Function_Node</name>
    <filename>classACE__Function__Node.html</filename>
    <base>ACE_Location_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Function_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *pathname, const ACE_TCHAR *func_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>symbol</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Service_Object_Exterminator *gobbler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Function_Node</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>function_name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Future</name>
    <filename>classACE__Future.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Future</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Future</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Future&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Future</name>
      <anchor>a2</anchor>
      <arglist>(const T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Future</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Future&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a5</anchor>
      <arglist>(const T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Future&lt; T &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Future&lt; T &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a9</anchor>
      <arglist>(const T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchor>a10</anchor>
      <arglist>(T &amp;value, ACE_Time_Value *tv=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ready</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>attach</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Future_Observer&lt; T &gt; *observer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>detach</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Future_Observer&lt; T &gt; *observer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Future_Rep&lt; T &gt; *</type>
      <name>get_rep</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Future_Rep&lt; T &gt;</type>
      <name>FUTURE_REP</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>operator new</name>
      <anchor>c0</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchor>c1</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator &amp;</name>
      <anchor>c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FUTURE_REP *</type>
      <name>future_rep_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Future_Holder</name>
    <filename>classACE__Future__Holder.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Future_Holder</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Future&lt; T &gt; &amp;future)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Future_Holder</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Future&lt; T &gt;</type>
      <name>item_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Future_Holder</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Future_Observer</name>
    <filename>classACE__Future__Observer.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Future_Observer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Future&lt; T &gt; &amp;future)=0</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Future_Observer</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Future_Rep</name>
    <filename>classACE__Future__Rep.html</filename>
    <templarg>T</templarg>
    <member kind="typedef" protection="protected">
      <type>ACE_Future_Observer&lt; T &gt;</type>
      <name>OBSERVER</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Unbounded_Set&lt; OBSERVER *&gt;</type>
      <name>OBSERVER_COLLECTION</name>
      <anchor>u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>set</name>
      <anchor>c0</anchor>
      <arglist>(const T &amp;r, ACE_Future&lt; T &gt; &amp;caller)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get</name>
      <anchor>c1</anchor>
      <arglist>(T &amp;value, ACE_Time_Value *tv) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>attach</name>
      <anchor>c2</anchor>
      <arglist>(ACE_Future_Observer&lt; T &gt; *observer, ACE_Future&lt; T &gt; &amp;caller)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>detach</name>
      <anchor>c3</anchor>
      <arglist>(ACE_Future_Observer&lt; T &gt; *observer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>operator T</name>
      <anchor>c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dump</name>
      <anchor>c5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ready</name>
      <anchor>c6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Future_Rep</name>
      <anchor>c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ACE_Future_Rep</name>
      <anchor>c8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Future_Rep&lt; T &gt; *</type>
      <name>internal_create</name>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Future_Rep&lt; T &gt; *</type>
      <name>create</name>
      <anchor>f1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Future_Rep&lt; T &gt; *</type>
      <name>attach</name>
      <anchor>f2</anchor>
      <arglist>(ACE_Future_Rep&lt; T &gt; *&amp;rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>detach</name>
      <anchor>f3</anchor>
      <arglist>(ACE_Future_Rep&lt; T &gt; *&amp;rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>assign</name>
      <anchor>f4</anchor>
      <arglist>(ACE_Future_Rep&lt; T &gt; *&amp;rep, ACE_Future_Rep&lt; T &gt; *new_rep)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>value_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ref_count_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBSERVER_COLLECTION</type>
      <name>observer_collection_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Mutex</type>
      <name>value_ready_mutex_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Condition_Thread_Mutex</type>
      <name>value_ready_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Future&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Future_Set</name>
    <filename>classACE__Future__Set.html</filename>
    <templarg>T</templarg>
    <base>ACE_Future_Observer</base>
    <member kind="function">
      <type></type>
      <name>ACE_Future_Set</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Message_Queue&lt; ACE_SYNCH &gt; *future_notification_queue_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Future_Set</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Future&lt; T &gt; &amp;future)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_readable</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Future&lt; T &gt; &amp;result, ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Future&lt; T &gt; &amp;future)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Future&lt; T &gt;</type>
      <name>FUTURE</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Future_Rep&lt; T &gt;</type>
      <name>FUTURE_REP</name>
      <anchor>u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Future_Holder&lt; T &gt;</type>
      <name>FUTURE_HOLDER</name>
      <anchor>u2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Pointer_Hash&lt; FUTURE_REP *&gt;</type>
      <name>FUTURE_REP_HASH</name>
      <anchor>u3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Equal_To&lt; FUTURE_REP *&gt;</type>
      <name>FUTURE_REP_COMPARE</name>
      <anchor>u4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Hash_Map_Manager_Ex&lt; FUTURE_REP *, FUTURE_HOLDER *, FUTURE_REP_HASH, FUTURE_REP_COMPARE, ACE_Null_Mutex &gt;</type>
      <name>FUTURE_HASH_MAP</name>
      <anchor>u5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Future_Set&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Future_Set</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Future_Set&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FUTURE_HASH_MAP</type>
      <name>future_map_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Queue&lt; ACE_SYNCH &gt; *</type>
      <name>future_notification_queue_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>delete_queue_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Get_Opt</name>
    <filename>classACE__Get__Opt.html</filename>
    <member kind="enumvalue">
      <name>REQUIRE_ORDER</name>
      <anchor>s6s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERMUTE_ARGS</name>
      <anchor>s6s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RETURN_IN_ORDER</name>
      <anchor>s6s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OPTION_ARG_MODE</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ARG</name>
      <anchor>s7s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_REQUIRED</name>
      <anchor>s7s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_OPTIONAL</name>
      <anchor>s7s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Get_Opt</name>
      <anchor>a0</anchor>
      <arglist>(int argc, ACE_TCHAR **argv, const ACE_TCHAR *optstring, int skip_argv0=1, int report_errors=0, int ordering=PERMUTE_ARGS, int long_only=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Get_Opt</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *</type>
      <name>opt_arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>opt_ind</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>long_option</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *name, OPTION_ARG_MODE has_arg=NO_ARG)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>long_option</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_TCHAR *name, int short_option, OPTION_ARG_MODE has_arg=NO_ARG)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>long_option</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR **</type>
      <name>argv</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>optstring</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>argc_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR **</type>
      <name>argv_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>optind</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>opterr</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>optarg</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>nextchar_i</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>long_option_i</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>short_option_i</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>permute_args</name>
      <anchor>c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>permute</name>
      <anchor>c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Get_Opt</name>
      <anchor>c5</anchor>
      <arglist>(const ACE_Get_Opt &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Get_Opt &amp;</type>
      <name>operator=</name>
      <anchor>c6</anchor>
      <arglist>(const ACE_Get_Opt &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TString</type>
      <name>optstring_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>long_only_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>has_colon_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>nextchar_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ordering_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nonopt_start_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nonopt_end_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Get_Opt_Long_Option *</type>
      <name>long_option_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Array&lt; ACE_Get_Opt_Long_Option *&gt;</type>
      <name>long_opts_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Get_Opt::ACE_Get_Opt_Long_Option</name>
    <filename>classACE__Get__Opt_1_1ACE__Get__Opt__Long__Option.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Get_Opt_Long_Option</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name, int has_arg, int val=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Get_Opt_Long_Option</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Get_Opt_Long_Option &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>const ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>has_arg_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>val_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Guard</name>
    <filename>classACE__Guard.html</filename>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_LOCK &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_LOCK &amp;l, int block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LOCK &amp;l, int block, int become_owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Guard</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disown</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>locked</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>b0</anchor>
      <arglist>(ACE_LOCK *lock)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_LOCK *</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>owner_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Guard&lt; ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Guard&lt; ACE_LOCK &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Guard&lt; ACE_Null_Mutex &gt;</name>
    <filename>classACE__Guard_3_01ACE__Null__Mutex_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Null_Mutex &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Null_Mutex &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Guard</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>locked</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Guard&lt; ACE_Null_Mutex &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Guard&lt; ACE_Null_Mutex &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Guard&lt; ACE_Select_Reactor_Token_T&lt; ACE_Noop_Token &gt; &gt;</name>
    <filename>classACE__Guard_3_01ACE__Select__Reactor__Token__T_3_01ACE__Noop__Token_01_4_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Select_Reactor_Token_T&lt; ACE_Noop_Token &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Select_Reactor_Token_T&lt; ACE_Noop_Token &gt; &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Guard</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>locked</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Guard&lt; ACE_Select_Reactor_Token_T&lt; ACE_Noop_Token &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Guard</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Guard&lt; ACE_Select_Reactor_Token_T&lt; ACE_Noop_Token &gt; &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Handle_Gobbler</name>
    <filename>classACE__Handle__Gobbler.html</filename>
    <member kind="function">
      <type></type>
      <name>~ACE_Handle_Gobbler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>consume_handles</name>
      <anchor>a1</anchor>
      <arglist>(size_t n_handles_to_keep_available)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>free_handles</name>
      <anchor>a2</anchor>
      <arglist>(size_t n_handles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_remaining_handles</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Unbounded_Set&lt; ACE_HANDLE &gt;</type>
      <name>HANDLE_SET</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HANDLE_SET</type>
      <name>handle_set_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Handle_Ops</name>
    <filename>classACE__Handle__Ops.html</filename>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>handle_timed_open</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Time_Value *timeout, const ACE_TCHAR *name, int flags, int perms)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Handle_Set</name>
    <filename>classACE__Handle__Set.html</filename>
    <member kind="enumvalue">
      <name>MAXSIZE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Handle_Set</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Handle_Set</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_FD_SET_TYPE &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_set</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clr_bit</name>
      <anchor>a5</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_set</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>max_set</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchor>a8</anchor>
      <arglist>(ACE_HANDLE max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator fd_set *</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fd_set *</type>
      <name>fdset</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORDSIZE</name>
      <anchor>u2u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NBITS</name>
      <anchor>u2u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_max</name>
      <anchor>c0</anchor>
      <arglist>(ACE_HANDLE max)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>count_bits</name>
      <anchor>f0</anchor>
      <arglist>(u_long n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>max_handle_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fd_set</type>
      <name>mask_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const char</type>
      <name>nbits_</name>
      <anchor>r0</anchor>
      <arglist>[NBITS]</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Handle_Set_Iterator</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Handle_Set_Iterator</name>
    <filename>classACE__Handle__Set__Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Handle_Set_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Handle_Set &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Handle_Set_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_state</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>operator()</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Handle_Set &amp;</type>
      <name>handles_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int</type>
      <name>handle_index_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>word_num_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Handler</name>
    <filename>classACE__Handler.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Handler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Handler</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Proactor *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Handler</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_read_stream</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Asynch_Read_Stream::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_write_dgram</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Asynch_Write_Dgram::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_read_dgram</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Asynch_Read_Dgram::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_write_stream</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Asynch_Write_Stream::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_read_file</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Asynch_Read_File::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_write_file</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Asynch_Write_File::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_accept</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Asynch_Accept::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_transmit_file</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Asynch_Transmit_File::Result &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_time_out</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, const void *act=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_wakeup</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>proactor</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Proactor *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchor>a16</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Proactor *</type>
      <name>proactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Handler_Caching_Utility</name>
    <filename>classACE__Handler__Caching__Utility.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <templarg>ITERATOR</templarg>
    <templarg>ATTRIBUTES</templarg>
    <member kind="typedef">
      <type>ACE_Handler_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY_BASE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Handler_Caching_Utility</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt; *cleanup_strategy=0, int delete_cleanup_strategy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Handler_Caching_Utility</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clear_cache</name>
      <anchor>a2</anchor>
      <arglist>(CONTAINER &amp;container, double purge_percent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>minimum</name>
      <anchor>b0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *&amp;key_to_remove, VALUE *&amp;value_to_remove)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CLEANUP_STRATEGY_BASE *</type>
      <name>cleanup_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_cleanup_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Handler_Caching_Utility&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Handler_Caching_Utility</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Handler_Caching_Utility&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Handler_Cleanup_Strategy</name>
    <filename>classACE__Handler__Cleanup__Strategy.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <base>ACE_Cleanup_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *key, VALUE *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash</name>
    <filename>classACE__Hash.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type>u_long</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TYPE &amp;t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash&lt; char &gt;</name>
    <filename>classACE__Hash_3_01char_01_4.html</filename>
    <member kind="function">
      <type>u_long</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(char t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Cache_Map_Manager</name>
    <filename>classACE__Hash__Cache__Map__Manager.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>CACHING_STRATEGY</templarg>
    <templarg>ATTRIBUTES</templarg>
    <base>ACMM</base>
    <member kind="typedef">
      <type>ACE_Pair&lt; VALUE, ATTRIBUTES &gt;</type>
      <name>CACHE_VALUE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; KEY, CACHE_VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;</type>
      <name>HASH_MAP</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; KEY, CACHE_VALUE &gt;</type>
      <name>CACHE_ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KEY</type>
      <name>key_type</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VALUE</type>
      <name>mapped_type</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Cache_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist>(CACHING_STRATEGY &amp;caching_s, size_t size=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Hash_Cache_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a2</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a3</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, CACHE_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a4</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a5</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a6</anchor>
      <arglist>(const KEY &amp;key, CACHE_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a7</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a8</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a9</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, KEY &amp;old_key, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a10</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, CACHE_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a11</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a12</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value, CACHE_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a13</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a14</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a15</anchor>
      <arglist>(CACHE_ENTRY *entry)</arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACMM&lt; KEY, VALUE, ACE_Hash_Map_Manager_Ex&lt; KEY, ACE_Pair&lt; VALUE, ATTRIBUTES &gt;, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;, ACE_Hash_Map_Iterator_Ex&lt; KEY, ACE_Pair&lt; VALUE, ATTRIBUTES &gt;, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;, ACE_Hash_Map_Reverse_Iterator_Ex&lt; KEY, ACE_Pair&lt; VALUE, ATTRIBUTES &gt;, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;, CACHING_STRATEGY, ATTRIBUTES &gt;</type>
      <name>ACE_HCMM_BASE</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Bucket_Iterator</name>
    <filename>classACE__Hash__Map__Bucket__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Bucket_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;mm, const EXT_ID &amp;ext_id, int tail=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Bucket_Iterator&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Bucket_Iterator&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Bucket_Iterator&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Bucket_Iterator&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; &amp;</type>
      <name>operator *</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>map</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Hash_Map_Bucket_Iterator&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Hash_Map_Bucket_Iterator&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>forward_i</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>reverse_i</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; *</type>
      <name>map_man_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ssize_t</type>
      <name>index_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *</type>
      <name>next_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Const_Iterator</name>
    <filename>classACE__Hash__Map__Const__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Const_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Hash_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm, int tail=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Const_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt; &amp;base)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt; &amp;base)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Const_Iterator_Base_Ex</name>
    <filename>classACE__Hash__Map__Const__Iterator__Base__Ex.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Const_Iterator_Base_Ex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;mm, int head)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;next_entry) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; &amp;</type>
      <name>operator *</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>map</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Hash_Map_Const_Iterator_Base_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Hash_Map_Const_Iterator_Base_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>forward_i</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>reverse_i</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_i</name>
      <anchor>b2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; *</type>
      <name>map_man_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ssize_t</type>
      <name>index_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *</type>
      <name>next_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Const_Iterator_Ex</name>
    <filename>classACE__Hash__Map__Const__Iterator__Ex.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Hash_Map_Const_Iterator_Base_Ex</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Const_Iterator_Ex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;mm, int tail=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Entry</name>
    <filename>classACE__Hash__Map__Entry.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Entry</name>
      <anchor>a0</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *next=0, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *prev=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Entry</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *next, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *prev)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Hash_Map_Entry</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>EXT_ID</type>
      <name>ext_id_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INT_ID</type>
      <name>int_id_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *</type>
      <name>next_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *</type>
      <name>prev_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Iterator</name>
    <filename>classACE__Hash__Map__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Hash_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm, int tail=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt; &amp;base)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt; &amp;base)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Iterator_Base_Ex</name>
    <filename>classACE__Hash__Map__Iterator__Base__Ex.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Iterator_Base_Ex</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;mm, int head)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;next_entry) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; &amp;</type>
      <name>operator *</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>map</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Hash_Map_Iterator_Base_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Hash_Map_Iterator_Base_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>forward_i</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>reverse_i</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_i</name>
      <anchor>b2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; *</type>
      <name>map_man_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ssize_t</type>
      <name>index_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *</type>
      <name>next_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Iterator_Ex</name>
    <filename>classACE__Hash__Map__Iterator__Ex.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Hash_Map_Iterator_Base_Ex</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Iterator_Ex</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;mm, int tail=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Manager</name>
    <filename>classACE__Hash__Map__Manager.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>equal</name>
      <anchor>a2</anchor>
      <arglist>(const EXT_ID &amp;id1, const EXT_ID &amp;id2)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>hash</name>
      <anchor>a3</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Manager_Ex</name>
    <filename>classACE__Hash__Map__Manager__Ex.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="typedef">
      <type>EXT_ID</type>
      <name>KEY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>INT_ID</type>
      <name>VALUE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt;</type>
      <name>ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>ITERATOR</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>CONST_ITERATOR</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>REVERSE_ITERATOR</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>iterator</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>const_iterator</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>reverse_iterator</name>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t size=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind_all</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Hash_Map_Manager_Ex</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a6</anchor>
      <arglist>(const EXT_ID &amp;item, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a7</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a8</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a9</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a10</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a11</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a12</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a13</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a14</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a15</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a16</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a17</anchor>
      <arglist>(const EXT_ID &amp;ext_id) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a18</anchor>
      <arglist>(const EXT_ID &amp;ext_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a19</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a20</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a21</anchor>
      <arglist>(ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *entry)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_size</name>
      <anchor>a23</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_LOCK &amp;</type>
      <name>mutex</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>begin</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>end</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>rbegin</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>rend</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>equal</name>
      <anchor>b0</anchor>
      <arglist>(const EXT_ID &amp;id1, const EXT_ID &amp;id2)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>u_long</type>
      <name>hash</name>
      <anchor>b1</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>bind_i</name>
      <anchor>b2</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>bind_i</name>
      <anchor>b3</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>trybind_i</name>
      <anchor>b4</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>trybind_i</name>
      <anchor>b5</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b6</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b7</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b8</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b9</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b10</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b11</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find_i</name>
      <anchor>b12</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find_i</name>
      <anchor>b13</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find_i</name>
      <anchor>b14</anchor>
      <arglist>(const EXT_ID &amp;ext_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>b15</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>b16</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>b17</anchor>
      <arglist>(ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>create_buckets</name>
      <anchor>b18</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>close_i</name>
      <anchor>b19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unbind_all_i</name>
      <anchor>b20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>HASH_KEY</type>
      <name>hash_key_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>COMPARE_KEYS</type>
      <name>compare_keys_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>shared_find</name>
      <anchor>c0</anchor>
      <arglist>(const EXT_ID &amp;ext_id, ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;entry, u_long &amp;loc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Hash_Map_Entry&lt; EXT_ID, INT_ID &gt; *</type>
      <name>table_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>total_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Hash_Map_Iterator_Base_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Hash_Map_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Hash_Map_Const_Iterator_Base_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Hash_Map_Const_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Hash_Map_Bucket_Iterator&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Manager_Ex_Adapter</name>
    <filename>classACE__Hash__Map__Manager__Ex__Adapter.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>KEY_GENERATOR</templarg>
    <base>ACE_Map</base>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex_Iterator_Adapter&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt;, KEY, VALUE, HASH_KEY, COMPARE_KEYS &gt;</type>
      <name>iterator_impl</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex_Reverse_Iterator_Adapter&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt;, KEY, VALUE, HASH_KEY, COMPARE_KEYS &gt;</type>
      <name>reverse_iterator_impl</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;</type>
      <name>implementation</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Hash_Map_Manager_Ex_Adapter</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_modify_key</name>
      <anchor>a6</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create_key</name>
      <anchor>a7</anchor>
      <arglist>(KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a8</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a9</anchor>
      <arglist>(const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recover_key</name>
      <anchor>a10</anchor>
      <arglist>(const KEY &amp;modified_key, KEY &amp;original_key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a11</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a12</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a13</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, KEY &amp;old_key, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a14</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a15</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a16</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a17</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a18</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>current_size</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>total_size</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Manager_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>KEY_GENERATOR &amp;</type>
      <name>key_generator</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>begin_impl</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>end_impl</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rbegin_impl</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rend_impl</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Manager_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>KEY_GENERATOR</type>
      <name>key_generator_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Hash_Map_Manager_Ex_Adapter&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, KEY_GENERATOR &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex_Adapter</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Hash_Map_Manager_Ex_Adapter&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, KEY_GENERATOR &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Manager_Ex_Iterator_Adapter</name>
    <filename>classACE__Hash__Map__Manager__Ex__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <base>ACE_Iterator_Impl</base>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_Hash_Map_Manager_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;::iterator</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Hash_Map_Iterator_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt; &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Hash_Map_Manager_Ex_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Iterator_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Iterator_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Manager_Ex_Reverse_Iterator_Adapter</name>
    <filename>classACE__Hash__Map__Manager__Ex__Reverse__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <base>ACE_Reverse_Iterator_Impl</base>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_Hash_Map_Manager_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;::reverse_iterator</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Manager_Ex_Reverse_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Hash_Map_Reverse_Iterator_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt; &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Hash_Map_Manager_Ex_Reverse_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Reverse_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; KEY, VALUE, HASH_KEY, COMPARE_KEYS, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Reverse_Iterator</name>
    <filename>classACE__Hash__Map__Reverse__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Hash_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm, int head=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Reverse_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt; &amp;base)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, ACE_Hash&lt; EXT_ID &gt;, ACE_Equal_To&lt; EXT_ID &gt;, ACE_LOCK &gt; &amp;base)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_Reverse_Iterator_Ex</name>
    <filename>classACE__Hash__Map__Reverse__Iterator__Ex.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>HASH_KEY</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Hash_Map_Iterator_Base_Ex</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_Reverse_Iterator_Ex</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Hash_Map_Manager_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;mm, int head=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Hash_Map_Reverse_Iterator_Ex&lt; EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hash_Map_With_Allocator</name>
    <filename>classACE__Hash__Map__With__Allocator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <base>ACE_Hash_Map_Manager&lt; EXT_ID, INT_ID, ACE_Null_Mutex &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_With_Allocator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Hash_Map_With_Allocator</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a2</anchor>
      <arglist>(const EXT_ID &amp;, const INT_ID &amp;, ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a3</anchor>
      <arglist>(const EXT_ID &amp;, INT_ID &amp;, ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a4</anchor>
      <arglist>(const EXT_ID &amp;, ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a5</anchor>
      <arglist>(const EXT_ID &amp;, const INT_ID &amp;, EXT_ID &amp;, INT_ID &amp;, ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a6</anchor>
      <arglist>(const EXT_ID &amp;, INT_ID &amp;, ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a7</anchor>
      <arglist>(const EXT_ID &amp;, ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Allocator *alloc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Hashable</name>
    <filename>classACE__Hashable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Hashable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Hashable</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual u_long</type>
      <name>hash_i</name>
      <anchor>b1</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>hash_value_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_High_Res_Timer</name>
    <filename>classACE__High__Res__Timer.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_High_Res_Timer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_High_Res_Timer</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_OS::ACE_HRTimer_Op=ACE_OS::ACE_HRTIMER_GETTIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_OS::ACE_HRTimer_Op=ACE_OS::ACE_HRTIMER_GETTIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elapsed_time</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value &amp;tv) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elapsed_time</name>
      <anchor>a6</anchor>
      <arglist>(ACE_hrtime_t &amp;nanoseconds) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elapsed_microseconds</name>
      <anchor>a7</anchor>
      <arglist>(ACE_hrtime_t &amp;usecs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_incr</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_OS::ACE_HRTimer_Op=ACE_OS::ACE_HRTIMER_GETTIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_incr</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_OS::ACE_HRTimer_Op=ACE_OS::ACE_HRTIMER_GETTIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elapsed_time_incr</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Time_Value &amp;tv) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elapsed_time_incr</name>
      <anchor>a11</anchor>
      <arglist>(ACE_hrtime_t &amp;nanoseconds) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_total</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_TCHAR *message, const int iterations=1, ACE_HANDLE handle=ACE_STDOUT) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_ave</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_TCHAR *message, const int iterations=1, ACE_HANDLE handle=ACE_STDOUT) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>global_scale_factor</name>
      <anchor>d0</anchor>
      <arglist>(ACE_UINT32 gsf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_UINT32</type>
      <name>global_scale_factor</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_env_global_scale_factor</name>
      <anchor>d2</anchor>
      <arglist>(const ACE_TCHAR *env=ACE_LIB_TEXT(&quot;ACE_SCALE_FACTOR&quot;))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_UINT32</type>
      <name>calibrate</name>
      <anchor>d3</anchor>
      <arglist>(const ACE_UINT32 usec=500000, const u_int iterations=10)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Time_Value</type>
      <name>gettimeofday_hr</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Time_Value</type>
      <name>gettimeofday</name>
      <anchor>d5</anchor>
      <arglist>(const ACE_OS::ACE_HRTimer_Op=ACE_OS::ACE_HRTIMER_GETTIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>hrtime_to_tv</name>
      <anchor>d6</anchor>
      <arglist>(ACE_Time_Value &amp;tv, const ACE_hrtime_t hrt)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_hrtime_t</type>
      <name>gettime</name>
      <anchor>f0</anchor>
      <arglist>(const ACE_OS::ACE_HRTimer_Op=ACE_OS::ACE_HRTIMER_GETTIME)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_hrtime_t</type>
      <name>start_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_hrtime_t</type>
      <name>end_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_hrtime_t</type>
      <name>total_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_hrtime_t</type>
      <name>start_incr_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_UINT32</type>
      <name>global_scale_factor_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>global_scale_factor_status_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Incremental_Key_Generator</name>
    <filename>classACE__Incremental__Key__Generator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Incremental_Key_Generator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>current_value</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T</type>
      <name>t_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_INET_Addr</name>
    <filename>classACE__INET__Addr.html</filename>
    <base>ACE_Addr</base>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_INET_Addr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a2</anchor>
      <arglist>(const sockaddr_in *, int len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a3</anchor>
      <arglist>(u_short port_number, const char host_name[], int address_family=AF_UNSPEC)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_INET_Addr</name>
      <anchor>a4</anchor>
      <arglist>(const char address[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a5</anchor>
      <arglist>(u_short port_number, ACE_UINT32 ip_addr=INADDR_ANY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a6</anchor>
      <arglist>(const char port_name[], const char host_name[], const char protocol[]=&quot;tcp&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a7</anchor>
      <arglist>(const char port_name[], ACE_UINT32 ip_addr, const char protocol[]=&quot;tcp&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a8</anchor>
      <arglist>(u_short port_number, const wchar_t host_name[], int address_family=AF_UNSPEC)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_INET_Addr</name>
      <anchor>a9</anchor>
      <arglist>(const wchar_t address[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a10</anchor>
      <arglist>(const wchar_t port_name[], const wchar_t host_name[], const wchar_t protocol[]=ACE_TEXT_WIDE(&quot;tcp&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_INET_Addr</name>
      <anchor>a11</anchor>
      <arglist>(const wchar_t port_name[], ACE_UINT32 ip_addr, const wchar_t protocol[]=ACE_TEXT_WIDE(&quot;tcp&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_INET_Addr</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_INET_Addr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a14</anchor>
      <arglist>(u_short port_number, const char host_name[], int encode=1, int address_family=AF_UNSPEC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a15</anchor>
      <arglist>(u_short port_number, ACE_UINT32 ip_addr=INADDR_ANY, int encode=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a16</anchor>
      <arglist>(const char port_name[], const char host_name[], const char protocol[]=&quot;tcp&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a17</anchor>
      <arglist>(const char port_name[], ACE_UINT32 ip_addr, const char protocol[]=&quot;tcp&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a18</anchor>
      <arglist>(const char addr[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a19</anchor>
      <arglist>(const sockaddr_in *, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a20</anchor>
      <arglist>(u_short port_number, const wchar_t host_name[], int encode=1, int address_family=AF_UNSPEC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a21</anchor>
      <arglist>(const wchar_t port_name[], const wchar_t host_name[], const wchar_t protocol[]=ACE_TEXT_WIDE(&quot;tcp&quot;))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a22</anchor>
      <arglist>(const wchar_t port_name[], ACE_UINT32 ip_addr, const wchar_t protocol[]=ACE_TEXT_WIDE(&quot;tcp&quot;))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a23</anchor>
      <arglist>(const wchar_t addr[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a24</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_addr_size</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_addr</name>
      <anchor>a26</anchor>
      <arglist>(void *, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a27</anchor>
      <arglist>(ACE_TCHAR buffer[], size_t size, int ipaddr_format=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>string_to_addr</name>
      <anchor>a28</anchor>
      <arglist>(const char address[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_port_number</name>
      <anchor>a29</anchor>
      <arglist>(u_short, int encode=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_address</name>
      <anchor>a30</anchor>
      <arglist>(const char *ip_addr, int len, int encode=1)</arglist>
    </member>
    <member kind="function">
      <type>u_short</type>
      <name>get_port_number</name>
      <anchor>a31</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_host_name</name>
      <anchor>a32</anchor>
      <arglist>(char hostname[], size_t hostnamelen) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_host_name</name>
      <anchor>a33</anchor>
      <arglist>(wchar_t hostname[], size_t hostnamelen) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_host_name</name>
      <anchor>a34</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_host_addr</name>
      <anchor>a35</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_host_addr</name>
      <anchor>a36</anchor>
      <arglist>(char *dst, int size) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>get_ip_address</name>
      <anchor>a37</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchor>a38</anchor>
      <arglist>(const ACE_INET_Addr &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a39</anchor>
      <arglist>(const ACE_INET_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a40</anchor>
      <arglist>(const ACE_INET_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a41</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a42</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sockaddr_in</type>
      <name>in4_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_host_name_i</name>
      <anchor>c0</anchor>
      <arglist>(char hostname[], size_t hostnamelen) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>ip_addr_pointer</name>
      <anchor>c1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>ip_addr_size</name>
      <anchor>c2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>determine_type</name>
      <anchor>c3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INET_Addr::@12</type>
      <name>inet_addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Ini_ImpExp</name>
    <filename>classACE__Ini__ImpExp.html</filename>
    <base>ACE_Config_ImpExp_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Ini_ImpExp</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Configuration &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Ini_ImpExp</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>import_config</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>export_config</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>export_section</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;section, const ACE_TString &amp;path, FILE *out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>skip_whitespace</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_TCHAR *src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>string_has_white_space</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_TCHAR *string_value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Ini_ImpExp</name>
      <anchor>c3</anchor>
      <arglist>(const ACE_Ini_ImpExp &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Ini_ImpExp &amp;</type>
      <name>operator=</name>
      <anchor>c4</anchor>
      <arglist>(const ACE_Ini_ImpExp &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Init_ACE</name>
    <filename>classACE__Init__ACE.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>init</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fini</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>u_int</type>
      <name>init_fini_count_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_InputCDR</name>
    <filename>classACE__InputCDR.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a0</anchor>
      <arglist>(const char *buf, size_t bufsiz, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a1</anchor>
      <arglist>(size_t bufsiz, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Message_Block *data, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Data_Block *data, ACE_Message_Block::Message_Flags flag=0, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Data_Block *data, ACE_Message_Block::Message_Flags flag, size_t read_pointer_position, size_t write_pointer_position, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_InputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_InputCDR &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_InputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_InputCDR &amp;rhs, size_t size, ACE_CDR::Long offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_InputCDR &amp;rhs, size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_OutputCDR &amp;rhs, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_InputCDR</name>
      <anchor>a10</anchor>
      <arglist>(Transfer_Contents rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_InputCDR</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_wstring</name>
      <anchor>a54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_string</name>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_bytes</name>
      <anchor>a56</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>good_bit</name>
      <anchor>a57</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Message_Block *</type>
      <name>start</name>
      <anchor>a58</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>grow</name>
      <anchor>a59</anchor>
      <arglist>(size_t newsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_byte_order</name>
      <anchor>a60</anchor>
      <arglist>(int byte_order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a61</anchor>
      <arglist>(const ACE_Message_Block *data, int byte_order)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>steal_contents</name>
      <anchor>a62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>steal_from</name>
      <anchor>a63</anchor>
      <arglist>(ACE_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchange_data_blocks</name>
      <anchor>a64</anchor>
      <arglist>(ACE_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>clone_from</name>
      <anchor>a65</anchor>
      <arglist>(ACE_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_contents</name>
      <anchor>a66</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>rd_ptr</name>
      <anchor>a67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>wr_ptr</name>
      <anchor>a68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchor>a69</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>align_read_ptr</name>
      <anchor>a70</anchor>
      <arglist>(size_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>do_byte_swap</name>
      <anchor>a71</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byte_order</name>
      <anchor>a72</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>char_translator</name>
      <anchor>a73</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>wchar_translator</name>
      <anchor>a74</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>adjust</name>
      <anchor>a75</anchor>
      <arglist>(size_t size, char *&amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>adjust</name>
      <anchor>a76</anchor>
      <arglist>(size_t size, size_t align, char *&amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_boolean</name>
      <anchor>a12</anchor>
      <arglist>(ACE_CDR::Boolean &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_char</name>
      <anchor>a13</anchor>
      <arglist>(ACE_CDR::Char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_wchar</name>
      <anchor>a14</anchor>
      <arglist>(ACE_CDR::WChar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_octet</name>
      <anchor>a15</anchor>
      <arglist>(ACE_CDR::Octet &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_short</name>
      <anchor>a16</anchor>
      <arglist>(ACE_CDR::Short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_ushort</name>
      <anchor>a17</anchor>
      <arglist>(ACE_CDR::UShort &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_long</name>
      <anchor>a18</anchor>
      <arglist>(ACE_CDR::Long &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_ulong</name>
      <anchor>a19</anchor>
      <arglist>(ACE_CDR::ULong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_longlong</name>
      <anchor>a20</anchor>
      <arglist>(ACE_CDR::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_ulonglong</name>
      <anchor>a21</anchor>
      <arglist>(ACE_CDR::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_float</name>
      <anchor>a22</anchor>
      <arglist>(ACE_CDR::Float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_double</name>
      <anchor>a23</anchor>
      <arglist>(ACE_CDR::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_longdouble</name>
      <anchor>a24</anchor>
      <arglist>(ACE_CDR::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_string</name>
      <anchor>a25</anchor>
      <arglist>(ACE_CDR::Char *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_string</name>
      <anchor>a26</anchor>
      <arglist>(ACE_CString &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_wstring</name>
      <anchor>a27</anchor>
      <arglist>(ACE_CDR::WChar *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_boolean_array</name>
      <anchor>a28</anchor>
      <arglist>(ACE_CDR::Boolean *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_char_array</name>
      <anchor>a29</anchor>
      <arglist>(ACE_CDR::Char *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_wchar_array</name>
      <anchor>a30</anchor>
      <arglist>(ACE_CDR::WChar *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_octet_array</name>
      <anchor>a31</anchor>
      <arglist>(ACE_CDR::Octet *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_short_array</name>
      <anchor>a32</anchor>
      <arglist>(ACE_CDR::Short *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_ushort_array</name>
      <anchor>a33</anchor>
      <arglist>(ACE_CDR::UShort *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_long_array</name>
      <anchor>a34</anchor>
      <arglist>(ACE_CDR::Long *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_ulong_array</name>
      <anchor>a35</anchor>
      <arglist>(ACE_CDR::ULong *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_longlong_array</name>
      <anchor>a36</anchor>
      <arglist>(ACE_CDR::LongLong *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_ulonglong_array</name>
      <anchor>a37</anchor>
      <arglist>(ACE_CDR::ULongLong *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_float_array</name>
      <anchor>a38</anchor>
      <arglist>(ACE_CDR::Float *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_double_array</name>
      <anchor>a39</anchor>
      <arglist>(ACE_CDR::Double *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>read_longdouble_array</name>
      <anchor>a40</anchor>
      <arglist>(ACE_CDR::LongDouble *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_boolean</name>
      <anchor>a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_char</name>
      <anchor>a42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_wchar</name>
      <anchor>a43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_octet</name>
      <anchor>a44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_short</name>
      <anchor>a45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_ushort</name>
      <anchor>a46</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_long</name>
      <anchor>a47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_ulong</name>
      <anchor>a48</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_longlong</name>
      <anchor>a49</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_ulonglong</name>
      <anchor>a50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_float</name>
      <anchor>a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_double</name>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>skip_longdouble</name>
      <anchor>a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block</type>
      <name>start_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>do_byte_swap_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>good_bit_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>char_translator_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>wchar_translator_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>read_1</name>
      <anchor>c0</anchor>
      <arglist>(ACE_CDR::Octet *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>read_2</name>
      <anchor>c1</anchor>
      <arglist>(ACE_CDR::UShort *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>read_4</name>
      <anchor>c2</anchor>
      <arglist>(ACE_CDR::ULong *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>read_8</name>
      <anchor>c3</anchor>
      <arglist>(ACE_CDR::ULongLong *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>read_16</name>
      <anchor>c4</anchor>
      <arglist>(ACE_CDR::LongDouble *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>read_array</name>
      <anchor>c5</anchor>
      <arglist>(void *x, size_t size, size_t align, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rd_ptr</name>
      <anchor>c6</anchor>
      <arglist>(size_t offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>char *</type>
      <name>end</name>
      <anchor>c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CDR::Octet</type>
      <name>major_version_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CDR::Octet</type>
      <name>minor_version_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Char_Codeset_Translator</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_WChar_Codeset_Translator</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_InputCDR::to_boolean</name>
    <filename>structACE__InputCDR_1_1to__boolean.html</filename>
    <member kind="function">
      <type></type>
      <name>to_boolean</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Boolean &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Boolean &amp;</type>
      <name>ref_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_InputCDR::to_char</name>
    <filename>structACE__InputCDR_1_1to__char.html</filename>
    <member kind="function">
      <type></type>
      <name>to_char</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Char &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Char &amp;</type>
      <name>ref_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_InputCDR::to_octet</name>
    <filename>structACE__InputCDR_1_1to__octet.html</filename>
    <member kind="function">
      <type></type>
      <name>to_octet</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Octet &amp;o)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Octet &amp;</type>
      <name>ref_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_InputCDR::to_string</name>
    <filename>structACE__InputCDR_1_1to__string.html</filename>
    <member kind="function">
      <type></type>
      <name>to_string</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Char *&amp;s, ACE_CDR::ULong b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>to_string</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_CDR::Char *&amp;s, ACE_CDR::ULong b)</arglist>
    </member>
    <member kind="variable">
      <type>const ACE_CDR::Char *&amp;</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::ULong</type>
      <name>bound_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_InputCDR::to_wchar</name>
    <filename>structACE__InputCDR_1_1to__wchar.html</filename>
    <member kind="function">
      <type></type>
      <name>to_wchar</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::WChar &amp;wc)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::WChar &amp;</type>
      <name>ref_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_InputCDR::to_wstring</name>
    <filename>structACE__InputCDR_1_1to__wstring.html</filename>
    <member kind="function">
      <type></type>
      <name>to_wstring</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::WChar *&amp;ws, ACE_CDR::ULong b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>to_wstring</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_CDR::WChar *&amp;ws, ACE_CDR::ULong b)</arglist>
    </member>
    <member kind="variable">
      <type>const ACE_CDR::WChar *&amp;</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::ULong</type>
      <name>bound_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_InputCDR::Transfer_Contents</name>
    <filename>structACE__InputCDR_1_1Transfer__Contents.html</filename>
    <member kind="function">
      <type></type>
      <name>Transfer_Contents</name>
      <anchor>a0</anchor>
      <arglist>(ACE_InputCDR &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_InputCDR &amp;</type>
      <name>rhs_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_IntCapEntry</name>
    <filename>classACE__IntCapEntry.html</filename>
    <base>ACE_CapEntry</base>
    <member kind="function">
      <type></type>
      <name>ACE_IntCapEntry</name>
      <anchor>a0</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getval</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>val_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Intrusive_List</name>
    <filename>classACE__Intrusive__List.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Intrusive_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Intrusive_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchor>a3</anchor>
      <arglist>(T *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchor>a4</anchor>
      <arglist>(T *node)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>pop_front</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>pop_back</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>head</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>tail</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a9</anchor>
      <arglist>(T *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_i</name>
      <anchor>c0</anchor>
      <arglist>(T *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Intrusive_List</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Intrusive_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Intrusive_List&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Intrusive_List&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>head_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>tail_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Intrusive_List_Node</name>
    <filename>classACE__Intrusive__List__Node.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>T *</type>
      <name>prev</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prev</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Intrusive_List_Node</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>prev_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>next_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_IO_Cntl_Msg</name>
    <filename>classACE__IO__Cntl__Msg.html</filename>
    <member kind="typedef">
      <type>u_short</type>
      <name>ACE_IO_Cntl_Cmds</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_LWM</name>
      <anchor>s7s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GET_LWM</name>
      <anchor>s7s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_HWM</name>
      <anchor>s7s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GET_HWM</name>
      <anchor>s7s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOD_LINK</name>
      <anchor>s7s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOD_UNLINK</name>
      <anchor>s7s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_IO_Cntl_Msg</name>
      <anchor>a0</anchor>
      <arglist>(ACE_IO_Cntl_Cmds c)</arglist>
    </member>
    <member kind="function">
      <type>ACE_IO_Cntl_Cmds</type>
      <name>cmd</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cmd</name>
      <anchor>a2</anchor>
      <arglist>(ACE_IO_Cntl_Cmds c)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>count</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>count</name>
      <anchor>a4</anchor>
      <arglist>(size_t c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchor>a6</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rval</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rval</name>
      <anchor>a8</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_IO_Cntl_Cmds</type>
      <name>cmd_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>error_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rval_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_IO_SAP</name>
    <filename>classACE__IO__SAP.html</filename>
    <member kind="enumvalue">
      <name>INVALID_HANDLE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_IO_SAP</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a1</anchor>
      <arglist>(int cmd, void *) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enable</name>
      <anchor>a2</anchor>
      <arglist>(int value) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>disable</name>
      <anchor>a3</anchor>
      <arglist>(int value) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchor>a5</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_IO_SAP</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>pid_t</type>
      <name>pid_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_IOStream</name>
    <filename>classACE__IOStream.html</filename>
    <templarg>STREAM</templarg>
    <base>iostream</base>
    <member kind="function">
      <type></type>
      <name>ACE_IOStream</name>
      <anchor>a0</anchor>
      <arglist>(STREAM &amp;stream, u_int streambuf_size=ACE_STREAMBUF_SIZE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_IOStream</name>
      <anchor>a1</anchor>
      <arglist>(u_int streambuf_size=ACE_STREAMBUF_SIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_IOStream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eof</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GETPUT_FUNC_SET</name>
      <anchor>a5</anchor>
      <arglist>(ACE_IOStream&lt; STREAM &gt;) virtual int ipfx0(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ipfx1</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ipfx</name>
      <anchor>a7</anchor>
      <arglist>(int need=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>isfx</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>opfx</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>osfx</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_IOStream&lt; STREAM &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Time_Value *&amp;tv)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Streambuf_T&lt; STREAM &gt; *</type>
      <name>streambuf_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>c0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>c1</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>c2</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>c3</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_IPC_SAP</name>
    <filename>classACE__IPC__SAP.html</filename>
    <member kind="function">
      <type></type>
      <name>~ACE_IPC_SAP</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a1</anchor>
      <arglist>(int cmd, void *) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enable</name>
      <anchor>a2</anchor>
      <arglist>(int value) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>disable</name>
      <anchor>a3</anchor>
      <arglist>(int value) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchor>a5</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_IPC_SAP</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>pid_t</type>
      <name>pid_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Iterator</name>
    <filename>classACE__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Iterator_Impl&lt; T &gt;</type>
      <name>implementation</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Iterator_Impl&lt; T &gt; *impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Iterator</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Iterator&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Iterator&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Iterator&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator *</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Iterator_Impl&lt; T &gt; &amp;</type>
      <name>impl</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Iterator_Impl&lt; T &gt; *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Iterator_Impl</name>
    <filename>classACE__Iterator__Impl.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Iterator_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a1</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Iterator_Impl&lt; T &gt; &amp;rhs) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a3</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Laxity_Message_Strategy</name>
    <filename>classACE__Laxity__Message__Strategy.html</filename>
    <base>ACE_Dynamic_Message_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Laxity_Message_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(u_long static_bit_field_mask=0x3FFUL, u_long static_bit_field_shift=10, u_long dynamic_priority_max=0x3FFFFFUL, u_long dynamic_priority_offset=0x200000UL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Laxity_Message_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convert_priority</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value &amp;priority, const ACE_Message_Block &amp;mb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Less_Than</name>
    <filename>classACE__Less__Than.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TYPE &amp;lhs, const TYPE &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LFU_Caching_Strategy</name>
    <filename>classACE__LFU__Caching__Strategy.html</filename>
    <templarg>ATTRIBUTES</templarg>
    <templarg>CACHING_UTILITY</templarg>
    <member kind="typedef">
      <type>ATTRIBUTES</type>
      <name>CACHING_ATTRIBUTES</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LFU_Caching_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ATTRIBUTES</type>
      <name>attributes</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>purge_percent</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge_percent</name>
      <anchor>a3</anchor>
      <arglist>(double percentage)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_bind</name>
      <anchor>a4</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_find</name>
      <anchor>a5</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_unbind</name>
      <anchor>a6</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_trybind</name>
      <anchor>a7</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_rebind</name>
      <anchor>a8</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>CACHING_UTILITY &amp;</type>
      <name>caching_utility</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>purge_percent_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CACHING_UTILITY</type>
      <name>caching_utility_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Lib_Find</name>
    <filename>classACE__Lib__Find.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ldfind</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_TCHAR *filename, ACE_TCHAR *pathname, size_t maxlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>FILE *</type>
      <name>ldopen</name>
      <anchor>d1</anchor>
      <arglist>(const ACE_TCHAR *filename, const ACE_TCHAR *type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>ldname</name>
      <anchor>d2</anchor>
      <arglist>(const ACE_TCHAR *entry_point)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_temp_dir</name>
      <anchor>d3</anchor>
      <arglist>(ACE_TCHAR *buffer, size_t buffer_len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>open_temp_file</name>
      <anchor>d4</anchor>
      <arglist>(const ACE_TCHAR *name, int mode, int perm=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strrepl</name>
      <anchor>d5</anchor>
      <arglist>(char *s, char search, char replace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strsplit_r</name>
      <anchor>d6</anchor>
      <arglist>(char *s, const char *token, char *&amp;next_start)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strrepl</name>
      <anchor>d7</anchor>
      <arglist>(wchar_t *s, wchar_t search, wchar_t replace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strsplit_r</name>
      <anchor>d8</anchor>
      <arglist>(wchar_t *s, const wchar_t *token, wchar_t *&amp;next_start)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Lite_MMAP_Memory_Pool</name>
    <filename>classACE__Lite__MMAP__Memory__Pool.html</filename>
    <base>ACE_MMAP_Memory_Pool</base>
    <member kind="function">
      <type></type>
      <name>ACE_Lite_MMAP_Memory_Pool</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *backing_store_name=0, const OPTIONS *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Lite_MMAP_Memory_Pool</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a2</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a3</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Local_Memory_Pool</name>
    <filename>classACE__Local__Memory__Pool.html</filename>
    <member kind="typedef">
      <type>ACE_Local_Memory_Pool_Options</type>
      <name>OPTIONS</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Local_Memory_Pool</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *backing_store_name=0, const OPTIONS *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Local_Memory_Pool</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>init_acquire</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes, int &amp;first_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a5</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a6</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a7</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a8</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seh_selector</name>
      <anchor>a9</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remap</name>
      <anchor>a10</anchor>
      <arglist>(void *addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual size_t</type>
      <name>round_up</name>
      <anchor>b0</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Unbounded_Set&lt; char *&gt;</type>
      <name>allocated_chunks_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Local_Memory_Pool_Options</name>
    <filename>classACE__Local__Memory__Pool__Options.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Local_Name_Space</name>
    <filename>classACE__Local__Name__Space.html</filename>
    <templarg></templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Name_Space</base>
    <member kind="typedef">
      <type>ACE_Allocator_Adapter&lt; ACE_Malloc&lt; ACE_MEM_POOL_2, ACE_LOCK &gt; &gt;</type>
      <name>ALLOCATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Local_Name_Space</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Local_Name_Space</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Naming_Context::Context_Scope_Type scope_in, ACE_Name_Options *name_options)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Naming_Context::Context_Scope_Type scope_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Local_Name_Space</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_NS_WString &amp;name, const ACE_NS_WString &amp;value, const char *type=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_NS_WString &amp;name, const ACE_NS_WString &amp;value, const char *type=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_NS_WString &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind_i</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_NS_WString &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resolve</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_NS_WString &amp;name, ACE_NS_WString &amp;value, char *&amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resolve_i</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_NS_WString &amp;name, ACE_NS_WString &amp;value, char *&amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_names</name>
      <anchor>a10</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_names_i</name>
      <anchor>a11</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_values</name>
      <anchor>a12</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_values_i</name>
      <anchor>a13</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_types</name>
      <anchor>a14</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_types_i</name>
      <anchor>a15</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_name_entries</name>
      <anchor>a16</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_name_entries_i</name>
      <anchor>a17</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_value_entries</name>
      <anchor>a18</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_value_entries_i</name>
      <anchor>a19</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_type_entries</name>
      <anchor>a20</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_type_entries_i</name>
      <anchor>a21</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump_i</name>
      <anchor>a23</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>remap</name>
      <anchor>c0</anchor>
      <arglist>(EXCEPTION_POINTERS *ep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>shared_bind</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_NS_WString &amp;name, const ACE_NS_WString &amp;value, const char *type, int rebind)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>shared_bind_i</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_NS_WString &amp;name, const ACE_NS_WString &amp;value, const char *type, int rebind)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_manager</name>
      <anchor>c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_manager_i</name>
      <anchor>c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALLOCATOR *</type>
      <name>allocator_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Name_Space_Map&lt; ALLOCATOR &gt; *</type>
      <name>name_space_map_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Naming_Context::Context_Scope_Type</type>
      <name>ns_scope_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Name_Options *</type>
      <name>name_options_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>context_file_</name>
      <anchor>o4</anchor>
      <arglist>[MAXPATHLEN+MAXNAMELEN]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK *</type>
      <name>lock_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Location_Node</name>
    <filename>classACE__Location__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Location_Node</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>symbol</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Service_Object_Exterminator *=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_symbol</name>
      <anchor>a2</anchor>
      <arglist>(void *h)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SHLIB_HANDLE</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>pathname</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathname</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *h)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dispose</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Location_Node</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>open_dll</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const ACE_TCHAR *</type>
      <name>pathname_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>must_delete_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_DLL</type>
      <name>dll_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>symbol_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Lock</name>
    <filename>classACE__Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Lock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Lock</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>tryacquire</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>acquire_read</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>acquire_write</name>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>tryacquire_read</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>tryacquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a10</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Lock_Adapter</name>
    <filename>classACE__Lock__Adapter.html</filename>
    <templarg>ACE_LOCKING_MECHANISM</templarg>
    <base>ACE_Lock</base>
    <member kind="typedef">
      <type>ACE_LOCKING_MECHANISM</type>
      <name>ACE_LOCK</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Lock_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_LOCKING_MECHANISM &amp;lock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Lock_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Lock_Adapter</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire_read</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire_write</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_read</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCKING_MECHANISM *</type>
      <name>lock_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>delete_lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LOCK_SOCK_Acceptor</name>
    <filename>classACE__LOCK__SOCK__Acceptor.html</filename>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_SOCK_Acceptor</base>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a0</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, ACE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_LOCK &amp;</type>
      <name>lock</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Locked_Data_Block</name>
    <filename>classACE__Locked__Data__Block.html</filename>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Data_Block</base>
    <member kind="function">
      <type></type>
      <name>ACE_Locked_Data_Block</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Locked_Data_Block</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Message_Block::ACE_Message_Type msg_type, const char *msg_data, ACE_Allocator *allocator_strategy, ACE_Message_Block::Message_Flags flags, ACE_Allocator *data_block_allocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Locked_Data_Block</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Data_Block *</type>
      <name>clone_nocopy</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block::Message_Flags mask=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Locked_Data_Block&lt; ACE_LOCK &gt; &amp;</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Locked_Data_Block&lt; ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Locked_Data_Block</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Locked_Data_Block&lt; ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Locked_Free_List</name>
    <filename>classACE__Locked__Free__List.html</filename>
    <templarg>T</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Free_List</base>
    <member kind="function">
      <type></type>
      <name>ACE_Locked_Free_List</name>
      <anchor>a0</anchor>
      <arglist>(int mode=ACE_FREE_LIST_WITH_POOL, size_t prealloc=ACE_DEFAULT_FREE_LIST_PREALLOC, size_t lwm=ACE_DEFAULT_FREE_LIST_LWM, size_t hwm=ACE_DEFAULT_FREE_LIST_HWM, size_t inc=ACE_DEFAULT_FREE_LIST_INC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Locked_Free_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(T *element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>remove</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>size</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchor>a5</anchor>
      <arglist>(size_t newsize)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>alloc</name>
      <anchor>b0</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>dealloc</name>
      <anchor>b1</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>mode_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T *</type>
      <name>free_list_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>lwm_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>hwm_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>inc_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>size_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_LOCK</type>
      <name>mutex_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Locked_Free_List</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Locked_Free_List&lt; T, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Locked_Free_List&lt; T, ACE_LOCK &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Log_Msg</name>
    <filename>classACE__Log__Msg.html</filename>
    <member kind="enumvalue">
      <name>STDERR</name>
      <anchor>s11s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGGER</name>
      <anchor>s11s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OSTREAM</name>
      <anchor>s11s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_CALLBACK</name>
      <anchor>s11s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE</name>
      <anchor>s11s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE_LITE</name>
      <anchor>s11s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SILENT</name>
      <anchor>s11s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYSLOG</name>
      <anchor>s11s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUSTOM</name>
      <anchor>s11s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MASK_TYPE</name>
      <anchor>s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROCESS</name>
      <anchor>s12s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD</name>
      <anchor>s12s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Log_Msg</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Log_Msg</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *prog_name, u_long options_flags=ACE_Log_Msg::STDERR, const ACE_TCHAR *logger_key=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchor>a3</anchor>
      <arglist>(u_long f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clr_flags</name>
      <anchor>a4</anchor>
      <arglist>(u_long f)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>flags</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR *program_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>op_status</name>
      <anchor>a9</anchor>
      <arglist>(int status)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>op_status</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errnum</name>
      <anchor>a11</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>errnum</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linenum</name>
      <anchor>a13</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenum</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file</name>
      <anchor>a15</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>file</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg</name>
      <anchor>a17</anchor>
      <arglist>(const ACE_TCHAR *)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>msg</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchor>a19</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>restart</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_ostream</name>
      <anchor>a21</anchor>
      <arglist>(ACE_OSTREAM_TYPE *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_ostream</name>
      <anchor>a22</anchor>
      <arglist>(ACE_OSTREAM_TYPE *, int delete_ostream)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE *</type>
      <name>msg_ostream</name>
      <anchor>a23</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Log_Msg_Callback *</type>
      <name>msg_callback</name>
      <anchor>a24</anchor>
      <arglist>(ACE_Log_Msg_Callback *c)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Log_Msg_Callback *</type>
      <name>msg_callback</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inc</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dec</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trace_depth</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace_depth</name>
      <anchor>a29</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trace_active</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace_active</name>
      <anchor>a31</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Descriptor *</type>
      <name>thr_desc</name>
      <anchor>a32</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thr_desc</name>
      <anchor>a33</anchor>
      <arglist>(ACE_Thread_Descriptor *td)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_tracing</name>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_tracing</name>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tracing_enabled</name>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>priority_mask</name>
      <anchor>a37</anchor>
      <arglist>(MASK_TYPE=THREAD)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>priority_mask</name>
      <anchor>a38</anchor>
      <arglist>(u_long, MASK_TYPE=THREAD)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>log_priority_enabled</name>
      <anchor>a39</anchor>
      <arglist>(ACE_Log_Priority log_priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>log_priority_enabled</name>
      <anchor>a40</anchor>
      <arglist>(ACE_Log_Priority log_priority, const char *,...)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>getpid</name>
      <anchor>a41</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>local_host</name>
      <anchor>a42</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_host</name>
      <anchor>a43</anchor>
      <arglist>(const ACE_TCHAR *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a44</anchor>
      <arglist>(const char *file, int line, int op_status=-1, int errnum=0, int restart=1, ACE_OSTREAM_TYPE *os=0, ACE_Log_Msg_Callback *c=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conditional_set</name>
      <anchor>a45</anchor>
      <arglist>(const char *file, int line, int op_status, int errnum)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>log</name>
      <anchor>a46</anchor>
      <arglist>(ACE_Log_Priority priority, const ACE_TCHAR *format,...)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>log</name>
      <anchor>a47</anchor>
      <arglist>(ACE_Log_Priority priority, const ACE_ANTI_TCHAR *format,...)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>log</name>
      <anchor>a48</anchor>
      <arglist>(const ACE_TCHAR *format, ACE_Log_Priority priority, va_list argp)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>log</name>
      <anchor>a49</anchor>
      <arglist>(ACE_Log_Record &amp;log_record, int suppress_stderr=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>log_hexdump</name>
      <anchor>a50</anchor>
      <arglist>(ACE_Log_Priority log_priority, const char *buffer, int size, const ACE_TCHAR *text=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a51</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Log_Msg *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>exists</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>program_name</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>disable_debug_messages</name>
      <anchor>d3</anchor>
      <arglist>(ACE_Log_Priority priority=LM_DEBUG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>enable_debug_messages</name>
      <anchor>d4</anchor>
      <arglist>(ACE_Log_Priority priority=LM_DEBUG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Log_Msg_Backend *</type>
      <name>msg_backend</name>
      <anchor>d5</anchor>
      <arglist>(ACE_Log_Msg_Backend *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Log_Msg_Backend *</type>
      <name>msg_backend</name>
      <anchor>d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init_hook</name>
      <anchor>d7</anchor>
      <arglist>(ACE_OS_Log_Msg_Attributes &amp;attributes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>inherit_hook</name>
      <anchor>d8</anchor>
      <arglist>(ACE_OS_Thread_Descriptor *thr_desc, ACE_OS_Log_Msg_Attributes &amp;attributes)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>is_set_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>file_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>line_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>op_status_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Log_Msg &amp;</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Log_Msg &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Log_Msg</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Log_Msg &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>close</name>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>sync_hook</name>
      <anchor>f1</anchor>
      <arglist>(const ACE_TCHAR *prg_name)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_OS_Thread_Descriptor *</type>
      <name>thr_desc_hook</name>
      <anchor>f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>status_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errnum_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>linenum_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>file_</name>
      <anchor>o3</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>msg_</name>
      <anchor>o4</anchor>
      <arglist>[ACE_Log_Record::MAXLOGMSGLEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>restart_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_OSTREAM_TYPE *</type>
      <name>ostream_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Log_Msg_Callback *</type>
      <name>msg_callback_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>trace_depth_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>trace_active_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>tracing_enabled_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>delete_ostream_</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Descriptor *</type>
      <name>thr_desc_</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>priority_mask_</name>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Log_Msg::@16</type>
      <name>conditional_values_</name>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>u_long</type>
      <name>process_priority_mask_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>program_name_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>local_host_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>pid_t</type>
      <name>pid_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>u_long</type>
      <name>flags_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>msg_off_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>instance_count_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>u_long</type>
      <name>default_priority_mask_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend void</type>
      <name>ACE_OS::cleanup_tss</name>
      <anchor>l0</anchor>
      <arglist>(const u_int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Log_Msg_Backend</name>
    <filename>classACE__Log__Msg__Backend.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Log_Msg_Backend</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *logger_key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>reset</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>log</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Log_Record &amp;log_record)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Log_Msg_Callback</name>
    <filename>classACE__Log__Msg__Callback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Log_Msg_Callback</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Log_Record &amp;log_record)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Log_Msg_IPC</name>
    <filename>classACE__Log__Msg__IPC.html</filename>
    <base>ACE_Log_Msg_Backend</base>
    <member kind="function">
      <type></type>
      <name>ACE_Log_Msg_IPC</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Log_Msg_IPC</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *logger_key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>log</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Log_Record &amp;log_record)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOG_MSG_IPC_STREAM</type>
      <name>message_queue_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Log_Record</name>
    <filename>classACE__Log__Record.html</filename>
    <member kind="enumvalue">
      <name>MAXLOGMSGLEN</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALIGN_WORDB</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE_LEN</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAXVERBOSELOGMSGLEN</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Log_Record</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Log_Record</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Log_Priority lp, long time_stamp, long pid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Log_Record</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Log_Priority lp, const ACE_Time_Value &amp;time_stamp, long pid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Log_Record</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>print</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR host_name[], u_long verbose_flag, FILE *fp=stderr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>print</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR host_name[], u_long verbose_flag, ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>format_msg</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_TCHAR host_name[], u_long verbose_flag, ACE_TCHAR *verbose_msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encode</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decode</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>type</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a10</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>priority</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>priority</name>
      <anchor>a12</anchor>
      <arglist>(u_long num)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>length</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a14</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value</type>
      <name>time_stamp</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>time_stamp</name>
      <anchor>a16</anchor>
      <arglist>(const ACE_Time_Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>pid</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pid</name>
      <anchor>a18</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>msg_data</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_data</name>
      <anchor>a20</anchor>
      <arglist>(const ACE_TCHAR *data)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>msg_data_len</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>priority_name</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Log_Priority p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>priority_name</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Log_Priority p, const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>round_up</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INT32</type>
      <name>length_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>type_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>secs_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>usecs_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>pid_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>msg_data_</name>
      <anchor>o5</anchor>
      <arglist>[MAXLOGMSGLEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>priority_names_</name>
      <anchor>r0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Logging_Strategy</name>
    <filename>classACE__Logging__Strategy.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>ACE_Logging_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a1</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, const void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_args</name>
      <anchor>a4</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log_msg</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Log_Msg *log_msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tokenize</name>
      <anchor>c0</anchor>
      <arglist>(ACE_TCHAR *flag_string)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>priorities</name>
      <anchor>c1</anchor>
      <arglist>(ACE_TCHAR *priority_string, ACE_Log_Msg::MASK_TYPE mask)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>thread_priority_mask_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>process_priority_mask_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>flags_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>filename_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>logger_key_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>program_name_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>wipeout_logfile_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fixed_number_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>order_files_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_file_number_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>interval_</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>max_size_</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Log_Msg *</type>
      <name>log_msg_</name>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LRU_Caching_Strategy</name>
    <filename>classACE__LRU__Caching__Strategy.html</filename>
    <templarg>ATTRIBUTES</templarg>
    <templarg>CACHING_UTILITY</templarg>
    <member kind="typedef">
      <type>ATTRIBUTES</type>
      <name>CACHING_ATTRIBUTES</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LRU_Caching_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ATTRIBUTES</type>
      <name>attributes</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>purge_percent</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge_percent</name>
      <anchor>a3</anchor>
      <arglist>(double percentage)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_bind</name>
      <anchor>a4</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_find</name>
      <anchor>a5</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_unbind</name>
      <anchor>a6</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_trybind</name>
      <anchor>a7</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_rebind</name>
      <anchor>a8</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>CACHING_UTILITY &amp;</type>
      <name>caching_utility</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ATTRIBUTES</type>
      <name>timer_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>purge_percent_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CACHING_UTILITY</type>
      <name>caching_utility_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LSOCK</name>
    <filename>classACE__LSOCK.html</filename>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_LSOCK</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_LSOCK</name>
      <anchor>b1</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>b2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>set_handle</name>
      <anchor>b3</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>aux_handle_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LSOCK_Acceptor</name>
    <filename>classACE__LSOCK__Acceptor.html</filename>
    <base>ACE_SOCK_Acceptor</base>
    <member kind="typedef">
      <type>ACE_UNIX_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_LSOCK_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, int reuse_addr=0, int protocol_family=PF_UNIX, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, int reuse_addr=0, int protocol_family=PF_UNIX, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a3</anchor>
      <arglist>(ACE_LSOCK_Stream &amp;new_ipc_sap, ACE_Addr *=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UNIX_Addr</type>
      <name>local_addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LSOCK_CODgram</name>
    <filename>classACE__LSOCK__CODgram.html</filename>
    <base>ACE_SOCK_CODgram</base>
    <base>ACE_LSOCK</base>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_CODgram</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_CODgram</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;remote_sap, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int protocol_family=PF_UNIX, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Addr &amp;remote_sap, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int protocol_family=PF_UNIX, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LSOCK_Connector</name>
    <filename>classACE__LSOCK__Connector.html</filename>
    <base>ACE_SOCK_Connector</base>
    <member kind="typedef">
      <type>ACE_UNIX_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_LSOCK_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_LSOCK_Stream &amp;new_stream, const ACE_UNIX_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a2</anchor>
      <arglist>(ACE_LSOCK_Stream &amp;new_stream, const ACE_UNIX_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LSOCK_Dgram</name>
    <filename>classACE__LSOCK__Dgram.html</filename>
    <base>ACE_SOCK_Dgram</base>
    <base>ACE_LSOCK</base>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_LSOCK_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family=PF_UNIX, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family=PF_UNIX, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_LSOCK_Stream</name>
    <filename>classACE__LSOCK__Stream.html</filename>
    <base>ACE_SOCK_Stream</base>
    <base>ACE_LSOCK</base>
    <member kind="typedef">
      <type>ACE_UNIX_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_msg</name>
      <anchor>a0</anchor>
      <arglist>(const iovec iov[], size_t n, ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_msg</name>
      <anchor>a1</anchor>
      <arglist>(iovec iov[], size_t n, ACE_HANDLE &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Malloc</name>
    <filename>classACE__Malloc.html</filename>
    <templarg></templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Malloc_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_Control_Block &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *pool_name=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *pool_name, const ACE_TCHAR *lock_name, const ACE_MEM_POOL_OPTIONS *options=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *pool_name, const ACE_TCHAR *lock_name, const void *options=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Malloc_FIFO_Iterator</name>
    <filename>classACE__Malloc__FIFO__Iterator.html</filename>
    <templarg></templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Malloc_FIFO_Iterator_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_Control_Block &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_FIFO_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Malloc&lt; ACE_MEM_POOL_2, ACE_LOCK &gt; &amp;malloc, const char *name=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Malloc_FIFO_Iterator_T</name>
    <filename>classACE__Malloc__FIFO__Iterator__T.html</filename>
    <templarg></templarg>
    <templarg>ACE_LOCK</templarg>
    <templarg>ACE_CB</templarg>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_CB::ACE_Name_Node</type>
      <name>NAME_NODE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_CB::ACE_Malloc_Header</type>
      <name>MALLOC_HEADER</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_FIFO_Iterator_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Malloc_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_CB &gt; &amp;malloc, const char *name=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Malloc_FIFO_Iterator_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(void *&amp;next_entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a4</anchor>
      <arglist>(void *&amp;next_entry, const char *&amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Malloc_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_CB &gt; &amp;</type>
      <name>malloc_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NAME_NODE *</type>
      <name>curr_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Read_Guard&lt; ACE_LOCK &gt;</type>
      <name>guard_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>name_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Malloc_LIFO_Iterator</name>
    <filename>classACE__Malloc__LIFO__Iterator.html</filename>
    <templarg></templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Malloc_LIFO_Iterator_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_Control_Block &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_LIFO_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Malloc&lt; ACE_MEM_POOL_2, ACE_LOCK &gt; &amp;malloc, const char *name=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Malloc_LIFO_Iterator_T</name>
    <filename>classACE__Malloc__LIFO__Iterator__T.html</filename>
    <templarg></templarg>
    <templarg>ACE_LOCK</templarg>
    <templarg>ACE_CB</templarg>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_CB::ACE_Name_Node</type>
      <name>NAME_NODE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_CB::ACE_Malloc_Header</type>
      <name>MALLOC_HEADER</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_LIFO_Iterator_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Malloc_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_CB &gt; &amp;malloc, const char *name=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Malloc_LIFO_Iterator_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(void *&amp;next_entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a4</anchor>
      <arglist>(void *&amp;next_entry, const char *&amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Malloc_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_CB &gt; &amp;</type>
      <name>malloc_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NAME_NODE *</type>
      <name>curr_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Read_Guard&lt; ACE_LOCK &gt;</type>
      <name>guard_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>name_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Malloc_T</name>
    <filename>classACE__Malloc__T.html</filename>
    <templarg></templarg>
    <templarg>ACE_LOCK</templarg>
    <templarg>ACE_CB</templarg>
    <member kind="typedef">
      <type>ACE_MEM_POOL</type>
      <name>MEMORY_POOL</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_MEM_POOL_OPTIONS</type>
      <name>MEMORY_POOL_OPTIONS</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_CB::ACE_Name_Node</type>
      <name>NAME_NODE</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_CB::ACE_Malloc_Header</type>
      <name>MALLOC_HEADER</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_T</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *pool_name=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_T</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *pool_name, const ACE_TCHAR *lock_name, const ACE_MEM_POOL_OPTIONS *options=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_T</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *pool_name, const ACE_TCHAR *lock_name, const void *options=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Malloc_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ref_counter</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>malloc</name>
      <anchor>a7</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>calloc</name>
      <anchor>a8</anchor>
      <arglist>(size_t nbytes, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>calloc</name>
      <anchor>a9</anchor>
      <arglist>(size_t n_elem, size_t elem_size, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchor>a10</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>MEMORY_POOL &amp;</type>
      <name>memory_pool</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a12</anchor>
      <arglist>(const char *name, void *pointer, int duplicates=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a13</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a14</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a15</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a16</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a17</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync</name>
      <anchor>a18</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync</name>
      <anchor>a19</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>protect</name>
      <anchor>a20</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>protect</name>
      <anchor>a21</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>avail_chunks</name>
      <anchor>a22</anchor>
      <arglist>(size_t size) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_LOCK &amp;</type>
      <name>mutex</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a24</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>base_addr</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>open</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>shared_bind</name>
      <anchor>c1</anchor>
      <arglist>(const char *name, void *pointer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>shared_find</name>
      <anchor>c2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>shared_malloc</name>
      <anchor>c3</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>shared_free</name>
      <anchor>c4</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CB *</type>
      <name>cb_ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MEMORY_POOL</type>
      <name>memory_pool_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Malloc_LIFO_Iterator_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_CB &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Malloc_FIFO_Iterator_T&lt; ACE_MEM_POOL_2, ACE_LOCK, ACE_CB &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Managed_Object</name>
    <filename>classACE__Managed__Object.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>get_preallocated_object</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Object_Manager::Preallocated_Object id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>get_preallocated_array</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Object_Manager::Preallocated_Array id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Managed_Object</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Managed_Object</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Managed_Object&lt; TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Managed_Object&lt; TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>this_prevents_compiler_warning_about_only_private_constructors</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Managed_Process</name>
    <filename>classACE__Managed__Process.html</filename>
    <base>ACE_Process</base>
    <member kind="function">
      <type></type>
      <name>ACE_Managed_Process</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unmanage</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Managed_Process</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ace_dewarn_gplusplus</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Manual_Event</name>
    <filename>classACE__Manual__Event.html</filename>
    <base>ACE_Event</base>
    <member kind="function">
      <type></type>
      <name>ACE_Manual_Event</name>
      <anchor>a0</anchor>
      <arglist>(int initial_state=0, int type=USYNC_THREAD, const char *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Manual_Event</name>
      <anchor>a1</anchor>
      <arglist>(int initial_state, int type, const wchar_t *name, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Manual_Event</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map</name>
    <filename>classACE__Map.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <member kind="typedef">
      <type>KEY</type>
      <name>key_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VALUE</type>
      <name>mapped_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Reference_Pair&lt; const KEY, VALUE &gt;</type>
      <name>value_type</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Iterator&lt; value_type &gt;</type>
      <name>iterator</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Reverse_Iterator&lt; value_type &gt;</type>
      <name>reverse_iterator</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Iterator_Impl&lt; value_type &gt;</type>
      <name>iterator_implementation</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Reverse_Iterator_Impl&lt; value_type &gt;</type>
      <name>reverse_iterator_implementation</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Map</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a3</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind_modify_key</name>
      <anchor>a4</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>create_key</name>
      <anchor>a5</anchor>
      <arglist>(KEY &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a6</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a7</anchor>
      <arglist>(const VALUE &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>recover_key</name>
      <anchor>a8</anchor>
      <arglist>(const KEY &amp;modified_key, KEY &amp;original_key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a9</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a10</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, VALUE &amp;old_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a11</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, KEY &amp;old_key, VALUE &amp;old_value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a12</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a13</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a14</anchor>
      <arglist>(const KEY &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a15</anchor>
      <arglist>(const KEY &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a16</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>current_size</name>
      <anchor>a17</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>total_size</name>
      <anchor>a18</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a19</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Map</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>begin_impl</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>end_impl</name>
      <anchor>b2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rbegin_impl</name>
      <anchor>b3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rend_impl</name>
      <anchor>b4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Map&lt; KEY, VALUE &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Map</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Map&lt; KEY, VALUE &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Const_Iterator</name>
    <filename>classACE__Map__Const__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Map_Const_Iterator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Const_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm, int pass_end=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Const_Iterator_Base</name>
    <filename>classACE__Map__Const__Iterator__Base.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Const_Iterator_Base</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;next_entry) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Entry&lt; EXT_ID, INT_ID &gt; &amp;</type>
      <name>operator *</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>map</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Map_Const_Iterator_Base&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Map_Const_Iterator_Base&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>forward_i</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>reverse_i</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_i</name>
      <anchor>b2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; *</type>
      <name>map_man_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_UINT32</type>
      <name>next_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Entry</name>
    <filename>classACE__Map__Entry.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <member kind="function">
      <type></type>
      <name>~ACE_Map_Entry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(ACE_UINT32 n)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>prev</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prev</name>
      <anchor>a5</anchor>
      <arglist>(ACE_UINT32 p)</arglist>
    </member>
    <member kind="variable">
      <type>EXT_ID</type>
      <name>ext_id_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INT_ID</type>
      <name>int_id_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>next_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>prev_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Impl</name>
    <filename>classACE__Map__Impl.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>IMPLEMENTATION</templarg>
    <templarg>ITERATOR</templarg>
    <templarg>REVERSE_ITERATOR</templarg>
    <templarg>ENTRY</templarg>
    <base>ACE_Map</base>
    <member kind="typedef">
      <type>ACE_Map_Impl_Iterator_Adapter&lt; ACE_TYPENAME ACE_Map&lt; KEY, VALUE &gt;::value_type, ITERATOR, ENTRY &gt;</type>
      <name>iterator_impl</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Impl_Reverse_Iterator_Adapter&lt; ACE_TYPENAME ACE_Map&lt; KEY, VALUE &gt;::value_type, REVERSE_ITERATOR, ENTRY &gt;</type>
      <name>reverse_iterator_impl</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMPLEMENTATION</type>
      <name>implementation</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Impl</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Impl</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Map_Impl</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_modify_key</name>
      <anchor>a6</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create_key</name>
      <anchor>a7</anchor>
      <arglist>(KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a8</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a9</anchor>
      <arglist>(const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recover_key</name>
      <anchor>a10</anchor>
      <arglist>(const KEY &amp;modified_key, KEY &amp;original_key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a11</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a12</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a13</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, KEY &amp;old_key, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a14</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a15</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a16</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a17</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a18</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>current_size</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>total_size</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>IMPLEMENTATION &amp;</type>
      <name>impl</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>begin_impl</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>end_impl</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rbegin_impl</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rend_impl</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IMPLEMENTATION</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Map_Impl&lt; KEY, VALUE, IMPLEMENTATION, ITERATOR, REVERSE_ITERATOR, ENTRY &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Map_Impl</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Map_Impl&lt; KEY, VALUE, IMPLEMENTATION, ITERATOR, REVERSE_ITERATOR, ENTRY &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Impl_Iterator_Adapter</name>
    <filename>classACE__Map__Impl__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>IMPLEMENTATION</templarg>
    <templarg>ENTRY</templarg>
    <base>ACE_Iterator_Impl</base>
    <member kind="typedef">
      <type>IMPLEMENTATION</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Impl_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const IMPLEMENTATION &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Map_Impl_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IMPLEMENTATION &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IMPLEMENTATION</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Impl_Reverse_Iterator_Adapter</name>
    <filename>classACE__Map__Impl__Reverse__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>IMPLEMENTATION</templarg>
    <templarg>ENTRY</templarg>
    <base>ACE_Reverse_Iterator_Impl</base>
    <member kind="typedef">
      <type>IMPLEMENTATION</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Impl_Reverse_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const IMPLEMENTATION &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Map_Impl_Reverse_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Reverse_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IMPLEMENTATION &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IMPLEMENTATION</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Iterator</name>
    <filename>classACE__Map__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Map_Iterator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm, int pass_end=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Iterator_Base</name>
    <filename>classACE__Map__Iterator__Base.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Iterator_Base</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Map_Entry&lt; EXT_ID, INT_ID &gt; *&amp;next_entry) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Entry&lt; EXT_ID, INT_ID &gt; &amp;</type>
      <name>operator *</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>map</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Map_Iterator_Base&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Map_Iterator_Base&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>forward_i</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>reverse_i</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_i</name>
      <anchor>b2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; *</type>
      <name>map_man_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_UINT32</type>
      <name>next_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Manager</name>
    <filename>classACE__Map__Manager.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="typedef">
      <type>EXT_ID</type>
      <name>KEY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>INT_ID</type>
      <name>VALUE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Entry&lt; EXT_ID, INT_ID &gt;</type>
      <name>ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>ITERATOR</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>CONST_ITERATOR</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>REVERSE_ITERATOR</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>iterator</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>const_iterator</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>reverse_iterator</name>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Manager</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Manager</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Map_Manager</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a6</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a7</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a8</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a9</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a10</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a11</anchor>
      <arglist>(const EXT_ID &amp;ext_id) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a12</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a13</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind_all</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_size</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_LOCK &amp;</type>
      <name>mutex</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>begin</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>end</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>rbegin</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>rend</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_EXPONENTIAL</name>
      <anchor>t2t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR_INCREASE</name>
      <anchor>t2t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>bind_i</name>
      <anchor>b0</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_bind</name>
      <anchor>b1</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b2</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b3</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>b4</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>trybind_i</name>
      <anchor>b5</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find_i</name>
      <anchor>b6</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find_and_return_index</name>
      <anchor>b7</anchor>
      <arglist>(const EXT_ID &amp;ext_id, ACE_UINT32 &amp;slot)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>b8</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>b9</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unbind_and_return_index</name>
      <anchor>b10</anchor>
      <arglist>(const EXT_ID &amp;ext_id, ACE_UINT32 &amp;slot)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>unbind_slot</name>
      <anchor>b11</anchor>
      <arglist>(ACE_UINT32 slot)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>resize_i</name>
      <anchor>b12</anchor>
      <arglist>(ACE_UINT32 size)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>close_i</name>
      <anchor>b13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>equal</name>
      <anchor>b14</anchor>
      <arglist>(const EXT_ID &amp;id1, const EXT_ID &amp;id2)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_UINT32</type>
      <name>new_size</name>
      <anchor>b15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>free_search_structure</name>
      <anchor>b16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_UINT32</type>
      <name>free_list_id</name>
      <anchor>b17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_UINT32</type>
      <name>occupied_list_id</name>
      <anchor>b18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>next_free</name>
      <anchor>b19</anchor>
      <arglist>(ACE_UINT32 &amp;slot)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>move_from_free_list_to_occupied_list</name>
      <anchor>b20</anchor>
      <arglist>(ACE_UINT32 slot)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>move_from_occupied_list_to_free_list</name>
      <anchor>b21</anchor>
      <arglist>(ACE_UINT32 slot)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>shared_move</name>
      <anchor>b22</anchor>
      <arglist>(ACE_UINT32 slot, ACE_Map_Entry&lt; EXT_ID, INT_ID &gt; &amp;current_list, ACE_UINT32 current_list_id, ACE_Map_Entry&lt; EXT_ID, INT_ID &gt; &amp;new_list, ACE_UINT32 new_list_id)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Entry&lt; EXT_ID, INT_ID &gt; *</type>
      <name>search_structure_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_UINT32</type>
      <name>total_size_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_UINT32</type>
      <name>cur_size_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Entry&lt; EXT_ID, INT_ID &gt;</type>
      <name>free_list_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Entry&lt; EXT_ID, INT_ID &gt;</type>
      <name>occupied_list_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Map_Manager</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Map_Iterator_Base&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Map_Const_Iterator_Base&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Map_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Map_Const_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</name>
      <anchor>l4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Manager_Adapter</name>
    <filename>classACE__Map__Manager__Adapter.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>KEY_GENERATOR</templarg>
    <base>ACE_Map</base>
    <member kind="typedef">
      <type>ACE_Map_Manager_Iterator_Adapter&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt;, KEY, VALUE &gt;</type>
      <name>iterator_impl</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Manager_Reverse_Iterator_Adapter&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt;, KEY, VALUE &gt;</type>
      <name>reverse_iterator_impl</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Map_Manager&lt; KEY, VALUE, ACE_Null_Mutex &gt;</type>
      <name>implementation</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Manager_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Manager_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Map_Manager_Adapter</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(size_t length=ACE_DEFAULT_MAP_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_modify_key</name>
      <anchor>a6</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create_key</name>
      <anchor>a7</anchor>
      <arglist>(KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a8</anchor>
      <arglist>(const VALUE &amp;value, KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_create_key</name>
      <anchor>a9</anchor>
      <arglist>(const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recover_key</name>
      <anchor>a10</anchor>
      <arglist>(const KEY &amp;modified_key, KEY &amp;original_key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a11</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a12</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a13</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;value, KEY &amp;old_key, VALUE &amp;old_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a14</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a15</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a16</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a17</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a18</anchor>
      <arglist>(const KEY &amp;key, VALUE &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>current_size</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>total_size</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Manager&lt; KEY, VALUE, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>KEY_GENERATOR &amp;</type>
      <name>key_generator</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>begin_impl</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>end_impl</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rbegin_impl</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; ACE_Reference_Pair&lt; const KEY, VALUE &gt; &gt; *</type>
      <name>rend_impl</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Manager&lt; KEY, VALUE, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>KEY_GENERATOR</type>
      <name>key_generator_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Map_Manager_Adapter&lt; KEY, VALUE, KEY_GENERATOR &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Map_Manager_Adapter</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Map_Manager_Adapter&lt; KEY, VALUE, KEY_GENERATOR &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Manager_Iterator_Adapter</name>
    <filename>classACE__Map__Manager__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <base>ACE_Iterator_Impl</base>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_Map_Manager&lt; KEY, VALUE, ACE_Null_Mutex &gt;::iterator</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Manager_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Map_Iterator&lt; KEY, VALUE, ACE_Null_Mutex &gt; &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Map_Manager_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Iterator&lt; KEY, VALUE, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Iterator&lt; KEY, VALUE, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Manager_Reverse_Iterator_Adapter</name>
    <filename>classACE__Map__Manager__Reverse__Iterator__Adapter.html</filename>
    <templarg>T</templarg>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <base>ACE_Reverse_Iterator_Impl</base>
    <member kind="typedef">
      <type>ACE_TYPENAME ACE_Map_Manager&lt; KEY, VALUE, ACE_Null_Mutex &gt;::reverse_iterator</type>
      <name>implementation</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Manager_Reverse_Iterator_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Map_Reverse_Iterator&lt; KEY, VALUE, ACE_Null_Mutex &gt; &amp;impl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Map_Manager_Reverse_Iterator_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Reverse_Iterator_Impl&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; KEY, VALUE, ACE_Null_Mutex &gt; &amp;</type>
      <name>impl</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Map_Reverse_Iterator&lt; KEY, VALUE, ACE_Null_Mutex &gt;</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Map_Reverse_Iterator</name>
    <filename>classACE__Map__Reverse__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Map_Iterator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Map_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Map_Manager&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;mm, int pass_end=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Map_Reverse_Iterator&lt; EXT_ID, INT_ID, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MEM_Acceptor</name>
    <filename>classACE__MEM__Acceptor.html</filename>
    <base>ACE_SOCK_Acceptor</base>
    <member kind="typedef">
      <type>ACE_MEM_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_MEM_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_MEM_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Acceptor</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_MEM_Addr &amp;remote_sap, int reuse_addr=0, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_MEM_Addr &amp;local_sap, int reuse_addr=0, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a4</anchor>
      <arglist>(ACE_MEM_Stream &amp;new_ipc_sap, ACE_MEM_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>shared_accept_finish</name>
      <anchor>a5</anchor>
      <arglist>(ACE_MEM_Stream new_stream, int in_blocking_mode, int reset_new_handle) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>mmap_prefix</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmap_prefix</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_TCHAR *prefix)</arglist>
    </member>
    <member kind="function">
      <type>ACE_MEM_IO::Signal_Strategy</type>
      <name>preferred_strategy</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preferred_strategy</name>
      <anchor>a9</anchor>
      <arglist>(ACE_MEM_IO::Signal_Strategy strategy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a10</anchor>
      <arglist>(ACE_MEM_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_MEM_SAP::MALLOC_OPTIONS &amp;</type>
      <name>malloc_options</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>open</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, int reuse_addr=0, int protocol_family=PF_INET, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>open</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g, u_long flags, int reuse_addr, int protocol_family, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>accept</name>
      <anchor>b2</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, ACE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>accept</name>
      <anchor>b3</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, ACE_Accept_QoS_Params qos_params, ACE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>mmap_prefix_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_SAP::MALLOC_OPTIONS</type>
      <name>malloc_options_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_IO::Signal_Strategy</type>
      <name>preferred_strategy_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MEM_Addr</name>
    <filename>classACE__MEM__Addr.html</filename>
    <base>ACE_Addr</base>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Addr</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_MEM_Addr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Addr</name>
      <anchor>a2</anchor>
      <arglist>(u_short port_number)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_MEM_Addr</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR port_name[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_MEM_Addr</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initialize_local</name>
      <anchor>a5</anchor>
      <arglist>(u_short port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>same_host</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_INET_Addr &amp;sap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a7</anchor>
      <arglist>(u_short port_number, int encode=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR port_name[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_addr</name>
      <anchor>a10</anchor>
      <arglist>(void *, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a11</anchor>
      <arglist>(ACE_TCHAR buffer[], size_t size, int ipaddr_format=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>string_to_addr</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_TCHAR address[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_port_number</name>
      <anchor>a13</anchor>
      <arglist>(u_short, int encode=1)</arglist>
    </member>
    <member kind="function">
      <type>u_short</type>
      <name>get_port_number</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_host_name</name>
      <anchor>a15</anchor>
      <arglist>(ACE_TCHAR hostname[], size_t hostnamelen) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_host_name</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_host_addr</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>get_ip_address</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr &amp;</type>
      <name>get_remote_addr</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr &amp;</type>
      <name>get_local_addr</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_MEM_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a22</anchor>
      <arglist>(const ACE_INET_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a23</anchor>
      <arglist>(const ACE_MEM_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a24</anchor>
      <arglist>(const ACE_INET_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a26</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INET_Addr</type>
      <name>external_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INET_Addr</type>
      <name>internal_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MEM_Connector</name>
    <filename>classACE__MEM__Connector.html</filename>
    <base>ACE_SOCK_Connector</base>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_MEM_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_MEM_Stream &amp;new_stream, const ACE_INET_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a2</anchor>
      <arglist>(ACE_MEM_Stream &amp;new_stream, const ACE_INET_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_MEM_IO::Signal_Strategy</type>
      <name>preferred_strategy</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preferred_strategy</name>
      <anchor>a4</anchor>
      <arglist>(ACE_MEM_IO::Signal_Strategy strategy)</arglist>
    </member>
    <member kind="function">
      <type>ACE_MEM_SAP::MALLOC_OPTIONS &amp;</type>
      <name>malloc_options</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_Addr</type>
      <name>address_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_SAP::MALLOC_OPTIONS</type>
      <name>malloc_options_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_IO::Signal_Strategy</type>
      <name>preferred_strategy_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MEM_IO</name>
    <filename>classACE__MEM__IO.html</filename>
    <base>ACE_SOCK</base>
    <member kind="enumeration">
      <name>Signal_Strategy</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reactive</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MT</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_IO</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_MEM_IO</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *name, ACE_MEM_IO::Signal_Strategy type=ACE_MEM_IO::Reactive, ACE_MEM_SAP::MALLOC_OPTIONS *options=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fini</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a4</anchor>
      <arglist>(const void *buf, size_t n, int flags)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a5</anchor>
      <arglist>(void *buf, size_t n, int flags)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a6</anchor>
      <arglist>(const void *buf, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a7</anchor>
      <arglist>(void *buf, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a8</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a9</anchor>
      <arglist>(const void *buf, size_t n, int flags, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Message_Block *message_block, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a11</anchor>
      <arglist>(void *buf, size_t n, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a12</anchor>
      <arglist>(void *buf, size_t n, int flags, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>fetch_recv_buf</name>
      <anchor>c0</anchor>
      <arglist>(int flag, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_SAP *</type>
      <name>deliver_strategy_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_SAP_Node *</type>
      <name>recv_buffer_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ssize_t</type>
      <name>buf_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ssize_t</type>
      <name>cur_offset_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Mem_Map</name>
    <filename>classACE__Mem__Map.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Mem_Map</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Mem_Map</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE handle, int length=-1, int prot=PROT_RDWR, int share=ACE_MAP_PRIVATE, void *addr=0, off_t offset=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Mem_Map</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *filename, int len=-1, int flags=O_RDWR|O_CREAT, int mode=ACE_DEFAULT_FILE_PERMS, int prot=PROT_RDWR, int share=ACE_MAP_PRIVATE, void *addr=0, off_t offset=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>map</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle, int length=-1, int prot=PROT_RDWR, int share=ACE_MAP_PRIVATE, void *addr=0, off_t offset=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>map</name>
      <anchor>a4</anchor>
      <arglist>(int length=-1, int prot=PROT_RDWR, int share=ACE_MAP_PRIVATE, void *addr=0, off_t offset=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>map</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *filename, int len=-1, int flags=O_RDWR|O_CREAT, int mode=ACE_DEFAULT_FILE_PERMS, int prot=PROT_RDWR, int share=ACE_MAP_PRIVATE, void *addr=0, off_t offset=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Mem_Map</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_TCHAR *filename, int flags=O_RDWR|O_CREAT, int mode=ACE_DEFAULT_FILE_PERMS, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_handle</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_filemapping_handle</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchor>a11</anchor>
      <arglist>(void *&amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>addr</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unmap</name>
      <anchor>a14</anchor>
      <arglist>(int len=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unmap</name>
      <anchor>a15</anchor>
      <arglist>(void *addr, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync</name>
      <anchor>a16</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync</name>
      <anchor>a17</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>protect</name>
      <anchor>a18</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>protect</name>
      <anchor>a19</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advise</name>
      <anchor>a21</anchor>
      <arglist>(int behavior, int len=-1)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>filename</name>
      <anchor>a23</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a24</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>map_it</name>
      <anchor>c0</anchor>
      <arglist>(ACE_HANDLE handle, int len=-1, int prot=PROT_RDWR, int share=MAP_SHARED, void *addr=0, off_t offset=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Mem_Map</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Mem_Map &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Mem_Map &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>base_addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>filename_</name>
      <anchor>o1</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>length_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>file_mapping_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>close_handle_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MEM_SAP</name>
    <filename>classACE__MEM__SAP.html</filename>
    <member kind="typedef">
      <type>ACE_Malloc_T&lt; ACE_MMAP_MEMORY_POOL, ACE_Process_Mutex, ACE_PI_Control_Block &gt;</type>
      <name>MALLOC_TYPE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_MMAP_Memory_Pool_Options</type>
      <name>MALLOC_OPTIONS</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_MEM_SAP</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_TCHAR *name, MALLOC_OPTIONS *options)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>recv_buf</name>
      <anchor>a3</anchor>
      <arglist>(ACE_MEM_SAP_Node *&amp;buf, int flags, const ACE_Time_Value *timeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>send_buf</name>
      <anchor>a4</anchor>
      <arglist>(ACE_MEM_SAP_Node *buf, int flags, const ACE_Time_Value *timeout)=0</arglist>
    </member>
    <member kind="function">
      <type>ACE_MEM_SAP_Node *</type>
      <name>acquire_buffer</name>
      <anchor>a5</anchor>
      <arglist>(const ssize_t size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release_buffer</name>
      <anchor>a6</anchor>
      <arglist>(ACE_MEM_SAP_Node *buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>create_shm_malloc</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_TCHAR *name, MALLOC_OPTIONS *options)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>close_shm_malloc</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_MEM_SAP</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MALLOC_TYPE *</type>
      <name>shm_malloc_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MEM_SAP_Node</name>
    <filename>classACE__MEM__SAP__Node.html</filename>
    <member kind="typedef">
      <type>ACE_Based_Pointer&lt; ACE_MEM_SAP_Node &gt;</type>
      <name>ACE_MEM_SAP_NODE_PTR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_SAP_Node</name>
      <anchor>a0</anchor>
      <arglist>(size_t cap)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>data</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>capacity_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_MEM_SAP_NODE_PTR</type>
      <name>next_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MEM_Stream</name>
    <filename>classACE__MEM__Stream.html</filename>
    <base>ACE_MEM_IO</base>
    <member kind="typedef">
      <type>ACE_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MEM_Stream</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_MEM_Stream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a3</anchor>
      <arglist>(const void *buf, int n)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a4</anchor>
      <arglist>(void *buf, int n)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a5</anchor>
      <arglist>(const void *buf, int n, int flags)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a6</anchor>
      <arglist>(void *buf, int n, int flags)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_reader</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_writer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_MEM_Acceptor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_MEM_Connector</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Message_Block</name>
    <filename>classACE__Message__Block.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>ACE_Message_Type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_long</type>
      <name>Message_Flags</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_DATA</name>
      <anchor>s26s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_PROTO</name>
      <anchor>s26s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_BREAK</name>
      <anchor>s26s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_PASSFP</name>
      <anchor>s26s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_EVENT</name>
      <anchor>s26s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_SIG</name>
      <anchor>s26s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_IOCTL</name>
      <anchor>s26s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_SETOPTS</name>
      <anchor>s26s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_IOCACK</name>
      <anchor>s26s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_IOCNAK</name>
      <anchor>s26s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_PCPROTO</name>
      <anchor>s26s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_PCSIG</name>
      <anchor>s26s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_READ</name>
      <anchor>s26s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_FLUSH</name>
      <anchor>s26s15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_STOP</name>
      <anchor>s26s16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_START</name>
      <anchor>s26s17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_HANGUP</name>
      <anchor>s26s18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_ERROR</name>
      <anchor>s26s19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_PCEVENT</name>
      <anchor>s26s20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_NORMAL</name>
      <anchor>s26s21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_PRIORITY</name>
      <anchor>s26s22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MB_USER</name>
      <anchor>s26s23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DONT_DELETE</name>
      <anchor>s27s24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_FLAGS</name>
      <anchor>s27s25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Block</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *message_block_allocator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Block</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Data_Block *, Message_Flags flags=0, ACE_Allocator *message_block_allocator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Block</name>
      <anchor>a2</anchor>
      <arglist>(const char *data, size_t size=0, u_long priority=ACE_DEFAULT_MESSAGE_BLOCK_PRIORITY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Block</name>
      <anchor>a3</anchor>
      <arglist>(size_t size, ACE_Message_Type type=MB_DATA, ACE_Message_Block *cont=0, const char *data=0, ACE_Allocator *allocator_strategy=0, ACE_Lock *locking_strategy=0, u_long priority=ACE_DEFAULT_MESSAGE_BLOCK_PRIORITY, const ACE_Time_Value &amp;execution_time=ACE_Time_Value::zero, const ACE_Time_Value &amp;deadline_time=ACE_Time_Value::max_time, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Block</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Message_Block &amp;mb, size_t align)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a5</anchor>
      <arglist>(const char *data, size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a6</anchor>
      <arglist>(size_t size, ACE_Message_Type type=MB_DATA, ACE_Message_Block *cont=0, const char *data=0, ACE_Allocator *allocator_strategy=0, ACE_Lock *locking_strategy=0, u_long priority=ACE_DEFAULT_MESSAGE_BLOCK_PRIORITY, const ACE_Time_Value &amp;execution_time=ACE_Time_Value::zero, const ACE_Time_Value &amp;deadline_time=ACE_Time_Value::max_time, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Message_Block</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Type</type>
      <name>msg_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_type</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Type type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_data_msg</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Type</type>
      <name>msg_class</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Message_Flags</type>
      <name>set_flags</name>
      <anchor>a12</anchor>
      <arglist>(Message_Flags more_flags)</arglist>
    </member>
    <member kind="function">
      <type>Message_Flags</type>
      <name>clr_flags</name>
      <anchor>a13</anchor>
      <arglist>(Message_Flags less_flags)</arglist>
    </member>
    <member kind="function">
      <type>Message_Flags</type>
      <name>flags</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Message_Flags</type>
      <name>set_self_flags</name>
      <anchor>a15</anchor>
      <arglist>(ACE_Message_Block::Message_Flags more_flags)</arglist>
    </member>
    <member kind="function">
      <type>Message_Flags</type>
      <name>clr_self_flags</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Message_Block::Message_Flags less_flags)</arglist>
    </member>
    <member kind="function">
      <type>Message_Flags</type>
      <name>self_flags</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>msg_priority</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_priority</name>
      <anchor>a19</anchor>
      <arglist>(u_long priority)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value &amp;</type>
      <name>msg_execution_time</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_execution_time</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_Time_Value &amp;et)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value &amp;</type>
      <name>msg_deadline_time</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_deadline_time</name>
      <anchor>a23</anchor>
      <arglist>(const ACE_Time_Value &amp;dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Message_Block *</type>
      <name>clone</name>
      <anchor>a24</anchor>
      <arglist>(Message_Flags mask=0) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>duplicate</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>release</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy</name>
      <anchor>a27</anchor>
      <arglist>(const char *buf, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy</name>
      <anchor>a28</anchor>
      <arglist>(const char *buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>crunch</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>base</name>
      <anchor>a31</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base</name>
      <anchor>a32</anchor>
      <arglist>(char *data, size_t size, Message_Flags=DONT_DELETE)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>end</name>
      <anchor>a33</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>mark</name>
      <anchor>a34</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>rd_ptr</name>
      <anchor>a35</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rd_ptr</name>
      <anchor>a36</anchor>
      <arglist>(char *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rd_ptr</name>
      <anchor>a37</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>wr_ptr</name>
      <anchor>a38</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wr_ptr</name>
      <anchor>a39</anchor>
      <arglist>(char *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wr_ptr</name>
      <anchor>a40</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>data_block</name>
      <anchor>a50</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>data_block</name>
      <anchor>a51</anchor>
      <arglist>(ACE_Data_Block *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>replace_data_block</name>
      <anchor>a52</anchor>
      <arglist>(ACE_Data_Block *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>cont</name>
      <anchor>a53</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cont</name>
      <anchor>a54</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>next</name>
      <anchor>a55</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchor>a56</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>prev</name>
      <anchor>a57</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prev</name>
      <anchor>a58</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>locking_strategy</name>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>locking_strategy</name>
      <anchor>a60</anchor>
      <arglist>(ACE_Lock *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reference_count</name>
      <anchor>a61</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a62</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchor>a41</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a42</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_length</name>
      <anchor>a43</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_size</name>
      <anchor>a44</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a45</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchor>a46</anchor>
      <arglist>(size_t length)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_capacity</name>
      <anchor>a47</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchor>a48</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>space</name>
      <anchor>a49</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Message_Block *</type>
      <name>duplicate</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Message_Block *</type>
      <name>release</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Message_Block</name>
      <anchor>b0</anchor>
      <arglist>(size_t size, ACE_Message_Type type, ACE_Message_Block *cont, const char *data, ACE_Allocator *allocator_strategy, ACE_Lock *locking_strategy, Message_Flags flags, u_long priority, const ACE_Time_Value &amp;execution_time, const ACE_Time_Value &amp;deadline_time, ACE_Data_Block *db, ACE_Allocator *data_block_allocator, ACE_Allocator *message_block_allocator)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>release_i</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Lock *lock)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>init_i</name>
      <anchor>b2</anchor>
      <arglist>(size_t size, ACE_Message_Type type, ACE_Message_Block *cont, const char *data, ACE_Allocator *allocator_strategy, ACE_Lock *locking_strategy, Message_Flags flags, u_long priority, const ACE_Time_Value &amp;execution_time, const ACE_Time_Value &amp;deadline_time, ACE_Data_Block *db, ACE_Allocator *data_block_allocator, ACE_Allocator *message_block_allocator)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>rd_ptr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>wr_ptr_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>priority_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>cont_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>next_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>prev_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block::Message_Flags</type>
      <name>flags_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Data_Block *</type>
      <name>data_block_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>message_block_allocator_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Message_Block &amp;</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Message_Block &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Message_Block</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Message_Block &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Data_Block</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Message_Queue</name>
    <filename>classACE__Message__Queue.html</filename>
    <templarg></templarg>
    <base>ACE_Message_Queue_Base</base>
    <member kind="typedef">
      <type>ACE_Message_Queue_Iterator&lt; ACE_SYNCH_USE &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Message_Queue_Reverse_Iterator&lt; ACE_SYNCH_USE &gt;</type>
      <name>REVERSE_ITERATOR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist>(size_t high_water_mark=ACE_Message_Queue_Base::DEFAULT_HWM, size_t low_water_mark=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(size_t hwm=ACE_Message_Queue_Base::DEFAULT_HWM, size_t lwm=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Message_Queue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>peek_dequeue_head</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_prio</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_deadline</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_tail</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_head</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_head</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_prio</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_tail</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Message_Block *&amp;dequeued, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_deadline</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Message_Block *&amp;dequeued, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_full</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_bytes</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_count</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>message_bytes</name>
      <anchor>a20</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>message_length</name>
      <anchor>a21</anchor>
      <arglist>(size_t new_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>high_water_mark</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>high_water_mark</name>
      <anchor>a23</anchor>
      <arglist>(size_t hwm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>low_water_mark</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>low_water_mark</name>
      <anchor>a25</anchor>
      <arglist>(size_t lwm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>deactivate</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>deactivated</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Notification_Strategy *</type>
      <name>notification_strategy</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notification_strategy</name>
      <anchor>a31</anchor>
      <arglist>(ACE_Notification_Strategy *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_SYNCH_MUTEX_T &amp;</type>
      <name>lock</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a33</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Message_Block *new_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_deadline_i</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Message_Block *new_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_tail_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_Message_Block *new_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_head_i</name>
      <anchor>b3</anchor>
      <arglist>(ACE_Message_Block *new_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_head_i</name>
      <anchor>b4</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_prio_i</name>
      <anchor>b5</anchor>
      <arglist>(ACE_Message_Block *&amp;dequeued)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_tail_i</name>
      <anchor>b6</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_deadline_i</name>
      <anchor>b7</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>is_full_i</name>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>is_empty_i</name>
      <anchor>b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>deactivate_i</name>
      <anchor>b10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_i</name>
      <anchor>b11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_not_full_cond</name>
      <anchor>b12</anchor>
      <arglist>(ACE_Guard&lt; ACE_SYNCH_MUTEX_T &gt; &amp;mon, ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_not_empty_cond</name>
      <anchor>b13</anchor>
      <arglist>(ACE_Guard&lt; ACE_SYNCH_MUTEX_T &gt; &amp;mon, ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>signal_enqueue_waiters</name>
      <anchor>b14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>signal_dequeue_waiters</name>
      <anchor>b15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>head_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>tail_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>low_water_mark_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>high_water_mark_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>cur_bytes_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>cur_length_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>cur_count_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>deactivated_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Notification_Strategy *</type>
      <name>notification_strategy_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SYNCH_MUTEX_T</type>
      <name>lock_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SYNCH_CONDITION_T</type>
      <name>not_empty_cond_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SYNCH_CONDITION_T</type>
      <name>not_full_cond_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Message_Queue&lt; _ACE_SYNCH_MUTEX_T, _ACE_SYNCH_CONDITION_T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Message_Queue</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Message_Queue&lt; _ACE_SYNCH_MUTEX_T, _ACE_SYNCH_CONDITION_T &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Message_Queue_Iterator&lt; ACE_SYNCH_USE &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Message_Queue_Reverse_Iterator&lt; ACE_SYNCH_USE &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Message_Queue_Base</name>
    <filename>classACE__Message__Queue__Base.html</filename>
    <member kind="enumvalue">
      <name>DEFAULT_HWM</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_LWM</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAS_ACTIVE</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAS_INACTIVE</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Queue_Base</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Message_Queue_Base</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>peek_dequeue_head</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>enqueue_tail</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>enqueue</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block *new_item, ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dequeue_head</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dequeue</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Message_Block *&amp;first_item, ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_full</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>message_bytes</name>
      <anchor>a10</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>a11</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>message_count</name>
      <anchor>a12</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>message_bytes</name>
      <anchor>a13</anchor>
      <arglist>(size_t new_size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>message_length</name>
      <anchor>a14</anchor>
      <arglist>(size_t new_length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>deactivate</name>
      <anchor>a15</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a16</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>deactivated</name>
      <anchor>a17</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Notification_Strategy *</type>
      <name>notification_strategy</name>
      <anchor>a18</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notification_strategy</name>
      <anchor>a19</anchor>
      <arglist>(ACE_Notification_Strategy *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a20</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Message_Queue_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Message_Queue_Base</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Message_Queue_Base &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Message_Queue_Ex</name>
    <filename>classACE__Message__Queue__Ex.html</filename>
    <templarg>ACE_MESSAGE_TYPE</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>DEFAULT_PRIORITY</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Queue_Ex</name>
      <anchor>a0</anchor>
      <arglist>(size_t high_water_mark=ACE_Message_Queue_Base::DEFAULT_HWM, size_t low_water_mark=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(size_t hwm=ACE_Message_Queue_Base::DEFAULT_HWM, size_t lwm=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Message_Queue_Ex</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>peek_dequeue_head</name>
      <anchor>a4</anchor>
      <arglist>(ACE_MESSAGE_TYPE *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_prio</name>
      <anchor>a5</anchor>
      <arglist>(ACE_MESSAGE_TYPE *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_deadline</name>
      <anchor>a6</anchor>
      <arglist>(ACE_MESSAGE_TYPE *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue</name>
      <anchor>a7</anchor>
      <arglist>(ACE_MESSAGE_TYPE *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_tail</name>
      <anchor>a8</anchor>
      <arglist>(ACE_MESSAGE_TYPE *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enqueue_head</name>
      <anchor>a9</anchor>
      <arglist>(ACE_MESSAGE_TYPE *new_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue</name>
      <anchor>a10</anchor>
      <arglist>(ACE_MESSAGE_TYPE *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_head</name>
      <anchor>a11</anchor>
      <arglist>(ACE_MESSAGE_TYPE *&amp;first_item, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_prio</name>
      <anchor>a12</anchor>
      <arglist>(ACE_MESSAGE_TYPE *&amp;dequeued, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_tail</name>
      <anchor>a13</anchor>
      <arglist>(ACE_MESSAGE_TYPE *&amp;dequeued, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dequeue_deadline</name>
      <anchor>a14</anchor>
      <arglist>(ACE_MESSAGE_TYPE *&amp;dequeued, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_full</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_bytes</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_count</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>message_bytes</name>
      <anchor>a20</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>message_length</name>
      <anchor>a21</anchor>
      <arglist>(size_t new_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>high_water_mark</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>high_water_mark</name>
      <anchor>a23</anchor>
      <arglist>(size_t hwm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>low_water_mark</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>low_water_mark</name>
      <anchor>a25</anchor>
      <arglist>(size_t lwm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>deactivate</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>deactivated</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Notification_Strategy *</type>
      <name>notification_strategy</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notification_strategy</name>
      <anchor>a31</anchor>
      <arglist>(ACE_Notification_Strategy *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_SYNCH_MUTEX_T &amp;</type>
      <name>lock</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a33</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Queue&lt; ACE_SYNCH_USE &gt;</type>
      <name>queue_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Message_Queue_Factory</name>
    <filename>classACE__Message__Queue__Factory.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; *</type>
      <name>create_static_message_queue</name>
      <anchor>d0</anchor>
      <arglist>(size_t hwm=ACE_Message_Queue_Base::DEFAULT_HWM, size_t lwm=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Dynamic_Message_Queue&lt; ACE_SYNCH_USE &gt; *</type>
      <name>create_deadline_message_queue</name>
      <anchor>d1</anchor>
      <arglist>(size_t hwm=ACE_Message_Queue_Base::DEFAULT_HWM, size_t lwm=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0, u_long static_bit_field_mask=0x3FFUL, u_long static_bit_field_shift=10, u_long dynamic_priority_max=0x3FFFFFUL, u_long dynamic_priority_offset=0x200000UL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Dynamic_Message_Queue&lt; ACE_SYNCH_USE &gt; *</type>
      <name>create_laxity_message_queue</name>
      <anchor>d2</anchor>
      <arglist>(size_t hwm=ACE_Message_Queue_Base::DEFAULT_HWM, size_t lwm=ACE_Message_Queue_Base::DEFAULT_LWM, ACE_Notification_Strategy *=0, u_long static_bit_field_mask=0x3FFUL, u_long static_bit_field_shift=10, u_long dynamic_priority_max=0x3FFFFFUL, u_long dynamic_priority_offset=0x200000UL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Message_Queue_Iterator</name>
    <filename>classACE__Message__Queue__Iterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Queue_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; &amp;</type>
      <name>queue_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>curr_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Message_Queue_Reverse_Iterator</name>
    <filename>classACE__Message__Queue__Reverse__Iterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Message_Queue_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; &amp;</type>
      <name>queue_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>curr_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Method_Request</name>
    <filename>classACE__Method__Request.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Method_Request</name>
      <anchor>a0</anchor>
      <arglist>(u_long priority=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Method_Request</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>priority</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>priority</name>
      <anchor>a3</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>call</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>priority_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Method_Request &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Method_Request</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Method_Request &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MMAP_Memory_Pool</name>
    <filename>classACE__MMAP__Memory__Pool.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="typedef">
      <type>ACE_MMAP_Memory_Pool_Options</type>
      <name>OPTIONS</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MMAP_Memory_Pool</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *backing_store_name=0, const OPTIONS *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_MMAP_Memory_Pool</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>init_acquire</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes, int &amp;first_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a5</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a6</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a7</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a8</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seh_selector</name>
      <anchor>a9</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remap</name>
      <anchor>a10</anchor>
      <arglist>(void *addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>base_addr</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual size_t</type>
      <name>round_up</name>
      <anchor>b0</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>commit_backing_store_name</name>
      <anchor>b1</anchor>
      <arglist>(size_t rounded_bytes, off_t &amp;map_size)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>map_file</name>
      <anchor>b2</anchor>
      <arglist>(off_t map_size)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>b3</anchor>
      <arglist>(int signum, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Sig_Handler</type>
      <name>signal_handler_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Mem_Map</type>
      <name>mmap_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>base_addr_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>use_fixed_addr_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>flags_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>write_each_page_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>off_t</type>
      <name>minimum_bytes_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR</type>
      <name>backing_store_name_</name>
      <anchor>n7</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>guess_on_fault_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>sa_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MMAP_Memory_Pool_Options</name>
    <filename>classACE__MMAP__Memory__Pool__Options.html</filename>
    <member kind="enumvalue">
      <name>FIRSTCALL_FIXED</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALWAYS_FIXED</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEVER_FIXED</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_MMAP_Memory_Pool_Options</name>
      <anchor>a0</anchor>
      <arglist>(const void *base_addr=ACE_DEFAULT_BASE_ADDR, int use_fixed_addr=ALWAYS_FIXED, int write_each_page=1, off_t minimum_bytes=0, u_int flags=0, int guess_on_fault=1, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>base_addr_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>use_fixed_addr_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>write_each_page_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>off_t</type>
      <name>minimum_bytes_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int</type>
      <name>flags_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>guess_on_fault_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>sa_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Module</name>
    <filename>classACE__Module.html</filename>
    <templarg></templarg>
    <base>ACE_Module_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Module</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Module</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Module</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *module_name, ACE_Task&lt; ACE_SYNCH_USE &gt; *writer=0, ACE_Task&lt; ACE_SYNCH_USE &gt; *reader=0, void *args=0, int flags=M_DELETE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *module_name, ACE_Task&lt; ACE_SYNCH_USE &gt; *writer=0, ACE_Task&lt; ACE_SYNCH_USE &gt; *reader=0, void *a=0, int flags=M_DELETE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(int flags=M_DELETE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Task&lt; ACE_SYNCH_USE &gt; *</type>
      <name>writer</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Task&lt; ACE_SYNCH_USE &gt; *q, int flags=M_DELETE_WRITER)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Task&lt; ACE_SYNCH_USE &gt; *</type>
      <name>reader</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Task&lt; ACE_SYNCH_USE &gt; *q, int flags=M_DELETE_READER)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Task&lt; ACE_SYNCH_USE &gt; *</type>
      <name>sibling</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Task&lt; ACE_SYNCH_USE &gt; *orig)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>name</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_TCHAR *)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>arg</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arg</name>
      <anchor>a13</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Module&lt; ACE_SYNCH_USE &gt; *m)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>next</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Module&lt; ACE_SYNCH_USE &gt; *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>close_i</name>
      <anchor>c0</anchor>
      <arglist>(int which, int flags)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Task&lt; ACE_SYNCH_USE &gt; *</type>
      <name>q_pair_</name>
      <anchor>o0</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>name_</name>
      <anchor>o1</anchor>
      <arglist>[MAXNAMLEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>next_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>arg_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>flags_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Shutup_GPlusPlus</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Module_Base</name>
    <filename>classACE__Module__Base.html</filename>
    <member kind="enumvalue">
      <name>M_DELETE_NONE</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_DELETE_READER</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_DELETE_WRITER</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_DELETE</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Module_Type</name>
    <filename>classACE__Module__Type.html</filename>
    <base>ACE_Service_Type_Impl</base>
    <member kind="function">
      <type></type>
      <name>ACE_Module_Type</name>
      <anchor>a0</anchor>
      <arglist>(void *m, const ACE_TCHAR *identifier, u_int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Module_Type</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a4</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[]) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>(ACE_TCHAR **str, size_t len) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Module_Type *</type>
      <name>link</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Module_Type *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Module_Type *</type>
      <name>link_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Msg_WFMO_Reactor</name>
    <filename>classACE__Msg__WFMO__Reactor.html</filename>
    <base>ACE_WFMO_Reactor</base>
    <member kind="function">
      <type></type>
      <name>ACE_Msg_WFMO_Reactor</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Handler *=0, ACE_Timer_Queue *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Msg_WFMO_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, int unused=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Msg_WFMO_Reactor</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_for_multiple_events</name>
      <anchor>b0</anchor>
      <arglist>(int timeout, int alertable)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual DWORD</type>
      <name>poll_remaining_handles</name>
      <anchor>b1</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_window_messages</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MT_MEM_IO</name>
    <filename>classACE__MT__MEM__IO.html</filename>
    <base>ACE_MEM_SAP</base>
    <member kind="function">
      <type></type>
      <name>ACE_MT_MEM_IO</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_MT_MEM_IO</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_TCHAR *name, MALLOC_OPTIONS *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recv_buf</name>
      <anchor>a3</anchor>
      <arglist>(ACE_MEM_SAP_Node *&amp;buf, int flags, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send_buf</name>
      <anchor>a4</anchor>
      <arglist>(ACE_MEM_SAP_Node *buf, int flags, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Channel</type>
      <name>recv_channel_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Channel</type>
      <name>send_channel_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_MT_MEM_IO::Channel</name>
    <filename>structACE__MT__MEM__IO_1_1Channel.html</filename>
    <member kind="variable">
      <type>ACE_SYNCH_PROCESS_SEMAPHORE *</type>
      <name>sema_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_SYNCH_PROCESS_MUTEX *</type>
      <name>lock_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simple_Queue</type>
      <name>queue_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_MT_MEM_IO::MQ_Struct</name>
    <filename>structACE__MT__MEM__IO_1_1MQ__Struct.html</filename>
    <member kind="variable">
      <type>ACE_MEM_SAP_Node::ACE_MEM_SAP_NODE_PTR</type>
      <name>head_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_MEM_SAP_Node::ACE_MEM_SAP_NODE_PTR</type>
      <name>tail_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_MT_MEM_IO::Simple_Queue</name>
    <filename>classACE__MT__MEM__IO_1_1Simple__Queue.html</filename>
    <member kind="function">
      <type>ACE_INLINE_FOR_GNUC</type>
      <name>Simple_Queue</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Simple_Queue</name>
      <anchor>a1</anchor>
      <arglist>(MQ_Struct *mq)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(MQ_Struct *mq, ACE_MEM_SAP::MALLOC_TYPE *malloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchor>a3</anchor>
      <arglist>(ACE_MEM_SAP_Node *new_msg)</arglist>
    </member>
    <member kind="function">
      <type>ACE_MEM_SAP_Node *</type>
      <name>read</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MQ_Struct *</type>
      <name>mq_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_MEM_SAP::MALLOC_TYPE *</type>
      <name>malloc_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Mutex</name>
    <filename>classACE__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(int type=USYNC_THREAD, const ACE_TCHAR *name=0, ACE_mutexattr_t *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value *tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_mutex_t &amp;</type>
      <name>lock</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_mutex_t</type>
      <name>lock_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>removed_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Mutex &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Mutex</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Mutex &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Name_Binding</name>
    <filename>classACE__Name__Binding.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Binding</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_NS_WString &amp;n, const ACE_NS_WString &amp;v, const char *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Binding</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Binding</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Name_Binding &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Name_Binding &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Name_Binding</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Name_Binding &amp;s) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_NS_WString</type>
      <name>name_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_NS_WString</type>
      <name>value_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>type_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Name_Options</name>
    <filename>classACE__Name__Options.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Options</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Name_Options</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_args</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nameserver_port</name>
      <anchor>a3</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nameserver_port</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Naming_Context::Context_Scope_Type</type>
      <name>context</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>context</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Naming_Context::Context_Scope_Type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nameserver_host</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_TCHAR *host)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>nameserver_host</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>namespace_dir</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR *dir)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>namespace_dir</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process_name</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_TCHAR *dir)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>process_name</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>database</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_TCHAR *)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>database</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base_address</name>
      <anchor>a15</anchor>
      <arglist>(char *address)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>base_address</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>use_registry</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use_registry</name>
      <anchor>a18</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debug</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>verbose</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>debugging_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>verbosity_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>use_registry_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nameserver_port_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>nameserver_host_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>namespace_dir_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>process_name_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>database_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>base_address_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Naming_Context::Context_Scope_Type</type>
      <name>context_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Name_Proxy</name>
    <filename>classACE__Name__Proxy.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Proxy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Proxy</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_INET_Addr &amp;remote_addr, ACE_Synch_Options &amp;options=ACE_Synch_Options::defaults)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_INET_Addr &amp;remote_addr, ACE_Synch_Options &amp;options=ACE_Synch_Options::defaults)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>request_reply</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Name_Request &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_request</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Name_Request &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv_reply</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Name_Request &amp;reply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Name_Proxy</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SOCK_Connector</type>
      <name>connector_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SOCK_Stream</type>
      <name>peer_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Name_Reply</name>
    <filename>classACE__Name__Reply.html</filename>
    <member kind="enumeration">
      <name>Constants</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_NAME_LENGTH</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Reply</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Reply</name>
      <anchor>a1</anchor>
      <arglist>(ACE_UINT32 type, ACE_UINT32 err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>length</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a4</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INT32</type>
      <name>msg_type</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_type</name>
      <anchor>a6</anchor>
      <arglist>(ACE_INT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INT32</type>
      <name>status</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchor>a8</anchor>
      <arglist>(ACE_INT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>errnum</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errnum</name>
      <anchor>a10</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encode</name>
      <anchor>a11</anchor>
      <arglist>(void *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decode</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transfer</type>
      <name>transfer_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Name_Reply::Transfer</name>
    <filename>structACE__Name__Reply_1_1Transfer.html</filename>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>length_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_INT32</type>
      <name>type_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>errno_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Name_Request</name>
    <filename>classACE__Name__Request.html</filename>
    <member kind="enumeration">
      <name>Constants</name>
      <anchor>s15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIND</name>
      <anchor>s15s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REBIND</name>
      <anchor>s15s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVE</name>
      <anchor>s15s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBIND</name>
      <anchor>s15s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_NAMES</name>
      <anchor>s15s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_VALUES</name>
      <anchor>s15s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_TYPES</name>
      <anchor>s15s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_NAME_ENTRIES</name>
      <anchor>s15s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_VALUE_ENTRIES</name>
      <anchor>s15s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_TYPE_ENTRIES</name>
      <anchor>s15s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_ENUM</name>
      <anchor>s15s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_LIST</name>
      <anchor>s15s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_TABLE_MASK</name>
      <anchor>s15s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_OP_MASK</name>
      <anchor>s15s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_NAME_LENGTH</name>
      <anchor>s15s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Request</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Request</name>
      <anchor>a1</anchor>
      <arglist>(ACE_INT32 msg_type, const ACE_USHORT16 name[], const ACE_UINT32 name_length, const ACE_USHORT16 value[], const ACE_UINT32 value_length, const char type[], const ACE_UINT32 type_length, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>length</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a4</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INT32</type>
      <name>msg_type</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_type</name>
      <anchor>a6</anchor>
      <arglist>(ACE_INT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>block_forever</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_forever</name>
      <anchor>a8</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value</type>
      <name>timeout</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Time_Value timeout)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_USHORT16 *</type>
      <name>name</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_USHORT16 *)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_USHORT16 *</type>
      <name>value</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_USHORT16 *)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>type</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a16</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>name_len</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name_len</name>
      <anchor>a18</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>value_len</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value_len</name>
      <anchor>a20</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>type_len</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type_len</name>
      <anchor>a22</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encode</name>
      <anchor>a23</anchor>
      <arglist>(void *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decode</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transfer</type>
      <name>transfer_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_USHORT16 *</type>
      <name>name_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_USHORT16 *</type>
      <name>value_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>type_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Name_Request::Transfer</name>
    <filename>structACE__Name__Request_1_1Transfer.html</filename>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>length_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>msg_type_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>block_forever_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>sec_timeout_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>usec_timeout_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>name_len_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>value_len_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>type_len_</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_USHORT16</type>
      <name>data_</name>
      <anchor>m8</anchor>
      <arglist>[MAX_NAME_LENGTH+MAXPATHLEN+MAXPATHLEN+2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Name_Space</name>
    <filename>classACE__Name__Space.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Name_Space</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, const ACE_NS_WString &amp;value_in, const char *type_in=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, const ACE_NS_WString &amp;value_in, const char *type_in=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resolve</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, ACE_NS_WString &amp;value_out, char *&amp;type_out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>list_names</name>
      <anchor>a5</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>list_values</name>
      <anchor>a6</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>list_types</name>
      <anchor>a7</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>list_name_entries</name>
      <anchor>a8</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>list_value_entries</name>
      <anchor>a9</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>list_type_entries</name>
      <anchor>a10</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Name_Space_Map</name>
    <filename>classACE__Name__Space__Map.html</filename>
    <templarg>ALLOCATOR</templarg>
    <base>ACE_Hash_Map_Manager&lt; ACE_NS_String, ACE_NS_Internal, ACE_Null_Mutex &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Space_Map</name>
      <anchor>a0</anchor>
      <arglist>(ALLOCATOR *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_NS_String &amp;, const ACE_NS_Internal &amp;, ALLOCATOR *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_NS_String &amp;, ACE_NS_Internal &amp;, ALLOCATOR *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_NS_String &amp;, const ACE_NS_Internal &amp;, ACE_NS_String &amp;, ACE_NS_Internal &amp;, ALLOCATOR *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_NS_String &amp;, ACE_NS_Internal &amp;, ALLOCATOR *alloc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a5</anchor>
      <arglist>(ALLOCATOR *alloc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Naming_Context</name>
    <filename>classACE__Naming__Context.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="enumeration">
      <name>Context_Scope_Type</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROC_LOCAL</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_LOCAL</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_LOCAL</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Naming_Context</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Naming_Context</name>
      <anchor>a1</anchor>
      <arglist>(Context_Scope_Type scope_in, int light=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(Context_Scope_Type scope_in=ACE_Naming_Context::PROC_LOCAL, int light=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_down</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Naming_Context</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a6</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a8</anchor>
      <arglist>(ACE_TCHAR **strp, size_t length) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Name_Options *</type>
      <name>name_options</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, const ACE_NS_WString &amp;value_in, const char *type_in=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a11</anchor>
      <arglist>(const char *name_in, const char *value_in, const char *type_in=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, const ACE_NS_WString &amp;value_in, const char *type_in=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a13</anchor>
      <arglist>(const char *name_in, const char *value_in, const char *type_in=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a14</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a15</anchor>
      <arglist>(const char *name_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchor>a16</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, ACE_NS_WString &amp;value_out, char *&amp;type_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchor>a17</anchor>
      <arglist>(const char *name_in, ACE_NS_WString &amp;value_out, char *&amp;type_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchor>a18</anchor>
      <arglist>(const char *name_in, char *&amp;value_out, char *&amp;type_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list_names</name>
      <anchor>a19</anchor>
      <arglist>(ACE_PWSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list_names</name>
      <anchor>a20</anchor>
      <arglist>(ACE_PWSTRING_SET &amp;set_out, const char *pattern_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list_values</name>
      <anchor>a21</anchor>
      <arglist>(ACE_PWSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list_values</name>
      <anchor>a22</anchor>
      <arglist>(ACE_PWSTRING_SET &amp;set_out, const char *pattern_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list_types</name>
      <anchor>a23</anchor>
      <arglist>(ACE_PWSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list_types</name>
      <anchor>a24</anchor>
      <arglist>(ACE_PWSTRING_SET &amp;set_out, const char *pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_name_entries</name>
      <anchor>a25</anchor>
      <arglist>(ACE_BINDING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_name_entries</name>
      <anchor>a26</anchor>
      <arglist>(ACE_BINDING_SET &amp;set_out, const char *pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_value_entries</name>
      <anchor>a27</anchor>
      <arglist>(ACE_BINDING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_value_entries</name>
      <anchor>a28</anchor>
      <arglist>(ACE_BINDING_SET &amp;set_out, const char *pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_type_entries</name>
      <anchor>a29</anchor>
      <arglist>(ACE_BINDING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_type_entries</name>
      <anchor>a30</anchor>
      <arglist>(ACE_BINDING_SET &amp;set_out, const char *pattern_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>local</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Name_Options *</type>
      <name>name_options_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Name_Space *</type>
      <name>name_space_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>hostname_</name>
      <anchor>o2</anchor>
      <arglist>[MAXHOSTNAMELEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>netnameserver_host_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>netnameserver_port_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_New_Allocator</name>
    <filename>classACE__New__Allocator.html</filename>
    <base>ACE_Allocator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>malloc</name>
      <anchor>a0</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a1</anchor>
      <arglist>(size_t nbytes, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a2</anchor>
      <arglist>(size_t n_elem, size_t elem_size, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free</name>
      <anchor>a3</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const char *name, void *pointer, int duplicates=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a6</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a7</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a8</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a10</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a11</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a12</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a13</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a14</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Node</name>
    <filename>classACE__Node.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>~ACE_Node</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Node</name>
      <anchor>c0</anchor>
      <arglist>(const T &amp;i, ACE_Node&lt; T &gt; *n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Node</name>
      <anchor>c1</anchor>
      <arglist>(ACE_Node&lt; T &gt; *n=0, int=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Node</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Node&lt; T &gt; &amp;n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>next_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>item_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Queue&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Queue_Iterator&lt; T &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Set&lt; T &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Set_Iterator&lt; T &gt;</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Set_Const_Iterator&lt; T &gt;</name>
      <anchor>l4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Stack&lt; T &gt;</name>
      <anchor>l5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Stack_Iterator&lt; T &gt;</name>
      <anchor>l6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_NOOP_Concurrency_Strategy</name>
    <filename>classACE__NOOP__Concurrency__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>a0</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_NOOP_Creation_Strategy</name>
    <filename>classACE__NOOP__Creation__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Creation_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>a0</anchor>
      <arglist>(SVC_HANDLER *&amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Noop_Key_Generator</name>
    <filename>classACE__Noop__Key__Generator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Noop_Token</name>
    <filename>classACE__Noop__Token.html</filename>
    <base>ACE_Null_Mutex</base>
    <member kind="function">
      <type>int</type>
      <name>renew</name>
      <anchor>a0</anchor>
      <arglist>(int=0, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Notification_Buffer</name>
    <filename>classACE__Notification__Buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Notification_Buffer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Notification_Buffer</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Notification_Buffer</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Event_Handler *</type>
      <name>eh_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Reactor_Mask</type>
      <name>mask_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Notification_Strategy</name>
    <filename>classACE__Notification__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Notification_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Notification_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Event_Handler *, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function">
      <type>ACE_Event_Handler *</type>
      <name>event_handler</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>event_handler</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Event_Handler *eh)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reactor_Mask</type>
      <name>mask</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mask</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Reactor_Mask m)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Event_Handler *</type>
      <name>eh_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor_Mask</type>
      <name>mask_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_NS_Internal</name>
    <filename>classACE__NS__Internal.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_NS_Internal</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_Internal</name>
      <anchor>a1</anchor>
      <arglist>(ACE_NS_String &amp;value, const char *type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_NS_Internal &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_NS_String</type>
      <name>value</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>type</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_NS_String</type>
      <name>value_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>type_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_NS_String</name>
    <filename>classACE__NS__String.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_NS_String</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_String</name>
      <anchor>a1</anchor>
      <arglist>(ACE_USHORT16 *dst, const ACE_USHORT16 *src, size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_String</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_NS_WString &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_NS_String</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ACE_NS_WString</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>char_rep</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strstr</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_NS_String &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_NS_String &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_NS_String &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>len</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_USHORT16 *</type>
      <name>fast_rep</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>len_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_USHORT16 *</type>
      <name>rep_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>delete_rep_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_NS_WString</name>
    <filename>classACE__NS__WString.html</filename>
    <base>ACE_String_Base&lt; ACE_WSTRING_TYPE &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a1</anchor>
      <arglist>(const char *s, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_WSTRING_TYPE *s, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_USHORT16 *s, size_t len, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_WSTRING_TYPE *s, size_t len, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a5</anchor>
      <arglist>(size_t len, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_NS_WString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NS_WString</name>
      <anchor>a7</anchor>
      <arglist>(ACE_WSTRING_TYPE c, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>char_rep</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_USHORT16 *</type>
      <name>ushort_rep</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_NT_Service</name>
    <filename>classACE__NT__Service.html</filename>
    <base>ACE_Task&lt; ACE_MT_SYNCH &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_NT_Service</name>
      <anchor>a0</anchor>
      <arglist>(DWORD start_timeout=ACE_NT_SERVICE_START_TIMEOUT, DWORD service_type=SERVICE_WIN32_OWN_PROCESS, DWORD controls_mask=SERVICE_ACCEPT_STOP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NT_Service</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *name, const ACE_TCHAR *desc=0, DWORD start_timeout=ACE_NT_SERVICE_START_TIMEOUT, DWORD service_type=SERVICE_WIN32_OWN_PROCESS, DWORD controls_mask=SERVICE_ACCEPT_STOP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_NT_Service</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(void *args=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_control</name>
      <anchor>a6</anchor>
      <arglist>(DWORD control_code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svc_handle</name>
      <anchor>a7</anchor>
      <arglist>(const SERVICE_STATUS_HANDLE new_svc_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR *name, const ACE_TCHAR *desc=0)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>name</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>desc</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>host</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_TCHAR *host)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>host</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a13</anchor>
      <arglist>(DWORD start_type=SERVICE_DEMAND_START, DWORD error_control=SERVICE_ERROR_IGNORE, const ACE_TCHAR *exe_path=0, const ACE_TCHAR *group_name=0, LPDWORD tag_id=0, const ACE_TCHAR *dependencies=0, const ACE_TCHAR *account_name=0, const ACE_TCHAR *password=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>startup</name>
      <anchor>a15</anchor>
      <arglist>(DWORD startup)</arglist>
    </member>
    <member kind="function">
      <type>DWORD</type>
      <name>startup</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>capture_log_msg_attributes</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inherit_log_msg_attributes</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start_svc</name>
      <anchor>a19</anchor>
      <arglist>(ACE_Time_Value *wait_time=0, DWORD *svc_state=0, DWORD argc=0, const ACE_TCHAR **argv=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stop_svc</name>
      <anchor>a20</anchor>
      <arglist>(ACE_Time_Value *wait_time=0, DWORD *svc_state=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pause_svc</name>
      <anchor>a21</anchor>
      <arglist>(ACE_Time_Value *wait_time=0, DWORD *svc_state=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>continue_svc</name>
      <anchor>a22</anchor>
      <arglist>(ACE_Time_Value *wait_time=0, DWORD *svc_state=0)</arglist>
    </member>
    <member kind="function">
      <type>DWORD</type>
      <name>state</name>
      <anchor>a23</anchor>
      <arglist>(ACE_Time_Value *wait_hint=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>state</name>
      <anchor>a24</anchor>
      <arglist>(DWORD *pstate, ACE_Time_Value *wait_hint=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_access</name>
      <anchor>a25</anchor>
      <arglist>(DWORD desired_access=SERVICE_ALL_ACCESS)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>report_status</name>
      <anchor>b0</anchor>
      <arglist>(DWORD new_status, DWORD time_hint=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>SC_HANDLE</type>
      <name>svc_sc_handle</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>wait_for_service_state</name>
      <anchor>b2</anchor>
      <arglist>(DWORD desired_state, ACE_Time_Value *wait_time)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>stop_requested</name>
      <anchor>b3</anchor>
      <arglist>(DWORD control_code)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>pause_requested</name>
      <anchor>b4</anchor>
      <arglist>(DWORD control_code)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>continue_requested</name>
      <anchor>b5</anchor>
      <arglist>(DWORD control_code)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>interrogate_requested</name>
      <anchor>b6</anchor>
      <arglist>(DWORD control_code)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>DWORD</type>
      <name>start_time_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>SERVICE_STATUS_HANDLE</type>
      <name>svc_handle_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>SERVICE_STATUS</type>
      <name>svc_status_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>SC_HANDLE</type>
      <name>svc_sc_handle_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>desc_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>host_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_OS_Log_Msg_Attributes</type>
      <name>log_msg_attributes_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Null_Barrier</name>
    <filename>classACE__Null__Barrier.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Null_Barrier</name>
      <anchor>a0</anchor>
      <arglist>(u_int, const char *=0, void *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Null_Barrier</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Null_Barrier &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Null_Barrier</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Null_Barrier &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Null_Caching_Strategy</name>
    <filename>classACE__Null__Caching__Strategy.html</filename>
    <templarg>ATTRIBUTES</templarg>
    <templarg>CACHING_UTILITY</templarg>
    <member kind="typedef">
      <type>ATTRIBUTES</type>
      <name>CACHING_ATTRIBUTES</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ATTRIBUTES</type>
      <name>attributes</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>purge_percent</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge_percent</name>
      <anchor>a2</anchor>
      <arglist>(double percentage)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_bind</name>
      <anchor>a3</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_find</name>
      <anchor>a4</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_unbind</name>
      <anchor>a5</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_trybind</name>
      <anchor>a6</anchor>
      <arglist>(int result, ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>notify_rebind</name>
      <anchor>a7</anchor>
      <arglist>(int result, const ATTRIBUTES &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>CACHING_UTILITY &amp;</type>
      <name>caching_utility</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CACHING_UTILITY</type>
      <name>caching_utility_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Null_Caching_Utility</name>
    <filename>classACE__Null__Caching__Utility.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <templarg>ITERATOR</templarg>
    <templarg>ATTRIBUTES</templarg>
    <member kind="typedef">
      <type>ACE_Null_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY_BASE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Null_Caching_Utility</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt; *cleanup_strategy=0, int delete_cleanup_strategy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Null_Caching_Utility</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clear_cache</name>
      <anchor>a2</anchor>
      <arglist>(CONTAINER &amp;container, double purge_percent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>minimum</name>
      <anchor>b0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *&amp;key_to_remove, VALUE *&amp;value_to_remove)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CLEANUP_STRATEGY_BASE *</type>
      <name>cleanup_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_cleanup_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ANUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ANUTIL</name>
      <anchor>c1</anchor>
      <arglist>(const ANUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Null_Cleanup_Strategy</name>
    <filename>classACE__Null__Cleanup__Strategy.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <base>ACE_Cleanup_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *key, VALUE *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Null_Condition</name>
    <filename>classACE__Null__Condition.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Null_Condition</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Null_Mutex &amp;m, const ACE_TCHAR *=0, void *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Null_Condition</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>broadcast</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Null_Mutex &amp;</type>
      <name>mutex</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Null_Mutex &amp;</type>
      <name>mutex_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Null_Condition &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Null_Condition</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Null_Condition &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Null_Mutex</name>
    <filename>classACE__Null__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Null_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Null_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Null_Semaphore</name>
    <filename>classACE__Null__Semaphore.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Null_Semaphore</name>
      <anchor>a0</anchor>
      <arglist>(u_int count=1, int type=USYNC_THREAD, const ACE_TCHAR *name=0, void *=0, int max=0x7fffffff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Null_Semaphore</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a8</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Obchunk</name>
    <filename>classACE__Obchunk.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Obchunk</name>
      <anchor>a0</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Obchunk</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>end_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>block_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>cur_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Obchunk *</type>
      <name>next_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>contents_</name>
      <anchor>m5</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Object_Manager</name>
    <filename>classACE__Object__Manager.html</filename>
    <base>ACE_Object_Manager_Base</base>
    <member kind="enumeration">
      <name>Preallocated_Object</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_FILECACHE_LOCK</name>
      <anchor>s5s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_STATIC_OBJECT_LOCK</name>
      <anchor>s5s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_PREALLOCATED_OBJECTS</name>
      <anchor>s5s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Preallocated_Array</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_EMPTY_PREALLOCATED_ARRAY</name>
      <anchor>s6s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_PREALLOCATED_ARRAYS</name>
      <anchor>s6s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Object_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Object_Manager</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>starting_up</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shutting_down</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>at_exit</name>
      <anchor>d2</anchor>
      <arglist>(ACE_Cleanup *object, void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>at_exit</name>
      <anchor>d3</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Sig_Set &amp;</type>
      <name>default_mask</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Object_Manager *</type>
      <name>instance</name>
      <anchor>d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>void *</type>
      <name>preallocated_object</name>
      <anchor>p0</anchor>
      <arglist>[ACE_PREALLOCATED_OBJECTS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>void *</type>
      <name>preallocated_array</name>
      <anchor>p1</anchor>
      <arglist>[ACE_PREALLOCATED_ARRAYS]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>at_exit_i</name>
      <anchor>c0</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Object_Manager</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Object_Manager &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Object_Manager &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Object_Manager &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_OS_Exit_Info</type>
      <name>exit_info_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Object_Manager_Preallocations *</type>
      <name>preallocations_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sig_Adapter *</type>
      <name>ace_service_config_sig_handler_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Object_Manager *</type>
      <name>instance_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Object_Manager_Manager</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Object_Manager_Base</name>
    <filename>classACE__Object__Manager__Base.html</filename>
    <member kind="enumeration">
      <name>Object_Manager_State</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJ_MAN_UNINITIALIZED</name>
      <anchor>s5s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJ_MAN_INITIALIZING</name>
      <anchor>s5s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJ_MAN_INITIALIZED</name>
      <anchor>s5s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJ_MAN_SHUTTING_DOWN</name>
      <anchor>s5s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJ_MAN_SHUT_DOWN</name>
      <anchor>s5s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Object_Manager_Base</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Object_Manager_Base</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>starting_up_i</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shutting_down_i</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Object_Manager_State</type>
      <name>object_manager_state_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_int</type>
      <name>dynamically_allocated_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Object_Manager_Base *</type>
      <name>next_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Object_Manager_Base</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Object_Manager_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Object_Manager_Base &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Object_Manager_Base &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Object_Manager_Manager</name>
    <filename>classACE__Object__Manager__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Object_Manager_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Object_Manager_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_thread_t</type>
      <name>saved_main_thread_id_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Object_Manager_Preallocations</name>
    <filename>classACE__Object__Manager__Preallocations.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Object_Manager_Preallocations</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Object_Manager_Preallocations</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Static_Svc_Descriptor</type>
      <name>ace_svc_desc_ACE_Service_Manager</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Object_Node</name>
    <filename>classACE__Object__Node.html</filename>
    <base>ACE_Location_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Object_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *pathname, const ACE_TCHAR *obj_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>symbol</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Service_Object_Exterminator *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Object_Node</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>object_name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Obstack</name>
    <filename>classACE__Obstack.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Obstack_T</name>
    <filename>classACE__Obstack__T.html</filename>
    <templarg>CHAR</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Obstack_T</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=(4096 *sizeof(CHAR))-sizeof(ACE_Obchunk), ACE_Allocator *allocator_strategy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Obstack_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>request</name>
      <anchor>a2</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>CHAR *</type>
      <name>grow</name>
      <anchor>a3</anchor>
      <arglist>(CHAR c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow_fast</name>
      <anchor>a4</anchor>
      <arglist>(CHAR c)</arglist>
    </member>
    <member kind="function">
      <type>CHAR *</type>
      <name>freeze</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CHAR *</type>
      <name>copy</name>
      <anchor>a6</anchor>
      <arglist>(const CHAR *data, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Obchunk *</type>
      <name>new_chunk</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>allocator_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Obchunk *</type>
      <name>head_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Obchunk *</type>
      <name>curr_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_ODB</name>
    <filename>classACE__ODB.html</filename>
    <member kind="enumvalue">
      <name>MAX_TABLE_SIZE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_objects</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_object</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Dumpable *dumper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_object</name>
      <anchor>a2</anchor>
      <arglist>(const void *this_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_ODB *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_ODB</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Tuple</type>
      <name>object_table_</name>
      <anchor>o0</anchor>
      <arglist>[ACE_ODB::MAX_TABLE_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_ODB *</type>
      <name>instance_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_ODB::Tuple</name>
    <filename>structACE__ODB_1_1Tuple.html</filename>
    <member kind="function">
      <type></type>
      <name>Tuple</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>this_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ACE_Dumpable_Ptr</type>
      <name>dumper_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Oneshot_Acceptor</name>
    <filename>classACE__Oneshot__Acceptor.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>ACE_Oneshot_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Oneshot_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;local_addr, ACE_Reactor *reactor=ACE_Reactor::instance(), ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;, ACE_Reactor *reactor=ACE_Reactor::instance(), ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Oneshot_Acceptor</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>accept</name>
      <anchor>a4</anchor>
      <arglist>(SVC_HANDLER *=0, ACE_PEER_ACCEPTOR_ADDR *remote_addr=0, const ACE_Synch_Options &amp;synch_options=ACE_Synch_Options::defaults, int restart=1, int reset_new_handle=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator ACE_PEER_ACCEPTOR &amp;</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_PEER_ACCEPTOR &amp;</type>
      <name>acceptor</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>b0</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_accept</name>
      <anchor>b1</anchor>
      <arglist>(SVC_HANDLER *svc_handler, ACE_PEER_ACCEPTOR_ADDR *remote_addr, ACE_Time_Value *timeout, int restart, int reset_new_handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>b2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>b3</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>b4</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>b5</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, const void *arg)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>b6</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>b8</anchor>
      <arglist>(ACE_TCHAR **, size_t) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>b10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>register_handler</name>
      <anchor>c0</anchor>
      <arglist>(SVC_HANDLER *svc_handler, const ACE_Synch_Options &amp;options, int restart)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SVC_HANDLER *</type>
      <name>svc_handler_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>restart_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_PEER_ACCEPTOR</type>
      <name>peer_acceptor_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *</type>
      <name>concurrency_strategy_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>delete_concurrency_strategy_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Ordered_MultiSet</name>
    <filename>classACE__Ordered__MultiSet.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ACE_Ordered_MultiSet_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Ordered_MultiSet</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Ordered_MultiSet</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Ordered_MultiSet&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Ordered_MultiSet</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Ordered_MultiSet&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;new_item, ITERATOR &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a9</anchor>
      <arglist>(const T &amp;item, ITERATOR &amp;iter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>insert_from</name>
      <anchor>c0</anchor>
      <arglist>(const T &amp;item, ACE_DNode&lt; T &gt; *start_position, ACE_DNode&lt; T &gt; **new_position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>locate</name>
      <anchor>c1</anchor>
      <arglist>(const T &amp;item, ACE_DNode&lt; T &gt; *start_position, ACE_DNode&lt; T &gt; *&amp;new_position) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>delete_nodes</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy_nodes</name>
      <anchor>c3</anchor>
      <arglist>(const ACE_Ordered_MultiSet&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DNode&lt; T &gt; *</type>
      <name>head_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DNode&lt; T &gt; *</type>
      <name>tail_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Ordered_MultiSet_Iterator&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Ordered_MultiSet_Iterator</name>
    <filename>classACE__Ordered__MultiSet__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Ordered_MultiSet_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Ordered_MultiSet&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>retreat</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator *</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DNode&lt; T &gt; *</type>
      <name>current_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Ordered_MultiSet&lt; T &gt; &amp;</type>
      <name>set_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Ordered_MultiSet&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS</name>
    <filename>classACE__OS.html</filename>
    <base>ACE_OS_Dirent</base>
    <base>ACE_OS_String</base>
    <base>ACE_OS_Memory</base>
    <base>ACE_OS_TLI</base>
    <member kind="typedef">
      <type>ACE_UINT16</type>
      <name>WChar</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>wslen</name>
      <anchor>d320</anchor>
      <arglist>(const WChar *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>WChar *</type>
      <name>wscpy</name>
      <anchor>d321</anchor>
      <arglist>(WChar *, const WChar *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>wscmp</name>
      <anchor>d322</anchor>
      <arglist>(const WChar *, const WChar *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>wsncmp</name>
      <anchor>d323</anchor>
      <arglist>(const WChar *, const WChar *, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_continue</name>
      <anchor>d324</anchor>
      <arglist>(ACE_hthread_t target_thread)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_create</name>
      <anchor>d325</anchor>
      <arglist>(ACE_THR_FUNC func, void *args, long flags, ACE_thread_t *thr_id, ACE_hthread_t *t_handle=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, void *stack=0, size_t stacksize=0, ACE_Base_Thread_Adapter *thread_adapter=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_getprio</name>
      <anchor>d326</anchor>
      <arglist>(ACE_hthread_t thr_id, int &amp;prio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_join</name>
      <anchor>d327</anchor>
      <arglist>(ACE_hthread_t waiter_id, void **status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_join</name>
      <anchor>d328</anchor>
      <arglist>(ACE_thread_t waiter_id, ACE_thread_t *thr_id, void **status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_kill</name>
      <anchor>d329</anchor>
      <arglist>(ACE_thread_t thr_id, int signum)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_thread_t</type>
      <name>thr_self</name>
      <anchor>d330</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>thr_self</name>
      <anchor>d331</anchor>
      <arglist>(ACE_hthread_t &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_setprio</name>
      <anchor>d332</anchor>
      <arglist>(ACE_hthread_t thr_id, int prio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_setprio</name>
      <anchor>d333</anchor>
      <arglist>(const ACE_Sched_Priority prio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_suspend</name>
      <anchor>d334</anchor>
      <arglist>(ACE_hthread_t target_thread)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_cancel</name>
      <anchor>d335</anchor>
      <arglist>(ACE_thread_t t_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_cmp</name>
      <anchor>d336</anchor>
      <arglist>(ACE_hthread_t t1, ACE_hthread_t t2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_equal</name>
      <anchor>d337</anchor>
      <arglist>(ACE_thread_t t1, ACE_thread_t t2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>thr_exit</name>
      <anchor>d338</anchor>
      <arglist>(void *status=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_getconcurrency</name>
      <anchor>d339</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>lwp_getparams</name>
      <anchor>d340</anchor>
      <arglist>(ACE_Sched_Params &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_getspecific</name>
      <anchor>d341</anchor>
      <arglist>(ACE_thread_key_t key, void **data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_keyfree</name>
      <anchor>d342</anchor>
      <arglist>(ACE_thread_key_t key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_key_detach</name>
      <anchor>d343</anchor>
      <arglist>(void *inst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_keycreate</name>
      <anchor>d344</anchor>
      <arglist>(ACE_thread_key_t *key, ACE_THR_DEST, void *inst=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_key_used</name>
      <anchor>d345</anchor>
      <arglist>(ACE_thread_key_t key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>thr_min_stack</name>
      <anchor>d346</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_setconcurrency</name>
      <anchor>d347</anchor>
      <arglist>(int hint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>lwp_setparams</name>
      <anchor>d348</anchor>
      <arglist>(const ACE_Sched_Params &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_setspecific</name>
      <anchor>d349</anchor>
      <arglist>(ACE_thread_key_t key, void *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_sigsetmask</name>
      <anchor>d350</anchor>
      <arglist>(int how, const sigset_t *nsm, sigset_t *osm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_setcancelstate</name>
      <anchor>d351</anchor>
      <arglist>(int new_state, int *old_state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thr_setcanceltype</name>
      <anchor>d352</anchor>
      <arglist>(int new_type, int *old_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigwait</name>
      <anchor>d353</anchor>
      <arglist>(sigset_t *set, int *sig=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigtimedwait</name>
      <anchor>d354</anchor>
      <arglist>(const sigset_t *set, siginfo_t *info, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>thr_testcancel</name>
      <anchor>d355</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>thr_yield</name>
      <anchor>d356</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>unique_name</name>
      <anchor>d357</anchor>
      <arglist>(const void *object, ACE_TCHAR *name, size_t length)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_thread_t</type>
      <name>NULL_thread</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_hthread_t</type>
      <name>NULL_hthread</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_thread_key_t</type>
      <name>NULL_key</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ACE_HRTimer_Op</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_HRTIMER_START</name>
      <anchor>s5s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_HRTIMER_INCR</name>
      <anchor>s5s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_HRTIMER_STOP</name>
      <anchor>s5s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_HRTIMER_GETTIME</name>
      <anchor>s5s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>default_win32_security_attributes</name>
      <anchor>d0</anchor>
      <arglist>(LPSECURITY_ATTRIBUTES)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const OSVERSIONINFO &amp;</type>
      <name>get_win32_versioninfo</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>HINSTANCE</type>
      <name>get_win32_resource_module</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_win32_resource_module</name>
      <anchor>d3</anchor>
      <arglist>(HINSTANCE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>atoi</name>
      <anchor>d4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>atoi</name>
      <anchor>d5</anchor>
      <arglist>(const wchar_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>double</type>
      <name>floor</name>
      <anchor>d6</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>double</type>
      <name>ceil</name>
      <anchor>d7</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>getenv</name>
      <anchor>d8</anchor>
      <arglist>(const char *symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>getenv</name>
      <anchor>d9</anchor>
      <arglist>(const wchar_t *symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>putenv</name>
      <anchor>d10</anchor>
      <arglist>(const ACE_TCHAR *string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>strenvdup</name>
      <anchor>d11</anchor>
      <arglist>(const ACE_TCHAR *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>getenvstrings</name>
      <anchor>d12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getopt</name>
      <anchor>d13</anchor>
      <arglist>(int argc, char *const *argv, const char *optstring)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>argv_to_string</name>
      <anchor>d14</anchor>
      <arglist>(ACE_TCHAR **argv, ACE_TCHAR *&amp;buf, int substitute_env_args=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>string_to_argv</name>
      <anchor>d15</anchor>
      <arglist>(ACE_TCHAR *buf, size_t &amp;argc, ACE_TCHAR **&amp;argv, int substitute_env_args=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>sysconf</name>
      <anchor>d16</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>last_error</name>
      <anchor>d38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>last_error</name>
      <anchor>d39</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>set_errno_to_last_error</name>
      <anchor>d40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>set_errno_to_wsa_last_error</name>
      <anchor>d41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fclose</name>
      <anchor>d42</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fcntl</name>
      <anchor>d43</anchor>
      <arglist>(ACE_HANDLE handle, int cmd, long arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fdetach</name>
      <anchor>d44</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fsync</name>
      <anchor>d45</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>FILE *</type>
      <name>fopen</name>
      <anchor>d46</anchor>
      <arglist>(const ACE_TCHAR *filename, const ACE_TCHAR *mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>FILE *</type>
      <name>freopen</name>
      <anchor>d47</anchor>
      <arglist>(const ACE_TCHAR *filename, const ACE_TCHAR *mode, FILE *stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>FILE *</type>
      <name>fdopen</name>
      <anchor>d48</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_TCHAR *mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>fgets</name>
      <anchor>d49</anchor>
      <arglist>(ACE_TCHAR *buf, int size, FILE *fp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>stat</name>
      <anchor>d50</anchor>
      <arglist>(const ACE_TCHAR *file, ACE_stat *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>truncate</name>
      <anchor>d51</anchor>
      <arglist>(const ACE_TCHAR *filename, off_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fprintf</name>
      <anchor>d52</anchor>
      <arglist>(FILE *fp, const char *format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sprintf</name>
      <anchor>d53</anchor>
      <arglist>(char *buf, const char *format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>vsprintf</name>
      <anchor>d54</anchor>
      <arglist>(char *buffer, const char *format, va_list argptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>printf</name>
      <anchor>d55</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sprintf</name>
      <anchor>d56</anchor>
      <arglist>(wchar_t *buf, const wchar_t *format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fprintf</name>
      <anchor>d57</anchor>
      <arglist>(FILE *fp, const wchar_t *format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>vsprintf</name>
      <anchor>d58</anchor>
      <arglist>(wchar_t *buffer, const wchar_t *format, va_list argptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>perror</name>
      <anchor>d59</anchor>
      <arglist>(const ACE_TCHAR *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>gets</name>
      <anchor>d60</anchor>
      <arglist>(char *str, int n=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>puts</name>
      <anchor>d61</anchor>
      <arglist>(const ACE_TCHAR *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fputs</name>
      <anchor>d62</anchor>
      <arglist>(const ACE_TCHAR *s, FILE *stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fflush</name>
      <anchor>d63</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>fread</name>
      <anchor>d64</anchor>
      <arglist>(void *ptr, size_t size, size_t nelems, FILE *fp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fseek</name>
      <anchor>d65</anchor>
      <arglist>(FILE *fp, long offset, int ptrname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fstat</name>
      <anchor>d66</anchor>
      <arglist>(ACE_HANDLE, ACE_stat *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>lstat</name>
      <anchor>d67</anchor>
      <arglist>(const char *, ACE_stat *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ftruncate</name>
      <anchor>d68</anchor>
      <arglist>(ACE_HANDLE, off_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>fwrite</name>
      <anchor>d69</anchor>
      <arglist>(const void *ptr, size_t size, size_t nitems, FILE *fp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>rewind</name>
      <anchor>d70</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getpagesize</name>
      <anchor>d94</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>allocation_granularity</name>
      <anchor>d95</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>gid_t</type>
      <name>getgid</name>
      <anchor>d96</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setgid</name>
      <anchor>d97</anchor>
      <arglist>(gid_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>getpid</name>
      <anchor>d98</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>getpgid</name>
      <anchor>d99</anchor>
      <arglist>(pid_t pid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>getppid</name>
      <anchor>d100</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>uid_t</type>
      <name>getuid</name>
      <anchor>d101</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setuid</name>
      <anchor>d102</anchor>
      <arglist>(uid_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>setsid</name>
      <anchor>d103</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setpgid</name>
      <anchor>d104</anchor>
      <arglist>(pid_t pid, pid_t pgid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setreuid</name>
      <anchor>d105</anchor>
      <arglist>(uid_t ruid, uid_t euid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setregid</name>
      <anchor>d106</anchor>
      <arglist>(gid_t rgid, gid_t egid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>system</name>
      <anchor>d107</anchor>
      <arglist>(const ACE_TCHAR *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>waitpid</name>
      <anchor>d108</anchor>
      <arglist>(pid_t pid, ACE_exitcode *status=0, int wait_options=0, ACE_HANDLE handle=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>wait</name>
      <anchor>d109</anchor>
      <arglist>(pid_t pid, ACE_exitcode *status, int wait_options=0, ACE_HANDLE handle=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>wait</name>
      <anchor>d110</anchor>
      <arglist>(int *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>mutex_lock_cleanup</name>
      <anchor>d358</anchor>
      <arglist>(void *mutex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>cleanup_tss</name>
      <anchor>d359</anchor>
      <arglist>(const u_int main_thread)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>scheduling_class</name>
      <anchor>d360</anchor>
      <arglist>(const char *class_name, ACE_id_t &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>set_scheduling_params</name>
      <anchor>d361</anchor>
      <arglist>(const ACE_Sched_Params &amp;, ACE_id_t id=ACE_SELF)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>priority_control</name>
      <anchor>d362</anchor>
      <arglist>(ACE_idtype_t, ACE_id_t, int, void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>condattr_init</name>
      <anchor>d17</anchor>
      <arglist>(ACE_condattr_t &amp;attributes, int type=ACE_DEFAULT_SYNCH_TYPE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>condattr_destroy</name>
      <anchor>d18</anchor>
      <arglist>(ACE_condattr_t &amp;attributes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_broadcast</name>
      <anchor>d19</anchor>
      <arglist>(ACE_cond_t *cv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_destroy</name>
      <anchor>d20</anchor>
      <arglist>(ACE_cond_t *cv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_init</name>
      <anchor>d21</anchor>
      <arglist>(ACE_cond_t *cv, short type=ACE_DEFAULT_SYNCH_TYPE, const char *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_init</name>
      <anchor>d22</anchor>
      <arglist>(ACE_cond_t *cv, ACE_condattr_t &amp;attributes, const char *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_init</name>
      <anchor>d23</anchor>
      <arglist>(ACE_cond_t *cv, short type, const wchar_t *name, void *arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_init</name>
      <anchor>d24</anchor>
      <arglist>(ACE_cond_t *cv, ACE_condattr_t &amp;attributes, const wchar_t *name, void *arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_signal</name>
      <anchor>d25</anchor>
      <arglist>(ACE_cond_t *cv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_timedwait</name>
      <anchor>d26</anchor>
      <arglist>(ACE_cond_t *cv, ACE_mutex_t *m, ACE_Time_Value *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cond_wait</name>
      <anchor>d27</anchor>
      <arglist>(ACE_cond_t *cv, ACE_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>cuserid</name>
      <anchor>d28</anchor>
      <arglist>(char *user, size_t maxlen=ACE_MAX_USERID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>cuserid</name>
      <anchor>d29</anchor>
      <arglist>(wchar_t *user, size_t maxlen=ACE_MAX_USERID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>uname</name>
      <anchor>d30</anchor>
      <arglist>(ACE_utsname *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>sysinfo</name>
      <anchor>d31</anchor>
      <arglist>(int cmd, char *buf, long count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>hostname</name>
      <anchor>d32</anchor>
      <arglist>(char *name, size_t maxnamelen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>hostname</name>
      <anchor>d33</anchor>
      <arglist>(wchar_t *name, size_t maxnamelen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>dlclose</name>
      <anchor>d34</anchor>
      <arglist>(ACE_SHLIB_HANDLE handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>dlerror</name>
      <anchor>d35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_SHLIB_HANDLE</type>
      <name>dlopen</name>
      <anchor>d36</anchor>
      <arglist>(const ACE_TCHAR *filename, int mode=ACE_DEFAULT_SHLIB_MODE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>dlsym</name>
      <anchor>d37</anchor>
      <arglist>(ACE_SHLIB_HANDLE handle, const ACE_TCHAR *symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>bsearch</name>
      <anchor>d71</anchor>
      <arglist>(const void *key, const void *base, size_t nel, size_t size, ACE_COMPARE_FUNC)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>qsort</name>
      <anchor>d72</anchor>
      <arglist>(void *base, size_t nel, size_t width, ACE_COMPARE_FUNC)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>flock_init</name>
      <anchor>d73</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, int flags=0, const ACE_TCHAR *name=0, mode_t perms=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>flock_destroy</name>
      <anchor>d74</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, int unlink_file=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>adjust_flock_params</name>
      <anchor>d75</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, short whence, off_t &amp;start, off_t &amp;len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>flock_rdlock</name>
      <anchor>d76</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, short whence=0, off_t start=0, off_t len=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>flock_tryrdlock</name>
      <anchor>d77</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, short whence=0, off_t start=0, off_t len=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>flock_trywrlock</name>
      <anchor>d78</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, short whence=0, off_t start=0, off_t len=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>flock_unlock</name>
      <anchor>d79</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, short whence=0, off_t start=0, off_t len=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>flock_wrlock</name>
      <anchor>d80</anchor>
      <arglist>(ACE_OS::ace_flock_t *lock, short whence=0, off_t start=0, off_t len=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>atexit</name>
      <anchor>d81</anchor>
      <arglist>(ACE_EXIT_HOOK func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>execl</name>
      <anchor>d82</anchor>
      <arglist>(const char *path, const char *arg0,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>execle</name>
      <anchor>d83</anchor>
      <arglist>(const char *path, const char *arg0,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>execlp</name>
      <anchor>d84</anchor>
      <arglist>(const char *file, const char *arg0,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>execv</name>
      <anchor>d85</anchor>
      <arglist>(const char *path, char *const argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>execvp</name>
      <anchor>d86</anchor>
      <arglist>(const char *file, char *const argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>execve</name>
      <anchor>d87</anchor>
      <arglist>(const char *path, char *const argv[], char *const envp[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_exit</name>
      <anchor>d88</anchor>
      <arglist>(int status=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>exit</name>
      <anchor>d89</anchor>
      <arglist>(int status=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>abort</name>
      <anchor>d90</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>fork</name>
      <anchor>d91</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>fork</name>
      <anchor>d92</anchor>
      <arglist>(const ACE_TCHAR *program_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>pid_t</type>
      <name>fork_exec</name>
      <anchor>d93</anchor>
      <arglist>(ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>alarm</name>
      <anchor>d111</anchor>
      <arglist>(u_int secs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>ualarm</name>
      <anchor>d112</anchor>
      <arglist>(u_int usecs, u_int interval=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>u_int</type>
      <name>ualarm</name>
      <anchor>d113</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, const ACE_Time_Value &amp;tv_interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_hrtime_t</type>
      <name>gethrtime</name>
      <anchor>d114</anchor>
      <arglist>(const ACE_HRTimer_Op=ACE_HRTIMER_GETTIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>clock_gettime</name>
      <anchor>d115</anchor>
      <arglist>(clockid_t, struct timespec *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Time_Value</type>
      <name>gettimeofday</name>
      <anchor>d116</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getrusage</name>
      <anchor>d117</anchor>
      <arglist>(int who, struct rusage *rusage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getrlimit</name>
      <anchor>d118</anchor>
      <arglist>(int resource, struct rlimit *rl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setrlimit</name>
      <anchor>d119</anchor>
      <arglist>(int resource, ACE_SETRLIMIT_TYPE *rl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sleep</name>
      <anchor>d120</anchor>
      <arglist>(u_int seconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sleep</name>
      <anchor>d121</anchor>
      <arglist>(const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>nanosleep</name>
      <anchor>d122</anchor>
      <arglist>(const struct timespec *requested, struct timespec *remaining=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>time_t</type>
      <name>mktime</name>
      <anchor>d123</anchor>
      <arglist>(struct tm *timeptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>tzset</name>
      <anchor>d124</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>timezone</name>
      <anchor>d125</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>double</type>
      <name>difftime</name>
      <anchor>d126</anchor>
      <arglist>(time_t t1, time_t t0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>time_t</type>
      <name>time</name>
      <anchor>d127</anchor>
      <arglist>(time_t *tloc=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>tm *</type>
      <name>localtime</name>
      <anchor>d128</anchor>
      <arglist>(const time_t *clock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>tm *</type>
      <name>localtime_r</name>
      <anchor>d129</anchor>
      <arglist>(const time_t *clock, struct tm *res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>tm *</type>
      <name>gmtime</name>
      <anchor>d130</anchor>
      <arglist>(const time_t *clock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>tm *</type>
      <name>gmtime_r</name>
      <anchor>d131</anchor>
      <arglist>(const time_t *clock, struct tm *res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>asctime</name>
      <anchor>d132</anchor>
      <arglist>(const struct tm *tm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>asctime_r</name>
      <anchor>d133</anchor>
      <arglist>(const struct tm *tm, char *buf, int buflen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>ctime</name>
      <anchor>d134</anchor>
      <arglist>(const time_t *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>ctime_r</name>
      <anchor>d135</anchor>
      <arglist>(const time_t *clock, ACE_TCHAR *buf, int buflen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strftime</name>
      <anchor>d136</anchor>
      <arglist>(char *s, size_t maxsize, const char *format, const struct tm *timeptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>msgctl</name>
      <anchor>d137</anchor>
      <arglist>(int msqid, int cmd, struct msqid_ds *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>msgget</name>
      <anchor>d138</anchor>
      <arglist>(key_t key, int msgflg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>msgrcv</name>
      <anchor>d139</anchor>
      <arglist>(int int_id, void *buf, size_t len, long type, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>msgsnd</name>
      <anchor>d140</anchor>
      <arglist>(int int_id, const void *buf, size_t len, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>madvise</name>
      <anchor>d141</anchor>
      <arglist>(caddr_t addr, size_t len, int advice)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>mmap</name>
      <anchor>d142</anchor>
      <arglist>(void *addr, size_t len, int prot, int flags, ACE_HANDLE handle, off_t off=0, ACE_HANDLE *file_mapping=0, LPSECURITY_ATTRIBUTES sa=0, const ACE_TCHAR *file_mapping_name=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mprotect</name>
      <anchor>d143</anchor>
      <arglist>(void *addr, size_t len, int prot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>msync</name>
      <anchor>d144</anchor>
      <arglist>(void *addr, size_t len, int sync)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>munmap</name>
      <anchor>d145</anchor>
      <arglist>(void *addr, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recursive_mutex_init</name>
      <anchor>d146</anchor>
      <arglist>(ACE_recursive_thread_mutex_t *m, const ACE_TCHAR *name=0, ACE_mutexattr_t *arg=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recursive_mutex_destroy</name>
      <anchor>d147</anchor>
      <arglist>(ACE_recursive_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recursive_mutex_lock</name>
      <anchor>d148</anchor>
      <arglist>(ACE_recursive_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recursive_mutex_trylock</name>
      <anchor>d149</anchor>
      <arglist>(ACE_recursive_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recursive_mutex_unlock</name>
      <anchor>d150</anchor>
      <arglist>(ACE_recursive_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_init</name>
      <anchor>d151</anchor>
      <arglist>(ACE_mutex_t *m, int type=ACE_DEFAULT_SYNCH_TYPE, const char *name=0, ACE_mutexattr_t *arg=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_init</name>
      <anchor>d152</anchor>
      <arglist>(ACE_mutex_t *m, int type, const wchar_t *name, ACE_mutexattr_t *arg=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_destroy</name>
      <anchor>d153</anchor>
      <arglist>(ACE_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_lock</name>
      <anchor>d154</anchor>
      <arglist>(ACE_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_lock</name>
      <anchor>d155</anchor>
      <arglist>(ACE_mutex_t *m, int &amp;abandoned)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_lock</name>
      <anchor>d156</anchor>
      <arglist>(ACE_mutex_t *m, const ACE_Time_Value &amp;timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_lock</name>
      <anchor>d157</anchor>
      <arglist>(ACE_mutex_t *m, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_trylock</name>
      <anchor>d158</anchor>
      <arglist>(ACE_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_trylock</name>
      <anchor>d159</anchor>
      <arglist>(ACE_mutex_t *m, int &amp;abandoned)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mutex_unlock</name>
      <anchor>d160</anchor>
      <arglist>(ACE_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_init</name>
      <anchor>d161</anchor>
      <arglist>(ACE_thread_mutex_t *m, int type=ACE_DEFAULT_SYNCH_TYPE, const char *name=0, ACE_mutexattr_t *arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_init</name>
      <anchor>d162</anchor>
      <arglist>(ACE_thread_mutex_t *m, int type, const wchar_t *name, ACE_mutexattr_t *arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_destroy</name>
      <anchor>d163</anchor>
      <arglist>(ACE_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_lock</name>
      <anchor>d164</anchor>
      <arglist>(ACE_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_lock</name>
      <anchor>d165</anchor>
      <arglist>(ACE_thread_mutex_t *m, const ACE_Time_Value &amp;timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_lock</name>
      <anchor>d166</anchor>
      <arglist>(ACE_thread_mutex_t *m, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_trylock</name>
      <anchor>d167</anchor>
      <arglist>(ACE_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>thread_mutex_unlock</name>
      <anchor>d168</anchor>
      <arglist>(ACE_thread_mutex_t *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>access</name>
      <anchor>d169</anchor>
      <arglist>(const char *path, int amode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>access</name>
      <anchor>d170</anchor>
      <arglist>(const wchar_t *path, int amode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>close</name>
      <anchor>d171</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>creat</name>
      <anchor>d172</anchor>
      <arglist>(const ACE_TCHAR *filename, mode_t mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>dup</name>
      <anchor>d173</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>dup2</name>
      <anchor>d174</anchor>
      <arglist>(ACE_HANDLE oldfd, ACE_HANDLE newfd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fattach</name>
      <anchor>d175</anchor>
      <arglist>(int handle, const char *path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>filesize</name>
      <anchor>d176</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>filesize</name>
      <anchor>d177</anchor>
      <arglist>(const ACE_TCHAR *handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getmsg</name>
      <anchor>d178</anchor>
      <arglist>(ACE_HANDLE handle, struct strbuf *ctl, struct strbuf *data, int *flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getpmsg</name>
      <anchor>d179</anchor>
      <arglist>(ACE_HANDLE handle, struct strbuf *ctl, struct strbuf *data, int *band, int *flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ioctl</name>
      <anchor>d180</anchor>
      <arglist>(ACE_HANDLE handle, int cmd, void *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ioctl</name>
      <anchor>d181</anchor>
      <arglist>(ACE_HANDLE socket, u_long io_control_code, void *in_buffer_p, u_long in_buffer, void *out_buffer_p, u_long out_buffer, u_long *bytes_returned, ACE_OVERLAPPED *overlapped, ACE_OVERLAPPED_COMPLETION_FUNC func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ioctl</name>
      <anchor>d182</anchor>
      <arglist>(ACE_HANDLE socket, u_long io_control_code, ACE_QoS &amp;ace_qos, u_long *bytes_returned, void *buffer_p=0, u_long buffer=0, ACE_OVERLAPPED *overlapped=0, ACE_OVERLAPPED_COMPLETION_FUNC func=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>isastream</name>
      <anchor>d183</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>isatty</name>
      <anchor>d184</anchor>
      <arglist>(int handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>isatty</name>
      <anchor>d185</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>off_t</type>
      <name>lseek</name>
      <anchor>d186</anchor>
      <arglist>(ACE_HANDLE handle, off_t offset, int whence)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>open</name>
      <anchor>d187</anchor>
      <arglist>(const char *filename, int mode, int perms=ACE_DEFAULT_OPEN_PERMS, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>open</name>
      <anchor>d188</anchor>
      <arglist>(const wchar_t *filename, int mode, int perms=ACE_DEFAULT_OPEN_PERMS, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>putmsg</name>
      <anchor>d189</anchor>
      <arglist>(ACE_HANDLE handle, const struct strbuf *ctl, const struct strbuf *data, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>putpmsg</name>
      <anchor>d190</anchor>
      <arglist>(ACE_HANDLE handle, const struct strbuf *ctl, const struct strbuf *data, int band, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>read</name>
      <anchor>d191</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>read</name>
      <anchor>d192</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, ACE_OVERLAPPED *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>read_n</name>
      <anchor>d193</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t len, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>readlink</name>
      <anchor>d194</anchor>
      <arglist>(const char *path, char *buf, size_t bufsiz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>pread</name>
      <anchor>d195</anchor>
      <arglist>(ACE_HANDLE handle, void *buf, size_t nbyte, off_t offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recvmsg</name>
      <anchor>d196</anchor>
      <arglist>(ACE_HANDLE handle, struct msghdr *msg, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sendmsg</name>
      <anchor>d197</anchor>
      <arglist>(ACE_HANDLE handle, const struct msghdr *msg, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>write</name>
      <anchor>d198</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t nbyte)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>write</name>
      <anchor>d199</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t nbyte, ACE_OVERLAPPED *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>write_n</name>
      <anchor>d200</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t len, size_t *bytes_transferred=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>pwrite</name>
      <anchor>d201</anchor>
      <arglist>(ACE_HANDLE handle, const void *buf, size_t nbyte, off_t offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>readv</name>
      <anchor>d202</anchor>
      <arglist>(ACE_HANDLE handle, iovec *iov, int iovlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>writev</name>
      <anchor>d203</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *iov, int iovcnt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>recvv</name>
      <anchor>d204</anchor>
      <arglist>(ACE_HANDLE handle, iovec *iov, int iovlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>sendv</name>
      <anchor>d205</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *iov, int iovcnt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>select</name>
      <anchor>d206</anchor>
      <arglist>(int width, fd_set *rfds, fd_set *wfds=0, fd_set *efds=0, const ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>select</name>
      <anchor>d207</anchor>
      <arglist>(int width, fd_set *rfds, fd_set *wfds, fd_set *efds, const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>poll</name>
      <anchor>d208</anchor>
      <arglist>(struct pollfd *pollfds, u_long len, const ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>poll</name>
      <anchor>d209</anchor>
      <arglist>(struct pollfd *pollfds, u_long len, const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>pipe</name>
      <anchor>d210</anchor>
      <arglist>(ACE_HANDLE handles[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>shm_open</name>
      <anchor>d211</anchor>
      <arglist>(const ACE_TCHAR *filename, int mode, int perms=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shm_unlink</name>
      <anchor>d212</anchor>
      <arglist>(const ACE_TCHAR *path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>mode_t</type>
      <name>umask</name>
      <anchor>d213</anchor>
      <arglist>(mode_t cmask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>chdir</name>
      <anchor>d214</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>chdir</name>
      <anchor>d215</anchor>
      <arglist>(const wchar_t *path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mkdir</name>
      <anchor>d216</anchor>
      <arglist>(const ACE_TCHAR *path, mode_t mode=ACE_DEFAULT_DIR_PERMS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>mkfifo</name>
      <anchor>d217</anchor>
      <arglist>(const ACE_TCHAR *file, mode_t mode=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>mktemp</name>
      <anchor>d218</anchor>
      <arglist>(ACE_TCHAR *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>mkstemp</name>
      <anchor>d219</anchor>
      <arglist>(ACE_TCHAR *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>getcwd</name>
      <anchor>d220</anchor>
      <arglist>(ACE_TCHAR *, size_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rename</name>
      <anchor>d221</anchor>
      <arglist>(const ACE_TCHAR *old_name, const ACE_TCHAR *new_name, int flags=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>unlink</name>
      <anchor>d222</anchor>
      <arglist>(const ACE_TCHAR *path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TCHAR *</type>
      <name>tempnam</name>
      <anchor>d223</anchor>
      <arglist>(const ACE_TCHAR *dir=0, const ACE_TCHAR *pfx=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rand</name>
      <anchor>d224</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rand_r</name>
      <anchor>d225</anchor>
      <arglist>(ACE_RANDR_TYPE &amp;seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>srand</name>
      <anchor>d226</anchor>
      <arglist>(u_int seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rwlock_init</name>
      <anchor>d227</anchor>
      <arglist>(ACE_rwlock_t *rw, int type=ACE_DEFAULT_SYNCH_TYPE, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rwlock_destroy</name>
      <anchor>d228</anchor>
      <arglist>(ACE_rwlock_t *rw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rw_rdlock</name>
      <anchor>d229</anchor>
      <arglist>(ACE_rwlock_t *rw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rw_wrlock</name>
      <anchor>d230</anchor>
      <arglist>(ACE_rwlock_t *rw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rw_tryrdlock</name>
      <anchor>d231</anchor>
      <arglist>(ACE_rwlock_t *rw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rw_trywrlock</name>
      <anchor>d232</anchor>
      <arglist>(ACE_rwlock_t *rw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rw_trywrlock_upgrade</name>
      <anchor>d233</anchor>
      <arglist>(ACE_rwlock_t *rw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>rw_unlock</name>
      <anchor>d234</anchor>
      <arglist>(ACE_rwlock_t *rw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_init</name>
      <anchor>d235</anchor>
      <arglist>(ACE_event_t *event, int manual_reset=0, int initial_state=0, int type=ACE_DEFAULT_SYNCH_TYPE, const char *name=0, void *arg=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_init</name>
      <anchor>d236</anchor>
      <arglist>(ACE_event_t *event, int manual_reset, int initial_state, int type, const wchar_t *name, void *arg=0, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_destroy</name>
      <anchor>d237</anchor>
      <arglist>(ACE_event_t *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_wait</name>
      <anchor>d238</anchor>
      <arglist>(ACE_event_t *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_timedwait</name>
      <anchor>d239</anchor>
      <arglist>(ACE_event_t *event, ACE_Time_Value *timeout, int use_absolute_time=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_signal</name>
      <anchor>d240</anchor>
      <arglist>(ACE_event_t *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_pulse</name>
      <anchor>d241</anchor>
      <arglist>(ACE_event_t *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_reset</name>
      <anchor>d242</anchor>
      <arglist>(ACE_event_t *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_destroy</name>
      <anchor>d243</anchor>
      <arglist>(ACE_sema_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_init</name>
      <anchor>d244</anchor>
      <arglist>(ACE_sema_t *s, u_int count, int type=ACE_DEFAULT_SYNCH_TYPE, const char *name=0, void *arg=0, int max=0x7fffffff, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_init</name>
      <anchor>d245</anchor>
      <arglist>(ACE_sema_t *s, u_int count, int type, const wchar_t *name, void *arg=0, int max=0x7fffffff, LPSECURITY_ATTRIBUTES sa=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_post</name>
      <anchor>d246</anchor>
      <arglist>(ACE_sema_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_post</name>
      <anchor>d247</anchor>
      <arglist>(ACE_sema_t *s, size_t release_count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_trywait</name>
      <anchor>d248</anchor>
      <arglist>(ACE_sema_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_wait</name>
      <anchor>d249</anchor>
      <arglist>(ACE_sema_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_wait</name>
      <anchor>d250</anchor>
      <arglist>(ACE_sema_t *s, ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sema_wait</name>
      <anchor>d251</anchor>
      <arglist>(ACE_sema_t *s, ACE_Time_Value *tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>semctl</name>
      <anchor>d252</anchor>
      <arglist>(int int_id, int semnum, int cmd, semun)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>semget</name>
      <anchor>d253</anchor>
      <arglist>(key_t key, int nsems, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>semop</name>
      <anchor>d254</anchor>
      <arglist>(int int_id, struct sembuf *sops, size_t nsops)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sched_params</name>
      <anchor>d255</anchor>
      <arglist>(const ACE_Sched_Params &amp;, ACE_id_t id=ACE_SELF)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>shmat</name>
      <anchor>d256</anchor>
      <arglist>(int int_id, void *shmaddr, int shmflg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shmctl</name>
      <anchor>d257</anchor>
      <arglist>(int int_id, int cmd, struct shmid_ds *buf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shmdt</name>
      <anchor>d258</anchor>
      <arglist>(void *shmaddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shmget</name>
      <anchor>d259</anchor>
      <arglist>(key_t key, int size, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>kill</name>
      <anchor>d260</anchor>
      <arglist>(pid_t pid, int signum)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigaction</name>
      <anchor>d261</anchor>
      <arglist>(int signum, const struct sigaction *nsa, struct sigaction *osa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigaddset</name>
      <anchor>d262</anchor>
      <arglist>(sigset_t *s, int signum)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigdelset</name>
      <anchor>d263</anchor>
      <arglist>(sigset_t *s, int signum)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigemptyset</name>
      <anchor>d264</anchor>
      <arglist>(sigset_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigfillset</name>
      <anchor>d265</anchor>
      <arglist>(sigset_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigismember</name>
      <anchor>d266</anchor>
      <arglist>(sigset_t *s, int signum)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_SignalHandler</type>
      <name>signal</name>
      <anchor>d267</anchor>
      <arglist>(int signum, ACE_SignalHandler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigsuspend</name>
      <anchor>d268</anchor>
      <arglist>(const sigset_t *set)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigprocmask</name>
      <anchor>d269</anchor>
      <arglist>(int how, const sigset_t *nsp, sigset_t *osp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>pthread_sigmask</name>
      <anchor>d270</anchor>
      <arglist>(int how, const sigset_t *nsp, sigset_t *osp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>accept</name>
      <anchor>d271</anchor>
      <arglist>(ACE_HANDLE handle, struct sockaddr *addr, int *addrlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>accept</name>
      <anchor>d272</anchor>
      <arglist>(ACE_HANDLE handle, struct sockaddr *addr, int *addrlen, const ACE_Accept_QoS_Params &amp;qos_params)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>connect</name>
      <anchor>d273</anchor>
      <arglist>(ACE_HANDLE handle, struct sockaddr *addr, int addrlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>connect</name>
      <anchor>d274</anchor>
      <arglist>(ACE_HANDLE handle, const sockaddr *addr, int addrlen, const ACE_QoS_Params &amp;qos_params)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>bind</name>
      <anchor>d275</anchor>
      <arglist>(ACE_HANDLE s, struct sockaddr *name, int namelen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>closesocket</name>
      <anchor>d276</anchor>
      <arglist>(ACE_HANDLE s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>hostent *</type>
      <name>gethostbyaddr</name>
      <anchor>d277</anchor>
      <arglist>(const char *addr, int length, int type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>hostent *</type>
      <name>gethostbyname</name>
      <anchor>d278</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>hostent *</type>
      <name>getipnodebyname</name>
      <anchor>d279</anchor>
      <arglist>(const char *name, int family, int flags=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>hostent *</type>
      <name>getipnodebyaddr</name>
      <anchor>d280</anchor>
      <arglist>(const void *src, size_t len, int family)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>hostent *</type>
      <name>gethostbyaddr_r</name>
      <anchor>d281</anchor>
      <arglist>(const char *addr, int length, int type, struct hostent *result, ACE_HOSTENT_DATA buffer, int *h_errnop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>hostent *</type>
      <name>gethostbyname_r</name>
      <anchor>d282</anchor>
      <arglist>(const char *name, struct hostent *result, ACE_HOSTENT_DATA buffer, int *h_errnop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getpeername</name>
      <anchor>d283</anchor>
      <arglist>(ACE_HANDLE handle, struct sockaddr *addr, int *addrlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>protoent *</type>
      <name>getprotobyname</name>
      <anchor>d284</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>protoent *</type>
      <name>getprotobyname_r</name>
      <anchor>d285</anchor>
      <arglist>(const char *name, struct protoent *result, ACE_PROTOENT_DATA buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>protoent *</type>
      <name>getprotobynumber</name>
      <anchor>d286</anchor>
      <arglist>(int proto)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>protoent *</type>
      <name>getprotobynumber_r</name>
      <anchor>d287</anchor>
      <arglist>(int proto, struct protoent *result, ACE_PROTOENT_DATA buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>servent *</type>
      <name>getservbyname</name>
      <anchor>d288</anchor>
      <arglist>(const char *svc, const char *proto)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>servent *</type>
      <name>getservbyname_r</name>
      <anchor>d289</anchor>
      <arglist>(const char *svc, const char *proto, struct servent *result, ACE_SERVENT_DATA buf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getsockname</name>
      <anchor>d290</anchor>
      <arglist>(ACE_HANDLE handle, struct sockaddr *addr, int *addrlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getsockopt</name>
      <anchor>d291</anchor>
      <arglist>(ACE_HANDLE handle, int level, int optname, char *optval, int *optlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>unsigned long</type>
      <name>inet_addr</name>
      <anchor>d292</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>inet_ntoa</name>
      <anchor>d293</anchor>
      <arglist>(const struct in_addr addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>inet_aton</name>
      <anchor>d294</anchor>
      <arglist>(const char *strptr, struct in_addr *addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>inet_ntop</name>
      <anchor>d295</anchor>
      <arglist>(int family, const void *addrptr, char *strptr, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>inet_pton</name>
      <anchor>d296</anchor>
      <arglist>(int family, const char *strptr, void *addrptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>enum_protocols</name>
      <anchor>d297</anchor>
      <arglist>(int *protocols, ACE_Protocol_Info *protocol_buffer, u_long *buffer_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>join_leaf</name>
      <anchor>d298</anchor>
      <arglist>(ACE_HANDLE socket, const sockaddr *name, int namelen, const ACE_QoS_Params &amp;qos_params)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>listen</name>
      <anchor>d299</anchor>
      <arglist>(ACE_HANDLE handle, int backlog)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recv</name>
      <anchor>d300</anchor>
      <arglist>(ACE_HANDLE handle, char *buf, int len, int flags=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recvfrom</name>
      <anchor>d301</anchor>
      <arglist>(ACE_HANDLE handle, char *buf, int len, int flags, struct sockaddr *addr, int *addrlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>recvfrom</name>
      <anchor>d302</anchor>
      <arglist>(ACE_HANDLE handle, iovec *buffers, int buffer_count, size_t &amp;number_of_bytes_recvd, int &amp;flags, struct sockaddr *addr, int *addrlen, ACE_OVERLAPPED *overlapped, ACE_OVERLAPPED_COMPLETION_FUNC func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>send</name>
      <anchor>d303</anchor>
      <arglist>(ACE_HANDLE handle, const char *buf, int len, int flags=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sendto</name>
      <anchor>d304</anchor>
      <arglist>(ACE_HANDLE handle, const char *buf, int len, int flags, const struct sockaddr *addr, int addrlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sendto</name>
      <anchor>d305</anchor>
      <arglist>(ACE_HANDLE handle, const iovec *buffers, int buffer_count, size_t &amp;number_of_bytes_sent, int flags, const struct sockaddr *addr, int addrlen, ACE_OVERLAPPED *overlapped, ACE_OVERLAPPED_COMPLETION_FUNC func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setsockopt</name>
      <anchor>d306</anchor>
      <arglist>(ACE_HANDLE handle, int level, int optname, const char *optval, int optlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shutdown</name>
      <anchor>d307</anchor>
      <arglist>(ACE_HANDLE handle, int how)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>socket</name>
      <anchor>d308</anchor>
      <arglist>(int protocol_family, int type, int proto)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>socket</name>
      <anchor>d309</anchor>
      <arglist>(int protocol_family, int type, int proto, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g, u_long flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>socketpair</name>
      <anchor>d310</anchor>
      <arglist>(int domain, int type, int protocol, ACE_HANDLE sv[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>socket_init</name>
      <anchor>d311</anchor>
      <arglist>(int version_high=1, int version_low=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>socket_fini</name>
      <anchor>d312</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setpwent</name>
      <anchor>d313</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>endpwent</name>
      <anchor>d314</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>passwd *</type>
      <name>getpwent</name>
      <anchor>d315</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>passwd *</type>
      <name>getpwnam</name>
      <anchor>d316</anchor>
      <arglist>(const char *user)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>passwd *</type>
      <name>getpwnam_r</name>
      <anchor>d317</anchor>
      <arglist>(const char *name, struct passwd *pwent, char *buffer, int buflen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>compile</name>
      <anchor>d318</anchor>
      <arglist>(const char *instring, char *expbuf, char *endbuf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>step</name>
      <anchor>d319</anchor>
      <arglist>(const char *str, char *expbuf)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>socket_initialized_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_CLASS_IS_NAMESPACE</name>
      <anchor>c0</anchor>
      <arglist>(ACE_OS)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_EXIT_HOOK</type>
      <name>set_exit_hook</name>
      <anchor>f0</anchor>
      <arglist>(ACE_EXIT_HOOK hook)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>fopen_mode_to_open_mode_converter</name>
      <anchor>f1</anchor>
      <arglist>(ACE_TCHAR x, int &amp;hmode)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>cond_timedwait_i</name>
      <anchor>f2</anchor>
      <arglist>(ACE_cond_t *cv, ACE_mutex_t *m, ACE_Time_Value *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>u_int</type>
      <name>alarm_i</name>
      <anchor>f3</anchor>
      <arglist>(u_int secs)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>u_int</type>
      <name>ualarm_i</name>
      <anchor>f4</anchor>
      <arglist>(u_int usecs, u_int interval=0)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>u_int</type>
      <name>ualarm_i</name>
      <anchor>f5</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, const ACE_Time_Value &amp;tv_interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>sleep_i</name>
      <anchor>f6</anchor>
      <arglist>(u_int seconds)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>sleep_i</name>
      <anchor>f7</anchor>
      <arglist>(const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>nanosleep_i</name>
      <anchor>f8</anchor>
      <arglist>(const struct timespec *requested, struct timespec *remaining=0)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>select_i</name>
      <anchor>f9</anchor>
      <arglist>(int width, fd_set *rfds, fd_set *wfds, fd_set *efds, const ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>select_i</name>
      <anchor>f10</anchor>
      <arglist>(int width, fd_set *rfds, fd_set *wfds, fd_set *efds, const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>poll_i</name>
      <anchor>f11</anchor>
      <arglist>(struct pollfd *pollfds, u_long len, const ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>poll_i</name>
      <anchor>f12</anchor>
      <arglist>(struct pollfd *pollfds, u_long len, const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>sema_wait_i</name>
      <anchor>f13</anchor>
      <arglist>(ACE_sema_t *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>sema_wait_i</name>
      <anchor>f14</anchor>
      <arglist>(ACE_sema_t *s, ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>sigtimedwait_i</name>
      <anchor>f15</anchor>
      <arglist>(const sigset_t *set, siginfo_t *info, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Time_Value</type>
      <name>gettimeofday_i</name>
      <anchor>f16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_EXIT_HOOK</type>
      <name>exit_hook_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>OSVERSIONINFO</type>
      <name>win32_versioninfo_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>HINSTANCE</type>
      <name>win32_resource_module_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Timeout_Manager</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_OS_Object_Manager</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS::ace_flock_t</name>
    <filename>classACE__OS_1_1ace__flock__t.html</filename>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_OVERLAPPED</type>
      <name>overlapped_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ACE_TCHAR *</type>
      <name>lockname_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Dirent</name>
    <filename>classACE__OS__Dirent.html</filename>
    <member kind="function" static="yes">
      <type>ACE_DIR *</type>
      <name>opendir</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>closedir</name>
      <anchor>d1</anchor>
      <arglist>(ACE_DIR *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>dirent *</type>
      <name>readdir</name>
      <anchor>d2</anchor>
      <arglist>(ACE_DIR *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>readdir_r</name>
      <anchor>d3</anchor>
      <arglist>(ACE_DIR *dirp, dirent *entry, dirent **result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>telldir</name>
      <anchor>d4</anchor>
      <arglist>(ACE_DIR *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>seekdir</name>
      <anchor>d5</anchor>
      <arglist>(ACE_DIR *, long loc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>rewinddir</name>
      <anchor>d6</anchor>
      <arglist>(ACE_DIR *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>scandir</name>
      <anchor>d7</anchor>
      <arglist>(const ACE_TCHAR *dirname, dirent **namelist[], int(*selector)(const dirent *filename), int(*comparator)(const dirent **f1, const dirent **f2))</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_DIR *</type>
      <name>opendir_emulation</name>
      <anchor>f0</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>scandir_emulation</name>
      <anchor>f1</anchor>
      <arglist>(const ACE_TCHAR *dirname, dirent **namelist[], int(*selector)(const dirent *entry), int(*comparator)(const dirent **f1, const dirent **f2))</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>closedir_emulation</name>
      <anchor>f2</anchor>
      <arglist>(ACE_DIR *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>dirent *</type>
      <name>readdir_emulation</name>
      <anchor>f3</anchor>
      <arglist>(ACE_DIR *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Exit_Info</name>
    <filename>classACE__OS__Exit__Info.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_OS_Exit_Info</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_OS_Exit_Info</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>at_exit_i</name>
      <anchor>a2</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a3</anchor>
      <arglist>(void *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_hooks</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Cleanup_Info_Node *</type>
      <name>registered_objects_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Log_Msg_Attributes</name>
    <filename>classACE__OS__Log__Msg__Attributes.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_OS_Log_Msg_Attributes</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_OSTREAM_TYPE *</type>
      <name>ostream_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>unsigned long</type>
      <name>priority_mask_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>tracing_enabled_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>restart_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>trace_depth_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="public">
      <type>friend class</type>
      <name>ACE_Log_Msg</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Memory</name>
    <filename>classACE__OS__Memory.html</filename>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>sbrk</name>
      <anchor>d0</anchor>
      <arglist>(int brk)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>calloc</name>
      <anchor>d1</anchor>
      <arglist>(size_t elements, size_t sizeof_elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>malloc</name>
      <anchor>d2</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>realloc</name>
      <anchor>d3</anchor>
      <arglist>(void *, size_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>free</name>
      <anchor>d4</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Object_Manager</name>
    <filename>classACE__OS__Object__Manager.html</filename>
    <base>ACE_Object_Manager_Base</base>
    <member kind="enumeration">
      <name>Preallocated_Object</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OS_EMPTY_PREALLOCATED_OBJECT</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OS_PREALLOCATED_OBJECTS</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_OS_Object_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_OS_Object_Manager</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>starting_up</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shutting_down</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>sigset_t *</type>
      <name>default_mask</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>d4</anchor>
      <arglist>(ACE_Thread_Hook *new_thread_hook)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>at_exit</name>
      <anchor>c0</anchor>
      <arglist>(ACE_EXIT_HOOK func)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_OS_Object_Manager *</type>
      <name>instance</name>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>print_error_message</name>
      <anchor>f1</anchor>
      <arglist>(u_int line_number, const ACE_TCHAR *message)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sigset_t *</type>
      <name>default_mask_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_OS_Exit_Info</type>
      <name>exit_info_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_OS_Object_Manager *</type>
      <name>instance_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>void *</type>
      <name>preallocated_object</name>
      <anchor>r1</anchor>
      <arglist>[ACE_OS_PREALLOCATED_OBJECTS]</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_OS</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Object_Manager</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_OS_Object_Manager_Manager</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_TSS_Cleanup</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_TSS_Emulation</name>
      <anchor>l4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Log_Msg</name>
      <anchor>l5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend void</type>
      <name>ACE_OS_Object_Manager_Internal_Exit_Hook</name>
      <anchor>l6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Object_Manager_Manager</name>
    <filename>classACE__OS__Object__Manager__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_OS_Object_Manager_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_OS_Object_Manager_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_thread_t</type>
      <name>saved_main_thread_id_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_String</name>
    <filename>classACE__OS__String.html</filename>
    <member kind="function" static="yes">
      <type>const void *</type>
      <name>memchr</name>
      <anchor>d0</anchor>
      <arglist>(const void *s, int c, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>memchr</name>
      <anchor>d1</anchor>
      <arglist>(void *s, int c, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>memcmp</name>
      <anchor>d2</anchor>
      <arglist>(const void *t, const void *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>memcpy</name>
      <anchor>d3</anchor>
      <arglist>(void *t, const void *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>memmove</name>
      <anchor>d4</anchor>
      <arglist>(void *t, const void *s, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>memset</name>
      <anchor>d5</anchor>
      <arglist>(void *s, int c, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strcat</name>
      <anchor>d6</anchor>
      <arglist>(char *s, const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strcat</name>
      <anchor>d7</anchor>
      <arglist>(wchar_t *s, const wchar_t *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>strchr</name>
      <anchor>d8</anchor>
      <arglist>(const char *s, int c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const wchar_t *</type>
      <name>strchr</name>
      <anchor>d9</anchor>
      <arglist>(const wchar_t *s, wint_t c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strchr</name>
      <anchor>d10</anchor>
      <arglist>(char *s, int c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strchr</name>
      <anchor>d11</anchor>
      <arglist>(wchar_t *s, wint_t c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strcmp</name>
      <anchor>d12</anchor>
      <arglist>(const char *s, const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strcmp</name>
      <anchor>d13</anchor>
      <arglist>(const ACE_WCHAR_T *s, const ACE_WCHAR_T *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strcpy</name>
      <anchor>d14</anchor>
      <arglist>(char *s, const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strcpy</name>
      <anchor>d15</anchor>
      <arglist>(wchar_t *s, const wchar_t *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strcspn</name>
      <anchor>d16</anchor>
      <arglist>(const char *s, const char *reject)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strcspn</name>
      <anchor>d17</anchor>
      <arglist>(const wchar_t *s, const wchar_t *reject)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strerror</name>
      <anchor>d18</anchor>
      <arglist>(int errnum)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strlen</name>
      <anchor>d19</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strlen</name>
      <anchor>d20</anchor>
      <arglist>(const ACE_WCHAR_T *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strncat</name>
      <anchor>d21</anchor>
      <arglist>(char *s, const char *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_WCHAR_T *</type>
      <name>strncat</name>
      <anchor>d22</anchor>
      <arglist>(ACE_WCHAR_T *s, const ACE_WCHAR_T *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strncmp</name>
      <anchor>d23</anchor>
      <arglist>(const char *s, const char *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strncmp</name>
      <anchor>d24</anchor>
      <arglist>(const ACE_WCHAR_T *s, const ACE_WCHAR_T *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strncpy</name>
      <anchor>d25</anchor>
      <arglist>(char *s, const char *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_WCHAR_T *</type>
      <name>strncpy</name>
      <anchor>d26</anchor>
      <arglist>(ACE_WCHAR_T *s, const ACE_WCHAR_T *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>strpbrk</name>
      <anchor>d27</anchor>
      <arglist>(const char *s1, const char *s2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const wchar_t *</type>
      <name>strpbrk</name>
      <anchor>d28</anchor>
      <arglist>(const wchar_t *s1, const wchar_t *s2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strpbrk</name>
      <anchor>d29</anchor>
      <arglist>(char *s1, const char *s2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strpbrk</name>
      <anchor>d30</anchor>
      <arglist>(wchar_t *s1, const wchar_t *s2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>strrchr</name>
      <anchor>d31</anchor>
      <arglist>(const char *s, int c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const wchar_t *</type>
      <name>strrchr</name>
      <anchor>d32</anchor>
      <arglist>(const wchar_t *s, wint_t c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strrchr</name>
      <anchor>d33</anchor>
      <arglist>(char *s, int c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strrchr</name>
      <anchor>d34</anchor>
      <arglist>(wchar_t *s, wint_t c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strspn</name>
      <anchor>d35</anchor>
      <arglist>(const char *s1, const char *s2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>size_t</type>
      <name>strspn</name>
      <anchor>d36</anchor>
      <arglist>(const wchar_t *s1, const wchar_t *s2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>strstr</name>
      <anchor>d37</anchor>
      <arglist>(const char *s, const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const wchar_t *</type>
      <name>strstr</name>
      <anchor>d38</anchor>
      <arglist>(const wchar_t *s, const wchar_t *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strstr</name>
      <anchor>d39</anchor>
      <arglist>(char *s, const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strstr</name>
      <anchor>d40</anchor>
      <arglist>(wchar_t *s, const wchar_t *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strtok</name>
      <anchor>d41</anchor>
      <arglist>(char *s, const char *tokens)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strtok</name>
      <anchor>d42</anchor>
      <arglist>(wchar_t *s, const wchar_t *tokens)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ace_isprint</name>
      <anchor>d43</anchor>
      <arglist>(const ACE_TCHAR c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ace_isspace</name>
      <anchor>d44</anchor>
      <arglist>(const ACE_TCHAR c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>to_lower</name>
      <anchor>d45</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wint_t</type>
      <name>to_lower</name>
      <anchor>d46</anchor>
      <arglist>(wint_t c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>itoa</name>
      <anchor>d47</anchor>
      <arglist>(int value, char *string, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>itoa</name>
      <anchor>d48</anchor>
      <arglist>(int value, wchar_t *string, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strcasecmp</name>
      <anchor>d49</anchor>
      <arglist>(const char *s, const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strcasecmp</name>
      <anchor>d50</anchor>
      <arglist>(const wchar_t *s, const wchar_t *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>strnchr</name>
      <anchor>d51</anchor>
      <arglist>(const char *s, int c, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_WCHAR_T *</type>
      <name>strnchr</name>
      <anchor>d52</anchor>
      <arglist>(const ACE_WCHAR_T *s, ACE_WINT_T c, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strnchr</name>
      <anchor>d53</anchor>
      <arglist>(char *s, int c, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_WCHAR_T *</type>
      <name>strnchr</name>
      <anchor>d54</anchor>
      <arglist>(ACE_WCHAR_T *s, ACE_WINT_T c, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strncasecmp</name>
      <anchor>d55</anchor>
      <arglist>(const char *s, const char *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>strncasecmp</name>
      <anchor>d56</anchor>
      <arglist>(const wchar_t *s, const wchar_t *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strecpy</name>
      <anchor>d57</anchor>
      <arglist>(char *des, const char *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strecpy</name>
      <anchor>d58</anchor>
      <arglist>(wchar_t *s, const wchar_t *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strsncpy</name>
      <anchor>d59</anchor>
      <arglist>(char *dst, const char *src, size_t maxlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_WCHAR_T *</type>
      <name>strsncpy</name>
      <anchor>d60</anchor>
      <arglist>(ACE_WCHAR_T *dst, const ACE_WCHAR_T *src, size_t maxlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>strnstr</name>
      <anchor>d61</anchor>
      <arglist>(const char *s, const char *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_WCHAR_T *</type>
      <name>strnstr</name>
      <anchor>d62</anchor>
      <arglist>(const ACE_WCHAR_T *s, const ACE_WCHAR_T *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strnstr</name>
      <anchor>d63</anchor>
      <arglist>(char *s, const char *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_WCHAR_T *</type>
      <name>strnstr</name>
      <anchor>d64</anchor>
      <arglist>(ACE_WCHAR_T *s, const ACE_WCHAR_T *t, size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strdup</name>
      <anchor>d65</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>wchar_t *</type>
      <name>strdup</name>
      <anchor>d66</anchor>
      <arglist>(const wchar_t *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>strtok_r</name>
      <anchor>d67</anchor>
      <arglist>(char *s, const char *tokens, char **lasts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>double</type>
      <name>strtod</name>
      <anchor>d68</anchor>
      <arglist>(const char *s, char **endptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>double</type>
      <name>strtod</name>
      <anchor>d69</anchor>
      <arglist>(const wchar_t *s, wchar_t **endptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>strtol</name>
      <anchor>d70</anchor>
      <arglist>(const char *s, char **ptr, int base)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>long</type>
      <name>strtol</name>
      <anchor>d71</anchor>
      <arglist>(const wchar_t *s, wchar_t **ptr, int base)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>unsigned long</type>
      <name>strtoul</name>
      <anchor>d72</anchor>
      <arglist>(const char *s, char **ptr, int base)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>unsigned long</type>
      <name>strtoul</name>
      <anchor>d73</anchor>
      <arglist>(const wchar_t *s, wchar_t **ptr, int base)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>char *</type>
      <name>itoa_emulation</name>
      <anchor>f0</anchor>
      <arglist>(int value, char *string, int radix)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>wchar_t *</type>
      <name>itow_emulation</name>
      <anchor>f1</anchor>
      <arglist>(int value, wchar_t *string, int radix)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>const void *</type>
      <name>memchr_emulation</name>
      <anchor>f2</anchor>
      <arglist>(const void *s, int c, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>strcasecmp_emulation</name>
      <anchor>f3</anchor>
      <arglist>(const char *s, const char *t)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>strncasecmp_emulation</name>
      <anchor>f4</anchor>
      <arglist>(const char *s, const char *t, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>size_t</type>
      <name>strcspn_emulation</name>
      <anchor>f5</anchor>
      <arglist>(const char *s, const char *reject)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>char *</type>
      <name>strchr_emulation</name>
      <anchor>f6</anchor>
      <arglist>(char *s, int c)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>const char *</type>
      <name>strchr_emulation</name>
      <anchor>f7</anchor>
      <arglist>(const char *s, int c)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>char *</type>
      <name>strrchr_emulation</name>
      <anchor>f8</anchor>
      <arglist>(char *s, int c)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>const char *</type>
      <name>strrchr_emulation</name>
      <anchor>f9</anchor>
      <arglist>(const char *s, int c)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>char *</type>
      <name>strtok_r_emulation</name>
      <anchor>f10</anchor>
      <arglist>(char *s, const char *tokens, char **lasts)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>wchar_t *</type>
      <name>wcscat_emulation</name>
      <anchor>f11</anchor>
      <arglist>(wchar_t *destination, const wchar_t *source)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>wchar_t *</type>
      <name>wcschr_emulation</name>
      <anchor>f12</anchor>
      <arglist>(const wchar_t *string, wint_t c)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>wcscmp_emulation</name>
      <anchor>f13</anchor>
      <arglist>(const ACE_WCHAR_T *string1, const ACE_WCHAR_T *string2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>wchar_t *</type>
      <name>wcscpy_emulation</name>
      <anchor>f14</anchor>
      <arglist>(wchar_t *destination, const wchar_t *source)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>wcsicmp_emulation</name>
      <anchor>f15</anchor>
      <arglist>(const wchar_t *string1, const wchar_t *string2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>size_t</type>
      <name>wcslen_emulation</name>
      <anchor>f16</anchor>
      <arglist>(const ACE_WCHAR_T *string)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_WCHAR_T *</type>
      <name>wcsncat_emulation</name>
      <anchor>f17</anchor>
      <arglist>(ACE_WCHAR_T *destination, const ACE_WCHAR_T *source, size_t count)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>wcsncmp_emulation</name>
      <anchor>f18</anchor>
      <arglist>(const ACE_WCHAR_T *string1, const ACE_WCHAR_T *string2, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_WCHAR_T *</type>
      <name>wcsncpy_emulation</name>
      <anchor>f19</anchor>
      <arglist>(ACE_WCHAR_T *destination, const ACE_WCHAR_T *source, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>wcsnicmp_emulation</name>
      <anchor>f20</anchor>
      <arglist>(const wchar_t *string1, const wchar_t *string2, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>wchar_t *</type>
      <name>wcspbrk_emulation</name>
      <anchor>f21</anchor>
      <arglist>(const wchar_t *string, const wchar_t *charset)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>wchar_t *</type>
      <name>wcsrchr_emulation</name>
      <anchor>f22</anchor>
      <arglist>(wchar_t *string, wint_t c)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>const wchar_t *</type>
      <name>wcsrchr_emulation</name>
      <anchor>f23</anchor>
      <arglist>(const wchar_t *string, wint_t c)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>size_t</type>
      <name>wcscspn_emulation</name>
      <anchor>f24</anchor>
      <arglist>(const wchar_t *string, const wchar_t *reject)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>size_t</type>
      <name>wcsspn_emulation</name>
      <anchor>f25</anchor>
      <arglist>(const wchar_t *string, const wchar_t *charset)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>wchar_t *</type>
      <name>wcsstr_emulation</name>
      <anchor>f26</anchor>
      <arglist>(const wchar_t *string, const wchar_t *charset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Thread_Adapter</name>
    <filename>classACE__OS__Thread__Adapter.html</filename>
    <base>ACE_Base_Thread_Adapter</base>
    <member kind="function">
      <type></type>
      <name>ACE_OS_Thread_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_THR_FUNC user_func, void *arg, ACE_THR_C_FUNC entry_point=(ACE_THR_C_FUNC) ace_thread_adapter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>invoke</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ACE_OS_Thread_Adapter</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Thread_Adapter_Has_Private_Destructor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_Thread_Descriptor</name>
    <filename>classACE__OS__Thread__Descriptor.html</filename>
    <member kind="function">
      <type>long</type>
      <name>flags</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_OS_Thread_Descriptor</name>
      <anchor>b0</anchor>
      <arglist>(long flags=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>long</type>
      <name>flags_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OS_TLI</name>
    <filename>classACE__OS__TLI.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_accept</name>
      <anchor>d0</anchor>
      <arglist>(ACE_HANDLE fildes, ACE_HANDLE resfd, struct t_call *call)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char *</type>
      <name>t_alloc</name>
      <anchor>d1</anchor>
      <arglist>(ACE_HANDLE fildes, int struct_type, int fields)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_bind</name>
      <anchor>d2</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_bind *req, struct t_bind *ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_close</name>
      <anchor>d3</anchor>
      <arglist>(ACE_HANDLE fildes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_connect</name>
      <anchor>d4</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_call *sndcall, struct t_call *rcvcall)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>t_error</name>
      <anchor>d5</anchor>
      <arglist>(const char *errmsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_free</name>
      <anchor>d6</anchor>
      <arglist>(char *ptr, int struct_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_getinfo</name>
      <anchor>d7</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_info *info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_getname</name>
      <anchor>d8</anchor>
      <arglist>(ACE_HANDLE fildes, struct netbuf *namep, int type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_getstate</name>
      <anchor>d9</anchor>
      <arglist>(ACE_HANDLE fildes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_listen</name>
      <anchor>d10</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_call *call)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_look</name>
      <anchor>d11</anchor>
      <arglist>(ACE_HANDLE fildes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>t_open</name>
      <anchor>d12</anchor>
      <arglist>(char *path, int oflag, struct t_info *info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_optmgmt</name>
      <anchor>d13</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_optmgmt *req, struct t_optmgmt *ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_rcv</name>
      <anchor>d14</anchor>
      <arglist>(ACE_HANDLE fildes, char *buf, unsigned int nbytes, int *flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_rcvdis</name>
      <anchor>d15</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_discon *discon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_rcvrel</name>
      <anchor>d16</anchor>
      <arglist>(ACE_HANDLE fildes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_rcvudata</name>
      <anchor>d17</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_unitdata *unitdata, int *flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_rcvuderr</name>
      <anchor>d18</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_uderr *uderr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_snd</name>
      <anchor>d19</anchor>
      <arglist>(ACE_HANDLE fildes, const char *buf, unsigned int nbytes, int flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_snddis</name>
      <anchor>d20</anchor>
      <arglist>(ACE_HANDLE fildes, struct t_call *call)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_sndrel</name>
      <anchor>d21</anchor>
      <arglist>(ACE_HANDLE fildes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_sync</name>
      <anchor>d22</anchor>
      <arglist>(ACE_HANDLE fildes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>t_unbind</name>
      <anchor>d23</anchor>
      <arglist>(ACE_HANDLE fildes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_OutputCDR</name>
    <filename>classACE__OutputCDR.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_OutputCDR</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=0, int byte_order=ACE_CDR_BYTE_ORDER, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, size_t memcpy_tradeoff=ACE_DEFAULT_CDR_MEMCPY_TRADEOFF, ACE_CDR::Octet major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_OutputCDR</name>
      <anchor>a1</anchor>
      <arglist>(char *data, size_t size, int byte_order=ACE_CDR_BYTE_ORDER, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, size_t memcpy_tradeoff=ACE_DEFAULT_CDR_MEMCPY_TRADEOFF, ACE_CDR::Octet giop_major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet giop_minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_OutputCDR</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *data, int byte_order=ACE_CDR_BYTE_ORDER, size_t memcpy_tradeoff=ACE_DEFAULT_CDR_MEMCPY_TRADEOFF, ACE_CDR::Octet giop_major_version=ACE_CDR_GIOP_MAJOR_VERSION, ACE_CDR::Octet giop_minor_version=ACE_CDR_GIOP_MINOR_VERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_OutputCDR</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>good_bit</name>
      <anchor>a51</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_length</name>
      <anchor>a53</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Message_Block *</type>
      <name>begin</name>
      <anchor>a54</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Message_Block *</type>
      <name>end</name>
      <anchor>a55</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Message_Block *</type>
      <name>current</name>
      <anchor>a56</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>buffer</name>
      <anchor>a57</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchor>a58</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>align_write_ptr</name>
      <anchor>a59</anchor>
      <arglist>(size_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>char_translator</name>
      <anchor>a60</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>wchar_translator</name>
      <anchor>a61</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_alignment</name>
      <anchor>a62</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>adjust</name>
      <anchor>a63</anchor>
      <arglist>(size_t size, char *&amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>adjust</name>
      <anchor>a64</anchor>
      <arglist>(size_t size, size_t align, char *&amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>do_byte_swap</name>
      <anchor>a65</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_byte_order</name>
      <anchor>a66</anchor>
      <arglist>(int byte_order)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_version</name>
      <anchor>a67</anchor>
      <arglist>(ACE_CDR::Octet major, ACE_CDR::Octet minor)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_boolean</name>
      <anchor>a4</anchor>
      <arglist>(ACE_CDR::Boolean x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_char</name>
      <anchor>a5</anchor>
      <arglist>(ACE_CDR::Char x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_wchar</name>
      <anchor>a6</anchor>
      <arglist>(ACE_CDR::WChar x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_octet</name>
      <anchor>a7</anchor>
      <arglist>(ACE_CDR::Octet x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_short</name>
      <anchor>a8</anchor>
      <arglist>(ACE_CDR::Short x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_ushort</name>
      <anchor>a9</anchor>
      <arglist>(ACE_CDR::UShort x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_long</name>
      <anchor>a10</anchor>
      <arglist>(ACE_CDR::Long x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_ulong</name>
      <anchor>a11</anchor>
      <arglist>(ACE_CDR::ULong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_longlong</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_CDR::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_ulonglong</name>
      <anchor>a13</anchor>
      <arglist>(const ACE_CDR::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_float</name>
      <anchor>a14</anchor>
      <arglist>(ACE_CDR::Float x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_double</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_CDR::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_longdouble</name>
      <anchor>a16</anchor>
      <arglist>(const ACE_CDR::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_string</name>
      <anchor>a17</anchor>
      <arglist>(const ACE_CDR::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_string</name>
      <anchor>a18</anchor>
      <arglist>(ACE_CDR::ULong len, const ACE_CDR::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_string</name>
      <anchor>a19</anchor>
      <arglist>(const ACE_CString &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_wstring</name>
      <anchor>a20</anchor>
      <arglist>(const ACE_CDR::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_wstring</name>
      <anchor>a21</anchor>
      <arglist>(ACE_CDR::ULong length, const ACE_CDR::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_boolean_array</name>
      <anchor>a22</anchor>
      <arglist>(const ACE_CDR::Boolean *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_char_array</name>
      <anchor>a23</anchor>
      <arglist>(const ACE_CDR::Char *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_wchar_array</name>
      <anchor>a24</anchor>
      <arglist>(const ACE_CDR::WChar *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_octet_array</name>
      <anchor>a25</anchor>
      <arglist>(const ACE_CDR::Octet *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_short_array</name>
      <anchor>a26</anchor>
      <arglist>(const ACE_CDR::Short *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_ushort_array</name>
      <anchor>a27</anchor>
      <arglist>(const ACE_CDR::UShort *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_long_array</name>
      <anchor>a28</anchor>
      <arglist>(const ACE_CDR::Long *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_ulong_array</name>
      <anchor>a29</anchor>
      <arglist>(const ACE_CDR::ULong *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_longlong_array</name>
      <anchor>a30</anchor>
      <arglist>(const ACE_CDR::LongLong *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_ulonglong_array</name>
      <anchor>a31</anchor>
      <arglist>(const ACE_CDR::ULongLong *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_float_array</name>
      <anchor>a32</anchor>
      <arglist>(const ACE_CDR::Float *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_double_array</name>
      <anchor>a33</anchor>
      <arglist>(const ACE_CDR::Double *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_longdouble_array</name>
      <anchor>a34</anchor>
      <arglist>(const ACE_CDR::LongDouble *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>write_octet_array_mb</name>
      <anchor>a35</anchor>
      <arglist>(const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_boolean</name>
      <anchor>a36</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_char</name>
      <anchor>a37</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_wchar</name>
      <anchor>a38</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_octet</name>
      <anchor>a39</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_short</name>
      <anchor>a40</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_ushort</name>
      <anchor>a41</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_long</name>
      <anchor>a42</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_ulong</name>
      <anchor>a43</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_longlong</name>
      <anchor>a44</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_ulonglong</name>
      <anchor>a45</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_float</name>
      <anchor>a46</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_double</name>
      <anchor>a47</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_longdouble</name>
      <anchor>a48</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_wstring</name>
      <anchor>a49</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_CDR::Boolean</type>
      <name>append_string</name>
      <anchor>a50</anchor>
      <arglist>(ACE_InputCDR &amp;)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>char_translator_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>wchar_translator_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_OutputCDR</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_OutputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_OutputCDR &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_OutputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>write_1</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_CDR::Octet *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>write_2</name>
      <anchor>c3</anchor>
      <arglist>(const ACE_CDR::UShort *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>write_4</name>
      <anchor>c4</anchor>
      <arglist>(const ACE_CDR::ULong *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>write_8</name>
      <anchor>c5</anchor>
      <arglist>(const ACE_CDR::ULongLong *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>write_16</name>
      <anchor>c6</anchor>
      <arglist>(const ACE_CDR::LongDouble *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_CDR::Boolean</type>
      <name>write_array</name>
      <anchor>c7</anchor>
      <arglist>(const void *x, size_t size, size_t align, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>grow_and_adjust</name>
      <anchor>c8</anchor>
      <arglist>(size_t size, size_t align, char *&amp;buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block</type>
      <name>start_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>current_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_is_writable_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>current_alignment_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>do_byte_swap_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>good_bit_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>memcpy_tradeoff_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CDR::Octet</type>
      <name>major_version_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CDR::Octet</type>
      <name>minor_version_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Char_Codeset_Translator</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_WChar_Codeset_Translator</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_InputCDR</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_OutputCDR::from_boolean</name>
    <filename>structACE__OutputCDR_1_1from__boolean.html</filename>
    <member kind="function">
      <type></type>
      <name>from_boolean</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Boolean b)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Boolean</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_OutputCDR::from_char</name>
    <filename>structACE__OutputCDR_1_1from__char.html</filename>
    <member kind="function">
      <type></type>
      <name>from_char</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Char c)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Char</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_OutputCDR::from_octet</name>
    <filename>structACE__OutputCDR_1_1from__octet.html</filename>
    <member kind="function">
      <type></type>
      <name>from_octet</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Octet o)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Octet</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_OutputCDR::from_string</name>
    <filename>structACE__OutputCDR_1_1from__string.html</filename>
    <member kind="function">
      <type></type>
      <name>from_string</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::Char *s, ACE_CDR::ULong b, ACE_CDR::Boolean nocopy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>from_string</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_CDR::Char *s, ACE_CDR::ULong b, ACE_CDR::Boolean nocopy=0)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Char *</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::ULong</type>
      <name>bound_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Boolean</type>
      <name>nocopy_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_OutputCDR::from_wchar</name>
    <filename>structACE__OutputCDR_1_1from__wchar.html</filename>
    <member kind="function">
      <type></type>
      <name>from_wchar</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::WChar wc)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::WChar</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_OutputCDR::from_wstring</name>
    <filename>structACE__OutputCDR_1_1from__wstring.html</filename>
    <member kind="function">
      <type></type>
      <name>from_wstring</name>
      <anchor>a0</anchor>
      <arglist>(ACE_CDR::WChar *ws, ACE_CDR::ULong b, ACE_CDR::Boolean nocopy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>from_wstring</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_CDR::WChar *ws, ACE_CDR::ULong b, ACE_CDR::Boolean nocopy=0)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::WChar *</type>
      <name>val_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::ULong</type>
      <name>bound_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CDR::Boolean</type>
      <name>nocopy_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pagefile_Memory_Pool</name>
    <filename>classACE__Pagefile__Memory__Pool.html</filename>
    <member kind="typedef">
      <type>ACE_Pagefile_Memory_Pool_Options</type>
      <name>OPTIONS</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Pagefile_Memory_Pool</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *backing_store_name=0, const OPTIONS *options=0)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>init_acquire</name>
      <anchor>a1</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes, int &amp;first_time)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>acquire</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seh_selector</name>
      <anchor>a4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remap</name>
      <anchor>a5</anchor>
      <arglist>(void *addr)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>round_to_page_size</name>
      <anchor>a6</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>round_to_chunk_size</name>
      <anchor>a7</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync</name>
      <anchor>a8</anchor>
      <arglist>(ssize_t=-1, int=MS_SYNC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync</name>
      <anchor>a9</anchor>
      <arglist>(void *, size_t, int=MS_SYNC)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>protect</name>
      <anchor>a10</anchor>
      <arglist>(ssize_t=-1, int=PROT_RDWR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>protect</name>
      <anchor>a11</anchor>
      <arglist>(void *, size_t, int=PROT_RDWR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>map</name>
      <anchor>b0</anchor>
      <arglist>(int &amp;firstTime, int appendBytes=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>unmap</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Control_Block</type>
      <name>local_cb_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Control_Block *</type>
      <name>shared_cb_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>object_handle_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>page_size_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>backing_store_name_</name>
      <anchor>o4</anchor>
      <arglist>[MAXPATHLEN]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pagefile_Memory_Pool::Control_Block</name>
    <filename>classACE__Pagefile__Memory__Pool_1_1Control__Block.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>req_base_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>mapped_base_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Shared_Control_Block</type>
      <name>sh_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pagefile_Memory_Pool::Control_Block::Shared_Control_Block</name>
    <filename>classACE__Pagefile__Memory__Pool_1_1Control__Block_1_1Shared__Control__Block.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mapped_size_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>free_offset_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>free_size_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pagefile_Memory_Pool_Options</name>
    <filename>classACE__Pagefile__Memory__Pool__Options.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Pagefile_Memory_Pool_Options</name>
      <anchor>a0</anchor>
      <arglist>(void *base_addr=ACE_DEFAULT_PAGEFILE_POOL_BASE, size_t max_size=ACE_DEFAULT_PAGEFILE_POOL_SIZE)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>base_addr_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pair</name>
    <filename>classACE__Pair.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>first_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>second_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Pair</name>
      <anchor>a0</anchor>
      <arglist>(const T1 &amp;t1, const T2 &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Pair</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T1 &amp;</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const T1 &amp;</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchor>a4</anchor>
      <arglist>(const T1 &amp;t1)</arglist>
    </member>
    <member kind="function">
      <type>T2 &amp;</type>
      <name>second</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const T2 &amp;</type>
      <name>second</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>second</name>
      <anchor>a7</anchor>
      <arglist>(const T2 &amp;t2)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T1</type>
      <name>first_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T2</type>
      <name>second_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pair_Caching_Utility</name>
    <filename>classACE__Pair__Caching__Utility.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <templarg>ITERATOR</templarg>
    <templarg>ATTRIBUTES</templarg>
    <member kind="typedef">
      <type>ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Pair_Caching_Utility</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt; *cleanup_strategy=0, int delete_cleanup_strategy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Pair_Caching_Utility</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clear_cache</name>
      <anchor>a2</anchor>
      <arglist>(CONTAINER &amp;container, double purge_percent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>minimum</name>
      <anchor>b0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *&amp;key_to_remove, VALUE *&amp;value_to_remove)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>operator=</name>
      <anchor>b1</anchor>
      <arglist>(const APUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>APUTIL</name>
      <anchor>b2</anchor>
      <arglist>(const APUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CLEANUP_STRATEGY *</type>
      <name>cleanup_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_cleanup_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Parse_Node</name>
    <filename>classACE__Parse__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Parse_Node</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Parse_Node</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Parse_Node</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Parse_Node *</type>
      <name>link</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Parse_Node *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>name</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Parse_Node *</type>
      <name>next_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_PI_Control_Block</name>
    <filename>classACE__PI__Control__Block.html</filename>
    <member kind="typedef">
      <type>ACE_Based_Pointer&lt; ACE_Malloc_Header &gt;</type>
      <name>MALLOC_HEADER_PTR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Based_Pointer&lt; ACE_Name_Node &gt;</type>
      <name>NAME_NODE_PTR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Based_Pointer_Basic&lt; char &gt;</type>
      <name>CHAR_PTR</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>print_alignment_info</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ref_counter_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NAME_NODE_PTR</type>
      <name>name_head_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MALLOC_HEADER_PTR</type>
      <name>freep_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>lock_name_</name>
      <anchor>m3</anchor>
      <arglist>[MAXNAMELEN]</arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>align_</name>
      <anchor>m4</anchor>
      <arglist>[ACE_PI_CONTROL_BLOCK_ALIGN_LONGS&lt; 1?1:ACE_PI_CONTROL_BLOCK_ALIGN_LONGS]</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Malloc_Header</type>
      <name>base_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Control_Block &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_PI_Control_Block::ACE_Malloc_Header</name>
    <filename>classACE__PI__Control__Block_1_1ACE__Malloc__Header.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Malloc_Header</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init_ptr</name>
      <anchor>d0</anchor>
      <arglist>(MALLOC_HEADER_PTR *ptr, ACE_Malloc_Header *init, void *base_addr)</arglist>
    </member>
    <member kind="variable">
      <type>MALLOC_HEADER_PTR</type>
      <name>next_block_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>padding_</name>
      <anchor>m2</anchor>
      <arglist>[ACE_PI_MALLOC_PADDING_SIZE&lt; 1?1:ACE_PI_MALLOC_PADDING_SIZE]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Malloc_Header &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_PI_Control_Block::ACE_Name_Node</name>
    <filename>classACE__PI__Control__Block_1_1ACE__Name__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Node</name>
      <anchor>a0</anchor>
      <arglist>(const char *name, char *name_ptr, char *pointer, ACE_Name_Node *head)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Node</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Name_Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Name_Node</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Name_Node</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init_ptr</name>
      <anchor>d0</anchor>
      <arglist>(NAME_NODE_PTR *ptr, ACE_Name_Node *init, void *base_addr)</arglist>
    </member>
    <member kind="variable">
      <type>CHAR_PTR</type>
      <name>name_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CHAR_PTR</type>
      <name>pointer_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NAME_NODE_PTR</type>
      <name>next_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NAME_NODE_PTR</type>
      <name>prev_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Name_Node &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pipe</name>
    <filename>classACE__Pipe.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Pipe</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Pipe</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE handles[2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Pipe</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE read, ACE_HANDLE write)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Pipe</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE handles[2])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a5</anchor>
      <arglist>(int buffer_size=ACE_DEFAULT_MAX_SOCKET_BUFSIZ)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>read_handle</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>write_handle</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handles_</name>
      <anchor>o0</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Pointer_Hash</name>
    <filename>classACE__Pointer__Hash.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type>u_long</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(TYPE t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX__Asynch_Write_Dgram_Result</name>
    <filename>classACE__POSIX____Asynch__Write__Dgram__Result.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Operation</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Operation.html</filename>
    <base virtualness="virtual">ACE_POSIX_Asynch_Operation</base>
    <member kind="function">
      <type>ACE_POSIX_AIOCB_Proactor *</type>
      <name>posix_proactor</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Operation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Operation</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_and_start_aio</name>
      <anchor>b2</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result, int op)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_POSIX_AIOCB_Proactor *</type>
      <name>posix_aiocb_proactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Read_Dgram</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Read__Dgram.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Dgram_Impl</base>
    <base>ACE_POSIX_AIOCB_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Read_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Read_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *message_block, size_t &amp;number_of_bytes_recvd, int flags, int protocol_family, const void *act, int priority, int signal_number)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Read_Dgram</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Read_File</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Read__File.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_File_Impl</base>
    <base>ACE_POSIX_AIOCB_Asynch_Read_Stream</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Read_File</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, u_long offset, u_long offset_high, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Read_File</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>read</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, int priority, int signal_number=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Read_Stream</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Read__Stream.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Stream_Impl</base>
    <base>ACE_POSIX_AIOCB_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Read_Stream</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Read_Stream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Transmit_File</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Transmit__File.html</filename>
    <base virtualness="virtual">ACE_Asynch_Transmit_File_Impl</base>
    <base>ACE_POSIX_AIOCB_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Transmit_File</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transmit_file</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Transmit_File</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Transmit_Handler</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Transmit__Handler.html</filename>
    <base>ACE_POSIX_Asynch_Transmit_Handler</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Transmit_Handler</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor, ACE_POSIX_Asynch_Transmit_File_Result *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Transmit_Handler</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transmit</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_write_stream</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_Asynch_Write_Stream::Result &amp;result)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_read_file</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Asynch_Read_File::Result &amp;result)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>initiate_read_file</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_POSIX_AIOCB_Asynch_Read_File</type>
      <name>rf_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_POSIX_AIOCB_Asynch_Write_Stream</type>
      <name>ws_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Write_Dgram</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Write__Dgram.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Dgram_Impl</base>
    <base>ACE_POSIX_AIOCB_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Write_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Write_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>send</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *message_block, size_t &amp;number_of_bytes_sent, int flags, const ACE_Addr &amp;addr, const void *act, int priority, int signal_number)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Write_Dgram</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Write_File</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Write__File.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_File_Impl</base>
    <base>ACE_POSIX_AIOCB_Asynch_Write_Stream</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Write_File</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, u_long offset, u_long offset_high, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Write_File</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, int priority, int signal_number=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Asynch_Write_Stream</name>
    <filename>classACE__POSIX__AIOCB__Asynch__Write__Stream.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Stream_Impl</base>
    <base>ACE_POSIX_AIOCB_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Asynch_Write_Stream</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_AIOCB_Proactor *posix_aiocb_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Asynch_Write_Stream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_AIOCB_Proactor</name>
    <filename>classACE__POSIX__AIOCB__Proactor.html</filename>
    <base>ACE_POSIX_Proactor</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_AIOCB_Proactor</name>
      <anchor>a0</anchor>
      <arglist>(size_t nmaxop=ACE_AIO_DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Proactor_Type</type>
      <name>get_impl_type</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_AIOCB_Proactor</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value &amp;wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>post_completion</name>
      <anchor>a5</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Stream_Impl *</type>
      <name>create_asynch_read_stream</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Stream_Impl *</type>
      <name>create_asynch_write_stream</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Dgram_Impl *</type>
      <name>create_asynch_read_dgram</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Dgram_Impl *</type>
      <name>create_asynch_write_dgram</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_File_Impl *</type>
      <name>create_asynch_read_file</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_File_Impl *</type>
      <name>create_asynch_write_file</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Accept_Impl *</type>
      <name>create_asynch_accept</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Transmit_File_Impl *</type>
      <name>create_asynch_transmit_file</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_aio</name>
      <anchor>a14</anchor>
      <arglist>(ACE_HANDLE h)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_AIOCB_Proactor</name>
      <anchor>b0</anchor>
      <arglist>(size_t nmaxop, ACE_POSIX_Proactor::Proactor_Type ptype)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>create_notify_manager</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>delete_notify_manager</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>check_max_aio_num</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>set_notify_handle</name>
      <anchor>b4</anchor>
      <arglist>(ACE_HANDLE h)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>b5</anchor>
      <arglist>(u_long milli_seconds)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>application_specific_code</name>
      <anchor>b6</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *asynch_result, u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_and_start_aio</name>
      <anchor>b7</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result, int op)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>start_aio</name>
      <anchor>b8</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>start_deferred_aio</name>
      <anchor>b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_aiocb</name>
      <anchor>b10</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_POSIX_Asynch_Result *</type>
      <name>find_completed_aio</name>
      <anchor>b11</anchor>
      <arglist>(int &amp;error_status, int &amp;return_status, size_t &amp;index, size_t &amp;count)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>allocate_aio_slot</name>
      <anchor>b12</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>notify_completion</name>
      <anchor>b13</anchor>
      <arglist>(int sig_num)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>putq_result</name>
      <anchor>b14</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_POSIX_Asynch_Result *</type>
      <name>getq_result</name>
      <anchor>b15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>clear_result_queue</name>
      <anchor>b16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>process_result_queue</name>
      <anchor>b17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_AIOCB_Notify_Pipe_Manager *</type>
      <name>aiocb_notify_pipe_manager_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>aiocb **</type>
      <name>aiocb_list_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_POSIX_Asynch_Result **</type>
      <name>result_list_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>aiocb_list_max_size_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>aiocb_list_cur_size_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SYNCH_MUTEX</type>
      <name>mutex_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>notify_pipe_read_handle_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>num_deferred_aiocb_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>num_started_aio_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Unbounded_Queue&lt; ACE_POSIX_Asynch_Result *&gt;</type>
      <name>result_queue_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_AIOCB_Notify_Pipe_Manager</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Operation</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Accept</name>
    <filename>classACE__POSIX__Asynch__Accept.html</filename>
    <base virtualness="virtual">ACE_Asynch_Accept_Impl</base>
    <base>ACE_POSIX_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_Asynch_Accept</name>
      <anchor>a0</anchor>
      <arglist>(ACE_POSIX_Proactor *posix_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, ACE_HANDLE accept_handle, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Accept</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a5</anchor>
      <arglist>(int flg_notify)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void *</type>
      <name>thread_function</name>
      <anchor>f0</anchor>
      <arglist>(void *reactor)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Reactor</type>
      <name>reactor_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_POSIX_Asynch_Accept_Handler *</type>
      <name>accept_handler_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>grp_id_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_POSIX_Proactor *</type>
      <name>posix_proactor_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Accept_Handler</name>
    <filename>classACE__POSIX__Asynch__Accept__Handler.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function">
      <type></type>
      <name>~ACE_POSIX_Asynch_Accept_Handler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_Asynch_Accept_Handler</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Reactor *reactor, ACE_POSIX_Proactor *posix_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel_uncompleted</name>
      <anchor>a2</anchor>
      <arglist>(int flg_notify)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_accept_call</name>
      <anchor>a3</anchor>
      <arglist>(ACE_POSIX_Asynch_Accept_Result *result)</arglist>
    </member>
    <member kind="function">
      <type>ACE_POSIX_Asynch_Accept_Result *</type>
      <name>deregister_accept_call</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handle_input</name>
      <anchor>a5</anchor>
      <arglist>(ACE_HANDLE fd=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_POSIX_Proactor *</type>
      <name>posix_proactor_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Unbounded_Queue&lt; ACE_POSIX_Asynch_Accept_Result *&gt;</type>
      <name>result_queue_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Accept_Result</name>
    <filename>classACE__POSIX__Asynch__Accept__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Accept_Result_Impl</base>
    <base>ACE_POSIX_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>listen_handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>accept_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Accept_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE listen_handle, ACE_HANDLE accept_handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event, int priority, int signal_number)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Accept_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>listen_handle_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Accept</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Accept_Handler</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Operation</name>
    <filename>classACE__POSIX__Asynch__Operation.html</filename>
    <base virtualness="virtual">ACE_Asynch_Operation_Impl</base>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Operation</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Operation</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Proactor *</type>
      <name>proactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handler *</type>
      <name>handler_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Read_Dgram_Result</name>
    <filename>classACE__POSIX__Asynch__Read__Dgram__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Dgram_Result_Impl</base>
    <base virtualness="virtual">ACE_POSIX_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remote_address</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Addr &amp;addr) const</arglist>
    </member>
    <member kind="function">
      <type>sockaddr *</type>
      <name>saddr</name>
      <anchor>a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Read_Dgram_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, u_long bytes_to_read, int flags, int protocol_family, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Read_Dgram_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_read_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>message_block_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Addr *</type>
      <name>remote_address_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>addr_len_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>flags_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Read_Dgram</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Read_File_Result</name>
    <filename>classACE__POSIX__Asynch__Read__File__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_File_Result_Impl</base>
    <base>ACE_POSIX_Asynch_Read_Stream_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Read_File_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event, int priority, int signal_number)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Read_File_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Read_File</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Read_Stream_Result</name>
    <filename>classACE__POSIX__Asynch__Read__Stream__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Stream_Result_Impl</base>
    <base>ACE_POSIX_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Read_Stream_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event, int priority, int signal_number)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Read_Stream_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Read_Stream</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Result</name>
    <filename>classACE__POSIX__Asynch__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Result_Impl</base>
    <base>aiocb</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Result</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_error</name>
      <anchor>a12</anchor>
      <arglist>(u_long errcode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bytes_transferred</name>
      <anchor>a13</anchor>
      <arglist>(u_long nbytes)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, ACE_HANDLE event, u_long offset, u_long offset_high, int priority, int signal_number)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handler &amp;</type>
      <name>handler_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const void *</type>
      <name>act_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_transferred_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>success_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const void *</type>
      <name>completion_key_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>error_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Timer</name>
    <filename>classACE__POSIX__Asynch__Timer.html</filename>
    <base>ACE_POSIX_Asynch_Result</base>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Timer</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;tv, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Timer</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b2</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>time_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_SIG_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Transmit_File_Result</name>
    <filename>classACE__POSIX__Asynch__Transmit__File__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Transmit_File_Result_Impl</base>
    <base>ACE_POSIX_Asynch_Result</base>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>socket</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>file</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Transmit_File::Header_And_Trailer *</type>
      <name>header_and_trailer</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_per_send</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>flags</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Transmit_File_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE socket, ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, ACE_HANDLE event, int priority, int signal_number)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Transmit_File_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>socket_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Transmit_File::Header_And_Trailer *</type>
      <name>header_and_trailer_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_per_send_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>flags_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Transmit_File</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Asynch_Transmit_Handler</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Transmit_Handler</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Transmit_Handler</name>
    <filename>classACE__POSIX__Asynch__Transmit__Handler.html</filename>
    <base>ACE_Handler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Transmit_Handler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="enumeration">
      <name>ACT</name>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEADER_ACT</name>
      <anchor>t3t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_ACT</name>
      <anchor>t3t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAILER_ACT</name>
      <anchor>t3t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Transmit_Handler</name>
      <anchor>b0</anchor>
      <arglist>(ACE_POSIX_Asynch_Transmit_File_Result *result)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_POSIX_Asynch_Transmit_File_Result *</type>
      <name>result_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>mb_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACT</type>
      <name>header_act_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACT</type>
      <name>data_act_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACT</type>
      <name>trailer_act_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>file_offset_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>file_size_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>bytes_transferred_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Write_Dgram_Result</name>
    <filename>classACE__POSIX__Asynch__Write__Dgram__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Dgram_Result_Impl</base>
    <base>ACE_POSIX_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Write_Dgram_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_write, int flags, const void *act, ACE_HANDLE event, int priority, int signal_number)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Write_Dgram_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_write_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>message_block_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>flags_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Write_Dgram</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Write_File_Result</name>
    <filename>classACE__POSIX__Asynch__Write__File__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_File_Result_Impl</base>
    <base>ACE_POSIX_Asynch_Write_Stream_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Write_File_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event, int priority, int signal_number)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Write_File_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Write_File</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Asynch_Write_Stream_Result</name>
    <filename>classACE__POSIX__Asynch__Write__Stream__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Stream_Result_Impl</base>
    <base>ACE_POSIX_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Asynch_Write_Stream_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, ACE_HANDLE event, int priority, int signal_number)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Asynch_Write_Stream_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_AIOCB_Asynch_Write_Stream</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Proactor</name>
    <filename>classACE__POSIX__Proactor.html</filename>
    <base>ACE_Proactor_Impl</base>
    <member kind="enumeration">
      <name>Proactor_Type</name>
      <anchor>s17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROACTOR_POSIX</name>
      <anchor>s17s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROACTOR_AIOCB</name>
      <anchor>s17s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROACTOR_SIG</name>
      <anchor>s17s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROACTOR_SUN</name>
      <anchor>s17s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SystemType</name>
      <anchor>s18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_UNDEFINED</name>
      <anchor>s18s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_WIN</name>
      <anchor>s18s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_WIN_NT</name>
      <anchor>s18s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_WIN_2000</name>
      <anchor>s18s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_SUN</name>
      <anchor>s18s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_SUN_55</name>
      <anchor>s18s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_SUN_56</name>
      <anchor>s18s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_SUN_57</name>
      <anchor>s18s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_SUN_58</name>
      <anchor>s18s12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_HPUX</name>
      <anchor>s18s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_HPUX_11</name>
      <anchor>s18s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_LINUX</name>
      <anchor>s18s15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS_FREEBSD</name>
      <anchor>s18s16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Proactor_Type</type>
      <name>get_impl_type</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Proactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle, const void *completion_key)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>post_completion</name>
      <anchor>a4</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wake_up_dispatch_threads</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_dispatch_threads</name>
      <anchor>a6</anchor>
      <arglist>(int wait)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>number_of_threads</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>number_of_threads</name>
      <anchor>a8</anchor>
      <arglist>(size_t threads)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Stream_Result_Impl *</type>
      <name>create_asynch_read_stream_result</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Stream_Result_Impl *</type>
      <name>create_asynch_write_stream_result</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_File_Result_Impl *</type>
      <name>create_asynch_read_file_result</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_File_Result_Impl *</type>
      <name>create_asynch_write_file_result</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Dgram_Result_Impl *</type>
      <name>create_asynch_read_dgram_result</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_read, int flags, int protocol_family, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Dgram_Result_Impl *</type>
      <name>create_asynch_write_dgram_result</name>
      <anchor>a15</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_write, int flags, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Accept_Result_Impl *</type>
      <name>create_asynch_accept_result</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE listen_handle, ACE_HANDLE accept_handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Transmit_File_Result_Impl *</type>
      <name>create_asynch_transmit_file_result</name>
      <anchor>a17</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE socket, ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Result_Impl *</type>
      <name>create_asynch_timer</name>
      <anchor>a18</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;tv, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_POSIX_Proactor</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>application_specific_code</name>
      <anchor>b1</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *asynch_result, u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>post_wakeup_completions</name>
      <anchor>b2</anchor>
      <arglist>(int how_many)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handler</type>
      <name>wakeup_handler_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>os_id_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_SIG_Asynch_Accept_Handler</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_SIG_Proactor</name>
    <filename>classACE__POSIX__SIG__Proactor.html</filename>
    <base>ACE_POSIX_AIOCB_Proactor</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_SIG_Proactor</name>
      <anchor>a0</anchor>
      <arglist>(size_t nmaxop=ACE_AIO_DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Proactor_Type</type>
      <name>get_impl_type</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_SIG_Proactor</name>
      <anchor>a2</anchor>
      <arglist>(const sigset_t mask_set, size_t nmaxop=ACE_AIO_DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_SIG_Proactor</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Result_Impl *</type>
      <name>create_asynch_timer</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;tv, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>setup_signal_handler</name>
      <anchor>b0</anchor>
      <arglist>(int signal_number) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>mask_signals</name>
      <anchor>b1</anchor>
      <arglist>(const sigset_t *signals) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>b2</anchor>
      <arglist>(u_long milli_seconds)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>allocate_aio_slot</name>
      <anchor>b3</anchor>
      <arglist>(ACE_POSIX_Asynch_Result *result)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>notify_completion</name>
      <anchor>b4</anchor>
      <arglist>(int sig_num)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>sigset_t</type>
      <name>RT_completion_signals_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_POSIX_SIG_Asynch_Operation</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_POSIX_Wakeup_Completion</name>
    <filename>classACE__POSIX__Wakeup__Completion.html</filename>
    <base>ACE_POSIX_Asynch_Result</base>
    <member kind="function">
      <type></type>
      <name>ACE_POSIX_Wakeup_Completion</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act=0, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_POSIX_Wakeup_Completion</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>a2</anchor>
      <arglist>(u_long bytes_transferred=0, int success=1, const void *completion_key=0, u_long error=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Predefined_Naming_Contexts</name>
    <filename>classACE__Predefined__Naming__Contexts.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>connect</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Registry::Naming_Context &amp;naming_context, HKEY predefined=HKEY_LOCAL_MACHINE, const ACE_TCHAR *machine_name=0)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>is_local_host</name>
      <anchor>f0</anchor>
      <arglist>(const ACE_TCHAR *machine_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Priority_Reactor</name>
    <filename>classACE__Priority__Reactor.html</filename>
    <base>ACE_Select_Reactor_T&lt; ACE_Select_Reactor_Token &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Priority_Reactor</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Handler *=0, ACE_Timer_Queue *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Priority_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, int restart=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Priority_Reactor</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_io_set</name>
      <anchor>b0</anchor>
      <arglist>(int number_of_active_handles, int &amp;number_dispatched, int mask, ACE_Handle_Set &amp;dispatch_mask, ACE_Handle_Set &amp;ready_mask, ACE_EH_PTMF callback)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Unbounded_Queue&lt; ACE_Event_Tuple &gt;</type>
      <name>QUEUE</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_bucket</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Priority_Reactor</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Select_Reactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Priority_Reactor &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Select_Reactor &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QUEUE **</type>
      <name>bucket_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>tuple_allocator_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Proactor</name>
    <filename>classACE__Proactor.html</filename>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_QUEUE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>PROACTOR_EVENT_HOOK</name>
      <anchor>s1</anchor>
      <arglist>)(ACE_Proactor *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Proactor</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Proactor_Impl *implementation=0, int delete_implementation=0, TIMER_QUEUE *tq=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Proactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>proactor_run_event_loop</name>
      <anchor>a3</anchor>
      <arglist>(PROACTOR_EVENT_HOOK=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>proactor_run_event_loop</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;tv, PROACTOR_EVENT_HOOK=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>proactor_end_event_loop</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>proactor_event_loop_done</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>proactor_reset_event_loop</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handle</name>
      <anchor>a8</anchor>
      <arglist>(ACE_HANDLE handle, const void *completion_key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_repeating_timer</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;time, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Handler &amp;handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a13</anchor>
      <arglist>(long timer_id, const void **act=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Time_Value &amp;wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wake_up_dispatch_threads</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_dispatch_threads</name>
      <anchor>a17</anchor>
      <arglist>(int wait)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>number_of_threads</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>number_of_threads</name>
      <anchor>a19</anchor>
      <arglist>(size_t threads)</arglist>
    </member>
    <member kind="function">
      <type>TIMER_QUEUE *</type>
      <name>timer_queue</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timer_queue</name>
      <anchor>a21</anchor>
      <arglist>(TIMER_QUEUE *timer_queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Proactor_Impl *</type>
      <name>implementation</name>
      <anchor>a23</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Stream_Impl *</type>
      <name>create_asynch_read_stream</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Stream_Impl *</type>
      <name>create_asynch_write_stream</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_File_Impl *</type>
      <name>create_asynch_read_file</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_File_Impl *</type>
      <name>create_asynch_write_file</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Accept_Impl *</type>
      <name>create_asynch_accept</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Transmit_File_Impl *</type>
      <name>create_asynch_transmit_file</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Dgram_Impl *</type>
      <name>create_asynch_read_dgram</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Dgram_Impl *</type>
      <name>create_asynch_write_dgram</name>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Stream_Result_Impl *</type>
      <name>create_asynch_read_stream_result</name>
      <anchor>a32</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Stream_Result_Impl *</type>
      <name>create_asynch_write_stream_result</name>
      <anchor>a33</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_File_Result_Impl *</type>
      <name>create_asynch_read_file_result</name>
      <anchor>a34</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_File_Result_Impl *</type>
      <name>create_asynch_write_file_result</name>
      <anchor>a35</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Dgram_Result_Impl *</type>
      <name>create_asynch_read_dgram_result</name>
      <anchor>a36</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_read, int flags, int protocol_family, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Dgram_Result_Impl *</type>
      <name>create_asynch_write_dgram_result</name>
      <anchor>a37</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_write, int flags, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Accept_Result_Impl *</type>
      <name>create_asynch_accept_result</name>
      <anchor>a38</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE listen_handle, ACE_HANDLE accept_handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Transmit_File_Result_Impl *</type>
      <name>create_asynch_transmit_file_result</name>
      <anchor>a39</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE socket, ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Result_Impl *</type>
      <name>create_asynch_timer</name>
      <anchor>a40</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;tv, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Proactor *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(size_t threads=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Proactor *</type>
      <name>instance</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Proactor *proactor, int delete_proactor=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_singleton</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>cleanup</name>
      <anchor>d3</anchor>
      <arglist>(void *instance, void *arg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>run_event_loop</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>run_event_loop</name>
      <anchor>d5</anchor>
      <arglist>(ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>end_event_loop</name>
      <anchor>d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>reset_event_loop</name>
      <anchor>d7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>check_reconfiguration</name>
      <anchor>d8</anchor>
      <arglist>(ACE_Proactor *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_loop_done</name>
      <anchor>d9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>proactor_post_wakeup_completions</name>
      <anchor>b0</anchor>
      <arglist>(int how_many)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>implementation</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Proactor_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>int</type>
      <name>post_wakeup_completions</name>
      <anchor>e0</anchor>
      <arglist>(int how_many)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Proactor_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_implementation_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Proactor_Timer_Handler *</type>
      <name>timer_handler_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Manager</type>
      <name>thr_mgr_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TIMER_QUEUE *</type>
      <name>timer_queue_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_timer_queue_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>sig_atomic_t</type>
      <name>end_event_loop_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>sig_atomic_t</type>
      <name>event_loop_thread_count_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SYNCH_MUTEX</type>
      <name>mutex_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>ACE_Proactor *</type>
      <name>proactor_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>int</type>
      <name>delete_proactor_</name>
      <anchor>q1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_Queue_Iterator_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_QUEUE_ITERATOR</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_List_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_LIST</name>
      <anchor>u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_List_Iterator_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_LIST_ITERATOR</name>
      <anchor>u2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_Heap_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_HEAP</name>
      <anchor>u3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_Heap_Iterator_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_HEAP_ITERATOR</name>
      <anchor>u4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_Wheel_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_WHEEL</name>
      <anchor>u5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_Wheel_Iterator_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_WHEEL_ITERATOR</name>
      <anchor>u6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Proactor</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Proactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Proactor &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Proactor &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Proactor_Timer_Handler</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Proactor_Handle_Timeout_Upcall</name>
    <filename>classACE__Proactor__Handle__Timeout__Upcall.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Proactor_Handle_Timeout_Upcall</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>timeout</name>
      <anchor>a1</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Handler *handler, const void *arg, const ACE_Time_Value &amp;cur_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancellation</name>
      <anchor>a2</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deletion</name>
      <anchor>a3</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Handler *handler, const void *arg)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>proactor</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Proactor &amp;proactor)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Proactor *</type>
      <name>proactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Timer_Queue_T&lt; ACE_Handler *, ACE_Proactor_Handle_Timeout_Upcall, ACE_SYNCH_RECURSIVE_MUTEX &gt;</type>
      <name>TIMER_QUEUE</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Proactor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Proactor_Impl</name>
    <filename>classACE__Proactor__Impl.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Proactor_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handle</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE handle, const void *completion_key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value &amp;wait_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>wake_up_dispatch_threads</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close_dispatch_threads</name>
      <anchor>a6</anchor>
      <arglist>(int wait)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>number_of_threads</name>
      <anchor>a7</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>number_of_threads</name>
      <anchor>a8</anchor>
      <arglist>(size_t threads)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a9</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Read_Stream_Impl *</type>
      <name>create_asynch_read_stream</name>
      <anchor>a10</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Write_Stream_Impl *</type>
      <name>create_asynch_write_stream</name>
      <anchor>a11</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Read_File_Impl *</type>
      <name>create_asynch_read_file</name>
      <anchor>a12</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Write_File_Impl *</type>
      <name>create_asynch_write_file</name>
      <anchor>a13</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Accept_Impl *</type>
      <name>create_asynch_accept</name>
      <anchor>a14</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Transmit_File_Impl *</type>
      <name>create_asynch_transmit_file</name>
      <anchor>a15</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Read_Dgram_Impl *</type>
      <name>create_asynch_read_dgram</name>
      <anchor>a16</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Write_Dgram_Impl *</type>
      <name>create_asynch_write_dgram</name>
      <anchor>a17</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Read_Stream_Result_Impl *</type>
      <name>create_asynch_read_stream_result</name>
      <anchor>a18</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Write_Stream_Result_Impl *</type>
      <name>create_asynch_write_stream_result</name>
      <anchor>a19</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Read_File_Result_Impl *</type>
      <name>create_asynch_read_file_result</name>
      <anchor>a20</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Write_File_Result_Impl *</type>
      <name>create_asynch_write_file_result</name>
      <anchor>a21</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Read_Dgram_Result_Impl *</type>
      <name>create_asynch_read_dgram_result</name>
      <anchor>a22</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_read, int flags, int protocol_family, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Write_Dgram_Result_Impl *</type>
      <name>create_asynch_write_dgram_result</name>
      <anchor>a23</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_write, int flags, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Accept_Result_Impl *</type>
      <name>create_asynch_accept_result</name>
      <anchor>a24</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE listen_handle, ACE_HANDLE accept_handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Transmit_File_Result_Impl *</type>
      <name>create_asynch_transmit_file_result</name>
      <anchor>a25</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE socket, ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Asynch_Result_Impl *</type>
      <name>create_asynch_timer</name>
      <anchor>a26</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;tv, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>post_wakeup_completions</name>
      <anchor>a27</anchor>
      <arglist>(int how_many)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Proactor_Timer_Handler</name>
    <filename>classACE__Proactor__Timer__Handler.html</filename>
    <base>ACE_Task&lt; ACE_NULL_SYNCH &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Proactor_Timer_Handler</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Proactor &amp;proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Proactor_Timer_Handler</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destroy</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Auto_Event</type>
      <name>timer_event_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Proactor &amp;</type>
      <name>proactor_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>shutting_down_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Proactor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Process</name>
    <filename>classACE__Process.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Process</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Process</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>prepare</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Process_Options &amp;options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual pid_t</type>
      <name>spawn</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Process_Options &amp;options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parent</name>
      <anchor>a4</anchor>
      <arglist>(pid_t child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>child</name>
      <anchor>a5</anchor>
      <arglist>(pid_t parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unmanage</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>wait</name>
      <anchor>a7</anchor>
      <arglist>(ACE_exitcode *status=0, int wait_options=0)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>wait</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Time_Value &amp;tv, ACE_exitcode *status=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>kill</name>
      <anchor>a9</anchor>
      <arglist>(int signum=SIGINT)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>terminate</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>getpid</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>gethandle</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>running</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exit_code</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit_code</name>
      <anchor>a15</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_dup_handles</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_passed_handles</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PROCESS_INFORMATION</type>
      <name>process_info</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>PROCESS_INFORMATION</type>
      <name>process_info_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>exit_code_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handle_Set</type>
      <name>handles_passed_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handle_Set</type>
      <name>dup_handles_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Process_Descriptor</name>
    <filename>classACE__Process__Descriptor.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Process_Descriptor</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ACE_Process_Descriptor</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dump</name>
      <anchor>c2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Process *</type>
      <name>process_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Event_Handler *</type>
      <name>exit_notify_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Process_Manager</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Process_Manager</name>
    <filename>classACE__Process__Manager.html</filename>
    <base protection="protected">ACE_Event_Handler</base>
    <member kind="enumvalue">
      <name>DEFAULT_SIZE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Process_Manager</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=ACE_Process_Manager::DEFAULT_SIZE, ACE_Reactor *reactor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(size_t size=DEFAULT_SIZE, ACE_Reactor *r=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Process_Manager</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>spawn</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Process *proc, ACE_Process_Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>spawn</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Process_Options &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>spawn_n</name>
      <anchor>a6</anchor>
      <arglist>(size_t n, ACE_Process_Options &amp;options, pid_t *child_pids=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Time_Value &amp;timeout=ACE_Time_Value::max_time)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>wait</name>
      <anchor>a8</anchor>
      <arglist>(pid_t pid, const ACE_Time_Value &amp;timeout, ACE_exitcode *status=0)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>wait</name>
      <anchor>a9</anchor>
      <arglist>(pid_t pid, ACE_exitcode *status=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reap</name>
      <anchor>a10</anchor>
      <arglist>(pid_t pid=-1, ACE_exitcode *stat_loc=0, int options=WNOHANG)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_handler</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Event_Handler *event_handler, pid_t pid=ACE_INVALID_PID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a12</anchor>
      <arglist>(pid_t pid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>terminate</name>
      <anchor>a13</anchor>
      <arglist>(pid_t pid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>terminate</name>
      <anchor>a14</anchor>
      <arglist>(pid_t pid, int sig)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>managed</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Process_Manager *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Process_Manager *</type>
      <name>instance</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Process_Manager *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_singleton</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>cleanup</name>
      <anchor>d3</anchor>
      <arglist>(void *instance, void *arg)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>b0</anchor>
      <arglist>(int signum, siginfo_t *=0, ucontext_t *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>resize</name>
      <anchor>c0</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>find_proc</name>
      <anchor>c1</anchor>
      <arglist>(pid_t process_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>find_proc</name>
      <anchor>c2</anchor>
      <arglist>(ACE_HANDLE process_handle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>insert_proc</name>
      <anchor>c3</anchor>
      <arglist>(ACE_Process *process)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>append_proc</name>
      <anchor>c4</anchor>
      <arglist>(ACE_Process *process)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>remove_proc</name>
      <anchor>c5</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>notify_proc_handler</name>
      <anchor>c6</anchor>
      <arglist>(size_t n, ACE_exitcode status)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Process_Descriptor *</type>
      <name>process_table_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>max_process_table_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>current_count_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Event_Handler *</type>
      <name>default_exit_handler_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Recursive_Thread_Mutex</type>
      <name>lock_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Process_Manager *</type>
      <name>instance_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>delete_instance_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Process_Control</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Process_Mutex</name>
    <filename>classACE__Process__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Process_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Process_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(const wchar_t *name, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Process_Mutex</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_mutex_t &amp;</type>
      <name>lock</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Mutex</type>
      <name>lock_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Process_Options</name>
    <filename>classACE__Process__Options.html</filename>
    <member kind="enumvalue">
      <name>DEFAULT_COMMAND_LINE_BUF_LEN</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_EXEC</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Process_Options</name>
      <anchor>a0</anchor>
      <arglist>(int inherit_environment=1, int command_line_buf_len=DEFAULT_COMMAND_LINE_BUF_LEN, int env_buf_len=ENVIRONMENT_BUFFER, int max_env_args=MAX_ENVIRONMENT_ARGS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Process_Options</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_handles</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE std_in, ACE_HANDLE std_out=ACE_INVALID_HANDLE, ACE_HANDLE std_err=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setenv</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *format,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setenv</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *variable_name, const ACE_TCHAR *format,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setenv</name>
      <anchor>a5</anchor>
      <arglist>(ACE_TCHAR *envp[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>working_directory</name>
      <anchor>a6</anchor>
      <arglist>(const char *wd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>working_directory</name>
      <anchor>a7</anchor>
      <arglist>(const wchar_t *wd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>command_line</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR *format,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>command_line</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_ANTI_TCHAR *format,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>command_line</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_TCHAR *const argv[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process_name</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>process_name</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>creation_flags</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>creation_flags</name>
      <anchor>a14</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *</type>
      <name>working_directory</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *</type>
      <name>command_line_buf</name>
      <anchor>a16</anchor>
      <arglist>(int *max_len=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *const *</type>
      <name>command_line_argv</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *</type>
      <name>env_buf</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>getgroup</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>setgroup</name>
      <anchor>a20</anchor>
      <arglist>(pid_t pgrp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handle_inheritence</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_inheritence</name>
      <anchor>a22</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pass_handle</name>
      <anchor>a23</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dup_handles</name>
      <anchor>a24</anchor>
      <arglist>(ACE_Handle_Set &amp;set) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passed_handles</name>
      <anchor>a25</anchor>
      <arglist>(ACE_Handle_Set &amp;set) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>avoid_zombies</name>
      <anchor>a26</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>avoid_zombies</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEXT_STARTUPINFO *</type>
      <name>startup_info</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>get_process_attributes</name>
      <anchor>a29</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>set_process_attributes</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>get_thread_attributes</name>
      <anchor>a31</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>set_thread_attributes</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_COMMAND_LINE_OPTIONS</name>
      <anchor>t3t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENVIRONMENT_BUFFER</name>
      <anchor>t3t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_ENVIRONMENT_ARGS</name>
      <anchor>t3t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>setenv_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_TCHAR *assignment, int len)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>inherit_environment</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>inherit_environment_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>creation_flags_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>avoid_zombies_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>environment_inherited_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TEXT_STARTUPINFO</type>
      <name>startup_info_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>BOOL</type>
      <name>handle_inheritence_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>process_attributes_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>LPSECURITY_ATTRIBUTES</type>
      <name>thread_attributes_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>SECURITY_ATTRIBUTES</type>
      <name>security_buf1_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>SECURITY_ATTRIBUTES</type>
      <name>security_buf2_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>set_handles_called_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>environment_buf_index_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>environment_argv_index_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>environment_buf_</name>
      <anchor>n13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>environment_buf_len_</name>
      <anchor>n14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR **</type>
      <name>environment_argv_</name>
      <anchor>n15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>max_environment_args_</name>
      <anchor>n16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>max_environ_argv_index_</name>
      <anchor>n17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR</type>
      <name>working_directory_</name>
      <anchor>n18</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>command_line_argv_calculated_</name>
      <anchor>n19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>command_line_buf_</name>
      <anchor>n20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>command_line_buf_len_</name>
      <anchor>n21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>command_line_argv_</name>
      <anchor>n22</anchor>
      <arglist>[MAX_COMMAND_LINE_OPTIONS]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>pid_t</type>
      <name>process_group_</name>
      <anchor>n23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handle_Set</type>
      <name>handles_passed_</name>
      <anchor>n24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handle_Set</type>
      <name>dup_handles_</name>
      <anchor>n25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR</type>
      <name>process_name_</name>
      <anchor>n26</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Process_Semaphore</name>
    <filename>classACE__Process__Semaphore.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Process_Semaphore</name>
      <anchor>a0</anchor>
      <arglist>(u_int count=1, const ACE_TCHAR *name=0, void *=0, int max=0x7FFFFFFF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Process_Semaphore</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_sema_t &amp;</type>
      <name>lock</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Semaphore</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Process_Strategy</name>
    <filename>classACE__Process__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Process_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(size_t n_processes=1, ACE_Event_Handler *acceptor=0, ACE_Reactor *=0, int avoid_zombies=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(size_t n_processes=1, ACE_Event_Handler *acceptor=0, ACE_Reactor *=0, int avoid_zombies=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Process_Strategy</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>a3</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>inherited</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>n_processes_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Event_Handler *</type>
      <name>acceptor_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Profile_Timer</name>
    <filename>classACE__Profile__Timer.html</filename>
    <member kind="typedef">
      <type>ACE_Rusage</type>
      <name>Rusage</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Profile_Timer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Profile_Timer</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stop</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elapsed_time</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Elapsed_Time &amp;et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elapsed_rusage</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Profile_Timer::Rusage &amp;rusage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_rusage</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Profile_Timer::Rusage &amp;rusage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute_times</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Elapsed_Time &amp;et)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Profile_Timer::Rusage</type>
      <name>begin_usage_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Profile_Timer::Rusage</type>
      <name>end_usage_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Profile_Timer::Rusage</type>
      <name>last_usage_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_High_Res_Timer</type>
      <name>timer_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Profile_Timer::ACE_Elapsed_Time</name>
    <filename>classACE__Profile__Timer_1_1ACE__Elapsed__Time.html</filename>
    <member kind="variable">
      <type>ACE_timer_t</type>
      <name>real_time</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_timer_t</type>
      <name>user_time</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_timer_t</type>
      <name>system_time</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Protocol_Info</name>
    <filename>structACE__Protocol__Info.html</filename>
    <member kind="variable">
      <type>u_long</type>
      <name>dwServiceFlags1</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iAddressFamily</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iProtocol</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>szProtocol</name>
      <anchor>m3</anchor>
      <arglist>[255+1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_QoS</name>
    <filename>classACE__QoS.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_QoS</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Flow_Spec *</type>
      <name>sending_flowspec</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sending_flowspec</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Flow_Spec *fs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Flow_Spec *</type>
      <name>receiving_flowspec</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receiving_flowspec</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Flow_Spec *fs)</arglist>
    </member>
    <member kind="function">
      <type>iovec</type>
      <name>provider_specific</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>provider_specific</name>
      <anchor>a6</anchor>
      <arglist>(const iovec &amp;ps)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Flow_Spec *</type>
      <name>sending_flowspec_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Flow_Spec *</type>
      <name>receiving_flowspec_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_QoS_Params</name>
    <filename>classACE__QoS__Params.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_QoS_Params</name>
      <anchor>a0</anchor>
      <arglist>(iovec *caller_data=0, iovec *callee_data=0, ACE_QoS *socket_qos=0, ACE_QoS *group_socket_qos=0, u_long flags=0)</arglist>
    </member>
    <member kind="function">
      <type>iovec *</type>
      <name>caller_data</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>caller_data</name>
      <anchor>a2</anchor>
      <arglist>(iovec *)</arglist>
    </member>
    <member kind="function">
      <type>iovec *</type>
      <name>callee_data</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callee_data</name>
      <anchor>a4</anchor>
      <arglist>(iovec *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_QoS *</type>
      <name>socket_qos</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socket_qos</name>
      <anchor>a6</anchor>
      <arglist>(ACE_QoS *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_QoS *</type>
      <name>group_socket_qos</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>group_socket_qos</name>
      <anchor>a8</anchor>
      <arglist>(ACE_QoS *)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>flags</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flags</name>
      <anchor>a10</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iovec *</type>
      <name>caller_data_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iovec *</type>
      <name>callee_data_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_QoS *</type>
      <name>socket_qos_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_QoS *</type>
      <name>group_socket_qos_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>flags_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_QtReactor</name>
    <filename>classACE__QtReactor.html</filename>
    <base>QObject</base>
    <base>ACE_Select_Reactor_T&lt; ACE_Select_Reactor_Token &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_QtReactor</name>
      <anchor>a0</anchor>
      <arglist>(QApplication *qapp=NULL, size_t size=DEFAULT_SIZE, int restart=0, ACE_Sig_Handler *handler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_QtReactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qapplication</name>
      <anchor>a2</anchor>
      <arglist>(QApplication *qapp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Event_Handler *handler, const void *arg, const ACE_Time_Value &amp;delay_time, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Event_Handler *handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a5</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Map_Manager&lt; ACE_HANDLE, QSocketNotifier *, ACE_Null_Mutex &gt;</type>
      <name>MAP</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_for_multiple_events</name>
      <anchor>b4</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;handle_set, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>QtWaitForMultipleEvents</name>
      <anchor>b5</anchor>
      <arglist>(int width, ACE_Select_Reactor_Handle_Set &amp;wait_set, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>QApplication *</type>
      <name>qapp_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MAP</type>
      <name>read_notifier_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MAP</type>
      <name>write_notifier_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>MAP</type>
      <name>exception_notifier_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>QTimer *</type>
      <name>qtime_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="slot" protection="protected">
      <type>void</type>
      <name>read_event</name>
      <anchor>i0</anchor>
      <arglist>(int FD)</arglist>
    </member>
    <member kind="slot" protection="protected">
      <type>void</type>
      <name>write_event</name>
      <anchor>i1</anchor>
      <arglist>(int FD)</arglist>
    </member>
    <member kind="slot" protection="protected">
      <type>void</type>
      <name>exception_event</name>
      <anchor>i2</anchor>
      <arglist>(int FD)</arglist>
    </member>
    <member kind="slot" protection="protected">
      <type>void</type>
      <name>timeout_event</name>
      <anchor>i3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_timeout</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_QtReactor</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_QtReactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_QtReactor &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_QtReactor &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RB_Tree</name>
    <filename>classACE__RB__Tree.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_RB_Tree_Base</base>
    <member kind="typedef">
      <type>EXT_ID</type>
      <name>KEY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>INT_ID</type>
      <name>VALUE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt;</type>
      <name>ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>ITERATOR</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>REVERSE_ITERATOR</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>iterator</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>reverse_iterator</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_RB_Tree</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_RB_Tree</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_RB_Tree&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;rbt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_RB_Tree</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const EXT_ID &amp;item, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a6</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a7</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trybind</name>
      <anchor>a8</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a9</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a10</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a11</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a12</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, INT_ID &amp;old_int_id, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a13</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a14</anchor>
      <arglist>(const EXT_ID &amp;ext_id, const INT_ID &amp;int_id, EXT_ID &amp;old_ext_id, INT_ID &amp;old_int_id, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a15</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a16</anchor>
      <arglist>(const EXT_ID &amp;ext_id, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a17</anchor>
      <arglist>(const EXT_ID &amp;ext_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a18</anchor>
      <arglist>(const EXT_ID &amp;ext_id, INT_ID &amp;int_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a19</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *entry)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_RB_Tree&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;rbt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lessthan</name>
      <anchor>a22</anchor>
      <arglist>(const EXT_ID &amp;k1, const EXT_ID &amp;k2)</arglist>
    </member>
    <member kind="function">
      <type>ACE_LOCK &amp;</type>
      <name>mutex</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a24</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>begin</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>end</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>rbegin</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>rend</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_invariant</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>INT_ID *</type>
      <name>find</name>
      <anchor>a30</anchor>
      <arglist>(const EXT_ID &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>INT_ID *</type>
      <name>insert</name>
      <anchor>a31</anchor>
      <arglist>(const EXT_ID &amp;k, const INT_ID &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a32</anchor>
      <arglist>(const EXT_ID &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>test_invariant_recurse</name>
      <anchor>b0</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x, int &amp;expected_black_height, int measured_black_height)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>RB_rotate_right</name>
      <anchor>b1</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>RB_rotate_left</name>
      <anchor>b2</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>RB_delete_fixup</name>
      <anchor>b3</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *parent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>RB_tree_successor</name>
      <anchor>b4</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>RB_tree_predecessor</name>
      <anchor>b5</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>RB_tree_minimum</name>
      <anchor>b6</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>RB_tree_maximum</name>
      <anchor>b7</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>find_node</name>
      <anchor>b8</anchor>
      <arglist>(const EXT_ID &amp;k, ACE_RB_Tree_Base::RB_SearchResult &amp;result)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>RB_rebalance</name>
      <anchor>b9</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>close_i</name>
      <anchor>b10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>find_i</name>
      <anchor>b11</anchor>
      <arglist>(const EXT_ID &amp;ext_id, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>INT_ID *</type>
      <name>insert_i</name>
      <anchor>b12</anchor>
      <arglist>(const EXT_ID &amp;k, const INT_ID &amp;t)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>insert_i</name>
      <anchor>b13</anchor>
      <arglist>(const EXT_ID &amp;k, const INT_ID &amp;t, ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>remove_i</name>
      <anchor>b14</anchor>
      <arglist>(const EXT_ID &amp;k, INT_ID &amp;i)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>remove_i</name>
      <anchor>b15</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *z)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_i</name>
      <anchor>b16</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *node) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_node_i</name>
      <anchor>b17</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; &amp;node) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>root_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>COMPARE_KEYS</type>
      <name>compare_keys_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>current_size_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_RB_Tree_Iterator_Base&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RB_Tree_Base</name>
    <filename>classACE__RB__Tree__Base.html</filename>
    <member kind="enumeration">
      <name>RB_SearchResult</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RB_Tree_Iterator</name>
    <filename>classACE__RB__Tree__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_RB_Tree_Iterator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_RB_Tree_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_RB_Tree_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_RB_Tree&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;tree, int set_first=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_RB_Tree_Iterator</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a9</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;next_entry) const</arglist>
    </member>
    <member kind="function">
      <type>EXT_ID *</type>
      <name>key</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>INT_ID *</type>
      <name>item</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>previous</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_done</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RB_Tree_Iterator_Base</name>
    <filename>classACE__RB__Tree__Iterator__Base.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_RB_Tree_Iterator_Base&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; &amp;</type>
      <name>operator *</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_RB_Tree&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>tree</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_RB_Tree_Iterator_Base&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_RB_Tree_Iterator_Base&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_RB_Tree_Iterator_Base</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_RB_Tree_Iterator_Base</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_RB_Tree&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;tree, int set_first)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_RB_Tree_Iterator_Base</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_RB_Tree_Iterator_Base&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;iter)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~ACE_RB_Tree_Iterator_Base</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>forward_i</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>reverse_i</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_i</name>
      <anchor>b6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const ACE_RB_Tree&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; *</type>
      <name>tree_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>node_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RB_Tree_Node</name>
    <filename>classACE__RB__Tree__Node.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <base>ACE_RB_Tree_Node_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_RB_Tree_Node</name>
      <anchor>a0</anchor>
      <arglist>(const EXT_ID &amp;k, const INT_ID &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_RB_Tree_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>EXT_ID &amp;</type>
      <name>key</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>INT_ID &amp;</type>
      <name>item</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchor>a4</anchor>
      <arglist>(RB_Tree_Node_Color c)</arglist>
    </member>
    <member kind="function">
      <type>RB_Tree_Node_Color</type>
      <name>color</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>parent</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parent</name>
      <anchor>a7</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *p)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>left</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>left</name>
      <anchor>a9</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *l)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>right</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>right</name>
      <anchor>a11</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *r)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EXT_ID</type>
      <name>k_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INT_ID</type>
      <name>t_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RB_Tree_Node_Color</type>
      <name>color_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>parent_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>left_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *</type>
      <name>right_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RB_Tree_Node_Base</name>
    <filename>classACE__RB__Tree__Node__Base.html</filename>
    <member kind="enumeration">
      <name>RB_Tree_Node_Color</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RED</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLACK</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RB_Tree_Reverse_Iterator</name>
    <filename>classACE__RB__Tree__Reverse__Iterator.html</filename>
    <templarg>EXT_ID</templarg>
    <templarg>INT_ID</templarg>
    <templarg>COMPARE_KEYS</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_RB_Tree_Iterator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_RB_Tree_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_RB_Tree_Reverse_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_RB_Tree&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;tree, int set_last=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_RB_Tree_Reverse_Iterator</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator++</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_RB_Tree_Reverse_Iterator&lt; EXT_ID, INT_ID, COMPARE_KEYS, ACE_LOCK &gt;</type>
      <name>operator--</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a9</anchor>
      <arglist>(ACE_RB_Tree_Node&lt; EXT_ID, INT_ID &gt; *&amp;next_entry) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reactive_MEM_IO</name>
    <filename>classACE__Reactive__MEM__IO.html</filename>
    <base>ACE_MEM_SAP</base>
    <member kind="function">
      <type></type>
      <name>ACE_Reactive_MEM_IO</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Reactive_MEM_IO</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE handle, const ACE_TCHAR *name, MALLOC_OPTIONS *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recv_buf</name>
      <anchor>a3</anchor>
      <arglist>(ACE_MEM_SAP_Node *&amp;buf, int flags, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send_buf</name>
      <anchor>a4</anchor>
      <arglist>(ACE_MEM_SAP_Node *buf, int flags, const ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>get_buf_len</name>
      <anchor>a5</anchor>
      <arglist>(const off_t off, ACE_MEM_SAP_Node *&amp;buf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reactive_Strategy</name>
    <filename>classACE__Reactive__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Reactive_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Reactive_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Reactor *reactor, ACE_Reactor_Mask=ACE_Event_Handler::READ_MASK, int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Reactor *reactor, ACE_Reactor_Mask=ACE_Event_Handler::READ_MASK, int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Reactive_Strategy</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>a4</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>inherited</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor_Mask</type>
      <name>mask_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reactor</name>
    <filename>classACE__Reactor.html</filename>
    <member kind="typedef">
      <type>int(*</type>
      <name>REACTOR_EVENT_HOOK</name>
      <anchor>s0</anchor>
      <arglist>)(ACE_Reactor *)</arglist>
    </member>
    <member kind="enumvalue">
      <name>GET_MASK</name>
      <anchor>s5s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_MASK</name>
      <anchor>s5s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_MASK</name>
      <anchor>s5s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLR_MASK</name>
      <anchor>s5s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run_reactor_event_loop</name>
      <anchor>a0</anchor>
      <arglist>(REACTOR_EVENT_HOOK=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run_alertable_reactor_event_loop</name>
      <anchor>a1</anchor>
      <arglist>(REACTOR_EVENT_HOOK=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run_reactor_event_loop</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value &amp;tv, REACTOR_EVENT_HOOK=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run_alertable_reactor_event_loop</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value &amp;tv, REACTOR_EVENT_HOOK=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>end_reactor_event_loop</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reactor_event_loop_done</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_reactor_event_loop</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Reactor</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Reactor_Impl *implementation=0, int delete_implementation=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Reactor</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a9</anchor>
      <arglist>(size_t max_number_of_handles, int restart=0, ACE_Sig_Handler *signal_handler=0, ACE_Timer_Queue *timer_queue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_sig_handler</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Sig_Handler *signal_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_timer_queue</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Timer_Queue *tq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>timer_queue</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Timer_Queue *tq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Queue *</type>
      <name>timer_queue</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>work_pending</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_Time_Value &amp;max_wait_time=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a17</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a18</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a19</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a20</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a21</anchor>
      <arglist>(ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a22</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_HANDLE event_handle=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a23</anchor>
      <arglist>(ACE_HANDLE event_handle, ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a24</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a25</anchor>
      <arglist>(int signum, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0, ACE_Event_Handler **old_sh=0, ACE_Sig_Action *old_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a26</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a27</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a28</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a29</anchor>
      <arglist>(const ACE_Handle_Set &amp;handle_set, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a30</anchor>
      <arglist>(int signum, ACE_Sig_Action *new_disp, ACE_Sig_Action *old_disp=0, int sigkey=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a31</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a32</anchor>
      <arglist>(ACE_Event_Handler *event_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a33</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a34</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handlers</name>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a36</anchor>
      <arglist>(ACE_Event_Handler *event_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a37</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a38</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handlers</name>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resumable_handler</name>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a41</anchor>
      <arglist>(ACE_Event_Handler *event_handler, const void *arg, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_timer_interval</name>
      <anchor>a42</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a43</anchor>
      <arglist>(ACE_Event_Handler *event_handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a44</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a45</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask masks_to_be_added)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a46</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask masks_to_be_added)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a47</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask masks_to_be_cleared)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a48</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask masks_to_be_cleared)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a49</anchor>
      <arglist>(ACE_Event_Handler *event_handler=0, ACE_Reactor_Mask mask=ACE_Event_Handler::EXCEPT_MASK, ACE_Time_Value *tv=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>max_notify_iterations</name>
      <anchor>a50</anchor>
      <arglist>(int iterations)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>max_notify_iterations</name>
      <anchor>a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_pending_notifications</name>
      <anchor>a52</anchor>
      <arglist>(ACE_Event_Handler *, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a53</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Event_Handler **event_handler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a54</anchor>
      <arglist>(int signum, ACE_Event_Handler **event_handler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>initialized</name>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>size</name>
      <anchor>a56</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock &amp;</type>
      <name>lock</name>
      <anchor>a57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wakeup_all_threads</name>
      <anchor>a58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a59</anchor>
      <arglist>(ACE_thread_t new_owner, ACE_thread_t *old_owner=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a60</anchor>
      <arglist>(ACE_thread_t *owner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>requeue_position</name>
      <anchor>a61</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>requeue_position</name>
      <anchor>a62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a64</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a65</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a66</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a67</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a68</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>implementation</name>
      <anchor>a69</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>current_info</name>
      <anchor>a70</anchor>
      <arglist>(ACE_HANDLE handle, size_t &amp;msg_size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>uses_event_associations</name>
      <anchor>a71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a72</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Reactor *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Reactor *</type>
      <name>instance</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Reactor *, int delete_reactor=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_singleton</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>run_event_loop</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>run_alertable_event_loop</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>run_event_loop</name>
      <anchor>d5</anchor>
      <arglist>(ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>run_alertable_event_loop</name>
      <anchor>d6</anchor>
      <arglist>(ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>end_event_loop</name>
      <anchor>d7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>event_loop_done</name>
      <anchor>d8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>reset_event_loop</name>
      <anchor>d9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>check_reconfiguration</name>
      <anchor>d10</anchor>
      <arglist>(ACE_Reactor *)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>implementation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Reactor_Impl *implementation)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Reactor</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Reactor &amp;)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Reactor &amp;</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_Reactor &amp;)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor_Impl *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_implementation_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>int</type>
      <name>delete_reactor_</name>
      <anchor>q1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reactor_Impl</name>
    <filename>classACE__Reactor__Impl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Reactor_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, int restart=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0, int disable_notify_pipe=0, ACE_Reactor_Notify *=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>current_info</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE, size_t &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_sig_handler</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Sig_Handler *signal_handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_timer_queue</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Timer_Queue *tq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>timer_queue</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Timer_Queue *tq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Timer_Queue *</type>
      <name>timer_queue</name>
      <anchor>a6</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>work_pending</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Time_Value &amp;max_wait_time=ACE_Time_Value::zero)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>deactivated</name>
      <anchor>a13</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchor>a14</anchor>
      <arglist>(int do_stop)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a15</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a16</anchor>
      <arglist>(ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a17</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_HANDLE event_handle=ACE_INVALID_HANDLE)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a18</anchor>
      <arglist>(ACE_HANDLE event_handle, ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a19</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a20</anchor>
      <arglist>(int signum, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0, ACE_Event_Handler **old_sh=0, ACE_Sig_Action *old_disp=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a22</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a23</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a24</anchor>
      <arglist>(const ACE_Handle_Set &amp;handle_set, ACE_Reactor_Mask mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a25</anchor>
      <arglist>(int signum, ACE_Sig_Action *new_disp, ACE_Sig_Action *old_disp=0, int sigkey=-1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a26</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a27</anchor>
      <arglist>(ACE_Event_Handler *event_handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a28</anchor>
      <arglist>(ACE_HANDLE handle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a29</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>suspend_handlers</name>
      <anchor>a30</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a31</anchor>
      <arglist>(ACE_Event_Handler *event_handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a32</anchor>
      <arglist>(ACE_HANDLE handle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a33</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resume_handlers</name>
      <anchor>a34</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resumable_handler</name>
      <anchor>a35</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>uses_event_associations</name>
      <anchor>a36</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a37</anchor>
      <arglist>(ACE_Event_Handler *event_handler, const void *arg, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>reset_timer_interval</name>
      <anchor>a38</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a39</anchor>
      <arglist>(ACE_Event_Handler *event_handler, int dont_call_handle_close=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a40</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a41</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask masks_to_be_added)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a42</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask masks_to_be_added)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a43</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask masks_to_be_cleared)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a44</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask masks_to_be_cleared)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a45</anchor>
      <arglist>(ACE_Event_Handler *event_handler=0, ACE_Reactor_Mask mask=ACE_Event_Handler::EXCEPT_MASK, ACE_Time_Value *=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>max_notify_iterations</name>
      <anchor>a46</anchor>
      <arglist>(int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>max_notify_iterations</name>
      <anchor>a47</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>purge_pending_notifications</name>
      <anchor>a48</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a49</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Event_Handler **event_handler=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a50</anchor>
      <arglist>(int signum, ACE_Event_Handler **=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initialized</name>
      <anchor>a51</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchor>a52</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Lock &amp;</type>
      <name>lock</name>
      <anchor>a53</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>wakeup_all_threads</name>
      <anchor>a54</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a55</anchor>
      <arglist>(ACE_thread_t new_owner, ACE_thread_t *old_owner=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a56</anchor>
      <arglist>(ACE_thread_t *owner)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a57</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a58</anchor>
      <arglist>(int r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>requeue_position</name>
      <anchor>a59</anchor>
      <arglist>(int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>requeue_position</name>
      <anchor>a60</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a61</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask, int ops)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a62</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, int ops)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a63</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask, int ops)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a64</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask, int ops)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a65</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reactor_Notification_Strategy</name>
    <filename>classACE__Reactor__Notification__Strategy.html</filename>
    <base>ACE_Notification_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Reactor_Notification_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reactor *reactor, ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Reactor_Notification_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Event_Handler *, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reactor *</type>
      <name>reactor</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reactor</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Reactor *r)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reactor_Notify</name>
    <filename>classACE__Reactor__Notify.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reactor_Impl *, ACE_Timer_Queue *timer_queue=0, int disable_notify=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>notify</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::EXCEPT_MASK, ACE_Time_Value *=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch_notifications</name>
      <anchor>a3</anchor>
      <arglist>(int &amp;number_of_active_handles, ACE_Handle_Set &amp;rd_mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_HANDLE</type>
      <name>notify_handle</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_dispatchable</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Notification_Buffer &amp;buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch_notify</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Notification_Buffer &amp;buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read_notify_pipe</name>
      <anchor>a7</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Notification_Buffer &amp;buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>max_notify_iterations</name>
      <anchor>a8</anchor>
      <arglist>(int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>max_notify_iterations</name>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>purge_pending_notifications</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Read_Buffer</name>
    <filename>classACE__Read__Buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Read_Buffer</name>
      <anchor>a0</anchor>
      <arglist>(FILE *fp, int close_on_delete=0, ACE_Allocator *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Read_Buffer</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE handle, int close_on_delete=0, ACE_Allocator *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Read_Buffer</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>read</name>
      <anchor>a3</anchor>
      <arglist>(int terminator=EOF, int search=&apos;\n&apos;, int replace=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>replaced</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>alloc</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>char *</type>
      <name>rec_read</name>
      <anchor>c0</anchor>
      <arglist>(int term, int search, int replace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Read_Buffer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Read_Buffer</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Read_Buffer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>occurrences_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>stream_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>close_on_delete_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Read_Guard</name>
    <filename>classACE__Read__Guard.html</filename>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Guard</base>
    <member kind="function">
      <type></type>
      <name>ACE_Read_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_LOCK &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Read_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_LOCK &amp;m, int block)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Read_Guard&lt; ACE_Null_Mutex &gt;</name>
    <filename>classACE__Read__Guard_3_01ACE__Null__Mutex_01_4.html</filename>
    <base>ACE_Guard&lt; ACE_Null_Mutex &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Read_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Null_Mutex &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Read_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Null_Mutex &amp;m, int blocked)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Recursive_Thread_Mutex</name>
    <filename>classACE__Recursive__Thread__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Recursive_Thread_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name=0, ACE_mutexattr_t *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Recursive_Thread_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_thread_t</type>
      <name>get_thread_id</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_nesting_level</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>set_thread_id</name>
      <anchor>b0</anchor>
      <arglist>(ACE_thread_t t)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_recursive_thread_mutex_t</type>
      <name>recursive_mutex_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>removed_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Recursive_Thread_Mutex &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Recursive_Thread_Mutex</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Recursive_Thread_Mutex &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_recursive_thread_mutex_t</name>
    <filename>classACE__recursive__thread__mutex__t.html</filename>
    <member kind="variable">
      <type>ACE_thread_mutex_t</type>
      <name>nesting_mutex_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_cond_t</type>
      <name>lock_available_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nesting_level_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_thread_t</type>
      <name>owner_id_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Recyclable</name>
    <filename>classACE__Recyclable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Recyclable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Recyclable_State</type>
      <name>recycle_state</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recycle_state</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Recyclable_State new_state)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Recyclable</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Recyclable_State initial_state)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Recyclable_State</type>
      <name>recycle_state_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Recyclable_Handler_Caching_Utility</name>
    <filename>classACE__Recyclable__Handler__Caching__Utility.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <templarg>ITERATOR</templarg>
    <templarg>ATTRIBUTES</templarg>
    <member kind="typedef">
      <type>ACE_Recyclable_Handler_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY_BASE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Recyclable_Handler_Caching_Utility</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt; *cleanup_strategy=0, int delete_cleanup_strategy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Recyclable_Handler_Caching_Utility</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clear_cache</name>
      <anchor>a2</anchor>
      <arglist>(CONTAINER &amp;container, double purge_percent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>minimum</name>
      <anchor>b0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *&amp;key_to_remove, VALUE *&amp;value_to_remove)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CLEANUP_STRATEGY_BASE *</type>
      <name>cleanup_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_cleanup_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ARHUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ARHUTIL</name>
      <anchor>c1</anchor>
      <arglist>(const ARHUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Recyclable_Handler_Cleanup_Strategy</name>
    <filename>classACE__Recyclable__Handler__Cleanup__Strategy.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <base>ACE_Cleanup_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *key, VALUE *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Recycling_Strategy</name>
    <filename>classACE__Recycling__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Recycling_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>assign_recycler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *svc_handler, ACE_Connection_Recycling_Strategy *recycler, const void *recycling_act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>prepare_for_recycling</name>
      <anchor>a2</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Refcountable</name>
    <filename>classACE__Refcountable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Refcountable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>increment</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decrement</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>refcount</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Refcountable</name>
      <anchor>b0</anchor>
      <arglist>(int refcount)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>refcount_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Refcounted_Auto_Ptr</name>
    <filename>classACE__Refcounted__Auto__Ptr.html</filename>
    <templarg>X</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Refcounted_Auto_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Refcounted_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Refcounted_Auto_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Refcounted_Auto_Ptr</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Refcounted_Auto_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Refcounted_Auto_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Refcounted_Auto_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>release</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a9</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>get</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>null</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt;</type>
      <name>AUTO_REFCOUNTED_PTR_REP</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>AUTO_REFCOUNTED_PTR_REP *</type>
      <name>rep_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Refcounted_Auto_Ptr_Rep</name>
    <filename>classACE__Refcounted__Auto__Ptr__Rep.html</filename>
    <templarg>X</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function" protection="protected">
      <type>X *</type>
      <name>release</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchor>c1</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>X *</type>
      <name>get</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>count</name>
      <anchor>c3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>null</name>
      <anchor>c4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Refcounted_Auto_Ptr_Rep</name>
      <anchor>c5</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ACE_Refcounted_Auto_Ptr_Rep</name>
      <anchor>c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt; *</type>
      <name>internal_create</name>
      <anchor>f0</anchor>
      <arglist>(X *p)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt; *</type>
      <name>create</name>
      <anchor>f1</anchor>
      <arglist>(X *p)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt; *</type>
      <name>attach</name>
      <anchor>f2</anchor>
      <arglist>(ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt; *&amp;rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>detach</name>
      <anchor>f3</anchor>
      <arglist>(ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt; *&amp;rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>assign</name>
      <anchor>f4</anchor>
      <arglist>(ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt; *&amp;rep, ACE_Refcounted_Auto_Ptr_Rep&lt; X, ACE_LOCK &gt; *new_rep)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Auto_Basic_Ptr&lt; X &gt;</type>
      <name>ptr_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ref_count_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Refcounted_Auto_Ptr&lt; X, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Refcounted_Hash_Recyclable</name>
    <filename>classACE__Refcounted__Hash__Recyclable.html</filename>
    <templarg>T</templarg>
    <base>ACE_Refcountable</base>
    <base>ACE_Hashable</base>
    <base>ACE_Recyclable</base>
    <member kind="function">
      <type></type>
      <name>ACE_Refcounted_Hash_Recyclable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Refcounted_Hash_Recyclable</name>
      <anchor>a1</anchor>
      <arglist>(const T &amp;t, int refcount=0, ACE_Recyclable_State state=ACE_RECYCLABLE_UNKNOWN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Refcounted_Hash_Recyclable</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Refcounted_Hash_Recyclable&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Refcounted_Hash_Recyclable&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>subject</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="public">
      <type>u_long</type>
      <name>hash_i</name>
      <anchor>b0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T</type>
      <name>t_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Refcounted_Recyclable_Handler_Caching_Utility</name>
    <filename>classACE__Refcounted__Recyclable__Handler__Caching__Utility.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <templarg>ITERATOR</templarg>
    <templarg>ATTRIBUTES</templarg>
    <member kind="typedef">
      <type>ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt;</type>
      <name>CLEANUP_STRATEGY_BASE</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Refcounted_Recyclable_Handler_Caching_Utility</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Cleanup_Strategy&lt; KEY, VALUE, CONTAINER &gt; *cleanup_strategy=0, int delete_cleanup_strategy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Refcounted_Recyclable_Handler_Caching_Utility</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clear_cache</name>
      <anchor>a2</anchor>
      <arglist>(CONTAINER &amp;container, double purge_percent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>minimum</name>
      <anchor>b0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *&amp;key_to_remove, VALUE *&amp;value_to_remove)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CLEANUP_STRATEGY_BASE *</type>
      <name>cleanup_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_cleanup_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>marked_as_closed_entries_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ARRHUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ARRHUTIL</name>
      <anchor>c1</anchor>
      <arglist>(const ARRHUTIL&lt; KEY, VALUE, CONTAINER, ITERATOR, ATTRIBUTES &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy</name>
    <filename>classACE__Refcounted__Recyclable__Handler__Cleanup__Strategy.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <templarg>CONTAINER</templarg>
    <base>ACE_Cleanup_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(CONTAINER &amp;container, KEY *key, VALUE *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reference_Pair</name>
    <filename>classACE__Reference__Pair.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>first_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>second_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Reference_Pair</name>
      <anchor>a0</anchor>
      <arglist>(T1 &amp;t1, T2 &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>T1 &amp;</type>
      <name>first</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T2 &amp;</type>
      <name>second</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T1 &amp;</type>
      <name>first_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>T2 &amp;</type>
      <name>second_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry</name>
    <filename>classACE__Registry.html</filename>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; Name_Component &gt;</type>
      <name>Name</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; Binding &gt;</type>
      <name>Binding_List</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Binding_Type</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID</name>
      <anchor>s5s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJECT</name>
      <anchor>s5s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTEXT</name>
      <anchor>s5s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TString</type>
      <name>make_string</name>
      <anchor>d0</anchor>
      <arglist>(const Name &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Name</type>
      <name>make_name</name>
      <anchor>d1</anchor>
      <arglist>(const ACE_TString &amp;string)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>STRING_SEPARATOR</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Registry::Binding</name>
    <filename>structACE__Registry_1_1Binding.html</filename>
    <member kind="function">
      <type></type>
      <name>Binding</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Binding</name>
      <anchor>a1</anchor>
      <arglist>(const Name &amp;binding_name, Binding_Type binding_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Binding</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TString &amp;binding_name, Binding_Type binding_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a3</anchor>
      <arglist>(const Binding &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a4</anchor>
      <arglist>(const Binding &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a5</anchor>
      <arglist>(Name &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a6</anchor>
      <arglist>(ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TString</type>
      <name>name</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Binding_Type</type>
      <name>type</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TString</type>
      <name>name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Binding_Type</type>
      <name>type_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry::Binding_Iterator</name>
    <filename>classACE__Registry_1_1Binding__Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Binding_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_one</name>
      <anchor>a1</anchor>
      <arglist>(Binding &amp;binding)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_n</name>
      <anchor>a2</anchor>
      <arglist>(u_long how_many, Binding_List &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destroy</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Naming_Context &amp;</type>
      <name>naming_context</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>naming_context</name>
      <anchor>c0</anchor>
      <arglist>(Naming_Context &amp;naming_context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>current_enumeration</name>
      <anchor>c1</anchor>
      <arglist>(Iteration_State &amp;current_enumeration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Iteration_State &amp;</type>
      <name>current_enumeration</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Naming_Context *</type>
      <name>naming_context_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Object_Iteration</type>
      <name>object_iteration_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Context_Iteration</type>
      <name>context_iteration_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iteration_Complete</type>
      <name>iteration_complete_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iteration_State *</type>
      <name>current_enumeration_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Naming_Context</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Iteration_State</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Object_Iteration</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Context_Iteration</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Iteration_Complete</name>
      <anchor>l4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry::Binding_Iterator::Context_Iteration</name>
    <filename>classACE__Registry_1_1Binding__Iterator_1_1Context__Iteration.html</filename>
    <base>ACE_Registry::Binding_Iterator::Iteration_State</base>
    <member kind="function">
      <type></type>
      <name>Context_Iteration</name>
      <anchor>a0</anchor>
      <arglist>(Binding_Iterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_n</name>
      <anchor>a1</anchor>
      <arglist>(u_long how_many, Binding_List &amp;list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry::Binding_Iterator::Iteration_Complete</name>
    <filename>classACE__Registry_1_1Binding__Iterator_1_1Iteration__Complete.html</filename>
    <base>ACE_Registry::Binding_Iterator::Iteration_State</base>
    <member kind="function">
      <type></type>
      <name>Iteration_Complete</name>
      <anchor>a0</anchor>
      <arglist>(Binding_Iterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_n</name>
      <anchor>a1</anchor>
      <arglist>(u_long how_many, Binding_List &amp;list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry::Binding_Iterator::Iteration_State</name>
    <filename>classACE__Registry_1_1Binding__Iterator_1_1Iteration__State.html</filename>
    <member kind="function">
      <type></type>
      <name>Iteration_State</name>
      <anchor>a0</anchor>
      <arglist>(Binding_Iterator &amp;iterator)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>next_n</name>
      <anchor>a1</anchor>
      <arglist>(u_long how_many, Binding_List &amp;list)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Binding_Iterator *</type>
      <name>parent_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>index_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry::Binding_Iterator::Object_Iteration</name>
    <filename>classACE__Registry_1_1Binding__Iterator_1_1Object__Iteration.html</filename>
    <base>ACE_Registry::Binding_Iterator::Iteration_State</base>
    <member kind="function">
      <type></type>
      <name>Object_Iteration</name>
      <anchor>a0</anchor>
      <arglist>(Binding_Iterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_n</name>
      <anchor>a1</anchor>
      <arglist>(u_long how_many, Binding_List &amp;list)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Registry::Name_Component</name>
    <filename>structACE__Registry_1_1Name__Component.html</filename>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a0</anchor>
      <arglist>(const Name_Component &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a1</anchor>
      <arglist>(const Name_Component &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_TString</type>
      <name>id_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TString</type>
      <name>kind_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry::Naming_Context</name>
    <filename>classACE__Registry_1_1Naming__Context.html</filename>
    <member kind="enumvalue">
      <name>MAX_OBJECT_NAME_SIZE</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_CONTEXT_NAME_SIZE</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Naming_Context</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Naming_Context</name>
      <anchor>a1</anchor>
      <arglist>(const HKEY &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Naming_Context</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_new</name>
      <anchor>a3</anchor>
      <arglist>(const Name &amp;name, const Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_new</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TString &amp;name, const Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(const Name &amp;name, const Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_TString &amp;name, const Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a7</anchor>
      <arglist>(const Name &amp;name, const Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TString &amp;name, const Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchor>a9</anchor>
      <arglist>(const Name &amp;name, Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_TString &amp;name, Object &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a11</anchor>
      <arglist>(const Name &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>new_context</name>
      <anchor>a13</anchor>
      <arglist>(Naming_Context &amp;naming_context)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_new_context</name>
      <anchor>a14</anchor>
      <arglist>(const Name &amp;name, Naming_Context &amp;naming_context, u_long persistence=REG_OPTION_NON_VOLATILE, u_long security_access=KEY_ALL_ACCESS, LPSECURITY_ATTRIBUTES security_attributes=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_new_context</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_TString &amp;name, Naming_Context &amp;naming_context, u_long persistence=REG_OPTION_NON_VOLATILE, u_long security_access=KEY_ALL_ACCESS, LPSECURITY_ATTRIBUTES security_attributes=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_context</name>
      <anchor>a16</anchor>
      <arglist>(const Name &amp;name, Naming_Context &amp;naming_context, u_long persistence=REG_OPTION_NON_VOLATILE, u_long security_access=KEY_ALL_ACCESS, LPSECURITY_ATTRIBUTES security_attributes=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_context</name>
      <anchor>a17</anchor>
      <arglist>(const ACE_TString &amp;name, Naming_Context &amp;naming_context, u_long persistence=REG_OPTION_NON_VOLATILE, u_long security_access=KEY_ALL_ACCESS, LPSECURITY_ATTRIBUTES security_attributes=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind_context</name>
      <anchor>a18</anchor>
      <arglist>(const Name &amp;name, Naming_Context &amp;naming_context)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind_context</name>
      <anchor>a19</anchor>
      <arglist>(const ACE_TString &amp;name, Naming_Context &amp;naming_context)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve_context</name>
      <anchor>a20</anchor>
      <arglist>(const Name &amp;name, Naming_Context &amp;naming_context, u_long security_access=KEY_ALL_ACCESS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve_context</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_TString &amp;name, Naming_Context &amp;naming_context, u_long security_access=KEY_ALL_ACCESS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind_context</name>
      <anchor>a22</anchor>
      <arglist>(const Name &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind_context</name>
      <anchor>a23</anchor>
      <arglist>(const ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destroy</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list</name>
      <anchor>a25</anchor>
      <arglist>(u_long how_many, Binding_List &amp;list, Binding_Iterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>list</name>
      <anchor>a26</anchor>
      <arglist>(Binding_List &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flush</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>HKEY</type>
      <name>key</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>HKEY</type>
      <name>parent</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a31</anchor>
      <arglist>(Name &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a32</anchor>
      <arglist>(ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TString</type>
      <name>name</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>key</name>
      <anchor>b0</anchor>
      <arglist>(HKEY key)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>parent</name>
      <anchor>b1</anchor>
      <arglist>(HKEY parent)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>name</name>
      <anchor>b2</anchor>
      <arglist>(const Name &amp;name)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>name</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_TString &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Naming_Context</name>
      <anchor>c0</anchor>
      <arglist>(const Naming_Context &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Naming_Context &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const Naming_Context &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HKEY</type>
      <name>key_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HKEY</type>
      <name>parent_key_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TString</type>
      <name>name_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Predefined_Naming_Contexts</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry::Object</name>
    <filename>classACE__Registry_1_1Object.html</filename>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchor>a0</anchor>
      <arglist>(void *data=0, u_long size=0, u_long type=REG_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>data</name>
      <anchor>a1</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>data</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>size</name>
      <anchor>a3</anchor>
      <arglist>(u_long size)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>size</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a5</anchor>
      <arglist>(u_long type)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>type</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>data_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>type_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Registry_ImpExp</name>
    <filename>classACE__Registry__ImpExp.html</filename>
    <base>ACE_Config_ImpExp_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Registry_ImpExp</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Configuration &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Registry_ImpExp</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>import_config</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>export_config</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>export_section</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Configuration_Section_Key &amp;section, const ACE_TString &amp;path, FILE *out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_previous_line_format</name>
      <anchor>c1</anchor>
      <arglist>(ACE_TCHAR *buffer, ACE_Configuration_Section_Key &amp;section)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Registry_ImpExp</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Registry_ImpExp &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Registry_ImpExp &amp;</type>
      <name>operator=</name>
      <anchor>c3</anchor>
      <arglist>(const ACE_Registry_ImpExp &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Remote_Name_Space</name>
    <filename>classACE__Remote__Name__Space.html</filename>
    <base>ACE_Name_Space</base>
    <member kind="function">
      <type></type>
      <name>ACE_Remote_Name_Space</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Remote_Name_Space</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *hostname, u_short port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *servername, u_short port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Remote_Name_Space</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, const ACE_NS_WString &amp;value_in, const char *type_in=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rebind</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, const ACE_NS_WString &amp;value_in, const char *type_in=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resolve</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_NS_WString &amp;name_in, ACE_NS_WString &amp;value_out, char *&amp;type_out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_names</name>
      <anchor>a8</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_values</name>
      <anchor>a9</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_types</name>
      <anchor>a10</anchor>
      <arglist>(ACE_WSTRING_SET &amp;set_out, const ACE_NS_WString &amp;pattern_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_name_entries</name>
      <anchor>a11</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_value_entries</name>
      <anchor>a12</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>list_type_entries</name>
      <anchor>a13</anchor>
      <arglist>(ACE_BINDING_SET &amp;set, const ACE_NS_WString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Name_Proxy</type>
      <name>ns_proxy_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Remove_Node</name>
    <filename>classACE__Remove__Node.html</filename>
    <base>ACE_Parse_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Remove_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Remove_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Resume_Node</name>
    <filename>classACE__Resume__Node.html</filename>
    <base>ACE_Parse_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Resume_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Resume_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reverse_Iterator</name>
    <filename>classACE__Reverse__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Reverse_Iterator_Impl&lt; T &gt;</type>
      <name>implementation</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Reverse_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reverse_Iterator_Impl&lt; T &gt; *impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Reverse_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Reverse_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Reverse_Iterator</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Iterator&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Reverse_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Reverse_Iterator&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Reverse_Iterator&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator *</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchor>a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Iterator_Impl&lt; T &gt; &amp;</type>
      <name>impl</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reverse_Iterator_Impl&lt; T &gt; *</type>
      <name>implementation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reverse_Iterator_Impl</name>
    <filename>classACE__Reverse__Iterator__Impl.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Reverse_Iterator_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Reverse_Iterator_Impl&lt; T &gt; *</type>
      <name>clone</name>
      <anchor>a1</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Reverse_Iterator_Impl&lt; T &gt; &amp;rhs) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>dereference</name>
      <anchor>a3</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>plus_plus</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>minus_minus</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Reverse_Lock</name>
    <filename>classACE__Reverse__Lock.html</filename>
    <templarg>ACE_LOCKING_MECHANISM</templarg>
    <base>ACE_Lock</base>
    <member kind="typedef">
      <type>ACE_LOCKING_MECHANISM</type>
      <name>ACE_LOCK</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Reverse_Lock</name>
      <anchor>a0</anchor>
      <arglist>(ACE_LOCKING_MECHANISM &amp;lock, ACE_Acquire_Method::METHOD_TYPE acquire_method=ACE_Acquire_Method::ACE_REGULAR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Reverse_Lock</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire_read</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>acquire_write</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_read</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_write</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCKING_MECHANISM &amp;</type>
      <name>lock_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Acquire_Method::METHOD_TYPE</type>
      <name>acquire_method_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RW_Mutex</name>
    <filename>classACE__RW__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_RW_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(int type=USYNC_THREAD, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_RW_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_rwlock_t &amp;</type>
      <name>lock</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_rwlock_t</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>removed_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_RW_Mutex &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_RW_Mutex</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_RW_Mutex &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RW_Process_Mutex</name>
    <filename>classACE__RW__Process__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_RW_Process_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name=0, int flags=O_CREAT|O_RDWR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_RW_Process_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_File_Lock &amp;</type>
      <name>lock</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>unique_name</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>name_</name>
      <anchor>o0</anchor>
      <arglist>[ACE_UNIQUE_NAME_LEN]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_File_Lock</type>
      <name>lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_RW_Thread_Mutex</name>
    <filename>classACE__RW__Thread__Mutex.html</filename>
    <base>ACE_RW_Mutex</base>
    <member kind="function">
      <type></type>
      <name>ACE_RW_Thread_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_RW_Thread_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sample_History</name>
    <filename>classACE__Sample__History.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Sample_History</name>
      <anchor>a0</anchor>
      <arglist>(size_t max_samples)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sample_History</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sample</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UINT64 value)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_samples</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sample_count</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_samples</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TCHAR *msg, ACE_UINT32 scale_factor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collect_basic_stats</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Basic_Stats &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT64</type>
      <name>get_sample</name>
      <anchor>a7</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>max_samples_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>sample_count_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT64 *</type>
      <name>samples_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sbrk_Memory_Pool</name>
    <filename>classACE__Sbrk__Memory__Pool.html</filename>
    <member kind="typedef">
      <type>ACE_Sbrk_Memory_Pool_Options</type>
      <name>OPTIONS</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sbrk_Memory_Pool</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *backing_store_name=0, const OPTIONS *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Sbrk_Memory_Pool</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>init_acquire</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes, int &amp;first_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a5</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a6</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a7</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a8</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual size_t</type>
      <name>round_up</name>
      <anchor>b0</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sbrk_Memory_Pool_Options</name>
    <filename>classACE__Sbrk__Memory__Pool__Options.html</filename>
  </compound>
  <compound kind="class">
    <name>ACE_Sched_Params</name>
    <filename>classACE__Sched__Params.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Policy</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sched_Params</name>
      <anchor>a0</anchor>
      <arglist>(const Policy policy, const ACE_Sched_Priority priority, const int scope=ACE_SCOPE_THREAD, const ACE_Time_Value &amp;quantum=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sched_Params</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Policy</type>
      <name>policy</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>policy</name>
      <anchor>a3</anchor>
      <arglist>(const Policy)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Sched_Priority</type>
      <name>priority</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>priority</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Sched_Priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scope</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scope</name>
      <anchor>a7</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value &amp;</type>
      <name>quantum</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quantum</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Time_Value &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>priority_min</name>
      <anchor>d0</anchor>
      <arglist>(const Policy, const int scope=ACE_SCOPE_THREAD)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>priority_max</name>
      <anchor>d1</anchor>
      <arglist>(const Policy, const int scope=ACE_SCOPE_THREAD)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>next_priority</name>
      <anchor>d2</anchor>
      <arglist>(const Policy, const int priority, const int scope=ACE_SCOPE_THREAD)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>previous_priority</name>
      <anchor>d3</anchor>
      <arglist>(const Policy, const int priority, const int scope=ACE_SCOPE_THREAD)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Policy</type>
      <name>policy_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sched_Priority</type>
      <name>priority_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>scope_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>quantum_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sched_Priority_Iterator</name>
    <filename>classACE__Sched__Priority__Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Sched_Priority_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Sched_Params::Policy &amp;policy, int scope=ACE_SCOPE_THREAD)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sched_Priority_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>more</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Sched_Params::Policy &amp;</type>
      <name>policy</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scope</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sched_Params::Policy</type>
      <name>policy_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>scope_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>priority_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>done_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Schedule_All_Reactive_Strategy</name>
    <filename>classACE__Schedule__All__Reactive__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Scheduling_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Schedule_All_Reactive_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(SVC_HANDLER *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Schedule_All_Threaded_Strategy</name>
    <filename>classACE__Schedule__All__Threaded__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Scheduling_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Schedule_All_Threaded_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(SVC_HANDLER *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Scheduling_Strategy</name>
    <filename>classACE__Scheduling__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Scheduling_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(SVC_HANDLER *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Scheduling_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Section_Key_Internal</name>
    <filename>classACE__Section__Key__Internal.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Section_Key_Internal</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>add_ref</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dec_ref</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Section_Key_Internal</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Section_Key_Internal</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Section_Key_Internal &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Section_Key_Internal &amp;</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(ACE_Section_Key_Internal &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_int</type>
      <name>ref_count_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Section_Key_Win32</name>
    <filename>classACE__Section__Key__Win32.html</filename>
    <base>ACE_Section_Key_Internal</base>
    <member kind="function">
      <type></type>
      <name>ACE_Section_Key_Win32</name>
      <anchor>a0</anchor>
      <arglist>(HKEY hKey)</arglist>
    </member>
    <member kind="variable">
      <type>HKEY</type>
      <name>hKey_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Section_Key_Win32</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Section_Key_Win32</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Section_Key_Win32 &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Section_Key_Win32 &amp;</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_Section_Key_Win32 &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Select_Reactor_Handle_Set</name>
    <filename>classACE__Select__Reactor__Handle__Set.html</filename>
    <member kind="variable">
      <type>ACE_Handle_Set</type>
      <name>rd_mask_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Handle_Set</type>
      <name>wr_mask_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Handle_Set</type>
      <name>ex_mask_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Select_Reactor_Handler_Repository</name>
    <filename>classACE__Select__Reactor__Handler__Repository.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_Handler_Repository</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Select_Reactor_Impl &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Select_Reactor_Handler_Repository</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Event_Handler *</type>
      <name>find</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE handle, size_t *index_p=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a5</anchor>
      <arglist>(ACE_HANDLE, ACE_Event_Handler *, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a6</anchor>
      <arglist>(ACE_HANDLE, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind_all</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invalid_handle</name>
      <anchor>a8</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handle_in_range</name>
      <anchor>a9</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_handlep1</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Select_Reactor_Impl &amp;</type>
      <name>select_reactor_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ssize_t</type>
      <name>max_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_handlep1_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Event_Tuple *</type>
      <name>event_handlers_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Select_Reactor_Handler_Repository_Iterator</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Select_Reactor_Handler_Repository_Iterator</name>
    <filename>classACE__Select__Reactor__Handler__Repository__Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_Handler_Repository_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Select_Reactor_Handler_Repository *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Select_Reactor_Handler_Repository_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Event_Handler *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Select_Reactor_Handler_Repository *</type>
      <name>rep_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ssize_t</type>
      <name>current_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Select_Reactor_Impl</name>
    <filename>classACE__Select__Reactor__Impl.html</filename>
    <base>ACE_Reactor_Impl</base>
    <member kind="enumvalue">
      <name>DEFAULT_SIZE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_pending_notifications</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resumable_handler</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>bit_ops</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Select_Reactor_Handle_Set &amp;wait_Set, int ops)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>renew</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>supress_notify_renew</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>supress_notify_renew</name>
      <anchor>b3</anchor>
      <arglist>(int sr)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Select_Reactor_Handler_Repository</type>
      <name>handler_rep_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Select_Reactor_Handle_Set</type>
      <name>wait_set_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Select_Reactor_Handle_Set</type>
      <name>suspend_set_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Select_Reactor_Handle_Set</type>
      <name>ready_set_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Queue *</type>
      <name>timer_queue_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_timer_queue_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Sig_Handler *</type>
      <name>signal_handler_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_signal_handler_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor_Notify *</type>
      <name>notify_handler_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_notify_handler_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>restart_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>requeue_position_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>initialized_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_thread_t</type>
      <name>owner_</name>
      <anchor>n13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>state_changed_</name>
      <anchor>n14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Select_Reactor_Impl</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Select_Reactor_Impl &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Select_Reactor_Impl &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Select_Reactor_Impl &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>supress_renew_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Select_Reactor_Notify</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Select_Reactor_Handler_Repository</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Select_Reactor_Notify</name>
    <filename>classACE__Select__Reactor__Notify.html</filename>
    <base>ACE_Reactor_Notify</base>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_Notify</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Select_Reactor_Notify</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Reactor_Impl *, ACE_Timer_Queue *=0, int disable_notify_pipe=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>notify</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::EXCEPT_MASK, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_notifications</name>
      <anchor>a5</anchor>
      <arglist>(int &amp;number_of_active_handles, ACE_Handle_Set &amp;rd_mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>notify_handle</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_notify</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Notification_Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read_notify_pipe</name>
      <anchor>a8</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Notification_Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_dispatchable</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Notification_Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>a10</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>max_notify_iterations</name>
      <anchor>a11</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>max_notify_iterations</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_pending_notifications</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Event_Handler *, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Select_Reactor_Impl *</type>
      <name>select_reactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Pipe</type>
      <name>notification_pipe_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>max_notify_iterations_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Select_Reactor_T</name>
    <filename>classACE__Select__Reactor__T.html</filename>
    <templarg>ACE_SELECT_REACTOR_TOKEN</templarg>
    <base>ACE_Select_Reactor_Impl</base>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Handler *=0, ACE_Timer_Queue *=0, int disable_notify_pipe=0, ACE_Reactor_Notify *notify=0, int mask_signals=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_T</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, int restart=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0, int disable_notify_pipe=0, ACE_Reactor_Notify *notify=0, int mask_signals=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t max_number_of_handles=DEFAULT_SIZE, int restart=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0, int disable_notify_pipe=0, ACE_Reactor_Notify *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>current_info</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE, size_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_sig_handler</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Sig_Handler *signal_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_timer_queue</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Timer_Queue *tq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>timer_queue</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Timer_Queue *tq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Queue *</type>
      <name>timer_queue</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Select_Reactor_T</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>work_pending</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Time_Value &amp;max_wait_time=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>deactivated</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchor>a16</anchor>
      <arglist>(int do_stop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a17</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a18</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a19</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_HANDLE event_handle=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a20</anchor>
      <arglist>(ACE_HANDLE event_handle, ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a22</anchor>
      <arglist>(int signum, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0, ACE_Event_Handler **old_sh=0, ACE_Sig_Action *old_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a23</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a24</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a25</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a26</anchor>
      <arglist>(const ACE_Handle_Set &amp;handle_set, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a27</anchor>
      <arglist>(int signum, ACE_Sig_Action *new_disp, ACE_Sig_Action *old_disp=0, int sigkey=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a28</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a29</anchor>
      <arglist>(ACE_Event_Handler *eh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a30</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a31</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handlers</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a33</anchor>
      <arglist>(ACE_Event_Handler *eh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a34</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a35</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handlers</name>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>uses_event_associations</name>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a38</anchor>
      <arglist>(ACE_Event_Handler *, const void *arg, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_timer_interval</name>
      <anchor>a39</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a40</anchor>
      <arglist>(ACE_Event_Handler *event_handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a41</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a42</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a43</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a44</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a45</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a46</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::EXCEPT_MASK, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>max_notify_iterations</name>
      <anchor>a47</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>max_notify_iterations</name>
      <anchor>a48</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a49</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a50</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>requeue_position</name>
      <anchor>a51</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>requeue_position</name>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a53</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a54</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a55</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a56</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wakeup_all_threads</name>
      <anchor>a57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a58</anchor>
      <arglist>(ACE_thread_t n_id, ACE_thread_t *o_id=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a59</anchor>
      <arglist>(ACE_thread_t *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a60</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Event_Handler **eh=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a61</anchor>
      <arglist>(int signum, ACE_Event_Handler **=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>initialized</name>
      <anchor>a62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>size</name>
      <anchor>a63</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock &amp;</type>
      <name>lock</name>
      <anchor>a64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a65</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_i</name>
      <anchor>b4</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>is_suspended_i</name>
      <anchor>b5</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_i</name>
      <anchor>b6</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handler_i</name>
      <anchor>b7</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask, ACE_Event_Handler **=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handler_i</name>
      <anchor>b8</anchor>
      <arglist>(int signum, ACE_Event_Handler **=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>any_ready</name>
      <anchor>b9</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;handle_set)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>any_ready_i</name>
      <anchor>b10</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;handle_set)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_error</name>
      <anchor>b11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>check_handles</name>
      <anchor>b12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_for_multiple_events</name>
      <anchor>b13</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;, ACE_Time_Value *)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch</name>
      <anchor>b14</anchor>
      <arglist>(int nfound, ACE_Select_Reactor_Handle_Set &amp;)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_timer_handlers</name>
      <anchor>b15</anchor>
      <arglist>(int &amp;number_dispatched)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_notification_handlers</name>
      <anchor>b16</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;dispatch_set, int &amp;number_of_active_handles, int &amp;number_of_handlers_dispatched)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_io_handlers</name>
      <anchor>b17</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;dispatch_set, int &amp;number_of_active_handles, int &amp;number_of_handlers_dispatched)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_io_set</name>
      <anchor>b18</anchor>
      <arglist>(int number_of_active_handles, int &amp;number_of_handlers_dispatched, int mask, ACE_Handle_Set &amp;dispatch_mask, ACE_Handle_Set &amp;ready_mask, ACE_EH_PTMF callback)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>notify_handle</name>
      <anchor>b19</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Handle_Set &amp;, ACE_Event_Handler *eh, ACE_EH_PTMF callback)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>renew</name>
      <anchor>b20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>release_token</name>
      <anchor>b21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>handle_events_i</name>
      <anchor>b22</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SELECT_REACTOR_TOKEN</type>
      <name>token_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock_Adapter&lt; ACE_SELECT_REACTOR_TOKEN &gt;</type>
      <name>lock_adapter_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>sig_atomic_t</type>
      <name>deactivated_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>mask_signals_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Select_Reactor_T</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Select_Reactor_T&lt; ACE_SELECT_REACTOR_TOKEN &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Select_Reactor_T&lt; ACE_SELECT_REACTOR_TOKEN &gt; &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Select_Reactor_T&lt; ACE_SELECT_REACTOR_TOKEN &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Select_Reactor_Token_T</name>
    <filename>classACE__Select__Reactor__Token__T.html</filename>
    <templarg>ACE_SELECT_REACTOR_MUTEX</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_Token_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Select_Reactor_Impl &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Select_Reactor_Token_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Select_Reactor_Token_T</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sleep_hook</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Select_Reactor_Impl &amp;</type>
      <name>select_reactor</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select_reactor</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Select_Reactor_Impl &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Select_Reactor_Impl *</type>
      <name>select_reactor_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Semaphore</name>
    <filename>classACE__Semaphore.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Semaphore</name>
      <anchor>a0</anchor>
      <arglist>(u_int count=1, int type=USYNC_THREAD, const ACE_TCHAR *name=0, void *=0, int max=0x7fffffff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Semaphore</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value *tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a8</anchor>
      <arglist>(size_t release_count)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_sema_t &amp;</type>
      <name>lock</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_sema_t</type>
      <name>semaphore_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>removed_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Semaphore &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Semaphore</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Semaphore &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Config</name>
    <filename>classACE__Service__Config.html</filename>
    <member kind="enumvalue">
      <name>MAX_SERVICES</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Config</name>
      <anchor>a0</anchor>
      <arglist>(int ignore_static_svcs=1, size_t size=ACE_Service_Config::MAX_SERVICES, int signum=SIGHUP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Config</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR program_name[], const ACE_TCHAR *logger_key=ACE_DEFAULT_LOGGER_KEY)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Service_Config</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>open_i</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_TCHAR program_name[], const ACE_TCHAR *logger_key=ACE_DEFAULT_LOGGER_KEY, int ignore_default_svc_conf_file=0, int ignore_debug_flag=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>open</name>
      <anchor>d1</anchor>
      <arglist>(const ACE_TCHAR program_name[], const ACE_TCHAR *logger_key=ACE_DEFAULT_LOGGER_KEY, int ignore_static_svcs=1, int ignore_default_svc_conf_file=0, int ignore_debug_flag=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>open</name>
      <anchor>d2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[], const ACE_TCHAR *logger_key=ACE_DEFAULT_LOGGER_KEY, int ignore_static_svcs=1, int ignore_default_svc_conf=0, int ignore_debug_flag=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>close</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>fini_svcs</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>close_svcs</name>
      <anchor>d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>close_singletons</name>
      <anchor>d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>reconfig_occurred</name>
      <anchor>d7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>reconfig_occurred</name>
      <anchor>d8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>reconfigure</name>
      <anchor>d9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_STATIC_SVCS *</type>
      <name>static_svcs</name>
      <anchor>d10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>initialize</name>
      <anchor>d11</anchor>
      <arglist>(const ACE_Service_Type *, ACE_TCHAR parameters[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>initialize</name>
      <anchor>d12</anchor>
      <arglist>(const ACE_TCHAR svc_name[], ACE_TCHAR parameters[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>resume</name>
      <anchor>d13</anchor>
      <arglist>(const ACE_TCHAR svc_name[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>suspend</name>
      <anchor>d14</anchor>
      <arglist>(const ACE_TCHAR svc_name[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>remove</name>
      <anchor>d15</anchor>
      <arglist>(const ACE_TCHAR svc_name[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_INLINE void</type>
      <name>signal_handler</name>
      <anchor>d16</anchor>
      <arglist>(ACE_Sig_Adapter *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>process_file</name>
      <anchor>d17</anchor>
      <arglist>(const ACE_TCHAR file[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>process_directive</name>
      <anchor>d18</anchor>
      <arglist>(const ACE_TCHAR directive[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>process_directive</name>
      <anchor>d19</anchor>
      <arglist>(const ACE_Static_Svc_Descriptor &amp;ssd, int force_replace=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>process_directives</name>
      <anchor>d20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>handle_signal</name>
      <anchor>d21</anchor>
      <arglist>(int sig, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>parse_args</name>
      <anchor>d22</anchor>
      <arglist>(int, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>int</type>
      <name>process_commandline_directives</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>int</type>
      <name>process_directives_i</name>
      <anchor>e1</anchor>
      <arglist>(ACE_Svc_Conf_Param *param)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>int</type>
      <name>start_daemon</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>int</type>
      <name>load_static_svcs</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>init_svc_conf_file_queue</name>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const ACE_TCHAR *</type>
      <name>logger_key_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_STATIC_SVCS *</type>
      <name>static_svcs_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_SVC_QUEUE *</type>
      <name>svc_queue_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_SVC_QUEUE *</type>
      <name>svc_conf_file_queue_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>sig_atomic_t</type>
      <name>reconfig_occurred_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>be_a_daemon_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>no_static_svcs_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>signum_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Sig_Adapter *</type>
      <name>signal_handler_</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>is_initialized_</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Handler</name>
    <filename>classACE__Service__Handler.html</filename>
    <base>ACE_Handler</base>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Handler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Service_Handler</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE new_handle, ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addresses</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_INET_Addr &amp;remote_address, const ACE_INET_Addr &amp;local_address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>act</name>
      <anchor>a4</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Asynch_Acceptor&lt; ACE_Service_Handler &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Manager</name>
    <filename>classACE__Service__Manager.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Service_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>reconfigure_services</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>list_services</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>b2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>b3</anchor>
      <arglist>(ACE_TCHAR **info_string, size_t length) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump</name>
      <anchor>b7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>open</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_INET_Addr &amp;sia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>c1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>c2</anchor>
      <arglist>(ACE_HANDLE fd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>c3</anchor>
      <arglist>(ACE_HANDLE fd, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>c4</anchor>
      <arglist>(int signum, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process_request</name>
      <anchor>c5</anchor>
      <arglist>(ACE_TCHAR *request)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SOCK_Stream</type>
      <name>client_stream_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SOCK_Acceptor</type>
      <name>acceptor_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>debug_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>signum_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>u_short</type>
      <name>DEFAULT_PORT_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Object</name>
    <filename>classACE__Service__Object.html</filename>
    <base>ACE_Event_Handler</base>
    <base>ACE_Shared_Object</base>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Object</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reactor *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Service_Object</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Object_Ptr</name>
    <filename>classACE__Service__Object__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Object_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Service_Object *so)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Service_Object_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Service_Object *</type>
      <name>operator-&gt;</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Service_Object *</type>
      <name>service_object_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Object_Type</name>
    <filename>classACE__Service__Object__Type.html</filename>
    <base>ACE_Service_Type_Impl</base>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Object_Type</name>
      <anchor>a0</anchor>
      <arglist>(void *so, const ACE_TCHAR *name, u_int flags=0, ACE_Service_Object_Exterminator gobbler=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Service_Object_Type</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a4</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[]) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>(ACE_TCHAR **str, size_t len) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Repository</name>
    <filename>classACE__Service__Repository.html</filename>
    <member kind="enumvalue">
      <name>DEFAULT_SIZE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Repository</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Repository</name>
      <anchor>a1</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(int size=DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Service_Repository</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fini</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Service_Type *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_TCHAR name[], const ACE_Service_Type **srp=0, int ignore_suspended=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resume</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR[], const ACE_Service_Type **=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>suspend</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_TCHAR[], const ACE_Service_Type **=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current_size</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>total_size</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Service_Repository *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(int size=ACE_Service_Repository::DEFAULT_SIZE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Service_Repository *</type>
      <name>instance</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Service_Repository *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_singleton</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>find_i</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_TCHAR service_name[], const ACE_Service_Type **=0, int ignore_suspended=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Service_Type **</type>
      <name>service_vector_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>total_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Service_Repository *</type>
      <name>svc_rep_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>delete_svc_rep_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Service_Repository_Iterator</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Repository_Iterator</name>
    <filename>classACE__Service__Repository__Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Repository_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Service_Repository &amp;sr, int ignored_suspended=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Service_Repository_Iterator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Service_Type *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Service_Repository &amp;</type>
      <name>svc_rep_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>next_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ignore_suspended_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Type</name>
    <filename>classACE__Service__Type.html</filename>
    <member kind="enumvalue">
      <name>DELETE_OBJ</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETE_THIS</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Type</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *n, ACE_Service_Type_Impl *o, const ACE_SHLIB_HANDLE handle, int active)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Service_Type</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>name</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Service_Type_Impl *</type>
      <name>type</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Service_Type_Impl *, int active=1)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SHLIB_HANDLE</type>
      <name>handle</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_SHLIB_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspend</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>active</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>active</name>
      <anchor>a11</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fini</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fini_called</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Service_Type_Impl *</type>
      <name>type_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SHLIB_HANDLE</type>
      <name>handle_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>active_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fini_already_called_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Service_Type_Impl</name>
    <filename>classACE__Service__Type__Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Service_Type_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void *object, const ACE_TCHAR *s_name, u_int flags=0, ACE_Service_Object_Exterminator gobbler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Service_Type_Impl</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a2</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a3</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a4</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[]) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>(ACE_TCHAR **str, size_t len) const=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>object</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>name</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>obj_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Service_Object_Exterminator</type>
      <name>gobbler_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_int</type>
      <name>flags_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Shared_Memory</name>
    <filename>classACE__Shared__Memory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Shared_Memory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>malloc</name>
      <anchor>a3</anchor>
      <arglist>(size_t=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>free</name>
      <anchor>a4</anchor>
      <arglist>(void *p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_segment_size</name>
      <anchor>a5</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_HANDLE</type>
      <name>get_id</name>
      <anchor>a6</anchor>
      <arglist>(void) const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Shared_Memory_MM</name>
    <filename>classACE__Shared__Memory__MM.html</filename>
    <base>ACE_Shared_Memory</base>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Memory_MM</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Memory_MM</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE handle, int length=-1, int prot=PROT_RDWR, int share=ACE_MAP_PRIVATE, char *addr=0, off_t pos=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Memory_MM</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *file_name, int len=-1, int flags=O_RDWR|O_CREAT, int mode=ACE_DEFAULT_FILE_PERMS, int prot=PROT_RDWR, int share=ACE_MAP_SHARED, char *addr=0, off_t pos=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle, int length=-1, int prot=PROT_RDWR, int share=ACE_MAP_PRIVATE, char *addr=0, off_t pos=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *file_name, int len=-1, int flags=O_RDWR|O_CREAT, int mode=ACE_DEFAULT_FILE_PERMS, int prot=PROT_RDWR, int share=ACE_MAP_SHARED, char *addr=0, off_t pos=0)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>filename</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>malloc</name>
      <anchor>a8</anchor>
      <arglist>(size_t size=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>free</name>
      <anchor>a9</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_segment_size</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_id</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Mem_Map</type>
      <name>shared_memory_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Shared_Memory_Pool</name>
    <filename>classACE__Shared__Memory__Pool.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="typedef">
      <type>ACE_Shared_Memory_Pool_Options</type>
      <name>OPTIONS</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Memory_Pool</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *backing_store_name=0, const OPTIONS *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Shared_Memory_Pool</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>init_acquire</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes, int &amp;first_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(size_t nbytes, size_t &amp;rounded_bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a5</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a6</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a7</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a8</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual size_t</type>
      <name>round_up</name>
      <anchor>b0</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>commit_backing_store_name</name>
      <anchor>b1</anchor>
      <arglist>(size_t rounded_bytes, off_t &amp;offset)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>find_seg</name>
      <anchor>b2</anchor>
      <arglist>(const void *const searchPtr, off_t &amp;offset, size_t &amp;counter)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>in_use</name>
      <anchor>b3</anchor>
      <arglist>(off_t &amp;offset, size_t &amp;counter)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>b4</anchor>
      <arglist>(int signum, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>base_addr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>file_perms_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>max_segments_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>off_t</type>
      <name>minimum_bytes_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>segment_size_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>key_t</type>
      <name>base_shm_key_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Sig_Handler</type>
      <name>signal_handler_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Shared_Memory_Pool::SHM_TABLE</name>
    <filename>structACE__Shared__Memory__Pool_1_1SHM__TABLE.html</filename>
    <member kind="variable">
      <type>key_t</type>
      <name>key_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>shmid_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>used_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Shared_Memory_Pool_Options</name>
    <filename>classACE__Shared__Memory__Pool__Options.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Memory_Pool_Options</name>
      <anchor>a0</anchor>
      <arglist>(const char *base_addr=ACE_DEFAULT_BASE_ADDR, size_t max_segments=ACE_DEFAULT_MAX_SEGMENTS, size_t file_perms=ACE_DEFAULT_FILE_PERMS, off_t minimum_bytes=0, size_t segment_size=ACE_DEFAULT_SEGMENT_SIZE)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>base_addr_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>max_segments_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>off_t</type>
      <name>minimum_bytes_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>file_perms_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>segment_size_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Shared_Memory_SV</name>
    <filename>classACE__Shared__Memory__SV.html</filename>
    <base>ACE_Shared_Memory</base>
    <member kind="enumvalue">
      <name>ACE_CREATE</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Memory_SV</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Memory_SV</name>
      <anchor>a1</anchor>
      <arglist>(key_t id, int length, int create=ACE_Shared_Memory_SV::ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS, void *addr=0, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(key_t id, int length, int create=ACE_Shared_Memory_SV::ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS, void *addr=0, int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>malloc</name>
      <anchor>a5</anchor>
      <arglist>(size_t=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>free</name>
      <anchor>a6</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_segment_size</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_id</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SV_Shared_Memory</type>
      <name>shared_memory_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Shared_Object</name>
    <filename>classACE__Shared__Object.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Shared_Object</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a1</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a3</anchor>
      <arglist>(ACE_TCHAR **info_string, size_t length=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Shared_Object</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sig_Action</name>
    <filename>classACE__Sig__Action.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a1</anchor>
      <arglist>(ACE_SignalHandler handler, sigset_t *sigmask=0, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SignalHandler handler, const ACE_Sig_Set &amp;sigmask, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a3</anchor>
      <arglist>(ACE_SignalHandler handler, int signum, sigset_t *sigmask=0, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a4</anchor>
      <arglist>(ACE_SignalHandler handler, int signum, const ACE_Sig_Set &amp;sigmask, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Sig_Set &amp;signalss, ACE_SignalHandler handler, const ACE_Sig_Set &amp;sigmask, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Sig_Set &amp;signalss, ACE_SignalHandler handler, sigset_t *sigmask=0, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Action</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Sig_Action &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sig_Action</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_action</name>
      <anchor>a9</anchor>
      <arglist>(int signum, ACE_Sig_Action *oaction=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>restore_action</name>
      <anchor>a10</anchor>
      <arglist>(int signum, ACE_Sig_Action &amp;oaction)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>retrieve_action</name>
      <anchor>a11</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a12</anchor>
      <arglist>(struct sigaction *)</arglist>
    </member>
    <member kind="function">
      <type>sigaction *</type>
      <name>get</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ACE_SIGACTION *</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flags</name>
      <anchor>a15</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mask</name>
      <anchor>a17</anchor>
      <arglist>(sigset_t *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mask</name>
      <anchor>a18</anchor>
      <arglist>(ACE_Sig_Set &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sigset_t *</type>
      <name>mask</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handler</name>
      <anchor>a20</anchor>
      <arglist>(ACE_SignalHandler)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SignalHandler</type>
      <name>handler</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sigaction</type>
      <name>sa_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sig_Adapter</name>
    <filename>classACE__Sig__Adapter.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Action &amp;, int sigkey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Event_Handler *, int sigkey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Adapter</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Sig_Handler_Ex, int sigkey=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sig_Adapter</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sigkey</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>a5</anchor>
      <arglist>(int, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_HANDLER</name>
      <anchor>u3u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIG_ACTION</name>
      <anchor>u3u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C_FUNCTION</name>
      <anchor>u3u2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sigkey_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>enum ACE_Sig_Adapter::@36</type>
      <name>type_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sig_Action</type>
      <name>sa_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Event_Handler *</type>
      <name>eh_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sig_Handler_Ex</type>
      <name>sig_func_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sig_Guard</name>
    <filename>classACE__Sig__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Set *mask=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sig_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Sig_Set</type>
      <name>omask_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sig_Handler</name>
    <filename>classACE__Sig__Handler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a0</anchor>
      <arglist>(int signum, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0, ACE_Event_Handler **old_sh=0, ACE_Sig_Action *old_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a1</anchor>
      <arglist>(int signum, ACE_Sig_Action *new_disp=0, ACE_Sig_Action *old_disp=0, int sigkey=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Event_Handler *</type>
      <name>handler</name>
      <anchor>a2</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Event_Handler *</type>
      <name>handler</name>
      <anchor>a3</anchor>
      <arglist>(int signum, ACE_Event_Handler *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sig_pending</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>sig_pending</name>
      <anchor>d1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dispatch</name>
      <anchor>d2</anchor>
      <arglist>(int, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>ACE_Event_Handler *</type>
      <name>handler_i</name>
      <anchor>e0</anchor>
      <arglist>(int signum, ACE_Event_Handler *)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>int</type>
      <name>register_handler_i</name>
      <anchor>e1</anchor>
      <arglist>(int signum, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0, ACE_Event_Handler **old_sh=0, ACE_Sig_Action *old_disp=0)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>int</type>
      <name>in_range</name>
      <anchor>e2</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>sig_atomic_t</type>
      <name>sig_pending_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Event_Handler *</type>
      <name>signal_handlers_</name>
      <anchor>r0</anchor>
      <arglist>[ACE_NSIG]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sig_Handlers</name>
    <filename>classACE__Sig__Handlers.html</filename>
    <base>ACE_Sig_Handler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a0</anchor>
      <arglist>(int signum, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0, ACE_Event_Handler **old_sh=0, ACE_Sig_Action *old_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a1</anchor>
      <arglist>(int signum, ACE_Sig_Action *new_disp=0, ACE_Sig_Action *old_disp=0, int sigkey=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Event_Handler *</type>
      <name>handler</name>
      <anchor>a2</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Event_Handler *</type>
      <name>handler</name>
      <anchor>a3</anchor>
      <arglist>(int signum, ACE_Event_Handler *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dispatch</name>
      <anchor>d0</anchor>
      <arglist>(int signum, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>sigkey_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>third_party_sig_handler_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sig_Handlers_Set</name>
    <filename>classACE__Sig__Handlers__Set.html</filename>
    <member kind="function" static="yes">
      <type>ACE_SIG_HANDLERS_SET *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_SIG_HANDLERS_SET *</type>
      <name>sig_handlers_</name>
      <anchor>r0</anchor>
      <arglist>[ACE_NSIG]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sig_Set</name>
    <filename>classACE__Sig__Set.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Set</name>
      <anchor>a0</anchor>
      <arglist>(sigset_t *sigset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Set</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Sig_Set *sigset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Sig_Set</name>
      <anchor>a2</anchor>
      <arglist>(int fill=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sig_Set</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty_set</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fill_set</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sig_add</name>
      <anchor>a6</anchor>
      <arglist>(int signo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sig_del</name>
      <anchor>a7</anchor>
      <arglist>(int signo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_member</name>
      <anchor>a8</anchor>
      <arglist>(int signo) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sigset_t *</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sigset_t</type>
      <name>sigset</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sigset_t</type>
      <name>sigset_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Singleton</name>
    <filename>classACE__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Cleanup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>ACE_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TYPE</type>
      <name>instance_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>ACE_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Singleton_Strategy</name>
    <filename>classACE__Singleton__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Creation_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Singleton_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(SVC_HANDLER *=0, ACE_Thread_Manager *=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *, ACE_Thread_Manager *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Singleton_Strategy</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>a3</anchor>
      <arglist>(SVC_HANDLER *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>SVC_HANDLER *</type>
      <name>svc_handler_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_svc_handler_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK</name>
    <filename>classACE__SOCK.html</filename>
    <base>ACE_IPC_SAP</base>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_option</name>
      <anchor>a1</anchor>
      <arglist>(int level, int option, void *optval, int optlen) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_option</name>
      <anchor>a2</anchor>
      <arglist>(int level, int option, void *optval, int *optlen) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a7</anchor>
      <arglist>(int type, int protocol_family, int protocol, int reuse_addr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a8</anchor>
      <arglist>(int type, int protocol_family, int protocol, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g, u_long flags, int reuse_addr)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_SOCK</name>
      <anchor>b0</anchor>
      <arglist>(int type, int protocol_family, int protocol=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_SOCK</name>
      <anchor>b1</anchor>
      <arglist>(int type, int protocol_family, int protocol, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g, u_long flags, int reuse_addr)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_SOCK</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_Acceptor</name>
    <filename>classACE__SOCK__Acceptor.html</filename>
    <base>ACE_SOCK</base>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_SOCK_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, int reuse_addr=0, int protocol_family=PF_UNSPEC, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Acceptor</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g, u_long flags, int reuse_addr, int protocol_family=PF_UNSPEC, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, int reuse_addr=0, int protocol_family=PF_UNSPEC, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g, u_long flags, int reuse_addr, int protocol_family=PF_UNSPEC, int backlog=ACE_DEFAULT_BACKLOG, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_Acceptor</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a7</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, ACE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a8</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, ACE_Accept_QoS_Params qos_params, ACE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_accept_start</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Time_Value *timeout, int restart, int &amp;in_blocking_mode) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_accept_finish</name>
      <anchor>b1</anchor>
      <arglist>(ACE_SOCK_Stream new_stream, int in_blocking_mode, int reset_new_handle) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_open</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_Addr &amp;local_sap, int protocol_family, int backlog)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_CODgram</name>
    <filename>classACE__SOCK__CODgram.html</filename>
    <base>ACE_SOCK_IO</base>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_CODgram</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_CODgram</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;remote_sap, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int protocol_family=ACE_PROTOCOL_FAMILY_INET, int protocol=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_CODgram</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Addr &amp;remote_sap, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int protocol_family=ACE_PROTOCOL_FAMILY_INET, int protocol=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Sock_Connect</name>
    <filename>classACE__Sock__Connect.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>bind_port</name>
      <anchor>d0</anchor>
      <arglist>(ACE_HANDLE handle, ACE_UINT32 ip_addr=INADDR_ANY)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_bcast_addr</name>
      <anchor>d1</anchor>
      <arglist>(ACE_UINT32 &amp;bcast_addr, const ACE_TCHAR *hostname=0, ACE_UINT32 host_addr=0, ACE_HANDLE handle=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_ip_interfaces</name>
      <anchor>d2</anchor>
      <arglist>(size_t &amp;count, ACE_INET_Addr *&amp;addr_array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>count_interfaces</name>
      <anchor>d3</anchor>
      <arglist>(ACE_HANDLE handle, size_t &amp;how_many)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ipv6_enabled</name>
      <anchor>d5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_Connector</name>
    <filename>classACE__SOCK__Connector.html</filename>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_SOCK_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, const ACE_Addr &amp;remote_sap, const ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Connector</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, const ACE_Addr &amp;remote_sap, ACE_QoS_Params qos_params, const ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, ACE_Protocol_Info *protocolinfo=0, ACE_SOCK_GROUP g=0, u_long flags=0, int reuse_addr=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a3</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, const ACE_Addr &amp;remote_sap, const ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a4</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, const ACE_Addr &amp;remote_sap, ACE_QoS_Params qos_params, const ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, ACE_Protocol_Info *protocolinfo=0, ACE_SOCK_GROUP g=0, u_long flags=0, int reuse_addr=0, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_Connector</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>complete</name>
      <anchor>a6</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, ACE_Addr *remote_sap=0, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset_new_handle</name>
      <anchor>a7</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_open</name>
      <anchor>b0</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, int protocol_family, int protocol, int reuse_addr)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_open</name>
      <anchor>b1</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, int protocol_family, int protocol, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g, u_long flags, int reuse_addr)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_connect_start</name>
      <anchor>b2</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, const ACE_Time_Value *timeout, const ACE_Addr &amp;local_sap)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_connect_finish</name>
      <anchor>b3</anchor>
      <arglist>(ACE_SOCK_Stream &amp;new_stream, const ACE_Time_Value *timeout, int result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_Dgram</name>
    <filename>classACE__SOCK__Dgram.html</filename>
    <base>ACE_SOCK</base>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family=ACE_PROTOCOL_FAMILY_INET, int protocol=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family, int protocol, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g=0, u_long flags=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family=ACE_PROTOCOL_FAMILY_INET, int protocol=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family, int protocol, ACE_Protocol_Info *protocolinfo, ACE_SOCK_GROUP g=0, u_long flags=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_Dgram</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a6</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a7</anchor>
      <arglist>(void *buf, size_t n, ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a8</anchor>
      <arglist>(iovec *io_vec, ACE_Addr &amp;addr, int flags=0, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a9</anchor>
      <arglist>(const iovec iov[], size_t n, const ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a10</anchor>
      <arglist>(iovec iov[], size_t n, ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a11</anchor>
      <arglist>(void *buf, size_t n, ACE_Addr &amp;addr, int flags, const ACE_Time_Value *timeout) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a12</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Addr &amp;addr, int flags, const ACE_Time_Value *timeout) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a13</anchor>
      <arglist>(const iovec buffers[], int buffer_count, size_t &amp;number_of_bytes_sent, int flags, const ACE_Addr &amp;addr, ACE_OVERLAPPED *overlapped, ACE_OVERLAPPED_COMPLETION_FUNC func) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a14</anchor>
      <arglist>(iovec buffers[], int buffer_count, size_t &amp;number_of_bytes_recvd, int &amp;flags, ACE_Addr &amp;addr, ACE_OVERLAPPED *overlapped, ACE_OVERLAPPED_COMPLETION_FUNC func) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a15</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Addr &amp;addr, int flags, ACE_OVERLAPPED *overlapped, ACE_OVERLAPPED_COMPLETION_FUNC func) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a16</anchor>
      <arglist>(void *buf, size_t n, ACE_Addr &amp;addr, int flags, ACE_OVERLAPPED *overlapped, ACE_OVERLAPPED_COMPLETION_FUNC func) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nic</name>
      <anchor>a18</anchor>
      <arglist>(const char *option_value)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_open</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_Dgram_Bcast</name>
    <filename>classACE__SOCK__Dgram__Bcast.html</filename>
    <base>ACE_SOCK_Dgram</base>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram_Bcast</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram_Bcast</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family=PF_INET, int protocol=0, int reuse_addr=0, const ACE_TCHAR *host_name=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_Dgram_Bcast</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Addr &amp;local, int protocol_family=PF_INET, int protocol=0, int reuse_addr=0, const ACE_TCHAR *host_name=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a5</anchor>
      <arglist>(const void *buf, size_t n, u_short portnum, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a6</anchor>
      <arglist>(const iovec iov[], size_t n, u_short portnum, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a7</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a8</anchor>
      <arglist>(const iovec iov[], size_t n, const ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>mk_broadcast</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_TCHAR *host_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>c1</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Bcast_Node *</type>
      <name>if_list_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_Dgram_Mcast</name>
    <filename>classACE__SOCK__Dgram__Mcast.html</filename>
    <base>ACE_SOCK_Dgram</base>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram_Mcast</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_Dgram_Mcast</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subscribe</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_INET_Addr &amp;mcast_addr, int reuse_addr=1, const ACE_TCHAR *net_if=0, int protocol_family=PF_INET, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unsubscribe</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_INET_Addr &amp;mcast_addr, const ACE_TCHAR *net_if=0, int protocol_family=PF_INET, int protocol=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unsubscribe</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a5</anchor>
      <arglist>(const void *buf, size_t n, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a6</anchor>
      <arglist>(const iovec iov[], size_t n, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_option</name>
      <anchor>a7</anchor>
      <arglist>(int option, char optval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>make_multicast_address</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_INET_Addr &amp;mcast_addr, const ACE_TCHAR *net_if=ACE_LIB_TEXT(&quot;le0&quot;))</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>make_multicast_address_i</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_INET_Addr &amp;mcast_addr, ip_mreq &amp;multicast_address, const ACE_TCHAR *net_if=ACE_LIB_TEXT(&quot;le0&quot;))</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_INET_Addr</type>
      <name>mcast_addr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ip_mreq</type>
      <name>mcast_request_if_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>open</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Addr &amp;mcast_addr, int protocol_family=PF_INET, int protocol=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>open</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Addr &amp;mcast_addr, const ACE_QoS_Params &amp;qos_params, int protocol_family=PF_INET, int protocol=0, ACE_Protocol_Info *protocolinfo=0, ACE_SOCK_GROUP g=0, u_long flags=0, int reuse_addr=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>subscribe_ifs</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_INET_Addr &amp;mcast_addr, const ACE_TCHAR *net_if, int protocol_family, int protocol, int reuse_addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unsubscribe_ifs</name>
      <anchor>c3</anchor>
      <arglist>(const ACE_INET_Addr &amp;mcast_addr, const ACE_TCHAR *net_if=0, int protocol_family=PF_INET, int protocol=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>c4</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>c5</anchor>
      <arglist>(const iovec iov[], size_t n, const ACE_Addr &amp;addr, int flags=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_Dgram_SC</name>
    <filename>classACE__SOCK__Dgram__SC.html</filename>
    <templarg>STREAM</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram_SC</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Dgram_SC</name>
      <anchor>a1</anchor>
      <arglist>(STREAM &amp;source, ACE_INET_Addr &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a2</anchor>
      <arglist>(char *buf, ssize_t len)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a3</anchor>
      <arglist>(char *buf, ssize_t len, ACE_Time_Value *tv=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a4</anchor>
      <arglist>(char *buf, ssize_t len, int flags, ACE_Time_Value *tv=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a5</anchor>
      <arglist>(char *buf, ssize_t len, int flags=0, ACE_Time_Value *tv=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a6</anchor>
      <arglist>(ACE_INET_Addr &amp;addr) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_INET_Addr</type>
      <name>peer_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_IO</name>
    <filename>classACE__SOCK__IO.html</filename>
    <base>ACE_SOCK</base>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_IO</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_IO</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a2</anchor>
      <arglist>(void *buf, size_t n, int flags, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a3</anchor>
      <arglist>(void *buf, size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recvv</name>
      <anchor>a4</anchor>
      <arglist>(iovec iov[], size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a5</anchor>
      <arglist>(iovec iov[], size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recvv</name>
      <anchor>a6</anchor>
      <arglist>(iovec *io_vec, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a7</anchor>
      <arglist>(iovec *io_vec, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a8</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a9</anchor>
      <arglist>(void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a10</anchor>
      <arglist>(const void *buf, size_t n, int flags, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a11</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>sendv</name>
      <anchor>a12</anchor>
      <arglist>(const iovec iov[], size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a13</anchor>
      <arglist>(const iovec iov[], size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a14</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a15</anchor>
      <arglist>(const void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SOCK_Stream</name>
    <filename>classACE__SOCK__Stream.html</filename>
    <base>ACE_SOCK_IO</base>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SOCK_Stream</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SOCK_Stream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a3</anchor>
      <arglist>(void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a4</anchor>
      <arglist>(void *buf, size_t len, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recvv_n</name>
      <anchor>a5</anchor>
      <arglist>(iovec iov[], size_t iovcnt, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a6</anchor>
      <arglist>(const void *buf, size_t len, int flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a7</anchor>
      <arglist>(const void *buf, size_t len, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Message_Block *message_block, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>sendv_n</name>
      <anchor>a9</anchor>
      <arglist>(const iovec iov[], size_t iovcnt, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_urg</name>
      <anchor>a10</anchor>
      <arglist>(const void *ptr, size_t len=sizeof(char), const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_urg</name>
      <anchor>a11</anchor>
      <arglist>(void *ptr, size_t len=sizeof(char), const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_reader</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_writer</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SPIPE</name>
    <filename>classACE__SPIPE.html</filename>
    <base>ACE_IPC_SAP</base>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SPIPE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>disable</name>
      <anchor>a3</anchor>
      <arglist>(int signum) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_SPIPE</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_SPIPE_Addr</type>
      <name>local_addr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SPIPE_Acceptor</name>
    <filename>classACE__SPIPE__Acceptor.html</filename>
    <base>ACE_SPIPE</base>
    <member kind="typedef">
      <type>ACE_SPIPE_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_SPIPE_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_SPIPE_Addr &amp;local_sap, int reuse_addr=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_SPIPE_Addr &amp;local_sap, int reuse_addr=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a5</anchor>
      <arglist>(ACE_SPIPE_Stream &amp;ipc_sap_spipe, ACE_SPIPE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_new_instance</name>
      <anchor>c0</anchor>
      <arglist>(int perms=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SPIPE_Addr</name>
    <filename>classACE__SPIPE__Addr.html</filename>
    <base>ACE_Addr</base>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Addr</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_SPIPE_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Addr</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TCHAR *rendezvous_point, gid_t=0, uid_t=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_SPIPE_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TCHAR *rendezvous_point, gid_t=0, uid_t=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_addr</name>
      <anchor>a6</anchor>
      <arglist>(void *addr, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a7</anchor>
      <arglist>(ACE_TCHAR *addr, size_t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>string_to_addr</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR *addr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_SPIPE_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_SPIPE_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>get_path_name</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>uid_t</type>
      <name>user_id</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>user_id</name>
      <anchor>a13</anchor>
      <arglist>(uid_t uid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>group_id</name>
      <anchor>a14</anchor>
      <arglist>(gid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>gid_t</type>
      <name>group_id</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SPIPE_Addr::SPIPE_Addr</type>
      <name>SPIPE_addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_SPIPE_Addr::SPIPE_Addr</name>
    <filename>structACE__SPIPE__Addr_1_1SPIPE__Addr.html</filename>
    <member kind="variable">
      <type>gid_t</type>
      <name>gid_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uid_t</type>
      <name>uid_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR</type>
      <name>rendezvous_</name>
      <anchor>m2</anchor>
      <arglist>[MAXNAMLEN+1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SPIPE_Connector</name>
    <filename>classACE__SPIPE__Connector.html</filename>
    <member kind="typedef">
      <type>ACE_SPIPE_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_SPIPE_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_SPIPE_Stream &amp;new_io, const ACE_SPIPE_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a2</anchor>
      <arglist>(ACE_SPIPE_Stream &amp;new_io, const ACE_SPIPE_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset_new_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SPIPE_Stream</name>
    <filename>classACE__SPIPE__Stream.html</filename>
    <base>ACE_SPIPE</base>
    <member kind="typedef">
      <type>ACE_SPIPE_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SPIPE_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a1</anchor>
      <arglist>(ACE_SPIPE_Addr &amp;remote_sap) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_handle</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE handle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE &amp;handle) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv_handle</name>
      <anchor>a4</anchor>
      <arglist>(strrecvfd &amp;recvfd) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a5</anchor>
      <arglist>(const void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a6</anchor>
      <arglist>(void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a7</anchor>
      <arglist>(const void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a8</anchor>
      <arglist>(void *buf, size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Str_Buf *cntl, const ACE_Str_Buf *data, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Str_Buf *cntl, ACE_Str_Buf *data, int *flags) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Str_Buf *cntl, const ACE_Str_Buf *data, int band, int flags) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Str_Buf *cntl, ACE_Str_Buf *data, int *band, int *flags) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a13</anchor>
      <arglist>(const iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a14</anchor>
      <arglist>(iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a15</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a16</anchor>
      <arglist>(size_t n,...) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a17</anchor>
      <arglist>(const void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a18</anchor>
      <arglist>(void *buf, size_t n, ACE_OVERLAPPED *overlapped) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>sendv</name>
      <anchor>a19</anchor>
      <arglist>(const iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>sendv_n</name>
      <anchor>a20</anchor>
      <arglist>(const iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recvv_n</name>
      <anchor>a21</anchor>
      <arglist>(iovec iov[], size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SPIPE_Addr</type>
      <name>remote_addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_SPIPE_Acceptor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_SPIPE_Connector</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SString</name>
    <filename>classACE__SString.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_SString</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SString</name>
      <anchor>a1</anchor>
      <arglist>(const char *s, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SString</name>
      <anchor>a2</anchor>
      <arglist>(const char *s, size_t len, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SString</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_SString &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SString</name>
      <anchor>a4</anchor>
      <arglist>(char c, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SString</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(size_t slot) const</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(size_t slot)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SString &amp;</type>
      <name>operator=</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_SString &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SString</type>
      <name>substring</name>
      <anchor>a9</anchor>
      <arglist>(size_t offset, ssize_t length=-1) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_SString</type>
      <name>substr</name>
      <anchor>a10</anchor>
      <arglist>(size_t offset, ssize_t length=-1) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>hash</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rep</name>
      <anchor>a13</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>rep</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>fast_rep</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strstr</name>
      <anchor>a17</anchor>
      <arglist>(const ACE_SString &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a18</anchor>
      <arglist>(const ACE_SString &amp;str, int pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a19</anchor>
      <arglist>(const char *s, int pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a20</anchor>
      <arglist>(char c, int pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rfind</name>
      <anchor>a21</anchor>
      <arglist>(char c, int pos=npos) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a22</anchor>
      <arglist>(const ACE_SString &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchor>a23</anchor>
      <arglist>(const ACE_SString &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchor>a24</anchor>
      <arglist>(const ACE_SString &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a25</anchor>
      <arglist>(const ACE_SString &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchor>a26</anchor>
      <arglist>(const ACE_SString &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a27</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const int</type>
      <name>npos</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>len_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>rep_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Static_Allocator</name>
    <filename>classACE__Static__Allocator.html</filename>
    <templarg>POOL_SIZE</templarg>
    <base>ACE_Static_Allocator_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Static_Allocator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>pool_</name>
      <anchor>o0</anchor>
      <arglist>[POOL_SIZE]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Static_Allocator_Base</name>
    <filename>classACE__Static__Allocator__Base.html</filename>
    <base>ACE_Allocator</base>
    <member kind="function">
      <type></type>
      <name>ACE_Static_Allocator_Base</name>
      <anchor>a0</anchor>
      <arglist>(char *buffer, size_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>malloc</name>
      <anchor>a1</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a2</anchor>
      <arglist>(size_t nbytes, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>calloc</name>
      <anchor>a3</anchor>
      <arglist>(size_t n_elem, size_t elem_size, char initial_value=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free</name>
      <anchor>a4</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind</name>
      <anchor>a6</anchor>
      <arglist>(const char *name, void *pointer, int duplicates=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trybind</name>
      <anchor>a7</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a8</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchor>a9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a10</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind</name>
      <anchor>a11</anchor>
      <arglist>(const char *name, void *&amp;pointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a12</anchor>
      <arglist>(ssize_t len=-1, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>a13</anchor>
      <arglist>(void *addr, size_t len, int flags=MS_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a14</anchor>
      <arglist>(ssize_t len=-1, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protect</name>
      <anchor>a15</anchor>
      <arglist>(void *addr, size_t len, int prot=PROT_RDWR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Static_Allocator_Base</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>buffer_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>offset_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Static_Function_Node</name>
    <filename>classACE__Static__Function__Node.html</filename>
    <base>ACE_Location_Node</base>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Static_Function_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *func_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>symbol</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Service_Object_Exterminator *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Static_Function_Node</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>function_name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Static_Node</name>
    <filename>classACE__Static__Node.html</filename>
    <base>ACE_Parse_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Static_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name, ACE_TCHAR *params=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Static_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ACE_Service_Type *</type>
      <name>record</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *</type>
      <name>parameters</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR *</type>
      <name>parameters_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Static_Object_Lock</name>
    <filename>classACE__Static__Object__Lock.html</filename>
    <member kind="function" static="yes">
      <type>ACE_Recursive_Thread_Mutex *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>cleanup_lock</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Static_Svc_Descriptor</name>
    <filename>classACE__Static__Svc__Descriptor.html</filename>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Static_Svc_Descriptor &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Static_Svc_Descriptor &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type>const ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_SERVICE_ALLOCATOR</type>
      <name>alloc_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int</type>
      <name>flags_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>active_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stats</name>
    <filename>classACE__Stats.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Stats</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sample</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_INT32 value)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>samples</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_INT32</type>
      <name>min_value</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_INT32</type>
      <name>max_value</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mean</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Stats_Value &amp;mean, const ACE_UINT32 scale_factor=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>std_dev</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Stats_Value &amp;std_dev, const ACE_UINT32 scale_factor=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>print_summary</name>
      <anchor>a7</anchor>
      <arglist>(const u_int precision, const ACE_UINT32 scale_factor=1, FILE *=stdout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>quotient</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_UINT64 dividend, const ACE_UINT32 divisor, ACE_Stats_Value &amp;quotient)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>quotient</name>
      <anchor>d1</anchor>
      <arglist>(const ACE_Stats_Value &amp;dividend, const ACE_UINT32 divisor, ACE_Stats_Value &amp;quotient)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>square_root</name>
      <anchor>d2</anchor>
      <arglist>(const ACE_UINT64 n, ACE_Stats_Value &amp;square_root)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int</type>
      <name>overflow_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>number_of_samples_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INT32</type>
      <name>min_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INT32</type>
      <name>max_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Unbounded_Queue&lt; ACE_INT32 &gt;</type>
      <name>samples_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stats_Value</name>
    <filename>classACE__Stats__Value.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Stats_Value</name>
      <anchor>a0</anchor>
      <arglist>(const u_int precision)</arglist>
    </member>
    <member kind="function">
      <type>u_int</type>
      <name>precision</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whole</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>whole</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fractional</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>fractional</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>fractional_field</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaled_value</name>
      <anchor>a7</anchor>
      <arglist>(ACE_UINT64 &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Stats_Value</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>whole_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>fractional_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int</type>
      <name>precision_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Str_Buf</name>
    <filename>classACE__Str__Buf.html</filename>
    <base>strbuf</base>
    <member kind="function">
      <type></type>
      <name>ACE_Str_Buf</name>
      <anchor>a0</anchor>
      <arglist>(void *b=0, int l=0, int max=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Str_Buf</name>
      <anchor>a1</anchor>
      <arglist>(strbuf &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Strategy_Acceptor</name>
    <filename>classACE__Strategy__Acceptor.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <base>ACE_Acceptor&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Strategy_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR service_name[]=0, const ACE_TCHAR service_description[]=0, int use_select=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Strategy_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;local_addr, ACE_Reactor *=ACE_Reactor::instance(), ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *=0, ACE_Accept_Strategy&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt; *=0, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *=0, ACE_Scheduling_Strategy&lt; SVC_HANDLER &gt; *=0, const ACE_TCHAR service_name[]=0, const ACE_TCHAR service_description[]=0, int use_select=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;, ACE_Reactor *=ACE_Reactor::instance(), ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *=0, ACE_Accept_Strategy&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt; *=0, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *=0, ACE_Scheduling_Strategy&lt; SVC_HANDLER &gt; *=0, const ACE_TCHAR *service_name=0, const ACE_TCHAR *service_description=0, int use_select=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Strategy_Acceptor</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator ACE_PEER_ACCEPTOR &amp;</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_PEER_ACCEPTOR &amp;</type>
      <name>acceptor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Creation_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>CREATION_STRATEGY</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Accept_Strategy&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt;</type>
      <name>ACCEPT_STRATEGY</name>
      <anchor>t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>CONCURRENCY_STRATEGY</name>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Scheduling_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>SCHEDULING_STRATEGY</name>
      <anchor>t3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>b3</anchor>
      <arglist>(ACE_TCHAR **buf, size_t) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>b4</anchor>
      <arglist>(SVC_HANDLER *&amp;)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>accept_svc_handler</name>
      <anchor>b5</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>b6</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>b7</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>b8</anchor>
      <arglist>(int signum, siginfo_t *, ucontext_t *)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CREATION_STRATEGY *</type>
      <name>creation_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_creation_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACCEPT_STRATEGY *</type>
      <name>accept_strategy_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_accept_strategy_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CONCURRENCY_STRATEGY *</type>
      <name>concurrency_strategy_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_concurrency_strategy_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>SCHEDULING_STRATEGY *</type>
      <name>scheduling_strategy_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_scheduling_strategy_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>service_name_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>service_description_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_short</type>
      <name>service_port_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_PEER_ACCEPTOR_ADDR</type>
      <name>service_addr_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Strategy_Connector</name>
    <filename>classACE__Strategy__Connector.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <base>ACE_Connector&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt;</base>
    <member kind="typedef">
      <type>ACE_Creation_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>CREATION_STRATEGY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt;</type>
      <name>CONNECT_STRATEGY</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>CONCURRENCY_STRATEGY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Connector&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt;</type>
      <name>SUPER</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Strategy_Connector</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Reactor *r=ACE_Reactor::instance(), ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *=0, ACE_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt; *=0, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *=0, int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Reactor *r, int flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Reactor *r=ACE_Reactor::instance(), ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *=0, ACE_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt; *=0, ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *=0, int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Strategy_Connector</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Creation_Strategy&lt; SVC_HANDLER &gt; *</type>
      <name>creation_strategy</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Connect_Strategy&lt; SVC_HANDLER, ACE_PEER_CONNECTOR_2 &gt; *</type>
      <name>connect_strategy</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt; *</type>
      <name>concurrency_strategy</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>b0</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>b1</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>connect_svc_handler</name>
      <anchor>b2</anchor>
      <arglist>(SVC_HANDLER *&amp;sh, SVC_HANDLER *&amp;sh_copy, const ACE_PEER_CONNECTOR_ADDR &amp;remote_addr, ACE_Time_Value *timeout, const ACE_PEER_CONNECTOR_ADDR &amp;local_addr, int reuse_addr, int flags, int perms)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>b3</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CREATION_STRATEGY *</type>
      <name>creation_strategy_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_creation_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CONNECT_STRATEGY *</type>
      <name>connect_strategy_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_connect_strategy_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CONCURRENCY_STRATEGY *</type>
      <name>concurrency_strategy_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_concurrency_strategy_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stream</name>
    <filename>classACE__Stream.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>M_DELETE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void *arg=0, ACE_Module&lt; ACE_SYNCH_USE &gt; *head=0, ACE_Module&lt; ACE_SYNCH_USE &gt; *tail=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(void *arg, ACE_Module&lt; ACE_SYNCH_USE &gt; *head=0, ACE_Module&lt; ACE_SYNCH_USE &gt; *tail=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(int flags=M_DELETE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Stream</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>push</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Module&lt; ACE_SYNCH_USE &gt; *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pop</name>
      <anchor>a5</anchor>
      <arglist>(int flags=M_DELETE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>top</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Module&lt; ACE_SYNCH_USE &gt; *&amp;mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>insert</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_TCHAR *prev_name, ACE_Module&lt; ACE_SYNCH_USE &gt; *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>replace</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_TCHAR *replace_name, ACE_Module&lt; ACE_SYNCH_USE &gt; *mod, int flags=M_DELETE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR *mod, int flags=M_DELETE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>head</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>tail</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>find</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_TCHAR *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>link</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Stream&lt; ACE_SYNCH_USE &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlink</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>put</name>
      <anchor>a15</anchor>
      <arglist>(ACE_Message_Block *mb, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Message_Block *&amp;mb, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>control</name>
      <anchor>a17</anchor>
      <arglist>(ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds cmd, void *args)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unlink_i</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>link_i</name>
      <anchor>c1</anchor>
      <arglist>(ACE_Stream&lt; ACE_SYNCH_USE &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>push_module</name>
      <anchor>c2</anchor>
      <arglist>(ACE_Module&lt; ACE_SYNCH_USE &gt; *, ACE_Module&lt; ACE_SYNCH_USE &gt; *=0, ACE_Module&lt; ACE_SYNCH_USE &gt; *=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>stream_head_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>stream_tail_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Stream&lt; ACE_SYNCH_USE &gt; *</type>
      <name>linked_us_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_MUTEX_T</type>
      <name>lock_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_CONDITION_T</type>
      <name>final_close_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Stream_Iterator&lt; ACE_SYNCH_USE &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stream_Head</name>
    <filename>classACE__Stream__Head.html</filename>
    <templarg></templarg>
    <base>ACE_Task&lt; ACE_SYNCH_USE &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Stream_Head</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Stream_Head</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(void *a=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(u_long flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>put</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *msg, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a6</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a7</anchor>
      <arglist>(ACE_TCHAR **info_string, size_t length) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>control</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>canonical_flush</name>
      <anchor>c1</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stream_Iterator</name>
    <filename>classACE__Stream__Iterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Stream_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Stream&lt; ACE_SYNCH_USE &gt; &amp;sr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Module&lt; ACE_SYNCH_USE &gt; *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>next_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stream_Node</name>
    <filename>classACE__Stream__Node.html</filename>
    <base>ACE_Parse_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Stream_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Static_Node *, const ACE_Parse_Node *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Stream_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Static_Node *</type>
      <name>node_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Parse_Node *</type>
      <name>mods_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stream_Tail</name>
    <filename>classACE__Stream__Tail.html</filename>
    <templarg></templarg>
    <base>ACE_Task&lt; ACE_SYNCH_USE &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Stream_Tail</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Stream_Tail</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(void *a=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(u_long flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>put</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *msg, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a6</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a7</anchor>
      <arglist>(ACE_TCHAR **info_string, size_t length) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>control</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>canonical_flush</name>
      <anchor>c1</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Stream_Type</name>
    <filename>classACE__Stream__Type.html</filename>
    <base>ACE_Service_Type_Impl</base>
    <member kind="function">
      <type></type>
      <name>ACE_Stream_Type</name>
      <anchor>a0</anchor>
      <arglist>(void *s, const ACE_TCHAR *identifier, u_int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Stream_Type</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a4</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[]) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>(ACE_TCHAR **str, size_t len) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>push</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Module_Type *new_module)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Module_Type *module)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Module_Type *</type>
      <name>find</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_TCHAR *mod_name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Module_Type *</type>
      <name>head_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Streambuf</name>
    <filename>classACE__Streambuf.html</filename>
    <base>streambuf</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Streambuf</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value *</type>
      <name>recv_timeout</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Time_Value *tv=NULL)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>reset_put_buffer</name>
      <anchor>a2</anchor>
      <arglist>(char *newBuffer=NULL, u_int _streambuf_size=0, u_int _pptr=0)</arglist>
    </member>
    <member kind="function">
      <type>u_int</type>
      <name>put_avail</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>reset_get_buffer</name>
      <anchor>a4</anchor>
      <arglist>(char *newBuffer=NULL, u_int _streambuf_size=0, u_int _gptr=0, u_int _egptr=0)</arglist>
    </member>
    <member kind="function">
      <type>u_int</type>
      <name>get_waiting</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>u_int</type>
      <name>get_avail</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>u_int</type>
      <name>streambuf_size</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>u_char</type>
      <name>timeout</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Streambuf</name>
      <anchor>b0</anchor>
      <arglist>(u_int streambuf_size, int io_mode)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>underflow</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>overflow</name>
      <anchor>b3</anchor>
      <arglist>(int=EOF)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>reset_base</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>syncin</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>syncout</name>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>flushbuf</name>
      <anchor>b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>fillbuf</name>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>get_one_byte</name>
      <anchor>b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>send</name>
      <anchor>b10</anchor>
      <arglist>(char *buf, ssize_t len)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>b11</anchor>
      <arglist>(char *buf, ssize_t len, ACE_Time_Value *tv=NULL)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>b12</anchor>
      <arglist>(char *buf, ssize_t len, int flags, ACE_Time_Value *tv=NULL)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>recv_n</name>
      <anchor>b13</anchor>
      <arglist>(char *buf, ssize_t len, int flags=0, ACE_Time_Value *tv=NULL)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>b14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>eback_saved_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>gptr_saved_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>egptr_saved_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>pbase_saved_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>pptr_saved_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>epptr_saved_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_char</type>
      <name>cur_mode_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const u_char</type>
      <name>get_mode_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const u_char</type>
      <name>put_mode_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>mode_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const u_int</type>
      <name>streambuf_size_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_char</type>
      <name>timeout_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>recv_timeout_value_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value *</type>
      <name>recv_timeout_</name>
      <anchor>n13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Streambuf_T</name>
    <filename>classACE__Streambuf__T.html</filename>
    <templarg>STREAM</templarg>
    <base>ACE_Streambuf</base>
    <member kind="function">
      <type></type>
      <name>ACE_Streambuf_T</name>
      <anchor>a0</anchor>
      <arglist>(STREAM *peer, u_int streambuf_size=ACE_STREAMBUF_SIZE, int io_mode=ios::in|ios::out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>send</name>
      <anchor>a1</anchor>
      <arglist>(char *buf, ssize_t len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>a2</anchor>
      <arglist>(char *buf, ssize_t len, ACE_Time_Value *tv=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>a3</anchor>
      <arglist>(char *buf, ssize_t len, int flags, ACE_Time_Value *tv=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>recv_n</name>
      <anchor>a4</anchor>
      <arglist>(char *buf, ssize_t len, int flags=0, ACE_Time_Value *tv=NULL)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>STREAM *</type>
      <name>peer_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_String_Base</name>
    <filename>classACE__String__Base.html</filename>
    <templarg>CHAR</templarg>
    <base>ACE_String_Base_Const</base>
    <member kind="function">
      <type></type>
      <name>ACE_String_Base</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_String_Base</name>
      <anchor>a1</anchor>
      <arglist>(const CHAR *s, ACE_Allocator *alloc=0, int release=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_String_Base</name>
      <anchor>a2</anchor>
      <arglist>(const CHAR *s, size_t len, ACE_Allocator *alloc=0, int release=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_String_Base</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_String_Base</name>
      <anchor>a4</anchor>
      <arglist>(CHAR c, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_String_Base</name>
      <anchor>a5</anchor>
      <arglist>(size_t len, CHAR c=0, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_String_Base</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const CHAR &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(size_t slot) const</arglist>
    </member>
    <member kind="function">
      <type>CHAR &amp;</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(size_t slot)</arglist>
    </member>
    <member kind="function">
      <type>ACE_String_Base&lt; CHAR &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a10</anchor>
      <arglist>(const CHAR *s, int release=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a11</anchor>
      <arglist>(const CHAR *s, size_t len, int release)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchor>a12</anchor>
      <arglist>(int release=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_String_Base&lt; CHAR &gt;</type>
      <name>substring</name>
      <anchor>a13</anchor>
      <arglist>(size_t offset, ssize_t length=-1) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_String_Base&lt; CHAR &gt;</type>
      <name>substr</name>
      <anchor>a14</anchor>
      <arglist>(size_t offset, ssize_t length=-1) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_String_Base&lt; CHAR &gt; &amp;</type>
      <name>operator+=</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>hash</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CHAR *</type>
      <name>rep</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const CHAR *</type>
      <name>fast_rep</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const CHAR *</type>
      <name>c_str</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strstr</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a22</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;str, int pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a23</anchor>
      <arglist>(const CHAR *s, int pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a24</anchor>
      <arglist>(CHAR c, int pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rfind</name>
      <anchor>a25</anchor>
      <arglist>(CHAR c, int pos=npos) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a26</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchor>a27</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchor>a28</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a29</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchor>a30</anchor>
      <arglist>(const ACE_String_Base&lt; CHAR &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a31</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchor>a32</anchor>
      <arglist>(size_t len, CHAR c=0)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>len_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>buf_len_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CHAR *</type>
      <name>rep_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>release_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>CHAR</type>
      <name>NULL_String_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_String_Base_Const</name>
    <filename>classACE__String__Base__Const.html</filename>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>npos</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_StringCapEntry</name>
    <filename>classACE__StringCapEntry.html</filename>
    <base>ACE_CapEntry</base>
    <member kind="function">
      <type></type>
      <name>ACE_StringCapEntry</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TString &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TString</type>
      <name>getval</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TString</type>
      <name>val_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Strong_Bound_Ptr</name>
    <filename>classACE__Strong__Bound__Ptr.html</filename>
    <templarg>X</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Strong_Bound_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Strong_Bound_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(auto_ptr&lt; X &gt; p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Strong_Bound_Ptr</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Strong_Bound_Ptr</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Strong_Bound_Ptr</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a9</anchor>
      <arglist>(X *p) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a12</anchor>
      <arglist>(X *p) const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>operator-&gt;</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator *</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>get</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a16</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a17</anchor>
      <arglist>(auto_ptr&lt; X &gt; p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>null</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt;</type>
      <name>COUNTER</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>COUNTER *</type>
      <name>counter_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>X *</type>
      <name>ptr_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Sub_Barrier</name>
    <filename>structACE__Sub__Barrier.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Sub_Barrier</name>
      <anchor>a0</anchor>
      <arglist>(u_int count, ACE_Thread_Mutex &amp;lock, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Sub_Barrier</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Condition_Thread_Mutex</type>
      <name>barrier_finished_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>running_threads_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Suspend_Node</name>
    <filename>classACE__Suspend__Node.html</filename>
    <base>ACE_Parse_Node</base>
    <member kind="function">
      <type></type>
      <name>ACE_Suspend_Node</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Suspend_Node</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SV_Message</name>
    <filename>classACE__SV__Message.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Message</name>
      <anchor>a0</anchor>
      <arglist>(long type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SV_Message</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>type</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a3</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>long</type>
      <name>type_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SV_Message_Queue</name>
    <filename>classACE__SV__Message__Queue.html</filename>
    <member kind="enumvalue">
      <name>ACE_CREATE</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_NOWAIT</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(key_t external_id, int create=ACE_SV_Message_Queue::ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(key_t external_id, int create=ACE_SV_Message_Queue::ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SV_Message_Queue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv</name>
      <anchor>a6</anchor>
      <arglist>(ACE_SV_Message &amp;mb, int length, long mtype=0, int mflags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_SV_Message &amp;mb, int length, int mflags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a8</anchor>
      <arglist>(int option, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_id</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>internal_id_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SV_Semaphore_Complex</name>
    <filename>classACE__SV__Semaphore__Complex.html</filename>
    <base protection="private">ACE_SV_Semaphore_Simple</base>
    <member kind="enumvalue">
      <name>ACE_CREATE</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Semaphore_Complex</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Semaphore_Complex</name>
      <anchor>a1</anchor>
      <arglist>(key_t key, int create=ACE_SV_Semaphore_Complex::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Semaphore_Complex</name>
      <anchor>a2</anchor>
      <arglist>(const char *name, int create=ACE_SV_Semaphore_Complex::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SV_Semaphore_Complex</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(const char *name, int flags=ACE_SV_Semaphore_Simple::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a5</anchor>
      <arglist>(key_t key, int flags=ACE_SV_Semaphore_Simple::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a7</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a8</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a9</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a10</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a11</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a12</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a13</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>op</name>
      <anchor>a14</anchor>
      <arglist>(int val, u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>op</name>
      <anchor>a15</anchor>
      <arglist>(sembuf op_vec[], u_short n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a16</anchor>
      <arglist>(int cmd, semun arg, u_short n=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a17</anchor>
      <arglist>(int cmd, int value=0, u_short n=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const int</type>
      <name>BIGCOUNT_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>sembuf</type>
      <name>op_lock_</name>
      <anchor>r1</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>sembuf</type>
      <name>op_endcreate_</name>
      <anchor>r2</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>sembuf</type>
      <name>op_open_</name>
      <anchor>r3</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>sembuf</type>
      <name>op_close_</name>
      <anchor>r4</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>sembuf</type>
      <name>op_unlock_</name>
      <anchor>r5</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SV_Semaphore_Simple</name>
    <filename>classACE__SV__Semaphore__Simple.html</filename>
    <member kind="enumvalue">
      <name>ACE_CREATE</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_EXCL</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Semaphore_Simple</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Semaphore_Simple</name>
      <anchor>a1</anchor>
      <arglist>(key_t key, int flags=ACE_SV_Semaphore_Simple::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Semaphore_Simple</name>
      <anchor>a2</anchor>
      <arglist>(const char *name, int flags=ACE_SV_Semaphore_Simple::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_SV_Semaphore_Simple</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(const char *name, int flags=ACE_SV_Semaphore_Simple::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a5</anchor>
      <arglist>(key_t key, int flags=ACE_SV_Semaphore_Simple::ACE_CREATE, int initial_value=1, u_short nsems=1, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a8</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a9</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a10</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a11</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a12</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a13</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a14</anchor>
      <arglist>(u_short n=0, int flags=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>op</name>
      <anchor>a15</anchor>
      <arglist>(int val, u_short semnum=0, int flags=SEM_UNDO) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>op</name>
      <anchor>a16</anchor>
      <arglist>(sembuf op_vec[], u_short nsems) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a17</anchor>
      <arglist>(int cmd, semun arg, u_short n=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a18</anchor>
      <arglist>(int cmd, int value=0, u_short n=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_id</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>init</name>
      <anchor>b0</anchor>
      <arglist>(key_t k=ACE_static_cast(key_t, ACE_INVALID_SEM_KEY), int i=-1)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>key_t</type>
      <name>name_2_key</name>
      <anchor>b1</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>key_t</type>
      <name>key_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>internal_id_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>sem_number_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_SV_Shared_Memory</name>
    <filename>classACE__SV__Shared__Memory.html</filename>
    <member kind="enumvalue">
      <name>ACE_CREATE</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Shared_Memory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Shared_Memory</name>
      <anchor>a1</anchor>
      <arglist>(key_t external_id, size_t size, int create, int perms=ACE_DEFAULT_FILE_PERMS, void *virtual_addr=0, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_SV_Shared_Memory</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE internal_id, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(key_t external_id, size_t size, int create=ACE_SV_Shared_Memory::ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open_and_attach</name>
      <anchor>a4</anchor>
      <arglist>(key_t external_id, size_t size, int create=ACE_SV_Shared_Memory::ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS, void *virtual_addr=0, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>attach</name>
      <anchor>a5</anchor>
      <arglist>(void *virtual_addr=0, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>detach</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a8</anchor>
      <arglist>(int cmd, void *buf)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_segment_ptr</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_segment_size</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_id</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALIGN_WORDB</name>
      <anchor>t1t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>round_up</name>
      <anchor>b0</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>internal_id_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>segment_ptr_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Svc_Conf_Lexer_Guard</name>
    <filename>classACE__Svc__Conf__Lexer__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Svc_Conf_Lexer_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Svc_Conf_Param *param)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Svc_Conf_Lexer_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ace_yy_buffer_state *</type>
      <name>buffer_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Svc_Conf_Param</name>
    <filename>classACE__Svc__Conf__Param.html</filename>
    <member kind="enumeration">
      <name>SVC_CONF_PARAM_TYPE</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SVC_CONF_FILE</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SVC_CONF_DIRECTIVE</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Svc_Conf_Param</name>
      <anchor>a0</anchor>
      <arglist>(FILE *file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Svc_Conf_Param</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_TCHAR *directive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Svc_Conf_Param</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Svc_Conf_Param::@44</type>
      <name>source</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SVC_CONF_PARAM_TYPE</type>
      <name>type</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yyerrno</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yylineno</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ace_yy_buffer_state *</type>
      <name>buffer</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Obstack_T&lt; ACE_TCHAR &gt;</type>
      <name>obstack</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>file</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ACE_TCHAR *</type>
      <name>directive</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Svc_Handler</name>
    <filename>classACE__Svc__Handler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ACE_Task&lt; ACE_SYNCH_USE &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Svc_Handler</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *thr_mgr=0, ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; *mq=0, ACE_Reactor *reactor=ACE_Reactor::instance())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Svc_Handler</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(void *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(u_long flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idle</name>
      <anchor>a4</anchor>
      <arglist>(u_long flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Recyclable_State</type>
      <name>recycle_state</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recycle_state</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Recyclable_State new_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup_hint</name>
      <anchor>a7</anchor>
      <arglist>(void **act_holder=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a8</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a10</anchor>
      <arglist>(ACE_TCHAR **info_string, size_t length) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>a11</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_Time_Value &amp;time, const void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_handle</name>
      <anchor>a14</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>ACE_PEER_STREAM &amp;</type>
      <name>peer</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchor>a16</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchor>a17</anchor>
      <arglist>(size_t n, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchor>a19</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchor>a20</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recycler</name>
      <anchor>a23</anchor>
      <arglist>(ACE_Connection_Recycling_Strategy *recycler, const void *recycling_act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Connection_Recycling_Strategy *</type>
      <name>recycler</name>
      <anchor>a24</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>recycling_act</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recycle</name>
      <anchor>a26</anchor>
      <arglist>(void *=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_PEER_STREAM</type>
      <name>peer_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>dynamic_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char</type>
      <name>closing_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Connection_Recycling_Strategy *</type>
      <name>recycler_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const void *</type>
      <name>recycling_act_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Svc_Tuple</name>
    <filename>classACE__Svc__Tuple.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Svc_Tuple</name>
      <anchor>a0</anchor>
      <arglist>(SVC_HANDLER *, ACE_HANDLE, const void *=0, long timer_id=-1)</arglist>
    </member>
    <member kind="function">
      <type>SVC_HANDLER *</type>
      <name>svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arg</name>
      <anchor>a5</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>cancellation_id</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancellation_id</name>
      <anchor>a7</anchor>
      <arglist>(long timer_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SVC_HANDLER *</type>
      <name>svc_handler_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>arg_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>cancellation_id_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Synch_Options</name>
    <filename>classACE__Synch__Options.html</filename>
    <member kind="enumvalue">
      <name>USE_REACTOR</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USE_TIMEOUT</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Synch_Options</name>
      <anchor>a0</anchor>
      <arglist>(u_long options=0, const ACE_Time_Value &amp;timeout=ACE_Time_Value::zero, const void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Synch_Options</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(u_long options=0, const ACE_Time_Value &amp;timeout=ACE_Time_Value::zero, const void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchor>a3</anchor>
      <arglist>(u_long option) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(u_long option)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>arg</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arg</name>
      <anchor>a6</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value &amp;</type>
      <name>timeout</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value *</type>
      <name>time_value</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_Synch_Options</type>
      <name>defaults</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_Synch_Options</type>
      <name>synch</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_Synch_Options</type>
      <name>asynch</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>options_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>timeout_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>arg_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_System_Time</name>
    <filename>classACE__System__Time.html</filename>
    <member kind="enumeration">
      <name>Sync_Mode</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Jump</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Adjust</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_System_Time</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *poolname=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_System_Time</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_master_system_time</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UINT32 &amp;time_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_master_system_time</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value &amp;time_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync_local_system_time</name>
      <anchor>a4</anchor>
      <arglist>(ACE_System_Time::Sync_Mode mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_local_system_time</name>
      <anchor>d0</anchor>
      <arglist>(ACE_UINT32 &amp;time_out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_local_system_time</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Time_Value &amp;time_out)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Malloc&lt; ACE_MMAP_MEMORY_POOL, ACE_Null_Mutex &gt;</type>
      <name>MALLOC</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Allocator_Adapter&lt; MALLOC &gt;</type>
      <name>ALLOCATOR</name>
      <anchor>u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALLOCATOR *</type>
      <name>shmem_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TCHAR</type>
      <name>poolname_</name>
      <anchor>o1</anchor>
      <arglist>[MAXPATHLEN+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long *</type>
      <name>delta_time_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Task</name>
    <filename>classACE__Task.html</filename>
    <templarg></templarg>
    <base>ACE_Task_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Task</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *thr_mgr=0, ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; *mq=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Task</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; *</type>
      <name>msg_queue</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_queue</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putq</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getq</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block *&amp;mb, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ungetq</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Message_Block *, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reply</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Message_Block *, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>put_next</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Message_Block *msg, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>can_put</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block *)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_TCHAR *</type>
      <name>name</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Task&lt; ACE_SYNCH_USE &gt; *</type>
      <name>next</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Task&lt; ACE_SYNCH_USE &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Task&lt; ACE_SYNCH_USE &gt; *</type>
      <name>sibling</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flush</name>
      <anchor>a14</anchor>
      <arglist>(u_long flag=ACE_Task_Flags::ACE_FLUSHALL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>water_marks</name>
      <anchor>a15</anchor>
      <arglist>(ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds, size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>module void</type>
      <name>const</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Message_Queue&lt; ACE_SYNCH_USE &gt; *</type>
      <name>msg_queue_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>delete_msg_queue_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Module&lt; ACE_SYNCH_USE &gt; *</type>
      <name>mod_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Task&lt; ACE_SYNCH_USE &gt; *</type>
      <name>next_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Task&lt; _ACE_SYNCH_MUTEX_T, _ACE_SYNCH_CONDITION_T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Task</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Task&lt; _ACE_SYNCH_MUTEX_T, _ACE_SYNCH_CONDITION_T &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Module&lt; ACE_SYNCH_USE &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Module_Type</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Task_Base</name>
    <filename>classACE__Task__Base.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>ACE_Task_Base</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Task_Base</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(void *args=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(u_long flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>module_closed</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>put</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block *, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a7</anchor>
      <arglist>(long flags=THR_NEW_LWP|THR_JOINABLE, int n_threads=1, int force_active=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, ACE_Task_Base *task=0, ACE_hthread_t thread_handles[]=0, void *stack[]=0, size_t stack_size[]=0, ACE_thread_t thread_ids[]=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>grp_id</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grp_id</name>
      <anchor>a12</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thr_mgr</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Thread_Manager *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_reader</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_writer</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>thr_count</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thr_count_dec</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void *</type>
      <name>svc_run</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>cleanup</name>
      <anchor>d1</anchor>
      <arglist>(void *object, void *params)</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>thr_count_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_long</type>
      <name>flags_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>grp_id_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Task_Base &amp;</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Task_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Task_Base</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Task_Base &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Task_Flags</name>
    <filename>classACE__Task__Flags.html</filename>
    <member kind="enumvalue">
      <name>ACE_READER</name>
      <anchor>s6s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_FLUSHDATA</name>
      <anchor>s6s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_FLUSHALL</name>
      <anchor>s6s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_FLUSHR</name>
      <anchor>s6s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_FLUSHW</name>
      <anchor>s6s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_FLUSHRW</name>
      <anchor>s6s5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Test_and_Set</name>
    <filename>classACE__Test__and__Set.html</filename>
    <templarg>ACE_LOCK</templarg>
    <templarg>TYPE</templarg>
    <base>ACE_Event_Handler</base>
    <member kind="function">
      <type></type>
      <name>ACE_Test_and_Set</name>
      <anchor>a0</anchor>
      <arglist>(TYPE initial_value=0)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>is_set</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(TYPE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>a3</anchor>
      <arglist>(int signum, siginfo_t *=0, ucontext_t *=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>is_set_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_LOCK</type>
      <name>lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread</name>
    <filename>classACE__Thread.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>spawn</name>
      <anchor>d0</anchor>
      <arglist>(ACE_THR_FUNC func, void *arg=0, long flags=THR_NEW_LWP|THR_JOINABLE, ACE_thread_t *t_id=0, ACE_hthread_t *t_handle=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, void *stack=0, size_t stack_size=0, ACE_Thread_Adapter *thread_adapter=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>spawn_n</name>
      <anchor>d1</anchor>
      <arglist>(size_t n, ACE_THR_FUNC func, void *arg=0, long flags=THR_NEW_LWP|THR_JOINABLE, long priority=ACE_DEFAULT_THREAD_PRIORITY, void *stack[]=0, size_t stack_size[]=0, ACE_Thread_Adapter *thread_adapter=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>spawn_n</name>
      <anchor>d2</anchor>
      <arglist>(ACE_thread_t thread_ids[], size_t n, ACE_THR_FUNC func, void *arg, long flags, long priority=ACE_DEFAULT_THREAD_PRIORITY, void *stack[]=0, size_t stack_size[]=0, ACE_hthread_t thread_handles[]=0, ACE_Thread_Adapter *thread_adapter=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>join</name>
      <anchor>d3</anchor>
      <arglist>(ACE_thread_t, ACE_thread_t *, void **status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>join</name>
      <anchor>d4</anchor>
      <arglist>(ACE_hthread_t, void **=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>resume</name>
      <anchor>d5</anchor>
      <arglist>(ACE_hthread_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>suspend</name>
      <anchor>d6</anchor>
      <arglist>(ACE_hthread_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getprio</name>
      <anchor>d7</anchor>
      <arglist>(ACE_hthread_t, int &amp;prio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setprio</name>
      <anchor>d8</anchor>
      <arglist>(ACE_hthread_t, int prio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>kill</name>
      <anchor>d9</anchor>
      <arglist>(ACE_thread_t, int signum)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>yield</name>
      <anchor>d10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>self</name>
      <anchor>d11</anchor>
      <arglist>(ACE_hthread_t &amp;t_handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_thread_t</type>
      <name>self</name>
      <anchor>d12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>exit</name>
      <anchor>d13</anchor>
      <arglist>(void *status=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getconcurrency</name>
      <anchor>d14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setconcurrency</name>
      <anchor>d15</anchor>
      <arglist>(int new_level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>sigsetmask</name>
      <anchor>d16</anchor>
      <arglist>(int how, const sigset_t *sigset, sigset_t *osigset=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>keycreate</name>
      <anchor>d17</anchor>
      <arglist>(ACE_thread_key_t *keyp, ACE_THR_DEST destructor, void *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>keyfree</name>
      <anchor>d18</anchor>
      <arglist>(ACE_thread_key_t key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setspecific</name>
      <anchor>d19</anchor>
      <arglist>(ACE_thread_key_t key, void *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>getspecific</name>
      <anchor>d20</anchor>
      <arglist>(ACE_thread_key_t key, void **valuep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>disablecancel</name>
      <anchor>d21</anchor>
      <arglist>(struct cancel_state *old_state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>enablecancel</name>
      <anchor>d22</anchor>
      <arglist>(struct cancel_state *old_state, int flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>setcancelstate</name>
      <anchor>d23</anchor>
      <arglist>(struct cancel_state &amp;new_state, struct cancel_state *old_state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>cancel</name>
      <anchor>d24</anchor>
      <arglist>(ACE_thread_t t_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>testcancel</name>
      <anchor>d25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Thread</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Adapter</name>
    <filename>classACE__Thread__Adapter.html</filename>
    <base>ACE_Base_Thread_Adapter</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_THR_FUNC user_func, void *arg, ACE_THR_C_FUNC entry_point=(ACE_THR_C_FUNC) ace_thread_adapter, ACE_Thread_Manager *thr_mgr=0, ACE_Thread_Descriptor *td=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>invoke</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ACE_Thread_Adapter</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void *</type>
      <name>invoke_i</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Thread_Adapter_Has_Private_Destructor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Barrier</name>
    <filename>classACE__Thread__Barrier.html</filename>
    <base>ACE_Barrier</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Barrier</name>
      <anchor>a0</anchor>
      <arglist>(u_int count, const ACE_TCHAR *name=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Barrier</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Condition</name>
    <filename>classACE__Thread__Condition.html</filename>
    <templarg>MUTEX</templarg>
    <base>ACE_Condition</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Condition</name>
      <anchor>a0</anchor>
      <arglist>(MUTEX &amp;m, const ACE_TCHAR *name=0, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Control</name>
    <filename>classACE__Thread__Control.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Control</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *tm=0, int insert=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Control</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>exit</name>
      <anchor>a2</anchor>
      <arglist>(void *status, int do_thr_exit)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Thread_Manager *tm, int insert=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Thread_Manager *)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>status</name>
      <anchor>a6</anchor>
      <arglist>(void *status)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>status</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Manager *</type>
      <name>tm_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>status_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Descriptor</name>
    <filename>classACE__Thread__Descriptor.html</filename>
    <base>ACE_Thread_Descriptor_Base</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Descriptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_thread_t</type>
      <name>self</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>self</name>
      <anchor>a2</anchor>
      <arglist>(ACE_hthread_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log_msg_cleanup</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Log_Msg *log_msg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>at_exit</name>
      <anchor>a5</anchor>
      <arglist>(ACE_At_Thread_Exit *cleanup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>at_exit</name>
      <anchor>a6</anchor>
      <arglist>(ACE_At_Thread_Exit &amp;cleanup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>at_exit</name>
      <anchor>a7</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Descriptor</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire_release</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE_FOR_GNUC void</type>
      <name>set_next</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Thread_Descriptor *td)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE_FOR_GNUC ACE_Thread_Descriptor *</type>
      <name>get_next</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Thread_Manager *tm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_pop</name>
      <anchor>c1</anchor>
      <arglist>(int apply=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_push</name>
      <anchor>c2</anchor>
      <arglist>(ACE_At_Thread_Exit *cleanup, int is_owner=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_at_exit</name>
      <anchor>c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>terminate</name>
      <anchor>c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Log_Msg *</type>
      <name>log_msg_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_At_Thread_Exit *</type>
      <name>at_exit_list_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Cleanup_Info</type>
      <name>cleanup_info_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Manager *</type>
      <name>tm_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_DEFAULT_THREAD_MANAGER_LOCK *</type>
      <name>sync_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>terminated_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_At_Thread_Exit</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Thread_Manager</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List&lt; ACE_Thread_Descriptor &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator&lt; ACE_Thread_Descriptor &gt;</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Descriptor_Base</name>
    <filename>classACE__Thread__Descriptor__Base.html</filename>
    <base>ACE_OS_Thread_Descriptor</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Descriptor_Base</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Descriptor_Base</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Thread_Descriptor_Base &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Thread_Descriptor_Base &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>grp_id</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>state</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Task_Base *</type>
      <name>task</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>reset</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_thread_t</type>
      <name>thr_id_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_hthread_t</type>
      <name>thr_handle_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>grp_id_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_UINT32</type>
      <name>thr_state_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Task_Base *</type>
      <name>task_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Descriptor_Base *</type>
      <name>next_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Descriptor_Base *</type>
      <name>prev_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Thread_Manager</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List&lt; ACE_Thread_Descriptor_Base &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator_Base&lt; ACE_Thread_Descriptor_Base &gt;</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator&lt; ACE_Thread_Descriptor_Base &gt;</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List&lt; ACE_Thread_Descriptor &gt;</name>
      <anchor>l4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator_Base&lt; ACE_Thread_Descriptor &gt;</name>
      <anchor>l5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Double_Linked_List_Iterator&lt; ACE_Thread_Descriptor &gt;</name>
      <anchor>l6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Exit</name>
    <filename>classACE__Thread__Exit.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Exit</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thr_mgr</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Thread_Manager *tm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Exit</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Exit *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>cleanup</name>
      <anchor>d1</anchor>
      <arglist>(void *instance, void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Control</type>
      <name>thread_control_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>u_int</type>
      <name>is_constructed_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_OS_Object_Manager</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Exit_Maybe</name>
    <filename>classACE__Thread__Exit__Maybe.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Exit_Maybe</name>
      <anchor>a0</anchor>
      <arglist>(int flag=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Exit_Maybe</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Exit *</type>
      <name>operator-&gt;</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Exit *</type>
      <name>instance</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Exit *</type>
      <name>instance_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Hook</name>
    <filename>classACE__Thread__Hook.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>start</name>
      <anchor>a0</anchor>
      <arglist>(ACE_THR_FUNC func, void *arg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Thread_Hook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_ID</name>
    <filename>classACE__Thread__ID.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_ID</name>
      <anchor>a0</anchor>
      <arglist>(ACE_thread_t, ACE_hthread_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_ID</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Thread_ID &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>ACE_thread_t</type>
      <name>id</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>id</name>
      <anchor>a3</anchor>
      <arglist>(ACE_thread_t)</arglist>
    </member>
    <member kind="function">
      <type>ACE_hthread_t</type>
      <name>handle</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(ACE_hthread_t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Thread_ID &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Thread_ID &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_thread_t</type>
      <name>thread_id_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_hthread_t</type>
      <name>thread_handle_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Manager</name>
    <filename>classACE__Thread__Manager.html</filename>
    <member kind="typedef">
      <type>int(ACE_Thread_Manager::*</type>
      <name>ACE_THR_MEMBER_FUNC</name>
      <anchor>s0</anchor>
      <arglist>)(ACE_Thread_Descriptor *, int)</arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_THR_IDLE</name>
      <anchor>s8s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_THR_SPAWNED</name>
      <anchor>s8s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_THR_RUNNING</name>
      <anchor>s8s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_THR_SUSPENDED</name>
      <anchor>s8s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_THR_CANCELLED</name>
      <anchor>s8s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_THR_TERMINATED</name>
      <anchor>s8s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_THR_JOINING</name>
      <anchor>s8s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Manager</name>
      <anchor>a0</anchor>
      <arglist>(size_t preaolloc=ACE_DEFAULT_THREAD_MANAGER_PREALLOC, size_t lwm=ACE_DEFAULT_THREAD_MANAGER_LWM, size_t inc=ACE_DEFAULT_THREAD_MANAGER_INC, size_t hwm=ACE_DEFAULT_THREAD_MANAGER_HWM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Thread_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>spawn</name>
      <anchor>a4</anchor>
      <arglist>(ACE_THR_FUNC func, void *args=0, long flags=THR_NEW_LWP|THR_JOINABLE, ACE_thread_t *=0, ACE_hthread_t *t_handle=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, void *stack=0, size_t stack_size=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>spawn_n</name>
      <anchor>a5</anchor>
      <arglist>(size_t n, ACE_THR_FUNC func, void *args=0, long flags=THR_NEW_LWP|THR_JOINABLE, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, ACE_Task_Base *task=0, ACE_hthread_t thread_handles[]=0, void *stack[]=0, size_t stack_size[]=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>spawn_n</name>
      <anchor>a6</anchor>
      <arglist>(ACE_thread_t thread_ids[], size_t n, ACE_THR_FUNC func, void *args, long flags, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, void *stack[]=0, size_t stack_size[]=0, ACE_hthread_t thread_handles[]=0, ACE_Task_Base *task=0)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>exit</name>
      <anchor>a7</anchor>
      <arglist>(void *status=0, int do_thread_exit=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Time_Value *timeout=0, int abandon_detached_threads=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>join</name>
      <anchor>a9</anchor>
      <arglist>(ACE_thread_t tid, void **status=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait_grp</name>
      <anchor>a10</anchor>
      <arglist>(int grp_id)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Descriptor *</type>
      <name>thread_desc_self</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Descriptor *</type>
      <name>thread_descriptor</name>
      <anchor>a12</anchor>
      <arglist>(ACE_thread_t)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Descriptor *</type>
      <name>hthread_descriptor</name>
      <anchor>a13</anchor>
      <arglist>(ACE_hthread_t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thr_self</name>
      <anchor>a14</anchor>
      <arglist>(ACE_hthread_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_thread_t</type>
      <name>thr_self</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Task_Base *</type>
      <name>task</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>suspend_all</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>suspend</name>
      <anchor>a18</anchor>
      <arglist>(ACE_thread_t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>suspend_grp</name>
      <anchor>a19</anchor>
      <arglist>(int grp_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testsuspend</name>
      <anchor>a20</anchor>
      <arglist>(ACE_thread_t t_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resume_all</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resume</name>
      <anchor>a22</anchor>
      <arglist>(ACE_thread_t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resume_grp</name>
      <anchor>a23</anchor>
      <arglist>(int grp_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testresume</name>
      <anchor>a24</anchor>
      <arglist>(ACE_thread_t t_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>kill_all</name>
      <anchor>a25</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>kill</name>
      <anchor>a26</anchor>
      <arglist>(ACE_thread_t, int signum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>kill_grp</name>
      <anchor>a27</anchor>
      <arglist>(int grp_id, int signum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel_all</name>
      <anchor>a28</anchor>
      <arglist>(int async_cancel=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a29</anchor>
      <arglist>(ACE_thread_t, int async_cancel=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel_grp</name>
      <anchor>a30</anchor>
      <arglist>(int grp_id, int async_cancel=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testcancel</name>
      <anchor>a31</anchor>
      <arglist>(ACE_thread_t t_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_grp</name>
      <anchor>a32</anchor>
      <arglist>(ACE_thread_t, int grp_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_grp</name>
      <anchor>a33</anchor>
      <arglist>(ACE_thread_t, int &amp;grp_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait_task</name>
      <anchor>a34</anchor>
      <arglist>(ACE_Task_Base *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>suspend_task</name>
      <anchor>a35</anchor>
      <arglist>(ACE_Task_Base *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resume_task</name>
      <anchor>a36</anchor>
      <arglist>(ACE_Task_Base *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>kill_task</name>
      <anchor>a37</anchor>
      <arglist>(ACE_Task_Base *task, int signum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel_task</name>
      <anchor>a38</anchor>
      <arglist>(ACE_Task_Base *task, int async_cancel=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hthread_within</name>
      <anchor>a39</anchor>
      <arglist>(ACE_hthread_t handle)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thread_within</name>
      <anchor>a40</anchor>
      <arglist>(ACE_thread_t tid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_tasks_in_group</name>
      <anchor>a41</anchor>
      <arglist>(int grp_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_threads_in_task</name>
      <anchor>a42</anchor>
      <arglist>(ACE_Task_Base *task)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>task_list</name>
      <anchor>a43</anchor>
      <arglist>(int grp_id, ACE_Task_Base *task_list[], size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thread_list</name>
      <anchor>a44</anchor>
      <arglist>(ACE_Task_Base *task, ACE_thread_t thread_list[], size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hthread_list</name>
      <anchor>a45</anchor>
      <arglist>(ACE_Task_Base *task, ACE_hthread_t hthread_list[], size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thread_grp_list</name>
      <anchor>a46</anchor>
      <arglist>(int grp_id, ACE_thread_t thread_list[], size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hthread_grp_list</name>
      <anchor>a47</anchor>
      <arglist>(int grp_id, ACE_hthread_t hthread_list[], size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>task_all_list</name>
      <anchor>a48</anchor>
      <arglist>(ACE_Task_Base *task_list[], size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thread_all_list</name>
      <anchor>a49</anchor>
      <arglist>(ACE_thread_t thread_list[], size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_grp</name>
      <anchor>a50</anchor>
      <arglist>(ACE_Task_Base *task, int grp_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_grp</name>
      <anchor>a51</anchor>
      <arglist>(ACE_Task_Base *task, int &amp;grp_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count_threads</name>
      <anchor>a52</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>at_exit</name>
      <anchor>a53</anchor>
      <arglist>(ACE_At_Thread_Exit *cleanup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>at_exit</name>
      <anchor>a54</anchor>
      <arglist>(ACE_At_Thread_Exit &amp;cleanup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>at_exit</name>
      <anchor>a55</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait_on_exit</name>
      <anchor>a56</anchor>
      <arglist>(int dowait)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait_on_exit</name>
      <anchor>a57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Manager *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Manager *</type>
      <name>instance</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Thread_Manager *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close_singleton</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>spawn_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_THR_FUNC func, void *args, long flags, ACE_thread_t *=0, ACE_hthread_t *t_handle=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, void *stack=0, size_t stack_size=0, ACE_Task_Base *task=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>run_thread_exit_hooks</name>
      <anchor>b1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Thread_Descriptor *</type>
      <name>find_thread</name>
      <anchor>b2</anchor>
      <arglist>(ACE_thread_t t_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Thread_Descriptor *</type>
      <name>find_hthread</name>
      <anchor>b3</anchor>
      <arglist>(ACE_hthread_t h_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Thread_Descriptor *</type>
      <name>find_task</name>
      <anchor>b4</anchor>
      <arglist>(ACE_Task_Base *task, int slot=-1)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>insert_thr</name>
      <anchor>b5</anchor>
      <arglist>(ACE_thread_t t_id, ACE_hthread_t, int grp_id=-1, long flags=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>append_thr</name>
      <anchor>b6</anchor>
      <arglist>(ACE_thread_t t_id, ACE_hthread_t, ACE_UINT32, int grp_id, ACE_Task_Base *task=0, long flags=0, ACE_Thread_Descriptor *td=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>remove_thr</name>
      <anchor>b7</anchor>
      <arglist>(ACE_Thread_Descriptor *td, int close_handler)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>remove_thr_all</name>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>check_state</name>
      <anchor>b9</anchor>
      <arglist>(ACE_UINT32 state, ACE_thread_t thread, int enable=1)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>apply_task</name>
      <anchor>b10</anchor>
      <arglist>(ACE_Task_Base *task, ACE_THR_MEMBER_FUNC, int=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>apply_grp</name>
      <anchor>b11</anchor>
      <arglist>(int grp_id, ACE_THR_MEMBER_FUNC func, int arg=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>apply_all</name>
      <anchor>b12</anchor>
      <arglist>(ACE_THR_MEMBER_FUNC, int=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>join_thr</name>
      <anchor>b13</anchor>
      <arglist>(ACE_Thread_Descriptor *td, int=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>resume_thr</name>
      <anchor>b14</anchor>
      <arglist>(ACE_Thread_Descriptor *td, int=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>suspend_thr</name>
      <anchor>b15</anchor>
      <arglist>(ACE_Thread_Descriptor *td, int=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>kill_thr</name>
      <anchor>b16</anchor>
      <arglist>(ACE_Thread_Descriptor *td, int signum)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>cancel_thr</name>
      <anchor>b17</anchor>
      <arglist>(ACE_Thread_Descriptor *td, int async_cancel=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>register_as_terminated</name>
      <anchor>b18</anchor>
      <arglist>(ACE_Thread_Descriptor *td)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Double_Linked_List&lt; ACE_Thread_Descriptor &gt;</type>
      <name>thr_list_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Double_Linked_List&lt; ACE_Thread_Descriptor_Base &gt;</type>
      <name>terminated_thr_list_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Unbounded_Queue&lt; ACE_Thread_Descriptor *&gt;</type>
      <name>thr_to_be_removed_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>grp_id_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>automatic_wait_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Mutex</type>
      <name>lock_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Condition_Thread_Mutex</type>
      <name>zero_cond_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Locked_Free_List&lt; ACE_Thread_Descriptor, ACE_SYNCH_MUTEX &gt;</type>
      <name>thread_desc_freelist_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>delete_thr_mgr_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Thread_Control</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Thread_Descriptor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Mutex</name>
    <filename>classACE__Thread__Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Mutex</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name=0, ACE_mutexattr_t *attributes=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Mutex</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value *tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_thread_mutex_t &amp;</type>
      <name>lock</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_thread_mutex_t</type>
      <name>lock_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>removed_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Thread_Mutex &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Thread_Mutex</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Thread_Mutex &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Condition_Thread_Mutex</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Semaphore</name>
    <filename>classACE__Thread__Semaphore.html</filename>
    <base>ACE_Semaphore</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Semaphore</name>
      <anchor>a0</anchor>
      <arglist>(u_int count=1, const ACE_TCHAR *name=0, void *=0, int max=0x7FFFFFFF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thread_Semaphore</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Strategy</name>
    <filename>classACE__Thread__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(int flags=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Thread_Manager *tm, long thr_flags, size_t n_threads=1, int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Thread_Manager *tm, long thr_flags, size_t n_threads=1, int flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Thread_Strategy</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_svc_handler</name>
      <anchor>a4</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Concurrency_Strategy&lt; SVC_HANDLER &gt;</type>
      <name>inherited</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>long</type>
      <name>thr_flags_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>n_threads_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thread_Timer_Queue_Adapter</name>
    <filename>classACE__Thread__Timer__Queue__Adapter.html</filename>
    <templarg>TQ</templarg>
    <base>ACE_Task_Base</base>
    <member kind="typedef">
      <type>TQ</type>
      <name>TIMER_QUEUE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Thread_Timer_Queue_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *=ACE_Thread_Manager::instance())</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>schedule</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Event_Handler *handler, const void *act, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a2</anchor>
      <arglist>(long timer_id, const void **act=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_SYNCH_MUTEX &amp;</type>
      <name>mutex</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TQ &amp;</type>
      <name>timer_queue</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_thread_t</type>
      <name>thr_id</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a8</anchor>
      <arglist>(long flags=THR_NEW_LWP|THR_JOINABLE, int n_threads=1, int force_active=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, ACE_Task_Base *task=0, ACE_hthread_t thread_handles[]=0, void *stack[]=0, size_t stack_size[]=0, ACE_thread_t thread_names[]=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TQ</type>
      <name>timer_queue_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_CONDITION</type>
      <name>condition_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_MUTEX</type>
      <name>mutex_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>active_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_thread_t</type>
      <name>thr_id_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Throughput_Stats</name>
    <filename>classACE__Throughput__Stats.html</filename>
    <base>ACE_Basic_Stats</base>
    <member kind="function">
      <type></type>
      <name>ACE_Throughput_Stats</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchor>a1</anchor>
      <arglist>(ACE_UINT64 throughput, ACE_UINT64 latency)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Throughput_Stats &amp;throughput)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_results</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TCHAR *msg, ACE_UINT32 scale_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump_throughput</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_TCHAR *msg, ACE_UINT32 scale_factor, ACE_UINT64 elapsed_time, ACE_UINT32 samples_count)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT64</type>
      <name>throughput_last_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Thru_Task</name>
    <filename>classACE__Thru__Task.html</filename>
    <templarg></templarg>
    <base>ACE_Task&lt; ACE_SYNCH_USE &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Thru_Task</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Thru_Task</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(void *a=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(u_long flags=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>put</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *msg, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a6</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>info</name>
      <anchor>a7</anchor>
      <arglist>(ACE_TCHAR **info_string, size_t length) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Time_Request</name>
    <filename>classACE__Time__Request.html</filename>
    <member kind="enumeration">
      <name>Constants</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_UPDATE</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_TIME_LEN</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Request</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Request</name>
      <anchor>a1</anchor>
      <arglist>(ACE_INT32 msg_type, const ACE_UINT32 time, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>size</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_INT32</type>
      <name>msg_type</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg_type</name>
      <anchor>a5</anchor>
      <arglist>(ACE_INT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>time</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>time</name>
      <anchor>a7</anchor>
      <arglist>(ACE_UINT32 t)</arglist>
    </member>
    <member kind="function">
      <type>ACE_UINT32</type>
      <name>block_forever</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_forever</name>
      <anchor>a9</anchor>
      <arglist>(ACE_UINT32)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value</type>
      <name>timeout</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Time_Value timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encode</name>
      <anchor>a12</anchor>
      <arglist>(void *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decode</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transfer</type>
      <name>transfer_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UINT32</type>
      <name>time_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Time_Request::Transfer</name>
    <filename>structACE__Time__Request_1_1Transfer.html</filename>
    <member kind="variable">
      <type>ACE_INT32</type>
      <name>msg_type_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>block_forever_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>sec_timeout_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>usec_timeout_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_UINT32</type>
      <name>time_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Time_Value</name>
    <filename>classACE__Time__Value.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Value</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Value</name>
      <anchor>a1</anchor>
      <arglist>(long sec, long usec=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Value</name>
      <anchor>a2</anchor>
      <arglist>(const struct timeval &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Value</name>
      <anchor>a3</anchor>
      <arglist>(const timespec_t &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Value</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Time_Value</name>
      <anchor>a5</anchor>
      <arglist>(const FILETIME &amp;ft)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a6</anchor>
      <arglist>(long sec, long usec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a8</anchor>
      <arglist>(const timeval &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a9</anchor>
      <arglist>(const timespec_t &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a10</anchor>
      <arglist>(const FILETIME &amp;ft)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>msec</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msec</name>
      <anchor>a12</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator timespec_t</name>
      <anchor>a13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator timeval</name>
      <anchor>a14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const timeval *</name>
      <anchor>a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator FILETIME</name>
      <anchor>a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>sec</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sec</name>
      <anchor>a18</anchor>
      <arglist>(long sec)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>usec</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usec</name>
      <anchor>a20</anchor>
      <arglist>(long usec)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value &amp;</type>
      <name>operator+=</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value &amp;</type>
      <name>operator-=</name>
      <anchor>a22</anchor>
      <arglist>(const ACE_Time_Value &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value &amp;</type>
      <name>operator *=</name>
      <anchor>a23</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value</type>
      <name>operator++</name>
      <anchor>a24</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value &amp;</type>
      <name>operator++</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value</type>
      <name>operator--</name>
      <anchor>a26</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value &amp;</type>
      <name>operator--</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a28</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_Time_Value</type>
      <name>zero</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const ACE_Time_Value</type>
      <name>max_time</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const DWORDLONG</type>
      <name>FILETIME_to_timval_skew</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>normalize</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>timeval</type>
      <name>tv_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export ACE_Time_Value</type>
      <name>operator+</name>
      <anchor>l0</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export ACE_Time_Value</type>
      <name>operator-</name>
      <anchor>l1</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export int</type>
      <name>operator&lt;</name>
      <anchor>l2</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export int</type>
      <name>operator&gt;</name>
      <anchor>l3</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export int</type>
      <name>operator&lt;=</name>
      <anchor>l4</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export int</type>
      <name>operator&gt;=</name>
      <anchor>l5</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export int</type>
      <name>operator==</name>
      <anchor>l6</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend ACE_OS_Export int</type>
      <name>operator!=</name>
      <anchor>l7</anchor>
      <arglist>(const ACE_Time_Value &amp;tv1, const ACE_Time_Value &amp;tv2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Hash_Iterator_T</name>
    <filename>classACE__Timer__Hash__Iterator__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <templarg>BUCKET</templarg>
    <base>ACE_Timer_Queue_Iterator_T</base>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Hash_Iterator_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Timer_Hash_T&lt; TYPE, FUNCTOR, ACE_LOCK, BUCKET &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>isdone</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>item</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Hash_T&lt; TYPE, FUNCTOR, ACE_LOCK, BUCKET &gt; &amp;</type>
      <name>timer_hash_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>position_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Queue_Iterator_T&lt; TYPE, ACE_Timer_Hash_Upcall&lt; TYPE, FUNCTOR, ACE_LOCK &gt;, ACE_Null_Mutex &gt; *</type>
      <name>iter_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Hash_T</name>
    <filename>classACE__Timer__Hash__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <templarg>BUCKET</templarg>
    <base>ACE_Timer_Queue_T</base>
    <member kind="typedef">
      <type>ACE_Timer_Hash_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK, BUCKET &gt;</type>
      <name>HASH_ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>INHERITED</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Hash_T</name>
      <anchor>a0</anchor>
      <arglist>(size_t table_size, FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Hash_T</name>
      <anchor>a1</anchor>
      <arglist>(FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Timer_Hash_T</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ACE_Time_Value &amp;</type>
      <name>earliest_time</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule</name>
      <anchor>a5</anchor>
      <arglist>(const TYPE &amp;type, const void *act, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_interval</name>
      <anchor>a6</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a7</anchor>
      <arglist>(const TYPE &amp;type, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a8</anchor>
      <arglist>(long timer_id, const void **act=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>expire</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>expire</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Queue_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;</type>
      <name>iter</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>remove_first</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>get_first</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reschedule</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>find_new_earliest</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Timer_Hash_T</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Timer_Hash_T&lt; TYPE, FUNCTOR, ACE_LOCK, BUCKET &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c3</anchor>
      <arglist>(const ACE_Timer_Hash_T&lt; TYPE, FUNCTOR, ACE_LOCK, BUCKET &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BUCKET **</type>
      <name>table_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>table_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Hash_Upcall&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>table_functor_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>earliest_position_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HASH_ITERATOR *</type>
      <name>iterator_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Timer_Hash_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK, BUCKET &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Hash_Upcall</name>
    <filename>classACE__Timer__Hash__Upcall.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; ACE_Event_Handler *, ACE_Timer_Hash_Upcall&lt; TYPE, FUNCTOR, ACE_LOCK &gt;, ACE_Null_Mutex &gt;</type>
      <name>TIMER_QUEUE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Hash_Upcall</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Hash_Upcall</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; *timer_hash)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>timeout</name>
      <anchor>a2</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Event_Handler *handler, const void *arg, const ACE_Time_Value &amp;cur_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancellation</name>
      <anchor>a3</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Event_Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deletion</name>
      <anchor>a4</anchor>
      <arglist>(TIMER_QUEUE &amp;timer_queue, ACE_Event_Handler *handler, const void *arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Timer_Hash_Upcall</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Timer_Hash_Upcall&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Timer_Hash_Upcall&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; *</type>
      <name>timer_hash_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Heap_Iterator_T</name>
    <filename>classACE__Timer__Heap__Iterator__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Timer_Queue_Iterator_T</base>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Heap_Iterator_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Timer_Heap_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Timer_Heap_Iterator_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>isdone</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>item</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Heap_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;</type>
      <name>timer_heap_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>position_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Heap_T</name>
    <filename>classACE__Timer__Heap__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Timer_Queue_T</base>
    <member kind="typedef">
      <type>ACE_Timer_Heap_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>HEAP_ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>INHERITED</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Heap_T</name>
      <anchor>a0</anchor>
      <arglist>(size_t size, int preallocated=0, FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Heap_T</name>
      <anchor>a1</anchor>
      <arglist>(FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Timer_Heap_T</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ACE_Time_Value &amp;</type>
      <name>earliest_time</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule</name>
      <anchor>a5</anchor>
      <arglist>(const TYPE &amp;type, const void *act, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_interval</name>
      <anchor>a6</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a7</anchor>
      <arglist>(const TYPE &amp;type, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a8</anchor>
      <arglist>(long timer_id, const void **act=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Queue_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;</type>
      <name>iter</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>remove_first</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>get_first</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>reschedule</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>alloc_node</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>free_node</name>
      <anchor>b2</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>remove</name>
      <anchor>c0</anchor>
      <arglist>(size_t slot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insert</name>
      <anchor>c1</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *new_node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>grow_heap</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reheap_up</name>
      <anchor>c3</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *new_node, size_t slot, size_t parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reheap_down</name>
      <anchor>c4</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *moved_node, size_t slot, size_t child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchor>c5</anchor>
      <arglist>(int slot, ACE_Timer_Node_T&lt; TYPE &gt; *moved_node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>timer_id</name>
      <anchor>c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>pop_freelist</name>
      <anchor>c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>push_freelist</name>
      <anchor>c8</anchor>
      <arglist>(int old_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Timer_Heap_T</name>
      <anchor>c9</anchor>
      <arglist>(const ACE_Timer_Heap_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c10</anchor>
      <arglist>(const ACE_Timer_Heap_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_limbo_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HEAP_ITERATOR *</type>
      <name>iterator_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; **</type>
      <name>heap_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long *</type>
      <name>timer_ids_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>timer_ids_curr_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>timer_ids_min_free_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>preallocated_nodes_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>preallocated_nodes_freelist_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Unbounded_Set&lt; ACE_Timer_Node_T&lt; TYPE &gt; *&gt;</type>
      <name>preallocated_node_set_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Timer_Heap_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_List_Iterator_T</name>
    <filename>classACE__Timer__List__Iterator__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Timer_Queue_Iterator_T</base>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_List_Iterator_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Timer_List_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Timer_List_Iterator_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>isdone</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>item</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_List_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;</type>
      <name>timer_list_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>position_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_List_T</name>
    <filename>classACE__Timer__List__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Timer_Queue_T</base>
    <member kind="typedef">
      <type>ACE_Timer_List_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>LIST_ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>INHERITED</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_List_T</name>
      <anchor>a0</anchor>
      <arglist>(FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Timer_List_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ACE_Time_Value &amp;</type>
      <name>earliest_time</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule</name>
      <anchor>a4</anchor>
      <arglist>(const TYPE &amp;type, const void *act, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_interval</name>
      <anchor>a5</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a6</anchor>
      <arglist>(const TYPE &amp;type, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a7</anchor>
      <arglist>(long timer_id, const void **act=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Queue_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;</type>
      <name>iter</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>remove_first</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reschedule</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>get_first</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Timer_List_T</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Timer_List_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Timer_List_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>head_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LIST_ITERATOR *</type>
      <name>iterator_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>timer_id_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Timer_List_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Node_Dispatch_Info_T</name>
    <filename>classACE__Timer__Node__Dispatch__Info__T.html</filename>
    <templarg>TYPE</templarg>
    <member kind="variable">
      <type>TYPE</type>
      <name>type_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>act_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Node_T</name>
    <filename>classACE__Timer__Node__T.html</filename>
    <templarg>TYPE</templarg>
    <member kind="typedef">
      <type>ACE_Timer_Node_Dispatch_Info_T&lt; TYPE &gt;</type>
      <name>DISPATCH_INFO</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Node_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Timer_Node_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(const TYPE &amp;type, const void *a, const ACE_Time_Value &amp;t, const ACE_Time_Value &amp;i, ACE_Timer_Node_T&lt; TYPE &gt; *n, long timer_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a3</anchor>
      <arglist>(const TYPE &amp;type, const void *a, const ACE_Time_Value &amp;t, const ACE_Time_Value &amp;i, ACE_Timer_Node_T&lt; TYPE &gt; *p, ACE_Timer_Node_T&lt; TYPE &gt; *n, long timer_id)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>get_type</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_type</name>
      <anchor>a5</anchor>
      <arglist>(TYPE &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>get_act</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_act</name>
      <anchor>a7</anchor>
      <arglist>(void *act)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value &amp;</type>
      <name>get_timer_value</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timer_value</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Time_Value &amp;timer_value)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value &amp;</type>
      <name>get_interval</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interval</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>get_prev</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prev</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *prev)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>get_next</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_next</name>
      <anchor>a15</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *next)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get_timer_id</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timer_id</name>
      <anchor>a17</anchor>
      <arglist>(long timer_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_dispatch_info</name>
      <anchor>a18</anchor>
      <arglist>(ACE_Timer_Node_Dispatch_Info_T&lt; TYPE &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>type_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>act_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>timer_value_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>interval_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>prev_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>next_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>timer_id_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Queue_Iterator_T</name>
    <filename>classACE__Timer__Queue__Iterator__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Queue_Iterator_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Timer_Queue_Iterator_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>isdone</name>
      <anchor>a4</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>item</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Queue_T</name>
    <filename>classACE__Timer__Queue__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="typedef">
      <type>ACE_Timer_Queue_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Queue_T</name>
      <anchor>a0</anchor>
      <arglist>(FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Timer_Queue_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a2</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ACE_Time_Value &amp;</type>
      <name>earliest_time</name>
      <anchor>a3</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>schedule</name>
      <anchor>a4</anchor>
      <arglist>(const TYPE &amp;type, const void *act, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>reset_interval</name>
      <anchor>a5</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a6</anchor>
      <arglist>(const TYPE &amp;type, int dont_call_handle_close=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a7</anchor>
      <arglist>(long timer_id, const void **act=0, int dont_call_handle_close=1)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>expire</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dispatch_info</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, ACE_Timer_Node_Dispatch_Info_T&lt; TYPE &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expire</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value</type>
      <name>gettimeofday</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gettimeofday</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Time_Value(*gettimeofday)(void))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Time_Value *</type>
      <name>calculate_timeout</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Time_Value *max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Time_Value *</type>
      <name>calculate_timeout</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Time_Value *max, ACE_Time_Value *the_timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timer_skew</name>
      <anchor>a15</anchor>
      <arglist>(const ACE_Time_Value &amp;skew)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Time_Value &amp;</type>
      <name>timer_skew</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_LOCK &amp;</type>
      <name>mutex</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTOR &amp;</type>
      <name>upcall_functor</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ITERATOR &amp;</type>
      <name>iter</name>
      <anchor>a19</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>remove_first</name>
      <anchor>a20</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>get_first</name>
      <anchor>a22</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>return_node</name>
      <anchor>a23</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upcall</name>
      <anchor>a24</anchor>
      <arglist>(TYPE &amp;type, const void *act, const ACE_Time_Value &amp;cur_time)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>reschedule</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>alloc_node</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>free_node</name>
      <anchor>b2</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>dispatch_info_i</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, ACE_Timer_Node_Dispatch_Info_T&lt; TYPE &gt; &amp;info)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_LOCK</type>
      <name>mutex_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *</type>
      <name>free_list_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value(*</type>
      <name>gettimeofday_</name>
      <anchor>n2</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>FUNCTOR *</type>
      <name>upcall_functor_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_upcall_functor_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_free_list_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Timer_Queue_T</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>timeout_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>timer_skew_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Wheel_Iterator_T</name>
    <filename>classACE__Timer__Wheel__Iterator__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Timer_Queue_Iterator_T</base>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Wheel_Iterator_T</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Timer_Wheel_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Timer_Wheel_Iterator_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>isdone</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>item</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Wheel_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;</type>
      <name>timer_wheel_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>pos_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>list_item_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Timer_Wheel_T</name>
    <filename>classACE__Timer__Wheel__T.html</filename>
    <templarg>TYPE</templarg>
    <templarg>FUNCTOR</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Timer_Queue_T</base>
    <member kind="typedef">
      <type>ACE_Timer_Wheel_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>WHEEL_ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Timer_Queue_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</type>
      <name>INHERITED</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Wheel_T</name>
      <anchor>a0</anchor>
      <arglist>(FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Timer_Wheel_T</name>
      <anchor>a1</anchor>
      <arglist>(size_t wheelsize, size_t resolution, size_t prealloc=0, FUNCTOR *upcall_functor=0, ACE_Free_List&lt; ACE_Timer_Node_T&lt; TYPE &gt; &gt; *freelist=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Timer_Wheel_T</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_empty</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ACE_Time_Value &amp;</type>
      <name>earliest_time</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule</name>
      <anchor>a5</anchor>
      <arglist>(const TYPE &amp;type, const void *act, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_interval</name>
      <anchor>a6</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a7</anchor>
      <arglist>(const TYPE &amp;type, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel</name>
      <anchor>a8</anchor>
      <arglist>(long timer_id, const void **act=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>expire</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expire</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Time_Value &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Queue_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;</type>
      <name>iter</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>remove_first</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>get_first</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reschedule</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Timer_Node_T&lt; TYPE &gt; *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_Timer_Wheel_T</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Timer_Wheel_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_Timer_Wheel_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; **</type>
      <name>wheel_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>wheel_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>resolution_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>earliest_pos_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>size_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WHEEL_ITERATOR *</type>
      <name>iterator_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Node_T&lt; TYPE &gt; *</type>
      <name>freelist_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Timer_Wheel_Iterator_T&lt; TYPE, FUNCTOR, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TkReactor</name>
    <filename>classACE__TkReactor.html</filename>
    <base>ACE_Select_Reactor_T&lt; ACE_Select_Reactor_Token &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_TkReactor</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=DEFAULT_SIZE, int restart=0, ACE_Sig_Handler *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_TkReactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Event_Handler *handler, const void *arg, const ACE_Time_Value &amp;delay_time, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_timer_interval</name>
      <anchor>a3</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Event_Handler *handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a5</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_TkFileHandler</name>
      <anchor>b4</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_for_multiple_events</name>
      <anchor>b5</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;, ACE_Time_Value *)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>TkWaitForMultipleEvents</name>
      <anchor>b6</anchor>
      <arglist>(int, ACE_Select_Reactor_Handle_Set &amp;, ACE_Time_Value *)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TkReactorID *</type>
      <name>ids_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Tk_TimerToken</type>
      <name>timeout_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_timeout</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_TkReactor</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_TkReactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_TkReactor &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_TkReactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>TimerCallbackProc</name>
      <anchor>f0</anchor>
      <arglist>(ClientData cd)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>InputCallbackProc</name>
      <anchor>f1</anchor>
      <arglist>(ClientData cd, int mask)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TkReactor_Input_Callback</name>
    <filename>classACE__TkReactor__Input__Callback.html</filename>
    <member kind="variable">
      <type>ACE_TkReactor *</type>
      <name>reactor_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TkReactorID</name>
    <filename>classACE__TkReactorID.html</filename>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TkReactorID *</type>
      <name>next_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TLI</name>
    <filename>classACE__TLI.html</filename>
    <base>ACE_IPC_SAP</base>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>open</name>
      <anchor>a0</anchor>
      <arglist>(const char device[], int oflag=O_RDWR, struct t_info *info=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_option</name>
      <anchor>a2</anchor>
      <arglist>(int level, int option, void *optval, int optlen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_option</name>
      <anchor>a3</anchor>
      <arglist>(int level, int option, void *optval, int &amp;optlen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>look</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rcvdis</name>
      <anchor>a5</anchor>
      <arglist>(struct t_discon *=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>snddis</name>
      <anchor>a6</anchor>
      <arglist>(struct t_call *=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sndrel</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rcvrel</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_local_addr</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TLI</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~ACE_TLI</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TLI</name>
      <anchor>b2</anchor>
      <arglist>(const char device[], int oflag=O_RDWR, struct t_info *info=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TLI_Acceptor</name>
    <filename>classACE__TLI__Acceptor.html</filename>
    <base>ACE_TLI</base>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TLI_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TLI_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TLI_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Addr &amp;remote_sap, int reuse_addr=0, int oflag=O_RDWR, struct t_info *info=0, int backlog=ACE_DEFAULT_BACKLOG, const char device[]=ACE_TLI_TCP_DEVICE)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Addr &amp;remote_sap, int reuse_addr=0, int oflag=O_RDWR, struct t_info *info=0, int backlog=ACE_DEFAULT_BACKLOG, const char device[]=ACE_TLI_TCP_DEVICE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a4</anchor>
      <arglist>(ACE_TLI_Stream &amp;new_tli_sap, ACE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0, int rwflag=1, netbuf *udata=0, netbuf *opt=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>handle_async_event</name>
      <anchor>c0</anchor>
      <arglist>(int restart, int rwflag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>device_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>backlog_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rwflag_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TLI_Request_Queue *</type>
      <name>queue_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_discon *</type>
      <name>disp_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Request_Queue</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TLI_Connector</name>
    <filename>classACE__TLI__Connector.html</filename>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_TLI_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TLI_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TLI_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_TLI_Stream &amp;new_stream, const ACE_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0, const char device[]=ACE_TLI_TCP_DEVICE, struct t_info *info=0, int rw_flag=1, struct netbuf *udata=0, struct netbuf *opt=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TLI_Stream &amp;new_stream, const ACE_Addr &amp;remote_sap, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0, const char device[]=ACE_TLI_TCP_DEVICE, struct t_info *info=0, int rw_flag=1, struct netbuf *udata=0, struct netbuf *opt=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>complete</name>
      <anchor>a3</anchor>
      <arglist>(ACE_TLI_Stream &amp;new_stream, ACE_Addr *remote_sap, ACE_Time_Value *tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset_new_handle</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_TLI_Request</name>
    <filename>structACE__TLI__Request.html</filename>
    <member kind="variable">
      <type>t_call *</type>
      <name>callp_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TLI_Request *</type>
      <name>next_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TLI_Request_Queue</name>
    <filename>classACE__TLI__Request__Queue.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_TLI_Request_Queue</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE fd, int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enqueue</name>
      <anchor>a3</anchor>
      <arglist>(const char device[], int restart, int rwflag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dequeue</name>
      <anchor>a4</anchor>
      <arglist>(ACE_TLI_Request *&amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a5</anchor>
      <arglist>(int sequence_number)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_TLI_Request *</type>
      <name>alloc</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchor>a9</anchor>
      <arglist>(ACE_TLI_Request *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>current_count_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TLI_Request *</type>
      <name>base_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TLI_Request *</type>
      <name>tail_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TLI_Request *</type>
      <name>free_list_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TLI_Stream</name>
    <filename>classACE__TLI__Stream.html</filename>
    <base>ACE_TLI</base>
    <member kind="typedef">
      <type>ACE_INET_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TLI_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>active_close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passive_close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Addr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a5</anchor>
      <arglist>(const void *buf, size_t n, int flags, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a6</anchor>
      <arglist>(void *buf, size_t n, int *flags, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a7</anchor>
      <arglist>(const void *buf, size_t n, int flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a8</anchor>
      <arglist>(void *buf, size_t n, int *flags, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a9</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a10</anchor>
      <arglist>(void *buf, size_t n, const ACE_Time_Value *timeout=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send_n</name>
      <anchor>a11</anchor>
      <arglist>(const void *buf, size_t n, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv_n</name>
      <anchor>a12</anchor>
      <arglist>(void *buf, size_t n, const ACE_Time_Value *timeout=0, size_t *bytes_transferred=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_rwflag</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_rwflag</name>
      <anchor>c1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rwflag_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_TLI_Acceptor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_TLI_Connector</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Token</name>
    <filename>classACE__Token.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Token</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *name=0, void *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_Token</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a2</anchor>
      <arglist>(void(*sleep_hook)(void *), void *arg=0, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sleep_hook</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>renew</name>
      <anchor>a5</anchor>
      <arglist>(int requeue_position=0, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>release</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_read</name>
      <anchor>a10</anchor>
      <arglist>(void(*sleep_hook)(void *), void *arg=0, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a12</anchor>
      <arglist>(void(*sleep_hook)(void *), void *arg=0, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_read</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write_upgrade</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>waiters</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_thread_t</type>
      <name>current_owner</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ACE_Token_Op_Type</name>
      <anchor>u2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_TOKEN</name>
      <anchor>u2u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_TOKEN</name>
      <anchor>u2u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>shared_acquire</name>
      <anchor>c0</anchor>
      <arglist>(void(*sleep_hook_func)(void *), void *arg, ACE_Time_Value *timeout, ACE_Token_Op_Type op_type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wakeup_next_waiter</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Token_Queue</type>
      <name>writers_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Token_Queue</type>
      <name>readers_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Mutex</type>
      <name>lock_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_thread_t</type>
      <name>owner_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>in_use_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>waiters_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nesting_level_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Condition_Attributes</type>
      <name>attributes_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Token::ACE_Token_Queue</name>
    <filename>structACE__Token_1_1ACE__Token__Queue.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Token_Queue</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_entry</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Token_Queue_Entry *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_entry</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Token_Queue_Entry &amp;entry, int requeue_position=-1)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Token_Queue_Entry *</type>
      <name>head_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Token_Queue_Entry *</type>
      <name>tail_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_Token::ACE_Token_Queue_Entry</name>
    <filename>structACE__Token_1_1ACE__Token__Queue__Entry.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Token_Queue_Entry</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Mutex &amp;m, ACE_thread_t t_id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Token_Queue_Entry</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Thread_Mutex &amp;m, ACE_thread_t t_id, ACE_Condition_Attributes &amp;attributes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *timeout, ACE_Thread_Mutex &amp;lock)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Token_Queue_Entry *</type>
      <name>next_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_thread_t</type>
      <name>thread_id_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Semaphore</type>
      <name>cv_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>runable_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Tokenizer</name>
    <filename>classACE__Tokenizer.html</filename>
    <member kind="enumvalue">
      <name>MAX_DELIMITERS</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_PRESERVES</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Tokenizer</name>
      <anchor>a0</anchor>
      <arglist>(ACE_TCHAR *buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>delimiter</name>
      <anchor>a1</anchor>
      <arglist>(ACE_TCHAR d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>delimiter_replace</name>
      <anchor>a2</anchor>
      <arglist>(ACE_TCHAR d, ACE_TCHAR replacement)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preserve_designators</name>
      <anchor>a3</anchor>
      <arglist>(ACE_TCHAR start, ACE_TCHAR stop, int strip=1)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TCHAR *</type>
      <name>next</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>is_delimiter</name>
      <anchor>b0</anchor>
      <arglist>(ACE_TCHAR d, int &amp;replace, ACE_TCHAR &amp;r)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>is_preserve_designator</name>
      <anchor>b1</anchor>
      <arglist>(ACE_TCHAR start, ACE_TCHAR &amp;stop, int &amp;strip)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_TCHAR *</type>
      <name>buffer_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>index_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Preserve_Entry</type>
      <name>preserves_</name>
      <anchor>n2</anchor>
      <arglist>[MAX_PRESERVES]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>preserves_index_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Delimiter_Entry</type>
      <name>delimiters_</name>
      <anchor>n4</anchor>
      <arglist>[MAX_DELIMITERS]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delimiter_index_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Tokenizer::Delimiter_Entry</name>
    <filename>classACE__Tokenizer_1_1Delimiter__Entry.html</filename>
    <member kind="variable">
      <type>ACE_TCHAR</type>
      <name>delimiter_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR</type>
      <name>replacement_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>replace_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Tokenizer::Preserve_Entry</name>
    <filename>classACE__Tokenizer_1_1Preserve__Entry.html</filename>
    <member kind="variable">
      <type>ACE_TCHAR</type>
      <name>start_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR</type>
      <name>stop_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>strip_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TP_Reactor</name>
    <filename>classACE__TP__Reactor.html</filename>
    <base>ACE_Select_Reactor_T&lt; ACE_Select_Reactor_Token &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_TP_Reactor</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Handler *=0, ACE_Timer_Queue *=0, int mask_signals=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TP_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(size_t max_number_of_handles, int restart=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0, int mask_signals=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a5</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Handle_Set &amp;handle_set, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a7</anchor>
      <arglist>(int signum, ACE_Sig_Action *new_disp, ACE_Sig_Action *old_disp=0, int sigkey=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resumable_handler</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Event_Handler *eh, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a11</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a12</anchor>
      <arglist>(ACE_thread_t n_id, ACE_thread_t *o_id=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a13</anchor>
      <arglist>(ACE_thread_t *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>no_op_sleep_hook</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>dispatch_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, ACE_TP_Token_Guard &amp;guard)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>get_event_for_dispatching</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>handle_signals</name>
      <anchor>b2</anchor>
      <arglist>(int &amp;event_count, ACE_TP_Token_Guard &amp;g)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>handle_timer_events</name>
      <anchor>b3</anchor>
      <arglist>(int &amp;event_count, ACE_TP_Token_Guard &amp;g)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>handle_notify_events</name>
      <anchor>b4</anchor>
      <arglist>(int &amp;event_count, ACE_TP_Token_Guard &amp;g)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>handle_socket_events</name>
      <anchor>b5</anchor>
      <arglist>(int &amp;event_count, ACE_TP_Token_Guard &amp;g)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>notify_handle</name>
      <anchor>b6</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Handle_Set &amp;, ACE_Event_Handler *eh, ACE_EH_PTMF callback)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_HANDLE</type>
      <name>get_notify_handle</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_socket_event_info</name>
      <anchor>c1</anchor>
      <arglist>(ACE_EH_Dispatch_Info &amp;info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>dispatch_socket_event</name>
      <anchor>c2</anchor>
      <arglist>(ACE_EH_Dispatch_Info &amp;dispatch_info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_TP_Reactor</name>
      <anchor>c3</anchor>
      <arglist>(const ACE_TP_Reactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_TP_Reactor &amp;</type>
      <name>operator=</name>
      <anchor>c4</anchor>
      <arglist>(const ACE_TP_Reactor &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TP_Token_Guard</name>
    <filename>classACE__TP__Token__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_TP_Token_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Select_Reactor_Token &amp;token)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_TP_Token_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_token</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_owner</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>grab_token</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_token</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_TP_Token_Guard</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Select_Reactor_Token &amp;</type>
      <name>token_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>owner_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Trace</name>
    <filename>classACE__Trace.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_Trace</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_TCHAR *n, int line=0, const ACE_TCHAR *file=ACE_LIB_TEXT(&quot;&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Trace</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>is_tracing</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>start_tracing</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>stop_tracing</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_nesting_indent</name>
      <anchor>d3</anchor>
      <arglist>(int indent)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>get_nesting_indent</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_INDENT</name>
      <anchor>u2u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_TRACING</name>
      <anchor>u2u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_TCHAR *</type>
      <name>name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>nesting_indent_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>enable_tracing_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS</name>
    <filename>classACE__TSS.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_TSS</name>
      <anchor>a0</anchor>
      <arglist>(TYPE *ts_obj=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_TSS</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>ts_object</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>ts_object</name>
      <anchor>a3</anchor>
      <arglist>(TYPE *)</arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>operator-&gt;</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TYPE *</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TYPE *</type>
      <name>make_TSS_TYPE</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TYPE *</type>
      <name>ts_get</name>
      <anchor>b0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>ts_init</name>
      <anchor>b1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_TSS&lt; TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TSS</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_TSS&lt; TYPE &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TYPE *</type>
      <name>type_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS_Adapter</name>
    <filename>classACE__TSS__Adapter.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_TSS_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void *object, ACE_THR_DEST f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_TSS_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>ts_obj_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_THR_DEST</type>
      <name>func_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS_Cleanup</name>
    <filename>classACE__TSS__Cleanup.html</filename>
    <member kind="function">
      <type></type>
      <name>~ACE_TSS_Cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchor>a1</anchor>
      <arglist>(void *status)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a2</anchor>
      <arglist>(ACE_thread_key_t key, void(*destructor)(void *), void *inst)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a3</anchor>
      <arglist>(ACE_thread_key_t key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>detach</name>
      <anchor>a4</anchor>
      <arglist>(void *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>key_used</name>
      <anchor>a5</anchor>
      <arglist>(ACE_thread_key_t key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>free_all_keys_left</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_TSS_Cleanup *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>lockable</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TSS_Cleanup</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_TSS_Info</type>
      <name>ACE_TSS_TABLE</name>
      <anchor>u0</anchor>
      <arglist>[ACE_DEFAULT_THREAD_KEYS]</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_TSS_Info *</type>
      <name>ACE_TSS_TABLE_ITERATOR</name>
      <anchor>u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_TSS_Keys *</type>
      <name>tss_keys</name>
      <anchor>c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_TSS_TABLE</type>
      <name>table_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_thread_key_t</type>
      <name>in_use_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>ACE_TSS_Cleanup *</type>
      <name>instance_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS_Info</name>
    <filename>classACE__TSS__Info.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_TSS_Info</name>
      <anchor>a0</anchor>
      <arglist>(ACE_thread_key_t key, void(*dest)(void *)=0, void *tss_inst=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TSS_Info</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>key_in_use</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>key_in_use</name>
      <anchor>a3</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_TSS_Info &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_TSS_Info &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_thread_key_t</type>
      <name>key_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>destructor_</name>
      <anchor>o1</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>tss_obj_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>thread_count_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_TSS_Cleanup</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS_Keys</name>
    <filename>classACE__TSS__Keys.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_TSS_Keys</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_and_set</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_thread_key_t key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_and_clear</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_thread_key_t key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_set</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_thread_key_t key) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_WORDS</name>
      <anchor>u1u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>find</name>
      <anchor>f0</anchor>
      <arglist>(const u_int key, u_int &amp;word, u_int &amp;bit)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>key_bit_words_</name>
      <anchor>o0</anchor>
      <arglist>[ACE_WORDS]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS_Ref</name>
    <filename>classACE__TSS__Ref.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_TSS_Ref</name>
      <anchor>a0</anchor>
      <arglist>(ACE_thread_t id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_TSS_Ref</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_TSS_Ref &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_TSS_Ref &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_thread_t</type>
      <name>tid_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS_Singleton</name>
    <filename>classACE__TSS__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Cleanup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TSS_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TSS_TYPE</name>
      <anchor>b1</anchor>
      <arglist>(TYPE) instance_</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>ACE_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>ACE_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TSS_Type_Adapter</name>
    <filename>classACE__TSS__Type__Adapter.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_TSS_Type_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(const TYPE value=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TYPE</name>
      <anchor>a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TYPE &amp;</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>value_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_TTY_IO</name>
    <filename>classACE__TTY__IO.html</filename>
    <base>ACE_DEV_IO</base>
    <member kind="enumeration">
      <name>Control_Mode</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETPARAMS</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GETPARAMS</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a0</anchor>
      <arglist>(Control_Mode cmd, Serial_Params *arg) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ACE_TTY_IO::Serial_Params</name>
    <filename>structACE__TTY__IO_1_1Serial__Params.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>baudrate</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parityenb</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>paritymode</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>databits</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stopbits</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>readtimeoutmsec</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ctsenb</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rtsenb</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xinenb</name>
      <anchor>m8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xoutenb</name>
      <anchor>m9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>modem</name>
      <anchor>m10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rcvenb</name>
      <anchor>m11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dsrenb</name>
      <anchor>m12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xonlim</name>
      <anchor>m13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xofflim</name>
      <anchor>m14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Typed_SV_Message</name>
    <filename>classACE__Typed__SV__Message.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Typed_SV_Message</name>
      <anchor>a0</anchor>
      <arglist>(long type=0, int length=sizeof(T), int max_size=sizeof(T))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Typed_SV_Message</name>
      <anchor>a1</anchor>
      <arglist>(const T &amp;data, long type=0, int length=sizeof(T), int max_size=sizeof(T))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Typed_SV_Message</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>type</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a4</anchor>
      <arglist>(long type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a6</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_size</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max_size</name>
      <anchor>a8</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>data</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>data</name>
      <anchor>a10</anchor>
      <arglist>(const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>type_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>length_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>data_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Typed_SV_Message_Queue</name>
    <filename>classACE__Typed__SV__Message__Queue.html</filename>
    <templarg>T</templarg>
    <member kind="enumvalue">
      <name>ACE_CREATE</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_OPEN</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE_NOWAIT</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Typed_SV_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Typed_SV_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(key_t external_id, int create=ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(key_t external_id, int create=ACE_OPEN, int perms=ACE_DEFAULT_FILE_PERMS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Typed_SV_Message_Queue</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Typed_SV_Message&lt; T &gt; &amp;mb, int mflags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Typed_SV_Message&lt; T &gt; &amp;mb, int mflags=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_id</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a9</anchor>
      <arglist>(int option, void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SV_Message_Queue</type>
      <name>message_queue_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Queue</name>
    <filename>classACE__Unbounded__Queue.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue_Const_Iterator&lt; T &gt;</type>
      <name>CONST_ITERATOR</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Queue</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Queue</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Unbounded_Queue&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Unbounded_Queue&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Unbounded_Queue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enqueue_tail</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enqueue_head</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dequeue_head</name>
      <anchor>a8</anchor>
      <arglist>(T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchor>a10</anchor>
      <arglist>(T *&amp;item, size_t slot=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a11</anchor>
      <arglist>(const T &amp;item, size_t slot)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Queue_Iterator&lt; T &gt;</type>
      <name>begin</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Queue_Iterator&lt; T &gt;</type>
      <name>end</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>delete_nodes</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>copy_nodes</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Unbounded_Queue&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>head_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Queue_Iterator&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Queue_Const_Iterator&lt; T &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Queue_Const_Iterator</name>
    <filename>classACE__Unbounded__Queue__Const__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Queue_Const_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Unbounded_Queue&lt; T &gt; &amp;q, int end=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>current_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Unbounded_Queue&lt; T &gt; &amp;</type>
      <name>queue_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Queue_Iterator</name>
    <filename>classACE__Unbounded__Queue__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Queue_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Unbounded_Queue&lt; T &gt; &amp;q, int end=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>current_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Unbounded_Queue&lt; T &gt; &amp;</type>
      <name>queue_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Set</name>
    <filename>classACE__Unbounded__Set.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; T &gt;</type>
      <name>iterator</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Const_Iterator&lt; T &gt;</type>
      <name>CONST_ITERATOR</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Const_Iterator&lt; T &gt;</type>
      <name>const_iterator</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Set</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Set</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Unbounded_Set&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Unbounded_Set&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Unbounded_Set</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_tail</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a9</anchor>
      <arglist>(const T &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Set_Iterator&lt; T &gt;</type>
      <name>begin</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Set_Iterator&lt; T &gt;</type>
      <name>end</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>delete_nodes</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy_nodes</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Unbounded_Set&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>head_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Set_Iterator&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Set_Const_Iterator&lt; T &gt;</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Set_Const_Iterator</name>
    <filename>classACE__Unbounded__Set__Const__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Set_Const_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Unbounded_Set&lt; T &gt; &amp;s, int end=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Set_Const_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Set_Const_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator *</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Unbounded_Set_Const_Iterator&lt; T &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Unbounded_Set_Const_Iterator&lt; T &gt; &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>current_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ACE_Unbounded_Set&lt; T &gt; *</type>
      <name>set_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Set_Iterator</name>
    <filename>classACE__Unbounded__Set__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Set_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Unbounded_Set&lt; T &gt; &amp;s, int end=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Set_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchor>a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Unbounded_Set_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator *</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Unbounded_Set_Iterator&lt; T &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Unbounded_Set_Iterator&lt; T &gt; &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>current_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Unbounded_Set&lt; T &gt; *</type>
      <name>set_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Stack</name>
    <filename>classACE__Unbounded__Stack.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ACE_Unbounded_Stack_Iterator&lt; T &gt;</type>
      <name>ITERATOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Stack</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Stack</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Unbounded_Stack&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Unbounded_Stack&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Unbounded_Stack</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>push</name>
      <anchor>a4</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pop</name>
      <anchor>a5</anchor>
      <arglist>(T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>top</name>
      <anchor>a6</anchor>
      <arglist>(T &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_empty</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_full</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchor>a9</anchor>
      <arglist>(const T &amp;new_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a10</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a11</anchor>
      <arglist>(const T &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>delete_all_nodes</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy_all_nodes</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_Unbounded_Stack&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>head_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>cur_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_Unbounded_Stack_Iterator&lt; T &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unbounded_Stack_Iterator</name>
    <filename>classACE__Unbounded__Stack__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ACE_Unbounded_Stack_Iterator</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Unbounded_Stack&lt; T &gt; &amp;stack)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchor>a1</anchor>
      <arglist>(T *&amp;next_item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Node&lt; T &gt; *</type>
      <name>current_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Unbounded_Stack&lt; T &gt; &amp;</type>
      <name>stack_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_UNIX_Addr</name>
    <filename>classACE__UNIX__Addr.html</filename>
    <base>ACE_Addr</base>
    <member kind="function">
      <type></type>
      <name>ACE_UNIX_Addr</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_UNIX_Addr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_UNIX_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_UNIX_Addr</name>
      <anchor>a2</anchor>
      <arglist>(const char rendezvous_point[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_UNIX_Addr</name>
      <anchor>a3</anchor>
      <arglist>(const sockaddr_un *, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_UNIX_Addr &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a5</anchor>
      <arglist>(const char rendezvous_point[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a6</anchor>
      <arglist>(const sockaddr_un *, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>get_addr</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_addr</name>
      <anchor>a8</anchor>
      <arglist>(void *addr, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a9</anchor>
      <arglist>(char addr[], size_t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>string_to_addr</name>
      <anchor>a10</anchor>
      <arglist>(const char addr[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a11</anchor>
      <arglist>(const ACE_UNIX_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_UNIX_Addr &amp;SAP) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_path_name</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sockaddr_un</type>
      <name>unix_addr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unmanaged_Singleton</name>
    <filename>classACE__Unmanaged__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Singleton</base>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Unmanaged_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>ACE_Unmanaged_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>ACE_Unmanaged_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Unmanaged_TSS_Singleton</name>
    <filename>classACE__Unmanaged__TSS__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_TSS_Singleton</base>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>close</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_Unmanaged_TSS_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>ACE_Unmanaged_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>ACE_Unmanaged_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_UPIPE_Acceptor</name>
    <filename>classACE__UPIPE__Acceptor.html</filename>
    <base>ACE_SPIPE_Acceptor</base>
    <member kind="function">
      <type></type>
      <name>ACE_UPIPE_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_UPIPE_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_UPIPE_Addr &amp;local_sap, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_UPIPE_Addr &amp;local_sap, int reuse_addr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_UPIPE_Acceptor</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a6</anchor>
      <arglist>(ACE_UPIPE_Stream &amp;server_stream, ACE_UPIPE_Addr *remote_addr=0, ACE_Time_Value *timeout=0, int restart=1, int reset_new_handle=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Manager</type>
      <name>tm</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block</type>
      <name>mb_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_UPIPE_Connector</name>
    <filename>classACE__UPIPE__Connector.html</filename>
    <member kind="typedef">
      <type>ACE_UPIPE_Addr</type>
      <name>PEER_ADDR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_UPIPE_Stream</type>
      <name>PEER_STREAM</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_UPIPE_Connector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_UPIPE_Connector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_UPIPE_Stream &amp;new_stream, const ACE_UPIPE_Addr &amp;addr, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a2</anchor>
      <arglist>(ACE_UPIPE_Stream &amp;new_stream, const ACE_UPIPE_Addr &amp;addr, ACE_Time_Value *timeout=0, const ACE_Addr &amp;local_sap=ACE_Addr::sap_any, int reuse_addr=0, int flags=O_RDWR, int perms=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset_new_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_UPIPE_Stream</name>
    <filename>classACE__UPIPE__Stream.html</filename>
    <base>ACE_SPIPE</base>
    <member kind="function">
      <type></type>
      <name>ACE_UPIPE_Stream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_UPIPE_Stream</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Message_Block *mb_p, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block *&amp;mb_p, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchor>a6</anchor>
      <arglist>(const char *buffer, size_t n, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv</name>
      <anchor>a7</anchor>
      <arglist>(char *buffer, size_t n, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_n</name>
      <anchor>a8</anchor>
      <arglist>(const char *buffer, size_t n, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recv_n</name>
      <anchor>a9</anchor>
      <arglist>(char *buffer, size_t n, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>control</name>
      <anchor>a10</anchor>
      <arglist>(int cmd, void *val) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_remote_addr</name>
      <anchor>a11</anchor>
      <arglist>(ACE_UPIPE_Addr &amp;remote_sap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>mb_last_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>remaining_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_UPIPE_Addr</type>
      <name>remote_addr_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MT_Stream</type>
      <name>stream_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reference_count_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_UPIPE_Acceptor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_UPIPE_Connector</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Vector</name>
    <filename>classACE__Vector.html</filename>
    <templarg>T</templarg>
    <templarg>DEFAULT_SIZE</templarg>
    <base>ACE_Array</base>
    <member kind="typedef">
      <type>ACE_Array_Iterator&lt; T &gt;</type>
      <name>Iterator</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Vector</name>
      <anchor>a0</anchor>
      <arglist>(const size_t init_size=DEFAULT_SIZE, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Vector</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchor>a5</anchor>
      <arglist>(const size_t new_size, const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>length_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>curr_max_size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Wakeup_All_Threads_Handler</name>
    <filename>classACE__Wakeup__All__Threads__Handler.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>a0</anchor>
      <arglist>(int signum, siginfo_t *=0, ucontext_t *=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WChar_Codeset_Translator</name>
    <filename>classACE__WChar__Codeset__Translator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_wchar</name>
      <anchor>a0</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::WChar &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_wstring</name>
      <anchor>a1</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::WChar *&amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_wchar_array</name>
      <anchor>a2</anchor>
      <arglist>(ACE_InputCDR &amp;, const ACE_CDR::WChar *, ACE_CDR::ULong)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_wchar</name>
      <anchor>a3</anchor>
      <arglist>(ACE_OutputCDR &amp;, ACE_CDR::WChar)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_wstring</name>
      <anchor>a4</anchor>
      <arglist>(ACE_OutputCDR &amp;, ACE_CDR::ULong, const ACE_CDR::WChar *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_wchar_array</name>
      <anchor>a5</anchor>
      <arglist>(ACE_OutputCDR &amp;, const ACE_CDR::WChar *, ACE_CDR::ULong)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>read_1</name>
      <anchor>b0</anchor>
      <arglist>(ACE_InputCDR &amp;input, ACE_CDR::Octet *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>read_2</name>
      <anchor>b1</anchor>
      <arglist>(ACE_InputCDR &amp;input, ACE_CDR::UShort *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>read_4</name>
      <anchor>b2</anchor>
      <arglist>(ACE_InputCDR &amp;input, ACE_CDR::ULong *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>write_1</name>
      <anchor>b3</anchor>
      <arglist>(ACE_OutputCDR &amp;output, const ACE_CDR::Octet *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>write_2</name>
      <anchor>b4</anchor>
      <arglist>(ACE_OutputCDR &amp;output, const ACE_CDR::UShort *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>write_4</name>
      <anchor>b5</anchor>
      <arglist>(ACE_OutputCDR &amp;output, const ACE_CDR::ULong *x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>read_array</name>
      <anchor>b6</anchor>
      <arglist>(ACE_InputCDR &amp;input, void *x, size_t size, size_t align, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_CDR::Boolean</type>
      <name>write_array</name>
      <anchor>b7</anchor>
      <arglist>(ACE_OutputCDR &amp;output, const void *x, size_t size, size_t align, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>adjust</name>
      <anchor>b8</anchor>
      <arglist>(ACE_OutputCDR &amp;out, size_t size, size_t align, char *&amp;buf)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>good_bit</name>
      <anchor>b9</anchor>
      <arglist>(ACE_OutputCDR &amp;out, int bit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Weak_Bound_Ptr</name>
    <filename>classACE__Weak__Bound__Ptr.html</filename>
    <templarg>X</templarg>
    <templarg>ACE_LOCK</templarg>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>ACE_Weak_Bound_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Weak_Bound_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Weak_Bound_Ptr</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_Weak_Bound_Ptr</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a6</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a7</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(X *p) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a9</anchor>
      <arglist>(const ACE_Weak_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a11</anchor>
      <arglist>(X *p) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt;</type>
      <name>operator-&gt;</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt;</type>
      <name>strong</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>unsafe_get</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a15</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_ref</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_ref</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>null</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Bound_Ptr_Counter&lt; ACE_LOCK &gt;</type>
      <name>COUNTER</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>COUNTER *</type>
      <name>counter_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>X *</type>
      <name>ptr_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_Strong_Bound_Ptr&lt; X, ACE_LOCK &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WFMO_Reactor</name>
    <filename>classACE__WFMO__Reactor.html</filename>
    <base>ACE_Reactor_Impl</base>
    <member kind="enumvalue">
      <name>DEFAULT_SIZE</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_WFMO_Reactor</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Sig_Handler *=0, ACE_Timer_Queue *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_WFMO_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(size_t size, int unused=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t size=ACE_WFMO_Reactor::DEFAULT_SIZE, int restart=0, ACE_Sig_Handler *=0, ACE_Timer_Queue *=0, int disable_notify_pipe=0, ACE_Reactor_Notify *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>current_info</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE, size_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_sig_handler</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Sig_Handler *signal_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_timer_queue</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Timer_Queue *tq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>timer_queue</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Timer_Queue *tq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Timer_Queue *</type>
      <name>timer_queue</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WFMO_Reactor</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>work_pending</name>
      <anchor>a10</anchor>
      <arglist>(const ACE_Time_Value &amp;max_wait_time=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>alertable_handle_events</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>deactivated</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchor>a16</anchor>
      <arglist>(int do_stop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a17</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_HANDLE event_handle=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a18</anchor>
      <arglist>(ACE_HANDLE event_handle, ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a19</anchor>
      <arglist>(ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a20</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a21</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a22</anchor>
      <arglist>(int signum, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0, ACE_Event_Handler **old_sh=0, ACE_Sig_Action *old_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a23</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset, ACE_Event_Handler *new_sh, ACE_Sig_Action *new_disp=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a24</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a25</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a26</anchor>
      <arglist>(const ACE_Handle_Set &amp;handle_set, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a27</anchor>
      <arglist>(int signum, ACE_Sig_Action *new_disp, ACE_Sig_Action *old_disp=0, int sigkey=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler</name>
      <anchor>a28</anchor>
      <arglist>(const ACE_Sig_Set &amp;sigset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a29</anchor>
      <arglist>(ACE_Event_Handler *event_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a30</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handler</name>
      <anchor>a31</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>suspend_handlers</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a33</anchor>
      <arglist>(ACE_Event_Handler *event_handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a34</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a35</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handlers</name>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resumable_handler</name>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>uses_event_associations</name>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a39</anchor>
      <arglist>(ACE_Event_Handler *event_handler, const void *arg, const ACE_Time_Value &amp;delay, const ACE_Time_Value &amp;interval=ACE_Time_Value::zero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_timer_interval</name>
      <anchor>a40</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a41</anchor>
      <arglist>(ACE_Event_Handler *event_handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a42</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a43</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask masks_to_be_added)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_wakeup</name>
      <anchor>a44</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask masks_to_be_added)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a45</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask masks_to_be_deleted)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_wakeup</name>
      <anchor>a46</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask masks_to_be_deleted)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>notify</name>
      <anchor>a47</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::EXCEPT_MASK, ACE_Time_Value *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>max_notify_iterations</name>
      <anchor>a48</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>max_notify_iterations</name>
      <anchor>a49</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_pending_notifications</name>
      <anchor>a50</anchor>
      <arglist>(ACE_Event_Handler *=0, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a51</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Event_Handler **event_handler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handler</name>
      <anchor>a52</anchor>
      <arglist>(int signum, ACE_Event_Handler **=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>initialized</name>
      <anchor>a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>size</name>
      <anchor>a54</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock &amp;</type>
      <name>lock</name>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wakeup_all_threads</name>
      <anchor>a56</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a57</anchor>
      <arglist>(ACE_thread_t new_owner, ACE_thread_t *old_owner=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>owner</name>
      <anchor>a58</anchor>
      <arglist>(ACE_thread_t *owner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>restart</name>
      <anchor>a60</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>requeue_position</name>
      <anchor>a61</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>requeue_position</name>
      <anchor>a62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a63</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask masks, int operation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops</name>
      <anchor>a64</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask masks, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a65</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ready_ops</name>
      <anchor>a66</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask, int ops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a67</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACE_ALLOC_HOOK_DECLARE</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE event_handle, ACE_HANDLE io_handle, ACE_Event_Handler *event_handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>event_handling</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Time_Value *max_wait_time=0, int alertable=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>mask_ops_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_HANDLE io_handle, ACE_Reactor_Mask masks, int operation)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_thread_t</type>
      <name>owner_i</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>ok_to_wait</name>
      <anchor>b4</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, int alertable)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_for_multiple_events</name>
      <anchor>b5</anchor>
      <arglist>(int timeout, int alertable)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual DWORD</type>
      <name>poll_remaining_handles</name>
      <anchor>b6</anchor>
      <arglist>(size_t slot)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>expire_timers</name>
      <anchor>b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch</name>
      <anchor>b8</anchor>
      <arglist>(int wait_status)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>safe_dispatch</name>
      <anchor>b9</anchor>
      <arglist>(int wait_status)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_handles</name>
      <anchor>b10</anchor>
      <arglist>(size_t slot)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_handler</name>
      <anchor>b11</anchor>
      <arglist>(size_t slot, size_t max_handlep1)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>simple_dispatch_handler</name>
      <anchor>b12</anchor>
      <arglist>(int slot, ACE_HANDLE event_handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>complex_dispatch_handler</name>
      <anchor>b13</anchor>
      <arglist>(int slot, ACE_HANDLE event_handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_window_messages</name>
      <anchor>b14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reactor_Mask</type>
      <name>upcall</name>
      <anchor>b15</anchor>
      <arglist>(ACE_Event_Handler *event_handler, ACE_HANDLE io_handle, WSANETWORKEVENTS &amp;events)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>calculate_timeout</name>
      <anchor>b16</anchor>
      <arglist>(ACE_Time_Value *time)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>update_state</name>
      <anchor>b17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>new_owner</name>
      <anchor>b18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>change_owner</name>
      <anchor>b19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Sig_Handler *</type>
      <name>signal_handler_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_signal_handler_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Timer_Queue *</type>
      <name>timer_queue_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_timer_queue_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_handler_rep_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Reactor_Notify *</type>
      <name>notify_handler_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>delete_notify_handler_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Process_Mutex</type>
      <name>lock_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock_Adapter&lt; ACE_Process_Mutex &gt;</type>
      <name>lock_adapter_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_WFMO_Reactor_Handler_Repository</type>
      <name>handler_rep_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Manual_Event</type>
      <name>ok_to_wait_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Manual_Event</type>
      <name>wakeup_all_threads_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Wakeup_All_Threads_Handler</type>
      <name>wakeup_all_threads_handler_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Auto_Event</type>
      <name>waiting_to_change_state_</name>
      <anchor>n13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>active_threads_</name>
      <anchor>n14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_thread_t</type>
      <name>owner_</name>
      <anchor>n15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_thread_t</type>
      <name>new_owner_</name>
      <anchor>n16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_thread_t</type>
      <name>change_state_thread_</name>
      <anchor>n17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>atomic_wait_array_</name>
      <anchor>n18</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>open_for_business_</name>
      <anchor>n19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>sig_atomic_t</type>
      <name>deactivated_</name>
      <anchor>n20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_WFMO_Reactor</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_WFMO_Reactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_WFMO_Reactor &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_WFMO_Reactor &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_WFMO_Reactor_Handler_Repository</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_WFMO_Reactor_Test</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WFMO_Reactor_Handler_Repository</name>
    <filename>classACE__WFMO__Reactor__Handler__Repository.html</filename>
    <member kind="function">
      <type></type>
      <name>ACE_WFMO_Reactor_Handler_Repository</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WFMO_Reactor &amp;wfmo_reactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WFMO_Reactor_Handler_Repository</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE, ACE_Event_Handler *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_i</name>
      <anchor>a5</anchor>
      <arglist>(int io_entry, ACE_Event_Handler *event_handler, long network_events, ACE_HANDLE io_handle, ACE_HANDLE event_handle, int delete_event)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a6</anchor>
      <arglist>(ACE_HANDLE, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>a7</anchor>
      <arglist>(ACE_HANDLE, ACE_Reactor_Mask mask, int &amp;changes_required)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind_all</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invalid_handle</name>
      <anchor>a9</anchor>
      <arglist>(ACE_HANDLE handle) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_handlep1</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE *</type>
      <name>handles</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Current_Info *</type>
      <name>current_info</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>changes_required</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_changes</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scheduled_for_deletion</name>
      <anchor>a15</anchor>
      <arglist>(size_t slot) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>modify_network_events_i</name>
      <anchor>a16</anchor>
      <arglist>(ACE_HANDLE io_handle, ACE_Reactor_Mask new_masks, ACE_Reactor_Mask &amp;old_masks, long &amp;new_network_events, ACE_HANDLE &amp;event_handle, int &amp;delete_event, int operation)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reactor_Mask</type>
      <name>bit_ops</name>
      <anchor>a17</anchor>
      <arglist>(long &amp;existing_masks, ACE_Reactor_Mask to_be_removed_masks, int operation)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>suspend_handler_i</name>
      <anchor>a18</anchor>
      <arglist>(ACE_HANDLE handle, int &amp;changes_required)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resume_handler_i</name>
      <anchor>a19</anchor>
      <arglist>(ACE_HANDLE handle, int &amp;changes_required)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_changes_in_current_infos</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_changes_in_suspension_infos</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_changes_in_to_be_added_infos</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_handler_i</name>
      <anchor>a23</anchor>
      <arglist>(size_t slot, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_suspended_handler_i</name>
      <anchor>a24</anchor>
      <arglist>(size_t slot, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_to_be_added_handler_i</name>
      <anchor>a25</anchor>
      <arglist>(size_t slot, ACE_Reactor_Mask to_be_removed_masks)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handler</name>
      <anchor>a26</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask, ACE_Event_Handler **event_handler=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a27</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_WFMO_Reactor &amp;</type>
      <name>wfmo_reactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>max_size_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE *</type>
      <name>current_handles_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Current_Info *</type>
      <name>current_info_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>max_handlep1_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>To_Be_Added_Info *</type>
      <name>to_be_added_info_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>handles_to_be_added_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Suspended_Info *</type>
      <name>current_suspended_info_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>suspended_handles_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>handles_to_be_suspended_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>handles_to_be_resumed_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>handles_to_be_deleted_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_WFMO_Reactor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ACE_WFMO_Reactor_Test</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WFMO_Reactor_Handler_Repository::Common_Info</name>
    <filename>classACE__WFMO__Reactor__Handler__Repository_1_1Common__Info.html</filename>
    <member kind="function">
      <type></type>
      <name>Common_Info</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(int io_entry, ACE_Event_Handler *event_handler, ACE_HANDLE io_handle, long network_events, int delete_event, int delete_entry, ACE_Reactor_Mask close_masks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a3</anchor>
      <arglist>(Common_Info &amp;common_info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>io_entry_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Event_Handler *</type>
      <name>event_handler_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>io_handle_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>network_events_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>delete_event_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>delete_entry_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Reactor_Mask</type>
      <name>close_masks_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WFMO_Reactor_Handler_Repository::Current_Info</name>
    <filename>classACE__WFMO__Reactor__Handler__Repository_1_1Current__Info.html</filename>
    <base>ACE_WFMO_Reactor_Handler_Repository::Common_Info</base>
    <member kind="function">
      <type></type>
      <name>Current_Info</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(int io_entry, ACE_Event_Handler *event_handler, ACE_HANDLE io_handle, long network_events, int delete_event, int delete_entry=0, ACE_Reactor_Mask close_masks=ACE_Event_Handler::NULL_MASK, int suspend_entry=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a3</anchor>
      <arglist>(Common_Info &amp;common_info, int suspend_entry=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(ACE_HANDLE event_handle) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>suspend_entry_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WFMO_Reactor_Handler_Repository::Suspended_Info</name>
    <filename>classACE__WFMO__Reactor__Handler__Repository_1_1Suspended__Info.html</filename>
    <base>ACE_WFMO_Reactor_Handler_Repository::Common_Info</base>
    <member kind="function">
      <type></type>
      <name>Suspended_Info</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE event_handle, int io_entry, ACE_Event_Handler *event_handler, ACE_HANDLE io_handle, long network_events, int delete_event, int delete_entry=0, ACE_Reactor_Mask close_masks=0, int resume_entry=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE event_handle, Common_Info &amp;common_info, int resume_entry=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>event_handle_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>resume_entry_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WFMO_Reactor_Handler_Repository::To_Be_Added_Info</name>
    <filename>classACE__WFMO__Reactor__Handler__Repository_1_1To__Be__Added__Info.html</filename>
    <base>ACE_WFMO_Reactor_Handler_Repository::Common_Info</base>
    <member kind="function">
      <type></type>
      <name>To_Be_Added_Info</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a2</anchor>
      <arglist>(ACE_HANDLE event_handle, int io_entry, ACE_Event_Handler *event_handler, ACE_HANDLE io_handle, long network_events, int delete_event, int delete_entry=0, ACE_Reactor_Mask close_masks=ACE_Event_Handler::NULL_MASK, int suspend_entry=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE event_handle, Common_Info &amp;common_info, int suspend_entry=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>event_handle_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>suspend_entry_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WFMO_Reactor_Notify</name>
    <filename>classACE__WFMO__Reactor__Notify.html</filename>
    <base>ACE_Reactor_Notify</base>
    <member kind="function">
      <type></type>
      <name>ACE_WFMO_Reactor_Notify</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Reactor_Impl *wfmo_reactor, ACE_Timer_Queue *timer_queue, int disable_notify=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>notify</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Event_Handler *event_handler=0, ACE_Reactor_Mask mask=ACE_Event_Handler::EXCEPT_MASK, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_notifications</name>
      <anchor>a4</anchor>
      <arglist>(int &amp;number_of_active_handles, ACE_Handle_Set &amp;rd_mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>notify_handle</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_notify</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Notification_Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_dispatchable</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Notification_Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read_notify_pipe</name>
      <anchor>a9</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Notification_Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max_notify_iterations</name>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_notify_iterations</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_pending_notifications</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Event_Handler *, ACE_Reactor_Mask=ACE_Event_Handler::ALL_EVENTS_MASK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>c0</anchor>
      <arglist>(int signum, siginfo_t *=0, ucontext_t *=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Timer_Queue *</type>
      <name>timer_queue_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Auto_Event</type>
      <name>wakeup_one_thread_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Queue&lt; ACE_MT_SYNCH &gt;</type>
      <name>message_queue_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_notify_iterations_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Accept</name>
    <filename>classACE__WIN32__Asynch__Accept.html</filename>
    <base virtualness="virtual">ACE_Asynch_Accept_Impl</base>
    <base>ACE_WIN32_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Accept</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, ACE_HANDLE accept_handle, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_WIN32_Asynch_Accept</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Accept_Result</name>
    <filename>classACE__WIN32__Asynch__Accept__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Accept_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>listen_handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>accept_handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Accept_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE listen_handle, ACE_HANDLE accept_handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Accept_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_read_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>listen_handle_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>accept_handle_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Accept</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Operation</name>
    <filename>classACE__WIN32__Asynch__Operation.html</filename>
    <base virtualness="virtual">ACE_Asynch_Operation_Impl</base>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Operation</name>
      <anchor>b0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Operation</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_WIN32_Proactor *</type>
      <name>win32_proactor_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Proactor *</type>
      <name>proactor_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handler *</type>
      <name>handler_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Read_Dgram</name>
    <filename>classACE__WIN32__Asynch__Read__Dgram.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Dgram_Impl</base>
    <base>ACE_WIN32_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Read_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Read_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *message_block, size_t &amp;number_of_bytes_recvd, int flags, int protocol_family, const void *act, int priority, int signal_number)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Read_Dgram</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Read_Dgram_Result</name>
    <filename>classACE__WIN32__Asynch__Read__Dgram__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Dgram_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remote_address</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Addr &amp;addr) const</arglist>
    </member>
    <member kind="function">
      <type>sockaddr *</type>
      <name>saddr</name>
      <anchor>a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Read_Dgram_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, u_long bytes_to_read, int flags, int protocol_family, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Read_Dgram_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_read_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>message_block_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Addr *</type>
      <name>remote_address_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>addr_len_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>flags_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Read_Dgram</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Read_File</name>
    <filename>classACE__WIN32__Asynch__Read__File.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_File_Impl</base>
    <base>ACE_WIN32_Asynch_Read_Stream</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Read_File</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, u_long offset, u_long offset_high, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Read_File</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>read</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, int priority, int signal_number=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Read_File_Result</name>
    <filename>classACE__WIN32__Asynch__Read__File__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_File_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Read_Stream_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Read_File_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Read_File_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Read_File</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Read_Stream</name>
    <filename>classACE__WIN32__Asynch__Read__Stream.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Stream_Impl</base>
    <base>ACE_WIN32_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Read_Stream</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Read_Stream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_read</name>
      <anchor>b0</anchor>
      <arglist>(ACE_WIN32_Asynch_Read_Stream_Result *result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Read_Stream_Result</name>
    <filename>classACE__WIN32__Asynch__Read__Stream__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Read_Stream_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_read</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Read_Stream_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Read_Stream_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_read_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Read_Stream</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Result</name>
    <filename>classACE__WIN32__Asynch__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Result_Impl</base>
    <base>OVERLAPPED</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Result</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_error</name>
      <anchor>a12</anchor>
      <arglist>(u_long errcode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bytes_transferred</name>
      <anchor>a13</anchor>
      <arglist>(u_long nbytes)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, ACE_HANDLE event, u_long offset, u_long offset_high, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handler &amp;</type>
      <name>handler_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const void *</type>
      <name>act_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_transferred_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>success_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const void *</type>
      <name>completion_key_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>error_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Accept</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Timer</name>
    <filename>classACE__WIN32__Asynch__Timer.html</filename>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Timer</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;tv, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>time_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Transmit_File</name>
    <filename>classACE__WIN32__Asynch__Transmit__File.html</filename>
    <base virtualness="virtual">ACE_Asynch_Transmit_File_Impl</base>
    <base>ACE_WIN32_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Transmit_File</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transmit_file</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ACE_WIN32_Asynch_Transmit_File</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Transmit_File_Result</name>
    <filename>classACE__WIN32__Asynch__Transmit__File__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Transmit_File_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>socket</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>file</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Asynch_Transmit_File::Header_And_Trailer *</type>
      <name>header_and_trailer</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_per_send</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>flags</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a16</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Transmit_File_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE socket, ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Transmit_File_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>socket_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>file_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Asynch_Transmit_File::Header_And_Trailer *</type>
      <name>header_and_trailer_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_write_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_per_send_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>flags_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Transmit_File</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Write_Dgram</name>
    <filename>classACE__WIN32__Asynch__Write__Dgram.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Dgram_Impl</base>
    <base>ACE_WIN32_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Write_Dgram</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Write_Dgram</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>send</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *message_block, size_t &amp;number_of_bytes_sent, int flags, const ACE_Addr &amp;addr, const void *act, int priority, int signal_number)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Write_Dgram</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Write_Dgram_Result</name>
    <filename>classACE__WIN32__Asynch__Write__Dgram__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Dgram_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a14</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Write_Dgram_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_write, int flags, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Write_Dgram_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_write_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block *</type>
      <name>message_block_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>flags_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Write_Dgram</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Write_File</name>
    <filename>classACE__WIN32__Asynch__Write__File.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_File_Impl</base>
    <base>ACE_WIN32_Asynch_Write_Stream</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Write_File</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, u_long offset, u_long offset_high, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Write_File</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, int priority, int signal_number=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Write_File_Result</name>
    <filename>classACE__WIN32__Asynch__Write__File__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_File_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Write_Stream_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Write_File_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Write_File_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Write_File</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Write_Stream</name>
    <filename>classACE__WIN32__Asynch__Write__Stream.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Stream_Impl</base>
    <base>ACE_WIN32_Asynch_Operation</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Asynch_Write_Stream</name>
      <anchor>a0</anchor>
      <arglist>(ACE_WIN32_Proactor *win32_proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>write</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Write_Stream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, const void *completion_key, ACE_Proactor *proactor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Proactor *</type>
      <name>proactor</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>shared_write</name>
      <anchor>b0</anchor>
      <arglist>(ACE_WIN32_Asynch_Write_Stream_Result *result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Asynch_Write_Stream_Result</name>
    <filename>classACE__WIN32__Asynch__Write__Stream__Result.html</filename>
    <base virtualness="virtual">ACE_Asynch_Write_Stream_Result_Impl</base>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_to_write</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>handle</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>bytes_transferred</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>act</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>success</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>completion_key</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>error</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_HANDLE</type>
      <name>event</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>offset_high</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal_number</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>post_completion</name>
      <anchor>a13</anchor>
      <arglist>(ACE_Proactor_Impl *proactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_WIN32_Asynch_Write_Stream_Result</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>b1</anchor>
      <arglist>(u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Asynch_Write_Stream_Result</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>bytes_to_write_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Message_Block &amp;</type>
      <name>message_block_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Asynch_Write_Stream</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Proactor</name>
    <filename>classACE__WIN32__Proactor.html</filename>
    <base>ACE_Proactor_Impl</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Proactor</name>
      <anchor>a0</anchor>
      <arglist>(size_t number_of_threads=0, int used_with_reactor_event_loop=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Proactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handle</name>
      <anchor>a3</anchor>
      <arglist>(ACE_HANDLE handle, const void *completion_key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Time_Value &amp;wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>post_completion</name>
      <anchor>a6</anchor>
      <arglist>(ACE_WIN32_Asynch_Result *result)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wake_up_dispatch_threads</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_dispatch_threads</name>
      <anchor>a8</anchor>
      <arglist>(int wait)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>number_of_threads</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>number_of_threads</name>
      <anchor>a10</anchor>
      <arglist>(size_t threads)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_HANDLE</type>
      <name>get_handle</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Stream_Impl *</type>
      <name>create_asynch_read_stream</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Stream_Impl *</type>
      <name>create_asynch_write_stream</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_File_Impl *</type>
      <name>create_asynch_read_file</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_File_Impl *</type>
      <name>create_asynch_write_file</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Dgram_Impl *</type>
      <name>create_asynch_read_dgram</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Dgram_Impl *</type>
      <name>create_asynch_write_dgram</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Accept_Impl *</type>
      <name>create_asynch_accept</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Transmit_File_Impl *</type>
      <name>create_asynch_transmit_file</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Stream_Result_Impl *</type>
      <name>create_asynch_read_stream_result</name>
      <anchor>a20</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Stream_Result_Impl *</type>
      <name>create_asynch_write_stream_result</name>
      <anchor>a21</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_File_Result_Impl *</type>
      <name>create_asynch_read_file_result</name>
      <anchor>a22</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_File_Result_Impl *</type>
      <name>create_asynch_write_file_result</name>
      <anchor>a23</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block &amp;message_block, u_long bytes_to_write, const void *act, u_long offset, u_long offset_high, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Read_Dgram_Result_Impl *</type>
      <name>create_asynch_read_dgram_result</name>
      <anchor>a24</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_read, int flags, int protocol_family, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Write_Dgram_Result_Impl *</type>
      <name>create_asynch_write_dgram_result</name>
      <anchor>a25</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE handle, ACE_Message_Block *message_block, size_t bytes_to_write, int flags, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Accept_Result_Impl *</type>
      <name>create_asynch_accept_result</name>
      <anchor>a26</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE listen_handle, ACE_HANDLE accept_handle, ACE_Message_Block &amp;message_block, u_long bytes_to_read, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Transmit_File_Result_Impl *</type>
      <name>create_asynch_transmit_file_result</name>
      <anchor>a27</anchor>
      <arglist>(ACE_Handler &amp;handler, ACE_HANDLE socket, ACE_HANDLE file, ACE_Asynch_Transmit_File::Header_And_Trailer *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Asynch_Result_Impl *</type>
      <name>create_asynch_timer</name>
      <anchor>a28</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act, const ACE_Time_Value &amp;tv, ACE_HANDLE event, int priority, int signal_number=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_signal</name>
      <anchor>b0</anchor>
      <arglist>(int signum, siginfo_t *=0, ucontext_t *=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>b1</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask close_mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_events</name>
      <anchor>b2</anchor>
      <arglist>(unsigned long milli_seconds)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>application_specific_code</name>
      <anchor>b3</anchor>
      <arglist>(ACE_WIN32_Asynch_Result *asynch_result, u_long bytes_transferred, int success, const void *completion_key, u_long error)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>post_wakeup_completions</name>
      <anchor>b4</anchor>
      <arglist>(int how_many)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_HANDLE</type>
      <name>completion_port_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>number_of_threads_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Auto_Event</type>
      <name>event_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>used_with_reactor_event_loop_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Handler</type>
      <name>wakeup_handler_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_WIN32_Wakeup_Completion</name>
    <filename>classACE__WIN32__Wakeup__Completion.html</filename>
    <base>ACE_WIN32_Asynch_Result</base>
    <member kind="function">
      <type></type>
      <name>ACE_WIN32_Wakeup_Completion</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Handler &amp;handler, const void *act=0, ACE_HANDLE event=ACE_INVALID_HANDLE, int priority=0, int signal_number=ACE_SIGRTMIN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_WIN32_Wakeup_Completion</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchor>a2</anchor>
      <arglist>(u_long bytes_transferred=0, int success=1, const void *completion_key=0, u_long error=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Write_Guard</name>
    <filename>classACE__Write__Guard.html</filename>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Guard</base>
    <member kind="function">
      <type></type>
      <name>ACE_Write_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_LOCK &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Write_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_LOCK &amp;m, int block)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_Write_Guard&lt; ACE_Null_Mutex &gt;</name>
    <filename>classACE__Write__Guard_3_01ACE__Null__Mutex_01_4.html</filename>
    <base>ACE_Guard&lt; ACE_Null_Mutex &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_Write_Guard</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Null_Mutex &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_Write_Guard</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Null_Mutex &amp;m, int blocked)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire_write</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acquire</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire_write</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tryacquire</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_XtReactor</name>
    <filename>classACE__XtReactor.html</filename>
    <base>ACE_Select_Reactor_T&lt; ACE_Select_Reactor_Token &gt;</base>
    <member kind="function">
      <type></type>
      <name>ACE_XtReactor</name>
      <anchor>a0</anchor>
      <arglist>(XtAppContext context=0, size_t size=DEFAULT_SIZE, int restart=0, ACE_Sig_Handler *=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACE_XtReactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>XtAppContext</type>
      <name>context</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>context</name>
      <anchor>a3</anchor>
      <arglist>(XtAppContext)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Event_Handler *handler, const void *arg, const ACE_Time_Value &amp;delay_time, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reset_timer_interval</name>
      <anchor>a5</anchor>
      <arglist>(long timer_id, const ACE_Time_Value &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Event_Handler *handler, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_timer</name>
      <anchor>a7</anchor>
      <arglist>(long timer_id, const void **arg=0, int dont_call_handle_close=1)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Event_Handler *handler, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b2</anchor>
      <arglist>(ACE_HANDLE handle, ACE_Reactor_Mask mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>remove_handler_i</name>
      <anchor>b3</anchor>
      <arglist>(const ACE_Handle_Set &amp;handles, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_XtInput</name>
      <anchor>b4</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>wait_for_multiple_events</name>
      <anchor>b5</anchor>
      <arglist>(ACE_Select_Reactor_Handle_Set &amp;, ACE_Time_Value *)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>XtWaitForMultipleEvents</name>
      <anchor>b6</anchor>
      <arglist>(int, ACE_Select_Reactor_Handle_Set &amp;, ACE_Time_Value *)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>XtAppContext</type>
      <name>context_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_XtReactorID *</type>
      <name>ids_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>XtIntervalId</type>
      <name>timeout_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_timeout</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_XtReactor</name>
      <anchor>c1</anchor>
      <arglist>(const ACE_XtReactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_XtReactor &amp;</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const ACE_XtReactor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>TimerCallbackProc</name>
      <anchor>f0</anchor>
      <arglist>(XtPointer closure, XtIntervalId *id)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>void</type>
      <name>InputCallbackProc</name>
      <anchor>f1</anchor>
      <arglist>(XtPointer closure, int *source, XtInputId *id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACE_XtReactorID</name>
    <filename>classACE__XtReactorID.html</filename>
    <member kind="variable">
      <type>XtInputId</type>
      <name>id_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_XtReactorID *</type>
      <name>next_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ace_yy_buffer_state</name>
    <filename>structace__yy__buffer__state.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>ace_yy_input_file</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>ace_yy_ch_buf</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>ace_yy_buf_pos</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ace_yy_size_t</type>
      <name>ace_yy_buf_size</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yy_n_chars</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yy_is_our_buffer</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yy_is_interactive</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yy_at_bol</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yy_fill_buffer</name>
      <anchor>m8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ace_yy_buffer_status</name>
      <anchor>m9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ACE_YYSTYPE</name>
    <filename>unionACE__YYSTYPE.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>type_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Location_Node *</type>
      <name>location_node_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Parse_Node *</type>
      <name>parse_node_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Static_Node *</type>
      <name>static_node_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Service_Type *</type>
      <name>svc_record_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_TCHAR *</type>
      <name>ident_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ACMM</name>
    <filename>classACMM.html</filename>
  </compound>
  <compound kind="class">
    <name>aiocb</name>
    <filename>classaiocb.html</filename>
  </compound>
  <compound kind="class">
    <name>auto_ptr</name>
    <filename>classauto__ptr.html</filename>
    <templarg>X</templarg>
    <base>ACE_Auto_Basic_Ptr</base>
    <member kind="function">
      <type>ACE_EXPLICIT</type>
      <name>auto_ptr</name>
      <anchor>a0</anchor>
      <arglist>(X *p=0)</arglist>
    </member>
    <member kind="function">
      <type>X *</type>
      <name>operator-&gt;</name>
      <anchor>a1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cancel_state</name>
    <filename>structcancel__state.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>cancelstate</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>canceltype</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dirent</name>
    <filename>structdirent.html</filename>
  </compound>
  <compound kind="struct">
    <name>Hash_Token</name>
    <filename>structHash__Token.html</filename>
    <member kind="function">
      <type></type>
      <name>Hash_Token</name>
      <anchor>a0</anchor>
      <arglist>(const void *act, size_t pos, long orig_id)</arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>act_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>pos_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>orig_id_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iostream</name>
    <filename>classiostream.html</filename>
  </compound>
  <compound kind="struct">
    <name>iovec</name>
    <filename>structiovec.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>iov_len</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>iov_base</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ip_mreq</name>
    <filename>structip__mreq.html</filename>
    <member kind="variable">
      <type>in_addr</type>
      <name>imr_multiaddr</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>in_addr</type>
      <name>imr_interface</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>msghdr</name>
    <filename>structmsghdr.html</filename>
    <member kind="variable">
      <type>sockaddr *</type>
      <name>msg_name</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>msg_namelen</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iovec *</type>
      <name>msg_iov</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>msg_iovlen</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>caddr_t</type>
      <name>msg_accrights</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>msg_accrightslen</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>msqid_ds</name>
    <filename>structmsqid__ds.html</filename>
  </compound>
  <compound kind="class">
    <name>OVERLAPPED</name>
    <filename>classOVERLAPPED.html</filename>
  </compound>
  <compound kind="class">
    <name>QObject</name>
    <filename>classQObject.html</filename>
  </compound>
  <compound kind="struct">
    <name>rusage</name>
    <filename>structrusage.html</filename>
    <member kind="variable">
      <type>FILETIME</type>
      <name>ru_utime</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILETIME</type>
      <name>ru_stime</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>semun</name>
    <filename>unionsemun.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>val</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>semid_ds *</type>
      <name>buf</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short *</type>
      <name>array</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>shmaddr</name>
    <filename>structshmaddr.html</filename>
  </compound>
  <compound kind="struct">
    <name>siginfo_t</name>
    <filename>structsiginfo__t.html</filename>
    <member kind="function">
      <type></type>
      <name>siginfo_t</name>
      <anchor>a0</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>siginfo_t</name>
      <anchor>a1</anchor>
      <arglist>(ACE_HANDLE *handles)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE</type>
      <name>si_handle_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_HANDLE *</type>
      <name>si_handles_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>strbuf</name>
    <filename>structstrbuf.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>maxlen</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>len</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>buf</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>streambuf</name>
    <filename>classstreambuf.html</filename>
  </compound>
  <compound kind="struct">
    <name>timespec</name>
    <filename>structtimespec.html</filename>
    <member kind="variable">
      <type>time_t</type>
      <name>tv_sec</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>tv_nsec</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>wince</name>
    <title>ACE on Windows CE status</title>
    <filename>wince</filename>
    <docanchor>ce_wchar</docanchor>
    <docanchor>ce_tao</docanchor>
    <docanchor>ce_evc</docanchor>
    <docanchor>ce_status</docanchor>
    <docanchor>ce_subsets</docanchor>
  </compound>
  <compound kind="page">
    <name>msvc</name>
    <title>Miscellaneous Notes for ACE/TAO and Microsoft Visual C++</title>
    <filename>msvc</filename>
    <docanchor>msvc_aceroot</docanchor>
    <docanchor>msvc_external_projects</docanchor>
    <docanchor>msvc_otheroptions</docanchor>
    <docanchor>msvc_libraries</docanchor>
    <docanchor>msvc_configurations</docanchor>
  </compound>
  <compound kind="page">
    <name>run_test_howto</name>
    <title>How to write a run_test.pl</title>
    <filename>run_test_howto</filename>
    <docanchor>example</docanchor>
    <docanchor>details</docanchor>
  </compound>
  <compound kind="page">
    <name>wchar</name>
    <title>Wide Character/Unicode support in ACE</title>
    <filename>wchar</filename>
    <docanchor>wchar_regular</docanchor>
    <docanchor>wchar_nosupport</docanchor>
    <docanchor>wchar_full</docanchor>
    <docanchor>wchar_legacy</docanchor>
    <docanchor>wchar_overview</docanchor>
    <docanchor>wchar_win32macros</docanchor>
    <docanchor>wchar_logmsg</docanchor>
    <docanchor>wchar_othermacros</docanchor>
  </compound>
</tagfile>
