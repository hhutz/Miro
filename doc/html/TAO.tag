<tagfile>
  <compound kind="file">
    <name>Abstract_Servant_Base.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Abstract__Servant__Base_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Abstract_Servant_Base</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Abstract_Servant_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Abstract_Servant_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Abstract__Servant__Base_8h.html</filename>
    <class kind="class">TAO_Abstract_ServantBase</class>
  </compound>
  <compound kind="file">
    <name>Acceptor_Filter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Filter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Acceptor_Filter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Acceptor_Filter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceptor_Filter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Filter_8h.html</filename>
    <class kind="class">TAO_Acceptor_Filter</class>
  </compound>
  <compound kind="file">
    <name>Acceptor_Filter.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Filter_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Acceptor_Impl.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Impl_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Acceptor_Impl</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Acceptor_Impl</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceptor_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Impl_8h.html</filename>
    <class kind="class">TAO_Accept_Strategy</class>
    <class kind="class">TAO_Concurrency_Strategy</class>
    <class kind="class">TAO_Creation_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Acceptor_Impl.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Impl_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Acceptor_Registry.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Registry_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Acceptor_Registry</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Acceptor_Registry</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceptor_Registry.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Registry_8h.html</filename>
    <class kind="class">TAO_Acceptor_Registry</class>
    <member kind="typedef">
      <type>TAO_Acceptor **</type>
      <name>TAO_AcceptorSetIterator</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceptor_Registry.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Acceptor__Registry_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Adapter_8h.html</filename>
    <class kind="class">TAO_Adapter</class>
    <class kind="class">TAO_Adapter_Factory</class>
    <class kind="class">TAO_Adapter_Registry</class>
  </compound>
  <compound kind="file">
    <name>Adapter.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Adapter_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Any.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Any_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Any</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const CORBA::Any &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::Any &amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Any</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Any.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Any_8h.html</filename>
    <class kind="class">CORBA_Any</class>
    <class kind="struct">CORBA_Any::to_object</class>
    <class kind="class">CORBA_Any_out</class>
    <class kind="class">CORBA_Any_var</class>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const CORBA::Any &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::Any &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::Short)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA_Any_var &amp;, const CORBA_Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Any_var &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::Any::from_boolean)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::Short &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::UShort &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::Long &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::ULong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::LongLong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::ULongLong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::Float &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::Double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA_Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::TypeCode_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA_Any_var &amp;, const char *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA_Any_var &amp;, const CORBA::WChar *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA_Any_var &amp;, CORBA::Any::to_boolean)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Any.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Any_8i.html</filename>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Short rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::UShort rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Long rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::ULong rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::LongLong rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::ULongLong rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Float rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Double rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, const CORBA_Any &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::TypeCode_ptr rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, const CORBA::Object_ptr rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::from_boolean rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::from_char rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::from_wchar rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::from_octet rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::from_string rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::from_wstring rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Short &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::UShort &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Long &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::ULong &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::LongLong &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::ULongLong &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Float &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Double &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA_Any &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::TypeCode_ptr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, const char *&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, const CORBA::WChar *&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::to_boolean rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::to_octet rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a32</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::to_char rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::to_wchar rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a34</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::to_string rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a35</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::to_wstring rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a36</anchor>
      <arglist>(CORBA_Any_var &amp;lhs, CORBA::Any::to_object rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>append.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>append_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_append</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_append</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Asynch_Invocation.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Invocation_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Asynch_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Asynch_Invocation</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Asynch_Invocation.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Invocation_8h.html</filename>
    <class kind="class">TAO_GIOP_Asynch_Invocation</class>
    <class kind="class">TAO_GIOP_Twoway_Asynch_Invocation</class>
  </compound>
  <compound kind="file">
    <name>Asynch_Invocation.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Invocation_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Asynch_Queued_Message.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Queued__Message_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Asynch_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Asynch_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Asynch_Queued_Message.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Queued__Message_8h.html</filename>
    <class kind="class">TAO_Asynch_Queued_Message</class>
  </compound>
  <compound kind="file">
    <name>Asynch_Reply_Dispatcher.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Reply__Dispatcher_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Asynch_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Asynch_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Asynch_Reply_Dispatcher.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Reply__Dispatcher_8h.html</filename>
    <class kind="class">TAO_Asynch_Reply_Dispatcher</class>
    <class kind="class">TAO_Asynch_Reply_Dispatcher_Base</class>
  </compound>
  <compound kind="file">
    <name>Asynch_Reply_Dispatcher.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Reply__Dispatcher_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Asynch_Timeout_Handler.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Timeout__Handler_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Asynch_Timeout_Handler</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Asynch_Timeout_Handler</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Asynch_Timeout_Handler.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Asynch__Timeout__Handler_8h.html</filename>
    <class kind="class">TAO_Asynch_Timeout_Handler</class>
  </compound>
  <compound kind="file">
    <name>Base_Transport_Property.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Base__Transport__Property_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Base_Transport_Property</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Base_Transport_Property</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Base_Transport_Property.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Base__Transport__Property_8h.html</filename>
    <class kind="class">TAO_Base_Transport_Property</class>
  </compound>
  <compound kind="file">
    <name>Base_Transport_Property.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Base__Transport__Property_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>BiDir_Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>BiDir__Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_BiDir_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_BiDir_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BiDir_Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>BiDir__Adapter_8h.html</filename>
    <class kind="class">TAO_BiDir_Adapter</class>
  </compound>
  <compound kind="file">
    <name>Bind_Dispatcher_Guard.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Bind__Dispatcher__Guard_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Bind_Dispatcher_Guard.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Bind__Dispatcher__Guard_8h.html</filename>
    <class kind="class">TAO_Bind_Dispatcher_Guard</class>
  </compound>
  <compound kind="file">
    <name>Bind_Dispatcher_Guard.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Bind__Dispatcher__Guard_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Block_Flushing_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Block__Flushing__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Block_Flushing_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Block_Flushing_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Block_Flushing_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Block__Flushing__Strategy_8h.html</filename>
    <class kind="class">TAO_Block_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Bounds.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Bounds_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>BoundsC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>BoundsC_8cpp.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_Bounds</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_except, sizeof(_oc_CORBA_Bounds),(char *)&amp;_oc_CORBA_Bounds, 0, sizeof(CORBA::Bounds))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::Bounds &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::Bounds *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::Bounds *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::Bounds *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_Bounds</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundsC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>BoundsC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_BOUNDS_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Bounds *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Bounds *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::Bounds *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Bounds &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Bounds &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundsC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>BoundsC_8i.html</filename>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::Bounds &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Bounds &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Buffering_Constraint_Policy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Buffering__Constraint__Policy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_Buffering_Constraint_Policy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_Buffering_Constraint_Policy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Buffering_Constraint_Policy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Buffering__Constraint__Policy_8h.html</filename>
    <class kind="class">TAO_Buffering_Constraint_Policy</class>
  </compound>
  <compound kind="file">
    <name>Buffering_Constraint_Policy.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Buffering__Constraint__Policy_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Cache_Entries.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Cache__Entries_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Cache_Entries</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Cache_Entries</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cache_Entries.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Cache__Entries_8h.html</filename>
    <class kind="class">TAO_Cache_ExtId</class>
    <class kind="class">TAO_Cache_IntId</class>
  </compound>
  <compound kind="file">
    <name>Cache_Entries.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Cache__Entries_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>CDR.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CDR_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_CDR</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_CDR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CDR_8h.html</filename>
    <class kind="class">TAO_InputCDR</class>
    <class kind="class">TAO_OutputCDR</class>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Short x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::UShort x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Long x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULong x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongLong x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULongLong x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongDouble x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Float x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Double x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::UShort &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Long &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Char *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::WChar *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ParameterMode &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ParameterMode &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CDR_8i.html</filename>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Short x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::UShort x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Long x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongDouble x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Float x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Double x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::UShort &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Long &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Char *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::WChar *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ParameterMode &amp;_tao_enumval)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ParameterMode &amp;_tao_enumval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR_Encaps_Codec.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CDR__Encaps__Codec_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_CodecFactory_CDR_Encaps_Codec</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_CodecFactory_CDR_Encaps_Codec</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR_Encaps_Codec.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CDR__Encaps__Codec_8h.html</filename>
    <class kind="class">TAO_CDR_Encaps_Codec</class>
  </compound>
  <compound kind="file">
    <name>Cleanup_Func_Registry.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Cleanup__Func__Registry_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Cleanup_Func_Registry</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Cleanup_Func_Registry</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cleanup_Func_Registry.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Cleanup__Func__Registry_8h.html</filename>
    <class kind="class">TAO_Cleanup_Func_Registry</class>
  </compound>
  <compound kind="file">
    <name>Cleanup_Func_Registry.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Cleanup__Func__Registry_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Client_Strategy_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Client__Strategy__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Client_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Client_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Client_Strategy_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Client__Strategy__Factory_8h.html</filename>
    <class kind="class">TAO_Client_Strategy_Factory</class>
  </compound>
  <compound kind="file">
    <name>ClientInterceptorAdapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientInterceptorAdapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ClientInterceptorAdapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ClientInterceptorAdapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClientInterceptorAdapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientInterceptorAdapter_8h.html</filename>
    <class kind="class">TAO_ClientRequestInterceptor_Adapter</class>
  </compound>
  <compound kind="file">
    <name>ClientInterceptorAdapter.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientInterceptorAdapter_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientRequestInfo_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_ClientRequestInfo</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_ClientRequestInfo</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientRequestInfo_8h.html</filename>
    <class kind="class">TAO_ClientRequestInfo</class>
    <class kind="class">TAO_ClientRequestInfo_Guard</class>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientRequestInfo_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo_i.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientRequestInfo__i_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_ClientRequestInfo_i</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_ClientRequestInfo_i</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo_i.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientRequestInfo__i_8h.html</filename>
    <class kind="class">TAO_ClientRequestInfo_i</class>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo_i.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ClientRequestInfo__i_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>CodecFactory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CodecFactory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_CodecFactory_CodecFactory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_CodecFactory_CodecFactory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CodecFactory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CodecFactory_8h.html</filename>
    <class kind="class">TAO_CodecFactory</class>
  </compound>
  <compound kind="file">
    <name>CodecFactory_ORBInitializer.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CodecFactory__ORBInitializer_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_CodecFactory_CodecFactory_ORBInitializer</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_CodecFactory_CodecFactory_ORBInitializer</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CodecFactory_ORBInitializer.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CodecFactory__ORBInitializer_8h.html</filename>
    <class kind="class">TAO_CodecFactory_ORBInitializer</class>
  </compound>
  <compound kind="file">
    <name>Collocation_Resolver.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Collocation__Resolver_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Collocation_Resolver</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Collocation_Resolver</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Collocation_Resolver.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Collocation__Resolver_8h.html</filename>
    <class kind="class">TAO_Collocation_Resolver</class>
  </compound>
  <compound kind="file">
    <name>Collocation_Resolver.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Collocation__Resolver_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Connection_Handler.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connection__Handler_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Connection_Handler</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Connection_Handler</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connection_Handler.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connection__Handler_8h.html</filename>
    <class kind="class">TAO_Connection_Handler</class>
  </compound>
  <compound kind="file">
    <name>Connection_Handler.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connection__Handler_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Connection_Purging_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connection__Purging__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Connection_Purging_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Connection_Purging_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connection_Purging_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connection__Purging__Strategy_8h.html</filename>
    <class kind="class">TAO_Connection_Purging_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Connection_Purging_Strategy.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connection__Purging__Strategy_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Connector_Impl.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connector__Impl_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Connector_Impl</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Connector_Impl</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connector_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connector__Impl_8h.html</filename>
    <class kind="class">TAO_Connect_Concurrency_Strategy</class>
    <class kind="class">TAO_Connect_Creation_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Connector_Impl.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connector__Impl_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Connector_Registry.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connector__Registry_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Connector_Registry</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Connector_Registry</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connector_Registry.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connector__Registry_8h.html</filename>
    <class kind="class">TAO_Connector_Registry</class>
    <member kind="typedef">
      <type>TAO_Connector **</type>
      <name>TAO_ConnectorSetIterator</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connector_Registry.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Connector__Registry_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAME.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAME_8pidl.html</filename>
    <namespace>CONV_FRAME</namespace>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMEC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMEC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CONV_FRAME_CodeSetId</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CONV_FRAME_CodeSetId),(char *)&amp;_oc_CONV_FRAME_CodeSetId, 0, sizeof(CONV_FRAME::CodeSetId))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CONV_FRAME) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CONV_FRAME_CodeSetComponent</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_CONV_FRAME_CodeSetComponent),(char *)&amp;_oc_CONV_FRAME_CodeSetComponent, 0, sizeof(CONV_FRAME::CodeSetComponent))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CONV_FRAME_CodeSetComponentInfo</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_CONV_FRAME_CodeSetComponentInfo),(char *)&amp;_oc_CONV_FRAME_CodeSetComponentInfo, 0, sizeof(CONV_FRAME::CodeSetComponentInfo))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CONV_FRAME_CodeSetContext</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_CONV_FRAME_CodeSetContext),(char *)&amp;_oc_CONV_FRAME_CodeSetContext, 0, sizeof(CONV_FRAME::CodeSetContext))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponent *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponent *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetComponent *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetComponentInfo &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponentInfo *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponentInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetComponentInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetContext &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetContext *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetComponent::_tao_seq_CodeSetId &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetComponent::_tao_seq_CodeSetId &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CONV_FRAME_CodeSetId</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CONV_FRAME_CodeSetComponentInfo</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMEC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMEC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID___VAR_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID___OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CONV_FRAME::CodeSetComponent *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CONV_FRAME::CodeSetComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CONV_FRAME::CodeSetComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, const CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, CONV_FRAME::CodeSetComponentInfo *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;, CONV_FRAME::CodeSetComponentInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;, const CONV_FRAME::CodeSetComponentInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, const CONV_FRAME::CodeSetContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, CONV_FRAME::CodeSetContext *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, CONV_FRAME::CodeSetContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, const CONV_FRAME::CodeSetContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetComponent::_tao_seq_CodeSetId &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetComponent::_tao_seq_CodeSetId &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetContext &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMEC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMEC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CONV_FRAME_CODESETCOMPONENT__TAO_SEQ_CODESETID_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetComponent::_tao_seq_CodeSetId &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetComponent::_tao_seq_CodeSetId &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetComponentInfo &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetComponentInfo &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetContext &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMES_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMES_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMES_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMES__T_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMES__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CONV__FRAMES__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>corba.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>corba_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>CORBA.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBA_8pidl.html</filename>
  </compound>
  <compound kind="file">
    <name>CORBA_String.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBA__String_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_CORBA_String</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ostream &amp;os, const CORBA::String_var &amp;sv)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(istream &amp;is, CORBA::String_var &amp;sv)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;os, CORBA::String_out &amp;so)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(istream &amp;is, CORBA::String_out &amp;so)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;os, const CORBA::WString_var &amp;wsv)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(istream &amp;is, CORBA::WString_var &amp;wsv)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;os, CORBA::WString_out &amp;wso)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(istream &amp;is, CORBA::WString_out &amp;wso)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_CORBA_String</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBA_String.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBA__String_8h.html</filename>
    <class kind="class">CORBA_String_out</class>
    <class kind="class">CORBA_String_var</class>
    <class kind="class">CORBA_WString_out</class>
    <class kind="class">CORBA_WString_var</class>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(ostream &amp;, const CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(istream &amp;, CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ostream &amp;, CORBA::String_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(istream &amp;, CORBA::String_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;, const CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(istream &amp;, CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;, CORBA::WString_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(istream &amp;, CORBA::WString_out &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBA_String.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBA__String_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>corbafwd.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>corbafwd_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_corbafwd</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_corbafwd</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>corbafwd.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>corbafwd_8h.html</filename>
    <class kind="class">TAO_Collocation_Strategies</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION_LIST</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a2</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a4</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ORB_TYPE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_INVALID_PROFILE</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_IIOP_PROFILE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_MULTIPLE_COMPONENT_PROFILE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_UIOP_PROFILE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_SHMEM_PROFILE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_UDP_PROFILE</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_UIPMC_PROFILE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_BIOP_PROFILE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_ENDPOINTS</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_GROUP</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TAG_GROUP_IIOP</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SVC_CONTEXT_ALIGN</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OMG_VMCID</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_MINOR_CODE</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAX_MINOR_CODE</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INVOCATION_LOCATION_FORWARD_MINOR_CODE</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INVOCATION_SEND_REQUEST_MINOR_CODE</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_POA_DISCARDING</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_POA_HOLDING</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_UNHANDLED_SERVER_CXX_EXCEPTION</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INVOCATION_RECV_REQUEST_MINOR_CODE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTOR_REGISTRY_NO_USABLE_PROTOCOL</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MPROFILE_CREATION_ERROR</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TIMEOUT_CONNECT_MINOR_CODE</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TIMEOUT_SEND_MINOR_CODE</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TIMEOUT_RECV_MINOR_CODE</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_IMPLREPO_MINOR_CODE</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ACCEPTOR_REGISTRY_OPEN_LOCATION_CODE</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ORB_CORE_INIT_LOCATION_CODE</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_POLICY_NARROW_CODE</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_GUARD_FAILURE</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_POA_BEING_DESTROYED</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_POA_INACTIVE</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_UNSPECIFIED_MINOR_CODE</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ETIMEDOUT_MINOR_CODE</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENFILE_MINOR_CODE</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EMFILE_MINOR_CODE</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EPIPE_MINOR_CODE</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ECONNREFUSED_MINOR_CODE</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENOENT_MINOR_CODE</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EBADF_MINOR_CODE</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENOSYS_MINOR_CODE</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EPERM_MINOR_CODE</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EAFNOSUPPORT_MINOR_CODE</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EAGAIN_MINOR_CODE</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENOMEM_MINOR_CODE</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EACCES_MINOR_CODE</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EFAULT_MINOR_CODE</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EBUSY_MINOR_CODE</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EEXIST_MINOR_CODE</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EINVAL_MINOR_CODE</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ECOMM_MINOR_CODE</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ECONNRESET_MINOR_CODE</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENOTSUP_MINOR_CODE</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CODESET_ID_ISO8859_1</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CODESET_ID_UNICODE</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_CHAR_CODESET_ID</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_WCHAR_CODESET_ID</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INVALID_PRIORITY</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TWOWAY_RESPONSE_FLAG</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Any *</type>
      <name>CORBA_Any_ptr</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_TypeCode *</type>
      <name>CORBA_TypeCode_ptr</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Exception *</type>
      <name>CORBA_Exception_ptr</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ConstructionPolicy *</type>
      <name>CORBA_ConstructionPolicy_ptr</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Request *</type>
      <name>CORBA_Request_ptr</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_NamedValue *</type>
      <name>CORBA_NamedValue_ptr</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_NVList *</type>
      <name>CORBA_NVList_ptr</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Context *</type>
      <name>CORBA_Context_ptr</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ContextList *</type>
      <name>CORBA_ContextList_ptr</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB *</type>
      <name>CORBA_ORB_ptr</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Object *</type>
      <name>CORBA_Object_ptr</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_LocalObject *</type>
      <name>CORBA_LocalObject_ptr</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Current *</type>
      <name>CORBA_Current_ptr</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ServerRequest *</type>
      <name>CORBA_ServerRequest_ptr</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Environment *</type>
      <name>CORBA_Environment_ptr</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ServiceDetail *</type>
      <name>CORBA_ServiceDetail_ptr</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ServiceInformation *</type>
      <name>CORBA_ServiceInformation_ptr</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Principal *</type>
      <name>CORBA_Principal_ptr</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ImplementationDef *</type>
      <name>CORBA_ImplementationDef_ptr</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ValueFactoryBase *</type>
      <name>CORBA_ValueFactory_ptr</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>CORBA_ORB_ObjectIdList_ptr</name>
      <anchor>a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_IRObject *</type>
      <name>CORBA_IRObject_ptr</name>
      <anchor>a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Contained *</type>
      <name>CORBA_Contained_ptr</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Repository *</type>
      <name>CORBA_Repository_ptr</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Container *</type>
      <name>CORBA_Container_ptr</name>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ModuleDef *</type>
      <name>CORBA_ModuleDef_ptr</name>
      <anchor>a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ConstantDef *</type>
      <name>CORBA_ConstantDef_ptr</name>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_IDLType *</type>
      <name>CORBA_IDLType_ptr</name>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_StructDef *</type>
      <name>CORBA_StructDef_ptr</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_UnionDef *</type>
      <name>CORBA_UnionDef_ptr</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_EnumDef *</type>
      <name>CORBA_EnumDef_ptr</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_AliasDef *</type>
      <name>CORBA_AliasDef_ptr</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_InterfaceDef *</type>
      <name>CORBA_InterfaceDef_ptr</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_AbstractInterfaceDef *</type>
      <name>CORBA_AbstractInterfaceDef_ptr</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_LocalInterfaceDef *</type>
      <name>CORBA_LocalInterfaceDef_ptr</name>
      <anchor>a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ExceptionDef *</type>
      <name>CORBA_ExceptionDef_ptr</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_NativeDef *</type>
      <name>CORBA_NativeDef_ptr</name>
      <anchor>a103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ValueDef *</type>
      <name>CORBA_ValueDef_ptr</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ValueBoxDef *</type>
      <name>CORBA_ValueBoxDef_ptr</name>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_TypedefDef *</type>
      <name>CORBA_TypedefDef_ptr</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_PrimitiveDef *</type>
      <name>CORBA_PrimitiveDef_ptr</name>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_StringDef *</type>
      <name>CORBA_StringDef_ptr</name>
      <anchor>a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_WstringDef *</type>
      <name>CORBA_WstringDef_ptr</name>
      <anchor>a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_FixedDef *</type>
      <name>CORBA_FixedDef_ptr</name>
      <anchor>a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_SequenceDef *</type>
      <name>CORBA_SequenceDef_ptr</name>
      <anchor>a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ArrayDef *</type>
      <name>CORBA_ArrayDef_ptr</name>
      <anchor>a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_AttributeDef *</type>
      <name>CORBA_AttributeDef_ptr</name>
      <anchor>a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_OperationDef *</type>
      <name>CORBA_OperationDef_ptr</name>
      <anchor>a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ValueMemberDef *</type>
      <name>CORBA_ValueMemberDef_ptr</name>
      <anchor>a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_TypeCodeFactory *</type>
      <name>CORBA_TypeCodeFactory_ptr</name>
      <anchor>a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int</type>
      <name>CORBA_Flags</name>
      <anchor>a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>TAO_Skeleton</name>
      <anchor>a118</anchor>
      <arglist>)(TAO_ServerRequest &amp;, void *, void *)</arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_SERVANT_LOCATION</name>
      <anchor>a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVANT_FOUND</name>
      <anchor>a129a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_DEFAULT_SERVANT</name>
      <anchor>a129a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVANT_MANAGER</name>
      <anchor>a129a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVANT_NOT_FOUND</name>
      <anchor>a129a123</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA_Environment &amp;</type>
      <name>TAO_default_environment</name>
      <anchor>a124</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a125</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO_opaque &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a126</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO_opaque &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a127</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::TCKind &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a128</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::TCKind &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_SYSTEM_EXCEPTION_LIST class</type>
      <name>CORBA_ConstructionPolicy</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export CORBA::TypeCode_ptr</type>
      <name>TC_opaque</name>
      <anchor>a119</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>corbafwd.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>corbafwd_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>CORBALOC_Parser.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBALOC__Parser_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_CORBALOC_Parser</name>
      <anchor>a7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_CORBALOC_Parser</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>corbaloc_prefix</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>iiop_prefix</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>uiop_prefix</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>shmiop_prefix</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>miop_prefix</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>rir_prefix</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBALOC_Parser.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBALOC__Parser_8h.html</filename>
    <class kind="class">TAO_CORBALOC_Parser</class>
  </compound>
  <compound kind="file">
    <name>CORBALOC_Parser.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBALOC__Parser_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>CORBANAME_Parser.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBANAME__Parser_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_CORBANAME_Parser</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_CORBANAME_Parser</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>corbaname_prefix</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBANAME_Parser.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBANAME__Parser_8h.html</filename>
    <class kind="class">TAO_CORBANAME_Parser</class>
  </compound>
  <compound kind="file">
    <name>CORBANAME_Parser.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CORBANAME__Parser_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Current.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Current_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>CurrentC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CurrentC_8cpp.html</filename>
    <member kind="function">
      <type>CORBA::Current_ptr</type>
      <name>tao_CORBA_Current_duplicate</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Current_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_Current_release</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Current_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr</type>
      <name>tao_CORBA_Current_nil</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr</type>
      <name>tao_CORBA_Current_narrow</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_Current_upcast</name>
      <anchor>a4</anchor>
      <arglist>(void *src)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CurrentC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CurrentC_8h.html</filename>
    <class kind="class">CORBA_Current</class>
    <class kind="class">CORBA_Current_out</class>
    <class kind="class">CORBA_Current_var</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Current *</type>
      <name>CORBA_Current_ptr</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CurrentC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>CurrentC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT___CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>debug_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_debug</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_debug</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export u_int</type>
      <name>TAO_debug_level</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>debug_8h.html</filename>
    <member kind="variable">
      <type>TAO_Export u_int</type>
      <name>TAO_debug_level</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export u_int</type>
      <name>TAO_orbdebug</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_client.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__client_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_default_client</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_default_client</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_client.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__client_8h.html</filename>
    <class kind="class">TAO_Default_Client_Strategy_Factory</class>
  </compound>
  <compound kind="file">
    <name>default_client.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__client_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Default_Collocation_Resolver.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Collocation__Resolver_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Default_Collocation_Resolver</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Default_Collocation_Resolver</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Default_Collocation_Resolver.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Collocation__Resolver_8h.html</filename>
    <class kind="class">TAO_Default_Collocation_Resolver</class>
  </compound>
  <compound kind="file">
    <name>Default_Collocation_Resolver.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Collocation__Resolver_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Default_Endpoint_Selector_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Endpoint__Selector__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Default_Endpoint_Selector_Factory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Default_Endpoint_Selector_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Default_Endpoint_Selector_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Endpoint__Selector__Factory_8h.html</filename>
    <class kind="class">TAO_Default_Endpoint_Selector_Factory</class>
  </compound>
  <compound kind="file">
    <name>Default_Protocols_Hooks.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Protocols__Hooks_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Default_Protocols_Hooks</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Default_Protocols_Hooks</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Default_Protocols_Hooks.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Protocols__Hooks_8h.html</filename>
    <class kind="class">TAO_Default_Protocols_Hooks</class>
  </compound>
  <compound kind="file">
    <name>Default_Protocols_Hooks.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Protocols__Hooks_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>default_resource.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__resource_8cpp.html</filename>
    <member kind="typedef">
      <type>ACE_Malloc&lt; ACE_LOCAL_MEMORY_POOL, ACE_Null_Mutex &gt;</type>
      <name>NULL_LOCK_MALLOC</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Allocator_Adapter&lt; NULL_LOCK_MALLOC &gt;</type>
      <name>NULL_LOCK_ALLOCATOR</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Malloc&lt; ACE_LOCAL_MEMORY_POOL, TAO_SYNCH_MUTEX &gt;</type>
      <name>LOCKED_MALLOC</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Allocator_Adapter&lt; LOCKED_MALLOC &gt;</type>
      <name>LOCKED_ALLOCATOR</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_default_resource</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_default_resource</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_resource.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__resource_8h.html</filename>
    <class kind="class">TAO_Default_Resource_Factory</class>
  </compound>
  <compound kind="file">
    <name>default_resource.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__resource_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>default_server.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__server_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_BEGINCHECK</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CHECKANDSET</name>
      <anchor>a1</anchor>
      <arglist>(sym)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENDCHECK</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_default_server</name>
      <anchor>a4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_default_server</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_server.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__server_8h.html</filename>
    <class kind="class">TAO_Default_Server_Strategy_Factory</class>
  </compound>
  <compound kind="file">
    <name>default_server.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>default__server_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Default_Stub_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Stub__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Default_Stub_Factory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Default_Stub_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Default_Stub_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Stub__Factory_8h.html</filename>
    <class kind="class">TAO_Default_Stub_Factory</class>
  </compound>
  <compound kind="file">
    <name>Default_Thread_Lane_Resources_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Thread__Lane__Resources__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Default_Thread_Lane_Resources_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Default_Thread_Lane_Resources_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Default_Thread_Lane_Resources_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Thread__Lane__Resources__Manager_8h.html</filename>
    <class kind="class">TAO_Default_Thread_Lane_Resources_Manager</class>
    <class kind="class">TAO_Default_Thread_Lane_Resources_Manager_Factory</class>
  </compound>
  <compound kind="file">
    <name>Default_Thread_Lane_Resources_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Default__Thread__Lane__Resources__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>DLL_ORB.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DLL__ORB_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_DLL_ORB</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_DLL_ORB</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DLL_ORB.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DLL__ORB_8h.html</filename>
    <class kind="class">TAO_DLL_ORB</class>
  </compound>
  <compound kind="file">
    <name>DLL_ORB.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DLL__ORB_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>DLL_Parser.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DLL__Parser_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_DLL_Parser</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_DLL_Parser</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>dll_prefix</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DLL_Parser.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DLL__Parser_8h.html</filename>
    <class kind="class">TAO_DLL_Parser</class>
  </compound>
  <compound kind="file">
    <name>DLL_Parser.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DLL__Parser_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Domain.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Domain_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>DomainC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DomainC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_DOMAINMANAGERLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGERLIST_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::DomainManager_ptr</type>
      <name>tao_CORBA_DomainManager_duplicate</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::DomainManager_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_DomainManager_release</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::DomainManager_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::DomainManager_ptr</type>
      <name>tao_CORBA_DomainManager_nil</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::DomainManager_ptr</type>
      <name>tao_CORBA_DomainManager_narrow</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_DomainManager_upcast</name>
      <anchor>a11</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_DomainManager</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::tk_objref, sizeof(_oc_CORBA_DomainManager),(char *)&amp;_oc_CORBA_DomainManager, 0, sizeof(CORBA::DomainManager))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_ConstructionPolicy_release</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::ConstructionPolicy_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ConstructionPolicy_ptr</type>
      <name>tao_CORBA_ConstructionPolicy_nil</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ConstructionPolicy_ptr</type>
      <name>tao_CORBA_ConstructionPolicy_narrow</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_ConstructionPolicy_upcast</name>
      <anchor>a17</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_ConstructionPolicy</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::tk_objref, sizeof(_oc_CORBA_ConstructionPolicy),(char *)&amp;_oc_CORBA_ConstructionPolicy, 0, sizeof(CORBA::ConstructionPolicy))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_DomainManagerList</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_DomainManagerList),(char *)&amp;_oc_CORBA_DomainManagerList, 0, sizeof(CORBA::DomainManagerList))</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::DomainManager_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ConstructionPolicy_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ConstructionPolicy_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::DomainManagerList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::DomainManagerList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::DomainManagerList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::DomainManagerList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::DomainManager_ptr _tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::DomainManager_ptr &amp;_tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a29</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ConstructionPolicy_ptr _tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ConstructionPolicy_ptr &amp;_tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::DomainManagerList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::DomainManagerList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::_TAO_DomainManager_Proxy_Broker *(*</type>
      <name>CORBA__TAO_DomainManager_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a2</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_DomainManager</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::_TAO_ConstructionPolicy_Proxy_Broker *(*</type>
      <name>CORBA__TAO_ConstructionPolicy_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a4</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_ConstructionPolicy</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_DomainManagerList</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DomainC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DomainC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY___PTR_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY___VAR_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY___OUT_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_DOMAINMANAGERLIST_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGERLIST_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGERLIST___VAR_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGERLIST___OUT_CH_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::DomainManager_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::DomainManager *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ConstructionPolicy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ConstructionPolicy *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::DomainManagerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::DomainManagerList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::DomainManagerList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::DomainManagerList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::DomainManager_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::DomainManager_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ConstructionPolicy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ConstructionPolicy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a26</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::DomainManagerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::DomainManagerList &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export CORBA::_TAO_ConstructionPolicy_Proxy_Broker *(*</type>
      <name>CORBA__TAO_ConstructionPolicy_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a13</anchor>
      <arglist>)(CORBA::Object_ptr obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DomainC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DomainC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER___CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY___CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_DOMAINMANAGERLIST_CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGERLIST_CI_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::DomainManager_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::DomainManager_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ConstructionPolicy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ConstructionPolicy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::DomainManagerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::DomainManagerList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Dynamic_8pidl.html</filename>
    <namespace>Dynamic</namespace>
    <member kind="define">
      <type>#define</type>
      <name>local</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Dynamic__Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Dynamic_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Dynamic_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Dynamic__Adapter_8h.html</filename>
    <class kind="class">TAO_Dynamic_Adapter</class>
  </compound>
  <compound kind="file">
    <name>DynamicC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DynamicC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_DYNAMIC_PARAMETERLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_PARAMETERLIST_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_DYNAMIC_EXCEPTIONLIST_CS_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_EXCEPTIONLIST_CS_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Dynamic_Parameter</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_Dynamic_Parameter),(char *)&amp;_oc_Dynamic_Parameter, 0, sizeof(Dynamic::Parameter))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(Dynamic) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Dynamic_ParameterList</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Dynamic_ParameterList),(char *)&amp;_oc_Dynamic_ParameterList, 0, sizeof(Dynamic::ParameterList))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Dynamic_ContextList</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Dynamic_ContextList),(char *)&amp;_oc_Dynamic_ContextList, 0, sizeof(Dynamic::ContextList))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Dynamic_TypeCode</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Dynamic_TypeCode),(char *)&amp;_oc_Dynamic_TypeCode, 0, sizeof(Dynamic::TypeCode))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Dynamic_ExceptionList</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Dynamic_ExceptionList),(char *)&amp;_oc_Dynamic_ExceptionList, 0, sizeof(Dynamic::ExceptionList))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Dynamic_RequestContext</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Dynamic_RequestContext),(char *)&amp;_oc_Dynamic_RequestContext, 0, sizeof(Dynamic::RequestContext))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Dynamic::Parameter *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Dynamic::Parameter *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Dynamic::Parameter *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Dynamic::ParameterList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Dynamic::ParameterList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Dynamic::ParameterList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Dynamic::ParameterList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Dynamic::ExceptionList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Dynamic::ExceptionList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Dynamic::ExceptionList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Dynamic::ExceptionList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Dynamic::ParameterList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a26</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Dynamic::ParameterList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Dynamic::ExceptionList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Dynamic::ExceptionList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_Dynamic_Parameter</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_Dynamic_ParameterList</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_Dynamic_ExceptionList</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DynamicC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_DYNAMIC_PARAMETERLIST_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_PARAMETERLIST_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_PARAMETERLIST___VAR_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_PARAMETERLIST___OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_DYNAMIC_EXCEPTIONLIST_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_EXCEPTIONLIST_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_EXCEPTIONLIST___VAR_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_EXCEPTIONLIST___OUT_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, Dynamic::Parameter *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;, Dynamic::Parameter *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;, const Dynamic::Parameter *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, const Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, Dynamic::ParameterList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, Dynamic::ParameterList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, const Dynamic::ParameterList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, const Dynamic::ExceptionList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;, Dynamic::ExceptionList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;, Dynamic::ExceptionList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;, const Dynamic::ExceptionList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::ExceptionList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::ExceptionList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>DynamicC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_DYNAMIC_PARAMETERLIST_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_PARAMETERLIST_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_DYNAMIC_EXCEPTIONLIST_CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_EXCEPTIONLIST_CI_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Dynamic::Parameter &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Dynamic::Parameter &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::ExceptionList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::ExceptionList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Encodable.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Encodable_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Encodable.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Encodable_8h.html</filename>
    <class kind="class">TAO_Encodable</class>
  </compound>
  <compound kind="file">
    <name>Endpoint.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Endpoint_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Endpoint</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Endpoint</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Endpoint.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Endpoint_8h.html</filename>
    <class kind="class">TAO_Endpoint</class>
  </compound>
  <compound kind="file">
    <name>Endpoint.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Endpoint_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Endpoint_Selector_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Endpoint__Selector__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Endpoint_Selector_Factory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Endpoint_Selector_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Endpoint_Selector_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Endpoint__Selector__Factory_8h.html</filename>
    <class kind="class">TAO_Endpoint_Selector_Factory</class>
  </compound>
  <compound kind="file">
    <name>Environment.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Environment_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Environment</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Environment</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Environment.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Environment_8h.html</filename>
    <class kind="class">CORBA_Environment</class>
    <class kind="class">CORBA_Environment_out</class>
    <class kind="class">CORBA_Environment_var</class>
  </compound>
  <compound kind="file">
    <name>Environment.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Environment_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Exception.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Exception_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>STANDARD_EXCEPTION_LIST</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TC_BUF_LEN</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a2</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a4</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a5</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a6</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a7</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a9</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a10</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a11</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a12</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a13</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a14</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a15</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a16</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_Exception</name>
      <anchor>a19</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(ostream &amp;os, const CORBA_Exception &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>STANDARD_EXCEPTION_LIST void</type>
      <name>tao_insert_for_insertion_system_exception</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;any, const CORBA::SystemException &amp;ex, const char *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>STANDARD_EXCEPTION_LIST void</type>
      <name>tao_insert_system_exception</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::SystemException *ex, CORBA::Any::_tao_destructor destructor, const char *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>STANDARD_EXCEPTION_LIST CORBA::Boolean</type>
      <name>tao_insert_in_extractor_system_exception</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::SystemException *&amp;tmp, CORBA::SystemException *(*allocator)(void), CORBA::TypeCode_ptr tc_name, CORBA::Any::_tao_destructor destructor, const char *compare_IR_Id, const char *msg)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_Exception</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>TC_completion_status</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exception.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Exception_8h.html</filename>
    <class kind="class">CORBA_Exception</class>
    <class kind="class">CORBA_SystemException</class>
    <class kind="class">CORBA_UserException</class>
    <class kind="class">TAO_Exceptions</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RAISE</name>
      <anchor>a0</anchor>
      <arglist>(EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ostream &amp;os, const CORBA_Exception &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a3</anchor>
      <arglist>(UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a4</anchor>
      <arglist>(BAD_PARAM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a5</anchor>
      <arglist>(NO_MEMORY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a6</anchor>
      <arglist>(IMP_LIMIT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a7</anchor>
      <arglist>(COMM_FAILURE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a8</anchor>
      <arglist>(OBJECT_NOT_EXIST)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a9</anchor>
      <arglist>(MARSHAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a10</anchor>
      <arglist>(PERSIST_STORE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a11</anchor>
      <arglist>(TRANSIENT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a12</anchor>
      <arglist>(FREE_MEM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a13</anchor>
      <arglist>(DATA_CONVERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a14</anchor>
      <arglist>(REBIND)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exception.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Exception_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Exclusive_TMS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Exclusive__TMS_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Exclusive_TMS</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Exclusive_TMS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exclusive_TMS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Exclusive__TMS_8h.html</filename>
    <class kind="class">TAO_Exclusive_TMS</class>
  </compound>
  <compound kind="file">
    <name>Fault_Tolerance_Service.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Fault__Tolerance__Service_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Fault_Tolerance_Service</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Fault_Tolerance_Service</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fault_Tolerance_Service.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Fault__Tolerance__Service_8h.html</filename>
    <class kind="class">TAO_Fault_Tolerance_Service</class>
  </compound>
  <compound kind="file">
    <name>Fault_Tolerance_Service.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Fault__Tolerance__Service_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>FILE_Parser.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>FILE__Parser_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_FILE_Parser</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_FILE_Parser</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>file_prefix</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FILE_Parser.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>FILE__Parser_8h.html</filename>
    <class kind="class">TAO_FILE_Parser</class>
  </compound>
  <compound kind="file">
    <name>FILE_Parser.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>FILE__Parser_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Flushing_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Flushing__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Flushing_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Flushing_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Flushing_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Flushing__Strategy_8h.html</filename>
    <class kind="class">TAO_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>GIOP.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP_8pidl.html</filename>
    <namespace>GIOP</namespace>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Base.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Base_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Base</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Base.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Base_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Base</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Base.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Base_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Gen_Parser</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Gen_Parser</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Generator_Parser</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_10.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__10_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Gen_Parser_10</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Gen_Parser_10</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_10.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__10_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_10</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_10.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__10_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_11.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__11_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Gen_Parser_11</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Gen_Parser_11</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_11.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__11_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_11</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_11.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__11_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_12.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__12_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Gen_Parser_12</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Gen_Parser_12</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_ALIGN_PTR</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_12.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__12_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_12</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_12.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__12_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_Impl.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__Impl_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Generator_Parser_Impl</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Generator_Parser_Impl</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__Impl_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_Impl</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_Impl.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__Impl_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Lite.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Lite_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Lite</name>
      <anchor>a4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Lite</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_LITE_HEADER_LEN</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_LITE_MESSAGE_SIZE_OFFSET</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_LITE_MESSAGE_TYPE_OFFSET</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Lite.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Lite_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Lite</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Lite.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Lite_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Locate_Header.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Locate__Header_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Headers</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Headers</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Locate_Header.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Locate__Header_8h.html</filename>
    <class kind="class">TAO_GIOP_Locate_Request_Header</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Locate_Header.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Locate__Header_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_State.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__State_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_State</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_State</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_State.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__State_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_State</class>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_HEADER_LEN</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_SIZE_OFFSET</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_FLAGS_OFFSET</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_TYPE_OFFSET</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_VERSION_MINOR_OFFSET</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_VERSION_MAJOR_OFFSET</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_FRAGMENT_HEADER</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_State.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__State_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Version.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Version_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Version</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Version</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Version.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Version_8h.html</filename>
    <class kind="class">TAO_GIOP_Message_Version</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Version.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Message__Version_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Utils.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Utils_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Utils</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Utils</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Utils.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Utils_8h.html</filename>
    <class kind="class">TAO_GIOP_Locate_Status_Msg</class>
    <class kind="class">TAO_GIOP_ReplyHeader</class>
    <class kind="class">TAO_GIOP_Utils</class>
    <member kind="enumeration">
      <name>GIOP_Messages</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_REQUEST</name>
      <anchor>a23a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_REPLY</name>
      <anchor>a23a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_CANCELREQUEST</name>
      <anchor>a23a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATEREQUEST</name>
      <anchor>a23a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATEREPLY</name>
      <anchor>a23a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_CLOSECONNECTION</name>
      <anchor>a23a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_MESSAGERROR</name>
      <anchor>a23a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_FRAGMENT</name>
      <anchor>a23a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GIOP_LocateStatusType</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_UNKNOWN_OBJECT</name>
      <anchor>a24a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_OBJECT_HERE</name>
      <anchor>a24a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_OBJECT_FORWARD</name>
      <anchor>a24a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_OBJECT_FORWARD_PERM</name>
      <anchor>a24a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOC_SYSTEM_EXCEPTION</name>
      <anchor>a24a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOC_NEEDS_ADDRESSING_MODE</name>
      <anchor>a24a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GIOP_ReplyStatusType</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_NO_EXCEPTION</name>
      <anchor>a25a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_USER_EXCEPTION</name>
      <anchor>a25a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_SYSTEM_EXCEPTION</name>
      <anchor>a25a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATION_FORWARD</name>
      <anchor>a25a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATION_FORWARD_PERM</name>
      <anchor>a25a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_NEEDS_ADDRESSING_MODE</name>
      <anchor>a25a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum GIOP_Messages</type>
      <name>TAO_GIOP_Message_Type</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum GIOP_LocateStatusType</type>
      <name>TAO_GIOP_Locate_Status_Type</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum GIOP_ReplyStatusType</type>
      <name>TAO_GIOP_Reply_Status_Type</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Utils.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOP__Utils_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOPC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPC_8cpp.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_GIOP_AddressingDisposition</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_GIOP_AddressingDisposition),(char *)&amp;_oc_GIOP_AddressingDisposition, 0, sizeof(GIOP::AddressingDisposition))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(GIOP) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_GIOP_IORAddressingInfo</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_GIOP_IORAddressingInfo),(char *)&amp;_oc_GIOP_IORAddressingInfo, 0, sizeof(GIOP::IORAddressingInfo))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_GIOP_TargetAddress</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::tk_union, sizeof(_oc_GIOP_TargetAddress),(char *)&amp;_oc_GIOP_TargetAddress, 0, sizeof(GIOP::TargetAddress))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_GIOP_Version</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_GIOP_Version),(char *)&amp;_oc_GIOP_Version, 0, sizeof(GIOP::Version))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const GIOP::IORAddressingInfo &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, GIOP::IORAddressingInfo *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, GIOP::IORAddressingInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const GIOP::IORAddressingInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const GIOP::TargetAddress &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, GIOP::TargetAddress *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, GIOP::TargetAddress *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const GIOP::TargetAddress *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_GIOP_AddressingDisposition</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_GIOP_TargetAddress</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOPC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Any &amp;, GIOP::IORAddressingInfo *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::Any &amp;, GIOP::IORAddressingInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Any &amp;, const GIOP::IORAddressingInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const GIOP::TargetAddress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, GIOP::TargetAddress *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, GIOP::TargetAddress *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const GIOP::TargetAddress *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const GIOP::IORAddressingInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, GIOP::IORAddressingInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;, const GIOP::TargetAddress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;, GIOP::TargetAddress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_OutputCDR &amp;, const GIOP::Version &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;, GIOP::Version &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOPC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_GIOP_TARGETADDRESS___VAR_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_GIOP_TARGETADDRESS___OUT_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOPS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPS_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOPS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOPS.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPS_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOPS_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPS__T_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOPS_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPS__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>GIOPS_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>GIOPS__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IFR_Client_Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IFR__Client__Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IFR_Client_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IFR_Client_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IFR_Client_Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IFR__Client__Adapter_8h.html</filename>
    <class kind="class">TAO_IFR_Client_Adapter</class>
  </compound>
  <compound kind="file">
    <name>IFR_TypeCodes.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IFR__TypeCodes_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IFR_TypeCodes</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IFR_TypeCodes</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP_8pidl.html</filename>
    <namespace>IIOP</namespace>
  </compound>
  <compound kind="file">
    <name>IIOP_Acceptor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Acceptor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IIOP_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IIOP_Acceptor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Acceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Acceptor_8h.html</filename>
    <class kind="class">TAO_IIOP_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Acceptor.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Acceptor_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IIOP_Connection_Handler.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Connection__Handler_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IIOP_Connection_Handler</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IIOP_Connection_Handler</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Connection_Handler.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Connection__Handler_8h.html</filename>
    <class kind="class">TAO_IIOP_Connection_Handler</class>
    <class kind="class">TAO_IIOP_Properties</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Connection_Handler.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Connection__Handler_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IIOP_Connector.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Connector_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_IIOP_Connector</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_IIOP_Connector</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Connector.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Connector_8h.html</filename>
    <class kind="class">TAO_IIOP_Connector</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Endpoint.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Endpoint_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IIOP_Endpoint</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IIOP_Endpoint</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Endpoint.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Endpoint_8h.html</filename>
    <class kind="class">TAO_IIOP_Endpoint</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Endpoint.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Endpoint_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>iiop_endpoints.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>iiop__endpoints_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_TAO_IIOPENDPOINTSEQUENCE_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_IIOPENDPOINTSEQUENCE_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TAO_IIOP_Endpoint_Info</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_TAO_IIOP_Endpoint_Info),(char *)&amp;_oc_TAO_IIOP_Endpoint_Info, 0, sizeof(TAO_IIOP_Endpoint_Info))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TAO_IIOPEndpointSequence</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_TAO_IIOPEndpointSequence),(char *)&amp;_oc_TAO_IIOPEndpointSequence, 0, sizeof(TAO_IIOPEndpointSequence))</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const TAO_IIOPEndpointSequence &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;strm, TAO_IIOPEndpointSequence &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_TAO_IIOP_Endpoint_Info</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tc_TAO_IIOP_Endpoint_Info</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_TAO_IIOPEndpointSequence</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tc_TAO_IIOPEndpointSequence</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iiop_endpoints.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>iiop__endpoints_8h.html</filename>
    <class kind="class">_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</class>
    <class kind="struct">TAO_IIOP_Endpoint_Info</class>
    <class kind="class">TAO_IIOPEndpointSequence</class>
    <class kind="class">TAO_IIOPEndpointSequence_var</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_TAO_IIOPENDPOINTSEQUENCE_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_IIOPENDPOINTSEQUENCE_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_IIOPENDPOINTSEQUENCE___VAR_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO_IIOP_Endpoint_Info &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO_IIOP_Endpoint_Info &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO_IIOPEndpointSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO_IIOPEndpointSequence &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export CORBA::TypeCode_ptr</type>
      <name>_tc_TAO_IIOP_Endpoint_Info</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export CORBA::TypeCode_ptr</type>
      <name>_tc_TAO_IIOPEndpointSequence</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iiop_endpoints.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>iiop__endpoints_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_TAO_IIOPENDPOINTSEQUENCE_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_IIOPENDPOINTSEQUENCE_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO_IIOPEndpointSequence &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iiop_endpoints.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>iiop__endpoints_8pidl.html</filename>
    <class kind="struct">TAO_IIOP_Endpoint_Info</class>
    <member kind="typedef">
      <type>sequence&lt; TAO_IIOP_Endpoint_Info &gt;</type>
      <name>TAO_IIOPEndpointSequence</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IIOP_Factory</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IIOP_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Factory_8h.html</filename>
    <class kind="class">TAO_IIOP_Protocol_Factory</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Lite_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Lite__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IIOP_Factory</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IIOP_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Lite_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Lite__Factory_8h.html</filename>
    <class kind="class">TAO_IIOP_Lite_Protocol_Factory</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Profile.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Profile_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_IIOP_Profile</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_IIOP_Profile</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Profile.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Profile_8h.html</filename>
    <class kind="class">TAO_IIOP_Profile</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Profile.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Profile_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IIOP_Transport.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Transport_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IIOP_Transport</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IIOP_Transport</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Transport.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Transport_8h.html</filename>
    <class kind="class">TAO_IIOP_Transport</class>
    <member kind="typedef">
      <type>ACE_Svc_Handler&lt; ACE_SOCK_STREAM, ACE_NULL_SYNCH &gt;</type>
      <name>TAO_IIOP_SVC_HANDLER</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Transport.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOP__Transport_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IIOPC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOPC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IIOP_LISTENPOINTLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IIOP_LISTENPOINTLIST_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IIOP_ListenPoint</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_IIOP_ListenPoint),(char *)&amp;_oc_IIOP_ListenPoint, 0, sizeof(IIOP::ListenPoint))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(IIOP) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IIOP_ListenPointList</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IIOP_ListenPointList),(char *)&amp;_oc_IIOP_ListenPointList, 0, sizeof(IIOP::ListenPointList))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IIOP_BiDirIIOPServiceContext</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_IIOP_BiDirIIOPServiceContext),(char *)&amp;_oc_IIOP_BiDirIIOPServiceContext, 0, sizeof(IIOP::BiDirIIOPServiceContext))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IIOP::ListenPoint &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IIOP::ListenPoint *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IIOP::ListenPoint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IIOP::ListenPoint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IIOP::ListenPointList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IIOP::ListenPointList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IIOP::ListenPointList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IIOP::ListenPointList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IIOP::BiDirIIOPServiceContext &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IIOP::BiDirIIOPServiceContext *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IIOP::BiDirIIOPServiceContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IIOP::BiDirIIOPServiceContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IIOP::ListenPointList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IIOP::ListenPointList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IIOP_ListenPoint</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IIOP_ListenPointList</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOPC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOPC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IIOP_LISTENPOINTLIST_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IIOP_LISTENPOINTLIST_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IIOP_LISTENPOINTLIST___VAR_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IIOP_LISTENPOINTLIST___OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, IIOP::ListenPoint *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, IIOP::ListenPoint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const IIOP::ListenPoint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, const IIOP::ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, IIOP::ListenPointList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;, IIOP::ListenPointList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;, const IIOP::ListenPointList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, const IIOP::BiDirIIOPServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, IIOP::BiDirIIOPServiceContext *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, IIOP::BiDirIIOPServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, const IIOP::BiDirIIOPServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IIOP::ListenPoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;, IIOP::ListenPoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IIOP::ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;, IIOP::ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IIOP::BiDirIIOPServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;, IIOP::BiDirIIOPServiceContext &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOPC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IIOPC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IIOP_LISTENPOINTLIST_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IIOP_LISTENPOINTLIST_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;, IIOP::ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IIOP::BiDirIIOPServiceContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IIOP::BiDirIIOPServiceContext &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Incoming_Message_Queue.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Incoming__Message__Queue_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Incoming_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Incoming_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Incoming_Message_Queue.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Incoming__Message__Queue_8h.html</filename>
    <class kind="class">TAO_Incoming_Message_Queue</class>
    <class kind="class">TAO_Queued_Data</class>
  </compound>
  <compound kind="file">
    <name>Incoming_Message_Queue.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Incoming__Message__Queue_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Interceptor_List.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Interceptor__List_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Interceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Interceptor_List</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Interceptor_List.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Interceptor__List_8h.html</filename>
    <class kind="class">TAO_ClientRequestInterceptor_List</class>
    <class kind="class">TAO_Interceptor_List</class>
    <class kind="class">TAO_IORInterceptor_List</class>
    <class kind="class">TAO_ServerRequestInterceptor_List</class>
  </compound>
  <compound kind="file">
    <name>Interceptor_List.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Interceptor__List_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>InterfaceDef.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>InterfaceDef_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidName.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>InvalidName_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>Invocation.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Invocation_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Invocation</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Invocation.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Invocation_8h.html</filename>
    <class kind="class">TAO_GIOP_Invocation</class>
    <class kind="class">TAO_GIOP_Locate_Request_Invocation</class>
    <class kind="class">TAO_GIOP_Oneway_Invocation</class>
    <class kind="class">TAO_GIOP_Synch_Invocation</class>
    <class kind="class">TAO_GIOP_Twoway_Invocation</class>
    <member kind="enumeration">
      <name>TAO_Invoke_Status</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_OK</name>
      <anchor>a3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_RESTART</name>
      <anchor>a3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_EXCEPTION</name>
      <anchor>a3a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Invocation.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Invocation_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Invocation_Endpoint_Selectors.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Invocation__Endpoint__Selectors_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Invocation_Endpoint_Selectors</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Invocation_Endpoint_Selectors</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Invocation_Endpoint_Selectors.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Invocation__Endpoint__Selectors_8h.html</filename>
    <class kind="class">TAO_Default_Endpoint_Selector</class>
    <class kind="class">TAO_Invocation_Endpoint_Selector</class>
  </compound>
  <compound kind="file">
    <name>Invocation_Endpoint_Selectors.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Invocation__Endpoint__Selectors_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IOP.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOP_8pidl.html</filename>
    <namespace>IOP</namespace>
  </compound>
  <compound kind="file">
    <name>IOP_Defns.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOP__Defns_8h.html</filename>
    <class kind="class">TAO_IOP_IOR</class>
    <class kind="class">TAO_IOP_Tagged_Profile</class>
    <class kind="class">TAO_IOP_TaggedComponent</class>
    <member kind="typedef">
      <type>CORBA::ULong</type>
      <name>TAO_IOP_Profile_ID</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Unbounded_Sequence&lt; TAO_IOP_Tagged_Profile &gt;</type>
      <name>TAO_IOP_Tagged_Profile_Sequence</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong</type>
      <name>TAO_IOP_ComponentId</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Unbounded_Sequence&lt; TAO_IOP_TaggedComponent &gt;</type>
      <name>TAO_IOP_MultipleComponentProfile</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_IOP_TAG_DCE_STRING_BINDING</name>
      <anchor>a10a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_IOP_TAG_DCE_BINDING_NAME</name>
      <anchor>a10a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_IOP_TAG_DCE_NO_PIPES</name>
      <anchor>a10a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_IOP_TAG_OBJECT_KEY</name>
      <anchor>a10a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_IOP_TAG_ENDPOINT_ID</name>
      <anchor>a10a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_IOP_TAG_LOCATION_POLICY</name>
      <anchor>a10a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOPC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDPROFILE__TAO_SEQ_OCTET_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CS_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENT__TAO_SEQ_OCTET_CS_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_MULTIPLECOMPONENTPROFILE_CS_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_MULTIPLECOMPONENTPROFILE_CS_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTLIST_CS_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTLIST_CS_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTSEQ_CS_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTSEQ_CS_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXT__TAO_SEQ_OCTET_CS_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_SERVICECONTEXTLIST_CS_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXTLIST_CS_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_ProfileId</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_ProfileId),(char *)&amp;_oc_IOP_ProfileId, 0, sizeof(IOP::ProfileId))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(IOP) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_TaggedProfile</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_IOP_TaggedProfile),(char *)&amp;_oc_IOP_TaggedProfile, 0, sizeof(IOP::TaggedProfile))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_IOR</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_IOP_IOR),(char *)&amp;_oc_IOP_IOR, 0, sizeof(IOP::IOR))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_ComponentId</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_ComponentId),(char *)&amp;_oc_IOP_ComponentId, 0, sizeof(IOP::ComponentId))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_TaggedComponent</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_IOP_TaggedComponent),(char *)&amp;_oc_IOP_TaggedComponent, 0, sizeof(IOP::TaggedComponent))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_MultipleComponentProfile</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_MultipleComponentProfile),(char *)&amp;_oc_IOP_MultipleComponentProfile, 0, sizeof(IOP::MultipleComponentProfile))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_TaggedComponentList</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_TaggedComponentList),(char *)&amp;_oc_IOP_TaggedComponentList, 0, sizeof(IOP::TaggedComponentList))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_TaggedComponentSeq</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_TaggedComponentSeq),(char *)&amp;_oc_IOP_TaggedComponentSeq, 0, sizeof(IOP::TaggedComponentSeq))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_ServiceId</name>
      <anchor>a29</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_ServiceId),(char *)&amp;_oc_IOP_ServiceId, 0, sizeof(IOP::ServiceId))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_ServiceContext</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_IOP_ServiceContext),(char *)&amp;_oc_IOP_ServiceContext, 0, sizeof(IOP::ServiceContext))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_ServiceContextList</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_ServiceContextList),(char *)&amp;_oc_IOP_ServiceContextList, 0, sizeof(IOP::ServiceContextList))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_IOP_Codec_release</name>
      <anchor>a32</anchor>
      <arglist>(IOP::Codec_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>IOP::Codec_ptr</type>
      <name>tao_IOP_Codec_nil</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IOP::Codec_ptr</type>
      <name>tao_IOP_Codec_narrow</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_IOP_Codec_upcast</name>
      <anchor>a35</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_EncodingFormat</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_IOP_EncodingFormat),(char *)&amp;_oc_IOP_EncodingFormat, 0, sizeof(IOP::EncodingFormat))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_IOP_Encoding</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_IOP_Encoding),(char *)&amp;_oc_IOP_Encoding, 0, sizeof(IOP::Encoding))</arglist>
    </member>
    <member kind="function">
      <type>IOP::CodecFactory_ptr</type>
      <name>tao_IOP_CodecFactory_duplicate</name>
      <anchor>a38</anchor>
      <arglist>(IOP::CodecFactory_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_IOP_CodecFactory_release</name>
      <anchor>a39</anchor>
      <arglist>(IOP::CodecFactory_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>IOP::CodecFactory_ptr</type>
      <name>tao_IOP_CodecFactory_nil</name>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IOP::CodecFactory_ptr</type>
      <name>tao_IOP_CodecFactory_narrow</name>
      <anchor>a41</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_IOP_CodecFactory_upcast</name>
      <anchor>a42</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IOP_ProfileId</name>
      <anchor>a13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IOP_IOR</name>
      <anchor>a14</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IOP_ComponentId</name>
      <anchor>a15</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IOP_MultipleComponentProfile</name>
      <anchor>a16</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IOP_TaggedComponentList</name>
      <anchor>a17</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IOP_TaggedComponentSeq</name>
      <anchor>a18</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_IOP_ServiceContextList</name>
      <anchor>a19</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOPC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDPROFILE__TAO_SEQ_OCTET_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENT__TAO_SEQ_OCTET_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_MULTIPLECOMPONENTPROFILE_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_MULTIPLECOMPONENTPROFILE_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_MULTIPLECOMPONENTPROFILE___VAR_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_MULTIPLECOMPONENTPROFILE___OUT_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTLIST_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTLIST_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTLIST___VAR_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTLIST___OUT_CH_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTSEQ_CH_</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTSEQ_CH_</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTSEQ___VAR_CH_</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTSEQ___OUT_CH_</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXT__TAO_SEQ_OCTET_CH_</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_SERVICECONTEXTLIST_CH_</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXTLIST_CH_</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXTLIST___VAR_CH_</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXTLIST___OUT_CH_</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC___PTR_CH_</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC___VAR_CH_</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC___OUT_CH_</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_CH_</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_INVALIDTYPEFORENCODING_CH_</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_FORMATMISMATCH_CH_</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_TYPEMISMATCH_CH_</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY___PTR_CH_</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY___VAR_CH_</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY___OUT_CH_</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY_CH_</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY_UNKNOWNENCODING_CH_</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedProfile *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a35</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a36</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::IOR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::Any &amp;, IOP::IOR *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a39</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::IOR *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a40</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::IOR *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a41</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedComponent *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a43</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a44</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a45</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a46</anchor>
      <arglist>(CORBA::Any &amp;, IOP::MultipleComponentProfile *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a47</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::MultipleComponentProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a48</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::MultipleComponentProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a49</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a50</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedComponentList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a51</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedComponentList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a52</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedComponentList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a53</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a54</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedComponentSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a55</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedComponentSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a56</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedComponentSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a57</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::ServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a58</anchor>
      <arglist>(CORBA::Any &amp;, IOP::ServiceContext *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a59</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::ServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a60</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::ServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a61</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a62</anchor>
      <arglist>(CORBA::Any &amp;, IOP::ServiceContextList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a63</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::ServiceContextList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a64</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::ServiceContextList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a65</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::Encoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a66</anchor>
      <arglist>(CORBA::Any &amp;, IOP::Encoding *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a67</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::Encoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a68</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::Encoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a69</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a70</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a71</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedProfile::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a72</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedProfile::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a73</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::IOR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a74</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::IOR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a75</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::IOR::_tao_seq_TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a76</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::IOR::_tao_seq_TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a77</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a78</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a79</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponent::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a80</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponent::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a81</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a82</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a83</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a84</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a85</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a86</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a87</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::ServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a88</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::ServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a89</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::ServiceContext::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a90</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::ServiceContext::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a91</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a92</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a93</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::Encoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a94</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::Encoding &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOPC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_MULTIPLECOMPONENTPROFILE_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_MULTIPLECOMPONENTPROFILE_CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTLIST_CI_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTLIST_CI_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTSEQ_CI_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTSEQ_CI_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_IOP_SERVICECONTEXTLIST_CI_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXTLIST_CI_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC___CI_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY___CI_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedProfile::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::TaggedProfile &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::TaggedProfile &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::IOR::_tao_seq_TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::IOR::_tao_seq_TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::IOR &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::IOR &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponent::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponent::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::TaggedComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::TaggedComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a26</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::ServiceContext::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a29</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::ServiceContext::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::ServiceContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::ServiceContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a34</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::Encoding &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a35</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::Encoding &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOPS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPS_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>IOPS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>IOPS.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPS_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IOPS_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPS__T_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>IOPS_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPS__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>IOPS_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOPS__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>IOR_Parser.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOR__Parser_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_IOR_Parser</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_IOR_Parser</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOR_Parser.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOR__Parser_8h.html</filename>
    <class kind="class">TAO_IOR_Parser</class>
  </compound>
  <compound kind="file">
    <name>IOR_Parser.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>IOR__Parser_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Leader_Follower.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Leader__Follower_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Leader_Follower</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Leader_Follower</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Leader_Follower.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Leader__Follower_8h.html</filename>
    <class kind="class">TAO_Leader_Follower</class>
    <class kind="class">TAO_LF_Client_Leader_Thread_Helper</class>
    <class kind="class">TAO_LF_Client_Thread_Helper</class>
  </compound>
  <compound kind="file">
    <name>Leader_Follower.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Leader__Follower_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Leader_Follower_Flushing_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Leader__Follower__Flushing__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Leader_Follower_Flushing_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Leader_Follower_Flushing_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Leader_Follower_Flushing_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Leader__Follower__Flushing__Strategy_8h.html</filename>
    <class kind="class">TAO_Leader_Follower_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>LF_Event.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Event</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Event</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Event.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event_8h.html</filename>
    <class kind="class">TAO_LF_Event</class>
  </compound>
  <compound kind="file">
    <name>LF_Event.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LF_Event_Binder.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event__Binder_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Event_Binder</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Event_Binder</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Event_Binder.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event__Binder_8h.html</filename>
    <class kind="class">TAO_LF_Event_Binder</class>
  </compound>
  <compound kind="file">
    <name>LF_Event_Binder.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event__Binder_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LF_Event_Loop_Thread_Helper.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event__Loop__Thread__Helper_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Event_Loop_Thread_Helper</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Event_Loop_Thread_Helper</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Event_Loop_Thread_Helper.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event__Loop__Thread__Helper_8h.html</filename>
    <class kind="class">TAO_LF_Event_Loop_Thread_Helper</class>
  </compound>
  <compound kind="file">
    <name>LF_Event_Loop_Thread_Helper.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Event__Loop__Thread__Helper_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LF_Follower.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Follower</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Follower</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Follower.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower_8h.html</filename>
    <class kind="class">TAO_LF_Follower</class>
  </compound>
  <compound kind="file">
    <name>LF_Follower.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Adder.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower__Auto__Adder_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Follower_Auto_Adder</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Follower_Auto_Adder</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Adder.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower__Auto__Adder_8h.html</filename>
    <class kind="class">TAO_LF_Follower_Auto_Adder</class>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Adder.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower__Auto__Adder_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Ptr.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower__Auto__Ptr_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Follower_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Follower_Auto_Ptr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Ptr.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower__Auto__Ptr_8h.html</filename>
    <class kind="class">TAO_LF_Follower_Auto_Ptr</class>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Ptr.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Follower__Auto__Ptr_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LF_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Strategy_8h.html</filename>
    <class kind="class">TAO_LF_Strategy</class>
  </compound>
  <compound kind="file">
    <name>LF_Strategy.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Strategy_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LF_Strategy_Complete.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Strategy__Complete_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LF_Strategy_Complete</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LF_Strategy_Complete</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LF_Strategy_Complete.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Strategy__Complete_8h.html</filename>
    <class kind="class">TAO_LF_Strategy_Complete</class>
  </compound>
  <compound kind="file">
    <name>LF_Strategy_Complete.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LF__Strategy__Complete_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>LocalObject.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LocalObject_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LocalObject</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LocalObject</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocalObject.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LocalObject_8h.html</filename>
    <class kind="class">CORBA_LocalObject</class>
    <class kind="class">CORBA_LocalObject_out</class>
    <class kind="class">CORBA_LocalObject_var</class>
    <class kind="class">TAO_Local_RefCounted_Object</class>
  </compound>
  <compound kind="file">
    <name>LocalObject.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LocalObject_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>LRU_Connection_Purging_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LRU__Connection__Purging__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_LRU_Connection_Purging_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_LRU_Connection_Purging_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LRU_Connection_Purging_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>LRU__Connection__Purging__Strategy_8h.html</filename>
    <class kind="class">TAO_LRU_Connection_Purging_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Managed_Types.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Managed__Types_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Managed_Types</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Managed_Types</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Managed_Types.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Managed__Types_8h.html</filename>
    <class kind="class">TAO_SeqElem_String_Manager</class>
    <class kind="class">TAO_SeqElem_WString_Manager</class>
    <class kind="class">TAO_String_Manager</class>
    <class kind="class">TAO_WString_Manager</class>
  </compound>
  <compound kind="file">
    <name>Managed_Types.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Managed__Types_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Marshal.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Marshal_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Marshal</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Marshal</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Marshal.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Marshal_8h.html</filename>
    <class kind="class">TAO_Marshal_Alias</class>
    <class kind="class">TAO_Marshal_Any</class>
    <class kind="class">TAO_Marshal_Array</class>
    <class kind="class">TAO_Marshal_Except</class>
    <class kind="class">TAO_Marshal_Object</class>
    <class kind="class">TAO_Marshal_ObjRef</class>
    <class kind="class">TAO_Marshal_Primitive</class>
    <class kind="class">TAO_Marshal_Principal</class>
    <class kind="class">TAO_Marshal_Sequence</class>
    <class kind="class">TAO_Marshal_String</class>
    <class kind="class">TAO_Marshal_Struct</class>
    <class kind="class">TAO_Marshal_TypeCode</class>
    <class kind="class">TAO_Marshal_Union</class>
    <class kind="class">TAO_Marshal_Value</class>
    <class kind="class">TAO_Marshal_WString</class>
  </compound>
  <compound kind="file">
    <name>Marshal.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Marshal_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>MCAST_Parser.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MCAST__Parser_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_MCAST_Parser</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_MCAST_Parser</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>mcast_prefix</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCAST_Parser.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MCAST__Parser_8h.html</filename>
    <class kind="class">TAO_MCAST_Parser</class>
  </compound>
  <compound kind="file">
    <name>MCAST_Parser.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MCAST__Parser_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Messaging.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Messaging</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Messaging</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging_8h.html</filename>
    <namespace>TAO_Messaging_Helper</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>TAO_Reply_Handler_Skeleton</name>
      <anchor>a0</anchor>
      <arglist>)(TAO_InputCDR &amp;, Messaging::ReplyHandler *, CORBA::ULong reply_status ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_AMI_Reply_Status</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_AMI_REPLY_OK</name>
      <anchor>a5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_AMI_REPLY_NOT_OK</name>
      <anchor>a5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_AMI_REPLY_USER_EXCEPTION</name>
      <anchor>a5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_AMI_REPLY_SYSTEM_EXCEPTION</name>
      <anchor>a5a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging_8pidl.html</filename>
    <namespace>Messaging</namespace>
  </compound>
  <compound kind="file">
    <name>Messaging_ORBInitializer.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging__ORBInitializer_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_Messaging_ORBInitializer</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_Messaging_ORBInitializer</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_ORBInitializer.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging__ORBInitializer_8h.html</filename>
    <class kind="class">TAO_Messaging_ORBInitializer</class>
  </compound>
  <compound kind="file">
    <name>Messaging_Policy_i.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging__Policy__i_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_Messaging_Policy_i</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_Messaging_Policy_i</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_Policy_i.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging__Policy__i_8h.html</filename>
    <class kind="class">TAO_RelativeRoundtripTimeoutPolicy</class>
    <class kind="class">TAO_Sync_Scope_Policy</class>
  </compound>
  <compound kind="file">
    <name>Messaging_Policy_i.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging__Policy__i_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Messaging_PolicyFactory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging__PolicyFactory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Messaging_PolicyFactory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Messaging_PolicyFactory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_PolicyFactory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Messaging__PolicyFactory_8h.html</filename>
    <class kind="class">TAO_Messaging_PolicyFactory</class>
  </compound>
  <compound kind="file">
    <name>MessagingC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MessagingC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUE__TAO_SEQ_OCTET_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUESEQ_CS_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER___INIT_CS_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER__TAO_SEQ_OCTET_CS_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_RebindMode</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Messaging_RebindMode),(char *)&amp;_oc_Messaging_RebindMode, 0, sizeof(Messaging::RebindMode))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(Messaging) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_SyncScope</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Messaging_SyncScope),(char *)&amp;_oc_Messaging_SyncScope, 0, sizeof(Messaging::SyncScope))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_RoutingType</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Messaging_RoutingType),(char *)&amp;_oc_Messaging_RoutingType, 0, sizeof(Messaging::RoutingType))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_Timeout</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Messaging_Timeout),(char *)&amp;_oc_Messaging_Timeout, 0, sizeof(Messaging::Timeout))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_Priority</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Messaging_Priority),(char *)&amp;_oc_Messaging_Priority, 0, sizeof(Messaging::Priority))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_Ordering</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Messaging_Ordering),(char *)&amp;_oc_Messaging_Ordering, 0, sizeof(Messaging::Ordering))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_PriorityRange</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_Messaging_PriorityRange),(char *)&amp;_oc_Messaging_PriorityRange, 0, sizeof(Messaging::PriorityRange))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_RoutingTypeRange</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_Messaging_RoutingTypeRange),(char *)&amp;_oc_Messaging_RoutingTypeRange, 0, sizeof(Messaging::RoutingTypeRange))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_PolicyValue</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_Messaging_PolicyValue),(char *)&amp;_oc_Messaging_PolicyValue, 0, sizeof(Messaging::PolicyValue))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_PolicyValueSeq</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_Messaging_PolicyValueSeq),(char *)&amp;_oc_Messaging_PolicyValueSeq, 0, sizeof(Messaging::PolicyValueSeq))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_Messaging_ReplyHandler</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::tk_objref, sizeof(_oc_Messaging_ReplyHandler),(char *)&amp;_oc_Messaging_ReplyHandler, 0, sizeof(Messaging::ReplyHandler))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Messaging::PriorityRange &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Messaging::PriorityRange *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Messaging::PriorityRange *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Messaging::PriorityRange *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Messaging::RoutingTypeRange &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Messaging::RoutingTypeRange *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Messaging::RoutingTypeRange *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Messaging::RoutingTypeRange *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Messaging::PolicyValue &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a29</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Messaging::PolicyValue *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Messaging::PolicyValue *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Messaging::PolicyValue *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Messaging::PolicyValueSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a33</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Messaging::PolicyValueSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a34</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Messaging::PolicyValueSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a35</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Messaging::PolicyValueSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Messaging::ReplyHandler_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a37</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Messaging::ReplyHandler_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a38</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Messaging::PolicyValue::_tao_seq_Octet &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a39</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Messaging::PolicyValue::_tao_seq_Octet &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a40</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Messaging::PolicyValueSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a41</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Messaging::PolicyValueSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a42</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Messaging::ReplyHandler_ptr _tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a43</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Messaging::ReplyHandler_ptr &amp;_tao_objref)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_Messaging_RebindMode</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_Messaging_PolicyValueSeq</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_Messaging_ReplyHandler</name>
      <anchor>a7</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessagingC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MessagingC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REBINDPOLICY___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REBINDPOLICY___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REBINDPOLICY___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REBINDPOLICY_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_SYNCSCOPEPOLICY___PTR_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_SYNCSCOPEPOLICY___VAR_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_SYNCSCOPEPOLICY___OUT_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_SYNCSCOPEPOLICY_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTPRIORITYPOLICY___PTR_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTPRIORITYPOLICY___VAR_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTPRIORITYPOLICY___OUT_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTPRIORITYPOLICY_CH_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYPRIORITYPOLICY___PTR_CH_</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYPRIORITYPOLICY___VAR_CH_</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYPRIORITYPOLICY___OUT_CH_</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYPRIORITYPOLICY_CH_</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTSTARTTIMEPOLICY___PTR_CH_</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTSTARTTIMEPOLICY___VAR_CH_</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTSTARTTIMEPOLICY___OUT_CH_</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTSTARTTIMEPOLICY_CH_</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTENDTIMEPOLICY___PTR_CH_</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTENDTIMEPOLICY___VAR_CH_</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTENDTIMEPOLICY___OUT_CH_</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REQUESTENDTIMEPOLICY_CH_</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYSTARTTIMEPOLICY___PTR_CH_</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYSTARTTIMEPOLICY___VAR_CH_</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYSTARTTIMEPOLICY___OUT_CH_</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYSTARTTIMEPOLICY_CH_</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYENDTIMEPOLICY___PTR_CH_</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYENDTIMEPOLICY___VAR_CH_</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYENDTIMEPOLICY___OUT_CH_</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYENDTIMEPOLICY_CH_</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___PTR_CH_</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___VAR_CH_</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___OUT_CH_</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY_CH_</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___PTR_CH_</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___VAR_CH_</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___OUT_CH_</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY_CH_</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_ROUTINGPOLICY___PTR_CH_</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_ROUTINGPOLICY___VAR_CH_</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_ROUTINGPOLICY___OUT_CH_</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_ROUTINGPOLICY_CH_</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_MAXHOPSPOLICY___PTR_CH_</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_MAXHOPSPOLICY___VAR_CH_</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_MAXHOPSPOLICY___OUT_CH_</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_MAXHOPSPOLICY_CH_</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_QUEUEORDERPOLICY___PTR_CH_</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_QUEUEORDERPOLICY___VAR_CH_</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_QUEUEORDERPOLICY___OUT_CH_</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_QUEUEORDERPOLICY_CH_</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUE__TAO_SEQ_OCTET_CH_</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CH_</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUESEQ_CH_</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUESEQ___VAR_CH_</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUESEQ___OUT_CH_</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER___VAR_CH_</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER___OUT_CH_</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER___INIT_CH_</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER_CH_</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER__TAO_SEQ_OCTET_CH_</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYHANDLER___PTR_CH_</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYHANDLER___VAR_CH_</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYHANDLER___OUT_CH_</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_REPLYHANDLER_CH_</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_EXCEPTIONHOLDER___OBV_CH_</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a68</anchor>
      <arglist>(CORBA::Any &amp;, Messaging::PriorityRange *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a69</anchor>
      <arglist>(const CORBA::Any &amp;, Messaging::PriorityRange *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a70</anchor>
      <arglist>(const CORBA::Any &amp;, const Messaging::PriorityRange *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a71</anchor>
      <arglist>(CORBA::Any &amp;, const Messaging::RoutingTypeRange &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a72</anchor>
      <arglist>(CORBA::Any &amp;, Messaging::RoutingTypeRange *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a73</anchor>
      <arglist>(const CORBA::Any &amp;, Messaging::RoutingTypeRange *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a74</anchor>
      <arglist>(const CORBA::Any &amp;, const Messaging::RoutingTypeRange *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a75</anchor>
      <arglist>(CORBA::Any &amp;, const Messaging::PolicyValue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a76</anchor>
      <arglist>(CORBA::Any &amp;, Messaging::PolicyValue *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a77</anchor>
      <arglist>(const CORBA::Any &amp;, Messaging::PolicyValue *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a78</anchor>
      <arglist>(const CORBA::Any &amp;, const Messaging::PolicyValue *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a79</anchor>
      <arglist>(CORBA::Any &amp;, const Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a80</anchor>
      <arglist>(CORBA::Any &amp;, Messaging::PolicyValueSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a81</anchor>
      <arglist>(const CORBA::Any &amp;, Messaging::PolicyValueSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a82</anchor>
      <arglist>(const CORBA::Any &amp;, const Messaging::PolicyValueSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a83</anchor>
      <arglist>(CORBA::Any &amp;, Messaging::ReplyHandler_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a84</anchor>
      <arglist>(const CORBA::Any &amp;, Messaging::ReplyHandler *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a85</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::PriorityRange &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a86</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PriorityRange &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a87</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::RoutingTypeRange &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a88</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::RoutingTypeRange &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a89</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::PolicyValue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a90</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PolicyValue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a91</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::PolicyValue::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a92</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PolicyValue::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a93</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a94</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a95</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::ExceptionHolder *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a96</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::ExceptionHolder *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a97</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::ReplyHandler_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a98</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::ReplyHandler_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessagingC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MessagingC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUESEQ_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PolicyValue::_tao_seq_Octet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Messaging::PolicyValue &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Messaging::PolicyValue &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MProfile.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MProfile_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_MProfile</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_MProfile</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MProfile.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MProfile_8h.html</filename>
    <class kind="class">TAO_MProfile</class>
    <member kind="typedef">
      <type>CORBA::ULong</type>
      <name>TAO_PHandle</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MProfile.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>MProfile_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Muxed_TMS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Muxed__TMS_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Muxed_TMS</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Muxed_TMS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Muxed_TMS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Muxed__TMS_8h.html</filename>
    <class kind="class">TAO_Muxed_TMS</class>
  </compound>
  <compound kind="file">
    <name>New_Leader_Generator.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>New__Leader__Generator_8h.html</filename>
    <class kind="class">TAO_New_Leader_Generator</class>
  </compound>
  <compound kind="file">
    <name>NVList.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>NVList_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_NVList</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_NVList</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NVList.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>NVList_8h.html</filename>
    <class kind="class">CORBA_NamedValue</class>
    <class kind="class">CORBA_NamedValue_out</class>
    <class kind="class">CORBA_NamedValue_var</class>
    <class kind="class">CORBA_NVList</class>
    <class kind="class">CORBA_NVList_out</class>
    <class kind="class">CORBA_NVList_var</class>
  </compound>
  <compound kind="file">
    <name>NVList.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>NVList_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Object.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Object</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const CORBA_Object *x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA_Object *&amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Object</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Object_Proxy_Broker *(*</type>
      <name>_TAO_collocation_Object_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a1</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object_8h.html</filename>
    <class kind="class">CORBA_Object</class>
    <class kind="class">CORBA_Object_out</class>
    <class kind="class">CORBA_Object_var</class>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA_Object *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_Object *&amp;)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TAO_Object_Proxy_Broker *(*</type>
      <name>_TAO_collocation_Object_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a0</anchor>
      <arglist>)(CORBA::Object_ptr obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Object.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>Object_Key.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Key_8pidl.html</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Object_KeyC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__KeyC_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Object_KeyC</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TAO__tao_seq_Octet</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_sequence, sizeof(_oc_TAO__tao_seq_Octet),(char *)&amp;_oc_TAO__tao_seq_Octet, 0, sizeof(TAO_ObjectKey))</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TAO_ObjectKey</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_TAO_ObjectKey),(char *)&amp;_oc_TAO_ObjectKey, 0, sizeof(TAO_ObjectKey))</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Object_KeyC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::Long</type>
      <name>_oc_TAO__tao_seq_Octet</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>TAO_tc__tao_seq_Octet</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::Long</type>
      <name>_oc_TAO_ObjectKey</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>TAO_tc_ObjectKey</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_KeyC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__KeyC_8h.html</filename>
    <class kind="class">TAO_ObjectKey</class>
    <class kind="class">TAO_ObjectKey_out</class>
    <class kind="class">TAO_ObjectKey_var</class>
  </compound>
  <compound kind="file">
    <name>Object_KeyC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__KeyC_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Object_Loader.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Loader_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Object_Loader</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Object_Loader</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_Loader.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Loader_8h.html</filename>
    <class kind="class">TAO_Object_Loader</class>
  </compound>
  <compound kind="file">
    <name>Object_Loader.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Loader_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Broker.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Proxy__Broker_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Object_Proxy_Broker</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Object_Proxy_Broker</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Broker.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Proxy__Broker_8h.html</filename>
    <class kind="class">TAO_Object_Proxy_Broker</class>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Impl.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Proxy__Impl_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Object_Proxy_Impl</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Object_Proxy_Impl</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Proxy__Impl_8h.html</filename>
    <class kind="class">TAO_Object_Proxy_Impl</class>
  </compound>
  <compound kind="file">
    <name>Object_Ref_Table.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Ref__Table_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Object_Ref_Table</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Object_Ref_Table</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_Ref_Table.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Object__Ref__Table_8h.html</filename>
    <class kind="class">TAO_Object_Ref_Table</class>
  </compound>
  <compound kind="file">
    <name>ObjectIDList.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ObjectIDList_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ORB_OBJECTIDLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_ORB_ObjectIdList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_ORB_ObjectIdList),(char *)&amp;_oc_CORBA_ORB_ObjectIdList, 0, sizeof(CORBA_ORB_ObjectIdList))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA_ORB_ObjectIdList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_ORB_ObjectIdList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ORB_ObjectIdList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA_ORB_ObjectIdList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA_ORB_ObjectIdList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_ORB_ObjectIdList</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectIDList.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ObjectIDList_8h.html</filename>
    <class kind="class">CORBA_ORB_ObjectIdList</class>
    <class kind="class">CORBA_ORB_ObjectIdList_out</class>
    <class kind="class">CORBA_ORB_ObjectIdList_var</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ORB_OBJECTIDLIST_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ORB_OBJECTIDLIST___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ORB_OBJECTIDLIST___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>CORBA_ORB_ObjectIdList_ptr</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA_ORB_ObjectIdList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_ORB_ObjectIdList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectIDList.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ObjectIDList_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ORB_OBJECTIDLIST_I_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectReferenceTemplate.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ObjectReferenceTemplate_8pidl.html</filename>
    <namespace>PortableInterceptor</namespace>
    <member kind="define">
      <type>#define</type>
      <name>local</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectReferenceTemplateC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ObjectReferenceTemplateC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ServerId</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_ServerId),(char *)&amp;_oc_PortableInterceptor_ServerId, 0, sizeof(PortableInterceptor::ServerId))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(PortableInterceptor) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ORBId</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_ORBId),(char *)&amp;_oc_PortableInterceptor_ORBId, 0, sizeof(PortableInterceptor::ORBId))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_AdapterName</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_AdapterName),(char *)&amp;_oc_PortableInterceptor_AdapterName, 0, sizeof(PortableInterceptor::AdapterName))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ObjectId</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_ObjectId),(char *)&amp;_oc_PortableInterceptor_ObjectId, 0, sizeof(PortableInterceptor::ObjectId))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ObjectReferenceFactory</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_value, sizeof(_oc_PortableInterceptor_ObjectReferenceFactory),(char *)&amp;_oc_PortableInterceptor_ObjectReferenceFactory, 0, sizeof(PortableInterceptor::ObjectReferenceFactory))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ObjectReferenceTemplate</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::tk_value, sizeof(_oc_PortableInterceptor_ObjectReferenceTemplate),(char *)&amp;_oc_PortableInterceptor_ObjectReferenceTemplate, 0, sizeof(PortableInterceptor::ObjectReferenceTemplate))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ObjectReferenceTemplateSeq</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_ObjectReferenceTemplateSeq),(char *)&amp;_oc_PortableInterceptor_ObjectReferenceTemplateSeq, 0, sizeof(PortableInterceptor::ObjectReferenceTemplateSeq))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_AdapterManagerId</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_AdapterManagerId),(char *)&amp;_oc_PortableInterceptor_AdapterManagerId, 0, sizeof(PortableInterceptor::AdapterManagerId))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_AdapterState</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_AdapterState),(char *)&amp;_oc_PortableInterceptor_AdapterState, 0, sizeof(PortableInterceptor::AdapterState))</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;any, PortableInterceptor::ObjectReferenceFactory **value)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;any, PortableInterceptor::ObjectReferenceFactory *&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;any, PortableInterceptor::ObjectReferenceTemplate *value)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;any, PortableInterceptor::ObjectReferenceTemplate **value)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;any, PortableInterceptor::ObjectReferenceTemplate *&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const PortableInterceptor::ObjectReferenceTemplateSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ObjectReferenceTemplateSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ObjectReferenceTemplateSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const PortableInterceptor::ObjectReferenceTemplateSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const PortableInterceptor::ObjectReferenceFactory *_tao_valuetype)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_InputCDR &amp;strm, PortableInterceptor::ObjectReferenceFactory *&amp;_tao_valuetype)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a26</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const PortableInterceptor::ObjectReferenceTemplate *_tao_valuetype)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_InputCDR &amp;strm, PortableInterceptor::ObjectReferenceTemplate *&amp;_tao_valuetype)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const PortableInterceptor::ObjectReferenceTemplateSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a29</anchor>
      <arglist>(TAO_InputCDR &amp;strm, PortableInterceptor::ObjectReferenceTemplateSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_PortableInterceptor_ServerId</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_PortableInterceptor_ObjectReferenceTemplate</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_PortableInterceptor_ObjectReferenceTemplateSeq</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectReferenceTemplateC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ObjectReferenceTemplateC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE___PTR_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE___VAR_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE___OUT_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ___VAR_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ___OUT_CH_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ObjectReferenceFactory **)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ObjectReferenceFactory *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ObjectReferenceTemplate *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ObjectReferenceTemplate **)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ObjectReferenceTemplate *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, const PortableInterceptor::ObjectReferenceTemplateSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ObjectReferenceTemplateSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ObjectReferenceTemplateSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, const PortableInterceptor::ObjectReferenceTemplateSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ObjectReferenceFactory *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ObjectReferenceTemplate *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::ObjectReferenceTemplateSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ObjectReferenceTemplateSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectReferenceTemplateC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ObjectReferenceTemplateC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::ObjectReferenceFactory *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ObjectReferenceFactory *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::ObjectReferenceTemplate *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ObjectReferenceTemplate *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::ObjectReferenceTemplateSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ObjectReferenceTemplateSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OctetSeq.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>OctetSeq_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>OctetSeqC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>OctetSeqC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_OCTETSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_OctetSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_OctetSeq),(char *)&amp;_oc_CORBA_OctetSeq, 0, sizeof(CORBA_OctetSeq))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA_OctetSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA_OctetSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA_OctetSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_OctetSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_OctetSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_OctetSeq</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OctetSeqC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>OctetSeqC_8h.html</filename>
    <class kind="class">CORBA_OctetSeq</class>
    <class kind="class">CORBA_OctetSeq_out</class>
    <class kind="class">CORBA_OctetSeq_var</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_OCTETSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_OCTETSEQ___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_OCTETSEQ___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA_OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA_OctetSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA_OctetSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA_OctetSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA_OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_OctetSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OctetSeqC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>OctetSeqC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_OCTETSEQ_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_OctetSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>operation_details.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>operation__details_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>operation_details.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>operation__details_8h.html</filename>
    <class kind="class">TAO_Operation_Details</class>
  </compound>
  <compound kind="file">
    <name>operation_details.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>operation__details_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ORB.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ORB</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const TAO_opaque &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, TAO_opaque &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::TCKind &amp;_tao_enumval)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::TCKind &amp;_tao_enumval)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ORB</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>ior_prefix</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB_8h.html</filename>
    <class kind="class">CORBA_ORB</class>
    <class kind="class">CORBA_ORB::InvalidName</class>
    <class kind="class">CORBA_ORB_out</class>
    <class kind="class">CORBA_ORB_var</class>
    <member kind="enumeration">
      <name>TAO_Service_ID</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_NAMESERVICE</name>
      <anchor>a5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_TRADINGSERVICE</name>
      <anchor>a5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_IMPLREPOSERVICE</name>
      <anchor>a5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_INTERFACEREPOSERVICE</name>
      <anchor>a5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_MCASTSERVER</name>
      <anchor>a5a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ORB_Core.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB__Core_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ORB_Core</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Environment &amp;</type>
      <name>TAO_default_environment</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export TAO_ORB_Core *</type>
      <name>TAO_ORB_Core_instance</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ORB_Core</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Core.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB__Core_8h.html</filename>
    <class kind="class">TAO_ORB_Core</class>
    <class kind="class">TAO_ORB_Core_Auto_Ptr</class>
    <class kind="class">TAO_ORB_Core_TSS_Resources</class>
    <class kind="class">TAO_TSS_Resources</class>
    <member kind="typedef">
      <type>TAO_TSS_Singleton&lt; TAO_TSS_Resources, TAO_SYNCH_MUTEX &gt;</type>
      <name>TAO_TSS_RESOURCES</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export TAO_ORB_Core *</type>
      <name>TAO_ORB_Core_instance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Core.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB__Core_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OC_RETRIEVE</name>
      <anchor>a0</anchor>
      <arglist>(member)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Table.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB__Table_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ORB_Table</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ORB_Table</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Table.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB__Table_8h.html</filename>
    <class kind="class">TAO_ORB_Table</class>
  </compound>
  <compound kind="file">
    <name>ORB_Table.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORB__Table_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>orbconf.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>orbconf_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_REACTOR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NULL_LOCK_REACTOR</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_MUTEX</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_RECURSIVE_MUTEX</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_RW_MUTEX</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_CONDITION</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POA_NO_TIMESTAMP</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_DOTTED_DECIMAL_ADDRESSES</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVER_ACTIVE_OBJECT_MAP_SIZE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVER_POA_MAP_SIZE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_NAME_SERVER_REQUEST_PORT</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_NAME_SERVER_REPLY_PORT</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_TRADING_SERVER_REQUEST_PORT</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_TRADING_SERVER_REPLY_PORT</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_IMPLREPO_SERVER_REQUEST_PORT</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_IMPLREPO_SERVER_REPLY_PORT</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_INTERFACEREPO_SERVER_REQUEST_PORT</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_INTERFACEREPO_SERVER_REPLY_PORT</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVICE_RESOLUTION_TIMEOUT</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVER_PORT</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAXBUFSIZE</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAXIMUM_NATIVE_TYPE_SIZE</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USES_ROBUST_CONNECTION_MGMT</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTION_CACHING_STRATEGY</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_PURGE_PERCENT</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTION_CACHE_MAXIMUM</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_CLOSE</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_STORAGE_CLASS</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_BEGIN</name>
      <anchor>a29</anchor>
      <arglist>(NS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_END</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a31</anchor>
      <arglist>(TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_DEFINE</name>
      <anchor>a32</anchor>
      <arglist>(TYPE, NAME, RHS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_INLINE_FUNCTION</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NO_COPY_OCTET_SEQUENCES</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_EXCEPTIONS</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_EXCEPTIONS</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_EMIT_CODE</name>
      <anchor>a37</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_EMIT_CODE2</name>
      <anchor>a38</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_ARG_DECL</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_ARG_DECL_WITH_DEFAULTS</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_ARG_DECL_NOT_USED</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_SINGLE_ARG_DECL</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_SINGLE_ARG_DECL_NOT_USED</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_ARG_PARAMETER</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_SINGLE_ARG_PARAMETER</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_ARG_NOT_USED</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_RAISE</name>
      <anchor>a48</anchor>
      <arglist>(ex)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENV_DECLARE_NEW_ENV</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENCAP_BYTE_ORDER</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RETSIGTYPE</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_VPRINTF</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_NESTED_MACRO</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_NAMESERVICE</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TRADINGSERVICE</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_IMPLREPOSERVICE</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_ROOTPOA</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_POACURRENT</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_INTERFACEREP</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_POLICYMANAGER</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_POLICYCURRENT</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_IORMANIPULATION</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_IORTABLE</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_DYNANYFACTORY</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TYPECODEFACTORY</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_RTORB</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_RTCURRENT</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_PRIORITYMAPPINGMANAGER</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_SECURITYCURRENT</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_SECURITYMANAGER</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TRANSACTIONCURRENT</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_NOTIFICATIONSERVICE</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TYPEDNOTIFICATIONSERVICE</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_COMPONENTHOMEFINDER</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_PSS</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_CODECFACTORY</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_PICurrent</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_LIST_OF_INITIAL_SERVICES</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NO_OF_MCAST_SERVICES</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMING_BASE_ADDR</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ROOT_NAMING_CONTEXT</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMING_CONTEXT_INDEX</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_ROOTPOA_NAME</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_VALUETYPE</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_DIOP</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_UIOP</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_SHMIOP</name>
      <anchor>a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_NAMED_RT_MUTEXES</name>
      <anchor>a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_MINIMUM_POA</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_MINIMUM_POA_MAPS</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_CORBA_MESSAGING</name>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DISABLE_CORBA_MESSAGING_POLICIES</name>
      <anchor>a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REBIND_POLICY</name>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_SYNC_SCOPE_POLICY</name>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_PRIORITY_POLICIES</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REQUEST_START_TIME_POLICY</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REQUEST_END_TIME_POLICY</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REPLY_START_TIME_POLICY</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REPLY_END_TIME_POLICY</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY</name>
      <anchor>a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_ROUTING_POLICY</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_MAX_HOPS_POLICY</name>
      <anchor>a103</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_QUEUE_ORDER_POLICY</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_BUFFERING_CONSTRAINT_POLICY</name>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_AMI_POLLER</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_AMI_CALLBACK</name>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_MINIMUM_CONNECTION_CACHING_STRATEGY</name>
      <anchor>a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CLIENT_PRIORITY_POLICY_TYPE</name>
      <anchor>a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_BUFFERING_CONSTRAINT_POLICY_TYPE</name>
      <anchor>a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RT_PRIORITY_MODEL_POLICY_TYPE</name>
      <anchor>a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RT_THREADPOOL_POLICY_TYPE</name>
      <anchor>a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RT_SERVER_PROTOCOL_POLICY_TYPE</name>
      <anchor>a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RT_CLIENT_PROTOCOL_POLICY_TYPE</name>
      <anchor>a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RT_PRIVATE_CONNECTION_POLICY_TYPE</name>
      <anchor>a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RT_PRIORITY_BANDED_CONNECTION_POLICY_TYPE</name>
      <anchor>a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_REBIND_POLICY_TYPE</name>
      <anchor>a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_SYNC_SCOPE_POLICY_TYPE</name>
      <anchor>a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_REQUEST_PRIORITY_POLICY_TYPE</name>
      <anchor>a119</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_REPLY_PRIORITY_POLICY_TYPE</name>
      <anchor>a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_REQUEST_START_TIME_POLICY_TYPE</name>
      <anchor>a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_REQUEST_END_TIME_POLICY_TYPE</name>
      <anchor>a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_REPLY_START_TIME_POLICY_TYPE</name>
      <anchor>a123</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_REPLY_END_TIME_POLICY_TYPE</name>
      <anchor>a124</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_RELATIVE_REQ_TIMEOUT_POLICY_TYPE</name>
      <anchor>a125</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_RELATIVE_RT_TIMEOUT_POLICY_TYPE</name>
      <anchor>a126</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_ROUTING_POLICY_TYPE</name>
      <anchor>a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_MAX_HOPS_POLICY_TYPE</name>
      <anchor>a128</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MESSAGING_QUEUE_ORDER_POLICY_TYPE</name>
      <anchor>a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_POLICY_DEFAULT_SCOPE</name>
      <anchor>a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_GIOP_MAJOR</name>
      <anchor>a131</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_GIOP_MINOR</name>
      <anchor>a132</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTION_HANDLER_STACK_BUF_SIZE</name>
      <anchor>a133</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RESUMES_CONNECTION_HANDLER</name>
      <anchor>a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_STD_PROFILE_COMPONENTS</name>
      <anchor>a135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_IOR_SIZE</name>
      <anchor>a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_THREAD_PER_CONNECTION_TIMEOUT</name>
      <anchor>a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_FT_CORBA_MAJOR</name>
      <anchor>a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_FT_CORBA_MINOR</name>
      <anchor>a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_MIOP_MAJOR</name>
      <anchor>a140</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_MIOP_MINOR</name>
      <anchor>a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_MUXED_TRANSPORT_MUX_STRATEGY</name>
      <anchor>a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_MCAST_SERVICEID</name>
      <anchor>a172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAMESERVICE</name>
      <anchor>a172a144</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRADINGSERVICE</name>
      <anchor>a172a145</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLREPOSERVICE</name>
      <anchor>a172a146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERFACEREPOSERVICE</name>
      <anchor>a172a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Cached_Policy_Type</name>
      <anchor>a173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_UNCACHED</name>
      <anchor>a173a148</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_PRIORITY_MODEL</name>
      <anchor>a173a149</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_THREADPOOL</name>
      <anchor>a173a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_SERVER_PROTOCOL</name>
      <anchor>a173a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_CLIENT_PROTOCOL</name>
      <anchor>a173a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_PRIVATE_CONNECTION</name>
      <anchor>a173a153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_PRIORITY_BANDED_CONNECTION</name>
      <anchor>a173a154</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_LIFESPAN</name>
      <anchor>a173a155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_ID_UNIQUENESS</name>
      <anchor>a173a156</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_ID_ASSIGNMENT</name>
      <anchor>a173a157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_THREAD</name>
      <anchor>a173a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_IMPLICIT_ACTIVATION</name>
      <anchor>a173a159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_SERVANT_RETENTION</name>
      <anchor>a173a160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_REQUEST_PROCESSING</name>
      <anchor>a173a161</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_SYNC_SCOPE</name>
      <anchor>a173a162</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RELATIVE_ROUNDTRIP_TIMEOUT</name>
      <anchor>a173a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_BUFFERING_CONSTRAINT</name>
      <anchor>a173a164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_BIDIRECTIONAL_GIOP</name>
      <anchor>a173a165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_MAX_CACHED</name>
      <anchor>a173a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Policy_Scope</name>
      <anchor>a174</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_OBJECT_SCOPE</name>
      <anchor>a174a167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_THREAD_SCOPE</name>
      <anchor>a174a168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_ORB_SCOPE</name>
      <anchor>a174a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_POA_SCOPE</name>
      <anchor>a174a170</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_CLIENT_EXPOSED</name>
      <anchor>a174a171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_DEFAULT_ORB_TABLE_SIZE</name>
      <anchor>a143</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitializer_Registry.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORBInitializer__Registry_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ORBInitializer_Registry</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ORBInitializer_Registry</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitializer_Registry.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORBInitializer__Registry_8h.html</filename>
    <class kind="class">TAO_ORBInitializer_Registry</class>
  </compound>
  <compound kind="file">
    <name>ORBInitializer_Registry.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORBInitializer__Registry_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>ORBInitInfo.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORBInitInfo_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_ORBInitInfo</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>tao_TAO_ORBInitInfo_duplicate</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORBInitInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_TAO_ORBInitInfo_release</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORBInitInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>tao_TAO_ORBInitInfo_nil</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>tao_TAO_ORBInitInfo_narrow</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_TAO_ORBInitInfo_upcast</name>
      <anchor>a6</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_ORBInitInfo</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitInfo.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORBInitInfo_8h.html</filename>
    <class kind="class">TAO_ORBInitInfo</class>
    <class kind="class">TAO_ORBInitInfo_var</class>
    <member kind="typedef">
      <type>TAO_ORBInitInfo *</type>
      <name>TAO_ORBInitInfo_ptr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitInfo.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ORBInitInfo_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>params.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>params_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_params</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_params</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>params.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>params_8h.html</filename>
    <class kind="class">TAO_ORB_Parameters</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue&lt; ACE_CString &gt;</type>
      <name>TAO_EndpointSet</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue_Iterator&lt; ACE_CString &gt;</type>
      <name>TAO_EndpointSetIterator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>params.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>params_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Parser_Registry.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Parser__Registry_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Parser_Registry</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Parser_Registry</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parser_Registry.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Parser__Registry_8h.html</filename>
    <class kind="class">TAO_Parser_Registry</class>
  </compound>
  <compound kind="file">
    <name>Parser_Registry.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Parser__Registry_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>PICurrent.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PICurrent_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_PICurrent</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_PICurrent</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PICurrent.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PICurrent_8h.html</filename>
    <class kind="class">TAO_PICurrent</class>
    <class kind="class">TAO_PICurrent_Guard</class>
    <class kind="class">TAO_PICurrent_Impl</class>
  </compound>
  <compound kind="file">
    <name>PICurrent.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PICurrent_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>PICurrent_ORBInitializer.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PICurrent__ORBInitializer_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_PICurrent_ORBInitializer</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_PICurrent_ORBInitializer</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PICurrent_ORBInitializer.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PICurrent__ORBInitializer_8h.html</filename>
    <class kind="class">TAO_PICurrent_ORBInitializer</class>
  </compound>
  <compound kind="file">
    <name>Pluggable.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Pluggable</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Pluggable</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pluggable.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable_8h.html</filename>
    <class kind="class">TAO_Acceptor</class>
    <class kind="class">TAO_Connector</class>
  </compound>
  <compound kind="file">
    <name>Pluggable.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable__Messaging_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Pluggable_Messaging</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Pluggable_Messaging</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable__Messaging_8h.html</filename>
    <class kind="class">TAO_Pluggable_Messaging</class>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable__Messaging_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging_Utils.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable__Messaging__Utils_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Pluggable_Messaging_Utils</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Pluggable_Messaging_Utils</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging_Utils.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable__Messaging__Utils_8h.html</filename>
    <class kind="class">TAO_Pluggable_Reply_Params</class>
    <class kind="class">TAO_Pluggable_Reply_Params_Base</class>
    <member kind="enumeration">
      <name>TAO_Pluggable_Header_Type</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_REQUEST_HEADER</name>
      <anchor>a16a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATE_REQUEST_HEADER</name>
      <anchor>a16a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Pluggable_Message_Type</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_REQUEST</name>
      <anchor>a17a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_REPLY</name>
      <anchor>a17a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_CANCELREQUEST</name>
      <anchor>a17a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATEREQUEST</name>
      <anchor>a17a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATEREPLY</name>
      <anchor>a17a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_CLOSECONNECTION</name>
      <anchor>a17a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_MESSAGERROR</name>
      <anchor>a17a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_FRAGMENT</name>
      <anchor>a17a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Pluggable_Message_Exception_Type</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_NO_EXCEPTION</name>
      <anchor>a18a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_USER_EXCEPTION</name>
      <anchor>a18a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_SYSTEM_EXCEPTION</name>
      <anchor>a18a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATION_FORWARD</name>
      <anchor>a18a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATION_FORWARD_PERM</name>
      <anchor>a18a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_NEEDS_ADDRESSING_MODE</name>
      <anchor>a18a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging_Utils.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pluggable__Messaging__Utils_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Policy.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy_8pidl.html</filename>
    <namespace>CORBA</namespace>
    <class kind="exception">CORBA::InvalidPolicies</class>
    <class kind="interface">CORBA::Policy</class>
  </compound>
  <compound kind="file">
    <name>Policy_Forward.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Forward_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>Policy_ForwardC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__ForwardC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYLIST_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CS_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYTYPESEQ_CS_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_PolicyType</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_PolicyType),(char *)&amp;_oc_CORBA_PolicyType, 0, sizeof(CORBA::PolicyType))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_PolicyList</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_PolicyList),(char *)&amp;_oc_CORBA_PolicyList, 0, sizeof(CORBA::PolicyList))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_PolicyTypeSeq</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_PolicyTypeSeq),(char *)&amp;_oc_CORBA_PolicyTypeSeq, 0, sizeof(CORBA::PolicyTypeSeq))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_SetOverrideType</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::tk_enum, sizeof(_oc_CORBA_SetOverrideType),(char *)&amp;_oc_CORBA_SetOverrideType, 0, sizeof(CORBA::SetOverrideType))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::PolicyList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::PolicyList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::PolicyTypeSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyTypeSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::PolicyTypeSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::PolicyTypeSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::SetOverrideType _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::SetOverrideType &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::PolicyList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::PolicyList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::PolicyTypeSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::PolicyTypeSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_PolicyType</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_PolicyList</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_PolicyTypeSeq</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_ForwardC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__ForwardC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYLIST_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYLIST___VAR_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYLIST___OUT_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYTYPESEQ_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYTYPESEQ___VAR_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYTYPESEQ___OUT_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>tao_CORBA_Policy_release</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Policy_ptr</type>
      <name>tao_CORBA_Policy_nil</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Policy_ptr</type>
      <name>tao_CORBA_Policy_narrow</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Object *ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Object *</type>
      <name>tao_CORBA_Policy_upcast</name>
      <anchor>a15</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Policy *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::PolicyList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyTypeSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyTypeSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::PolicyTypeSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::SetOverrideType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Policy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a29</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::SetOverrideType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a34</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::SetOverrideType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_ForwardC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__ForwardC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYLIST_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYTYPESEQ_CI_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Policy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::SetOverrideType &amp;_tao_enumval)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::SetOverrideType &amp;_tao_enumval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Policy_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Policy_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Manager_8h.html</filename>
    <class kind="class">TAO_Policy_Current</class>
    <class kind="class">TAO_Policy_Current_Impl</class>
    <class kind="class">TAO_Policy_Manager</class>
  </compound>
  <compound kind="file">
    <name>Policy_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Policy_Set.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Set_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Policy_Set</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Policy_Set</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_Set.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Set_8h.html</filename>
    <class kind="class">TAO_Policy_Set</class>
  </compound>
  <compound kind="file">
    <name>Policy_Set.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Set_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Policy_Validator.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Validator_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Policy_Validator</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Policy_Validator</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_Validator.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Policy__Validator_8h.html</filename>
    <class kind="class">TAO_Policy_Validator</class>
  </compound>
  <compound kind="file">
    <name>PolicyC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PolicyC_8cpp.html</filename>
    <class kind="class">TAO_ClientRequestInfo_CORBA_Policy_copy</class>
    <class kind="class">TAO_ClientRequestInfo_CORBA_Policy_destroy</class>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_PolicyErrorCode</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_PolicyErrorCode),(char *)&amp;_oc_CORBA_PolicyErrorCode, 0, sizeof(CORBA::PolicyErrorCode))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_PolicyError</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::tk_except, sizeof(_oc_CORBA_PolicyError),(char *)&amp;_oc_CORBA_PolicyError, 0, sizeof(CORBA::PolicyError))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_InvalidPolicies</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_except, sizeof(_oc_CORBA_InvalidPolicies),(char *)&amp;_oc_CORBA_InvalidPolicies, 0, sizeof(CORBA::InvalidPolicies))</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>tao_CORBA_Policy_duplicate</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Policy_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_Policy_release</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Policy_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>tao_CORBA_Policy_nil</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>tao_CORBA_Policy_narrow</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_Policy_upcast</name>
      <anchor>a15</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_Policy</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::tk_objref, sizeof(_oc_CORBA_Policy),(char *)&amp;_oc_CORBA_Policy, 0, sizeof(CORBA::Policy))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_PolicyManager_release</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::PolicyManager_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyManager_ptr</type>
      <name>tao_CORBA_PolicyManager_nil</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyManager_ptr</type>
      <name>tao_CORBA_PolicyManager_narrow</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_PolicyManager_upcast</name>
      <anchor>a20</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyCurrent_ptr</type>
      <name>tao_CORBA_PolicyCurrent_duplicate</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::PolicyCurrent_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_PolicyCurrent_release</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::PolicyCurrent_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyCurrent_ptr</type>
      <name>tao_CORBA_PolicyCurrent_nil</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyCurrent_ptr</type>
      <name>tao_CORBA_PolicyCurrent_narrow</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_PolicyCurrent_upcast</name>
      <anchor>a25</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_PolicyErrorCode</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_PolicyError</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_InvalidPolicies</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::_TAO_Policy_Proxy_Broker *(*</type>
      <name>CORBA__TAO_Policy_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a5</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_Policy</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PolicyC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYERROR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_INVALIDPOLICIES_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER___PTR_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER___VAR_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER___OUT_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT___PTR_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT___VAR_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT___OUT_CH_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT_CH_</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::PolicyError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyError *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyError *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::PolicyError *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::InvalidPolicies *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::InvalidPolicies *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::InvalidPolicies *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Policy *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a26</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::InvalidPolicies::_tao_seq_UShort &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a29</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::InvalidPolicies::_tao_seq_UShort &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Policy_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PolicyC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY___CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER___CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT___CI_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::PolicyError &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::PolicyError &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::InvalidPolicies::_tao_seq_UShort &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::InvalidPolicies::_tao_seq_UShort &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::InvalidPolicies &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::InvalidPolicies &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Policy_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyFactory_Registry.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PolicyFactory__Registry_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_PolicyFactory_Registry</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_PolicyFactory_Registry</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyFactory_Registry.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PolicyFactory__Registry_8h.html</filename>
    <class kind="class">TAO_PolicyFactory_Registry</class>
  </compound>
  <compound kind="file">
    <name>PolicyS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PolicyS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Pollable.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Pollable_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>PollableC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableC_8cpp.html</filename>
    <member kind="function">
      <type>CORBA::Pollable_ptr</type>
      <name>tao_CORBA_Pollable_duplicate</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Pollable_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_Pollable_release</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Pollable_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Pollable_ptr</type>
      <name>tao_CORBA_Pollable_nil</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Pollable_ptr</type>
      <name>tao_CORBA_Pollable_narrow</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_Pollable_upcast</name>
      <anchor>a4</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::DIIPollable_ptr</type>
      <name>tao_CORBA_DIIPollable_duplicate</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::DIIPollable_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_DIIPollable_release</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::DIIPollable_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::DIIPollable_ptr</type>
      <name>tao_CORBA_DIIPollable_nil</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::DIIPollable_ptr</type>
      <name>tao_CORBA_DIIPollable_narrow</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_DIIPollable_upcast</name>
      <anchor>a9</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PollableSet_ptr</type>
      <name>tao_CORBA_PollableSet_duplicate</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::PollableSet_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_CORBA_PollableSet_release</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::PollableSet_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PollableSet_ptr</type>
      <name>tao_CORBA_PollableSet_nil</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PollableSet_ptr</type>
      <name>tao_CORBA_PollableSet_narrow</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_CORBA_PollableSet_upcast</name>
      <anchor>a14</anchor>
      <arglist>(void *src)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PollableC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE___PTR_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE___VAR_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE___OUT_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE___PTR_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE___VAR_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE___OUT_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET_CH_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET_NOPOSSIBLEPOLLABLE_CH_</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET_UNKNOWNPOLLABLE_CH_</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PollableC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE___CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE___CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET___CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PollableS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableS_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>PollableS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>PollableS.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableS_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>PollableS_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableS__T_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>PollableS_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableS__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>PollableS_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PollableS__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>PortableInterceptor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PortableInterceptor_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_CHECK</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_CHECK_RETURN</name>
      <anchor>a2</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_THROW</name>
      <anchor>a3</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_THROW_RETURN</name>
      <anchor>a4</anchor>
      <arglist>(X, Y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptor.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PortableInterceptor_8pidl.html</filename>
    <namespace>PortableInterceptor</namespace>
    <member kind="define">
      <type>#define</type>
      <name>local</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PortableInterceptorC_8cpp.html</filename>
    <member kind="function">
      <type>PortableInterceptor::Interceptor_ptr</type>
      <name>tao_PortableInterceptor_Interceptor_duplicate</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::Interceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_Interceptor_release</name>
      <anchor>a3</anchor>
      <arglist>(PortableInterceptor::Interceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::Interceptor_ptr</type>
      <name>tao_PortableInterceptor_Interceptor_nil</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::Interceptor_ptr</type>
      <name>tao_PortableInterceptor_Interceptor_narrow</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_Interceptor_upcast</name>
      <anchor>a6</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ForwardRequest</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_except, sizeof(_oc_PortableInterceptor_ForwardRequest),(char *)&amp;_oc_PortableInterceptor_ForwardRequest, 0, sizeof(PortableInterceptor::ForwardRequest))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(PortableInterceptor) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_ReplyStatus</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_ReplyStatus),(char *)&amp;_oc_PortableInterceptor_ReplyStatus, 0, sizeof(PortableInterceptor::ReplyStatus))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_SlotId</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_PortableInterceptor_SlotId),(char *)&amp;_oc_PortableInterceptor_SlotId, 0, sizeof(PortableInterceptor::SlotId))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_PortableInterceptor_InvalidSlot</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::tk_except, sizeof(_oc_PortableInterceptor_InvalidSlot),(char *)&amp;_oc_PortableInterceptor_InvalidSlot, 0, sizeof(PortableInterceptor::InvalidSlot))</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::Current_ptr</type>
      <name>tao_PortableInterceptor_Current_duplicate</name>
      <anchor>a12</anchor>
      <arglist>(PortableInterceptor::Current_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_Current_release</name>
      <anchor>a13</anchor>
      <arglist>(PortableInterceptor::Current_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::Current_ptr</type>
      <name>tao_PortableInterceptor_Current_nil</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::Current_ptr</type>
      <name>tao_PortableInterceptor_Current_narrow</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_Current_upcast</name>
      <anchor>a16</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::RequestInfo_ptr</type>
      <name>tao_PortableInterceptor_RequestInfo_duplicate</name>
      <anchor>a17</anchor>
      <arglist>(PortableInterceptor::RequestInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_RequestInfo_release</name>
      <anchor>a18</anchor>
      <arglist>(PortableInterceptor::RequestInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::RequestInfo_ptr</type>
      <name>tao_PortableInterceptor_RequestInfo_nil</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::RequestInfo_ptr</type>
      <name>tao_PortableInterceptor_RequestInfo_narrow</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_RequestInfo_upcast</name>
      <anchor>a21</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ClientRequestInfo_ptr</type>
      <name>tao_PortableInterceptor_ClientRequestInfo_duplicate</name>
      <anchor>a22</anchor>
      <arglist>(PortableInterceptor::ClientRequestInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_ClientRequestInfo_release</name>
      <anchor>a23</anchor>
      <arglist>(PortableInterceptor::ClientRequestInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ClientRequestInfo_ptr</type>
      <name>tao_PortableInterceptor_ClientRequestInfo_nil</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ClientRequestInfo_ptr</type>
      <name>tao_PortableInterceptor_ClientRequestInfo_narrow</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_ClientRequestInfo_upcast</name>
      <anchor>a26</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ServerRequestInfo_ptr</type>
      <name>tao_PortableInterceptor_ServerRequestInfo_duplicate</name>
      <anchor>a27</anchor>
      <arglist>(PortableInterceptor::ServerRequestInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_ServerRequestInfo_release</name>
      <anchor>a28</anchor>
      <arglist>(PortableInterceptor::ServerRequestInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ServerRequestInfo_ptr</type>
      <name>tao_PortableInterceptor_ServerRequestInfo_nil</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ServerRequestInfo_ptr</type>
      <name>tao_PortableInterceptor_ServerRequestInfo_narrow</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_ServerRequestInfo_upcast</name>
      <anchor>a31</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ClientRequestInterceptor_ptr</type>
      <name>tao_PortableInterceptor_ClientRequestInterceptor_duplicate</name>
      <anchor>a32</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_ClientRequestInterceptor_release</name>
      <anchor>a33</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ClientRequestInterceptor_ptr</type>
      <name>tao_PortableInterceptor_ClientRequestInterceptor_nil</name>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ClientRequestInterceptor_ptr</type>
      <name>tao_PortableInterceptor_ClientRequestInterceptor_narrow</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_ClientRequestInterceptor_upcast</name>
      <anchor>a36</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ServerRequestInterceptor_ptr</type>
      <name>tao_PortableInterceptor_ServerRequestInterceptor_duplicate</name>
      <anchor>a37</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_ServerRequestInterceptor_release</name>
      <anchor>a38</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ServerRequestInterceptor_ptr</type>
      <name>tao_PortableInterceptor_ServerRequestInterceptor_nil</name>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ServerRequestInterceptor_ptr</type>
      <name>tao_PortableInterceptor_ServerRequestInterceptor_narrow</name>
      <anchor>a40</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_ServerRequestInterceptor_upcast</name>
      <anchor>a41</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::IORInfo_ptr</type>
      <name>tao_PortableInterceptor_IORInfo_duplicate</name>
      <anchor>a42</anchor>
      <arglist>(PortableInterceptor::IORInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_IORInfo_release</name>
      <anchor>a43</anchor>
      <arglist>(PortableInterceptor::IORInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::IORInfo_ptr</type>
      <name>tao_PortableInterceptor_IORInfo_nil</name>
      <anchor>a44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::IORInfo_ptr</type>
      <name>tao_PortableInterceptor_IORInfo_narrow</name>
      <anchor>a45</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_IORInfo_upcast</name>
      <anchor>a46</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::IORInterceptor_ptr</type>
      <name>tao_PortableInterceptor_IORInterceptor_duplicate</name>
      <anchor>a47</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_IORInterceptor_release</name>
      <anchor>a48</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::IORInterceptor_ptr</type>
      <name>tao_PortableInterceptor_IORInterceptor_nil</name>
      <anchor>a49</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::IORInterceptor_ptr</type>
      <name>tao_PortableInterceptor_IORInterceptor_narrow</name>
      <anchor>a50</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_IORInterceptor_upcast</name>
      <anchor>a51</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::PolicyFactory_ptr</type>
      <name>tao_PortableInterceptor_PolicyFactory_duplicate</name>
      <anchor>a52</anchor>
      <arglist>(PortableInterceptor::PolicyFactory_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_PolicyFactory_release</name>
      <anchor>a53</anchor>
      <arglist>(PortableInterceptor::PolicyFactory_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::PolicyFactory_ptr</type>
      <name>tao_PortableInterceptor_PolicyFactory_nil</name>
      <anchor>a54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::PolicyFactory_ptr</type>
      <name>tao_PortableInterceptor_PolicyFactory_narrow</name>
      <anchor>a55</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_PolicyFactory_upcast</name>
      <anchor>a56</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ORBInitInfo_ptr</type>
      <name>tao_PortableInterceptor_ORBInitInfo_duplicate</name>
      <anchor>a57</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_ORBInitInfo_release</name>
      <anchor>a58</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ORBInitInfo_ptr</type>
      <name>tao_PortableInterceptor_ORBInitInfo_nil</name>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ORBInitInfo_ptr</type>
      <name>tao_PortableInterceptor_ORBInitInfo_narrow</name>
      <anchor>a60</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_ORBInitInfo_upcast</name>
      <anchor>a61</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ORBInitializer_ptr</type>
      <name>tao_PortableInterceptor_ORBInitializer_duplicate</name>
      <anchor>a62</anchor>
      <arglist>(PortableInterceptor::ORBInitializer_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_PortableInterceptor_ORBInitializer_release</name>
      <anchor>a63</anchor>
      <arglist>(PortableInterceptor::ORBInitializer_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ORBInitializer_ptr</type>
      <name>tao_PortableInterceptor_ORBInitializer_nil</name>
      <anchor>a64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ORBInitializer_ptr</type>
      <name>tao_PortableInterceptor_ORBInitializer_narrow</name>
      <anchor>a65</anchor>
      <arglist>(CORBA::Object *p ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>tao_PortableInterceptor_ORBInitializer_upcast</name>
      <anchor>a66</anchor>
      <arglist>(void *src)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_PortableInterceptor_ReplyStatus</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_PortableInterceptor_InvalidSlot</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PortableInterceptorC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_FORWARDREQUEST_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INVALIDSLOT_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT___PTR_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT___VAR_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT___OUT_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO___PTR_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO___VAR_CH_</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO___OUT_CH_</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO_CH_</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO___PTR_CH_</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO___VAR_CH_</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO___OUT_CH_</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO_CH_</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO___PTR_CH_</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO___VAR_CH_</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO___OUT_CH_</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO_CH_</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___PTR_CH_</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___VAR_CH_</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___OUT_CH_</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR_CH_</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___PTR_CH_</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___VAR_CH_</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___OUT_CH_</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR_CH_</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINFO___PTR_CH_</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINFO___VAR_CH_</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINFO___OUT_CH_</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINFO_CH_</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINTERCEPTOR___PTR_CH_</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINTERCEPTOR___VAR_CH_</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINTERCEPTOR___OUT_CH_</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINTERCEPTOR_CH_</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY___PTR_CH_</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY___VAR_CH_</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY___OUT_CH_</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY_CH_</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO___PTR_CH_</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO___VAR_CH_</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO___OUT_CH_</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO_CH_</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO_DUPLICATENAME_CH_</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO_INVALIDNAME_CH_</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER___PTR_CH_</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER___VAR_CH_</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER___OUT_CH_</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER_CH_</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a53</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ForwardRequest *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a54</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ForwardRequest *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a55</anchor>
      <arglist>(const CORBA::Any &amp;, const PortableInterceptor::ForwardRequest *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a56</anchor>
      <arglist>(CORBA::Any &amp;, const PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a57</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::InvalidSlot *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a58</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::InvalidSlot *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a59</anchor>
      <arglist>(const CORBA::Any &amp;, const PortableInterceptor::InvalidSlot *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a60</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::ForwardRequest &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a61</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ForwardRequest &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a62</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a63</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PortableInterceptorC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR___CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT___CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO___CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO___CI_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO___CI_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___CI_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___CI_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINFO___CI_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINTERCEPTOR___CI_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY___CI_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO___CI_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER___CI_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const PortableInterceptor::ForwardRequest &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;strm, PortableInterceptor::ForwardRequest &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const PortableInterceptor::InvalidSlot &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PortableInterceptorS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>PP_Memory_Management.txt</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>PP__Memory__Management_8txt.html</filename>
  </compound>
  <compound kind="file">
    <name>Principal.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Principal_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Principal</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, CORBA_Principal *x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA_Principal *&amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Principal</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Principal.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Principal_8h.html</filename>
    <class kind="class">CORBA_Principal</class>
    <class kind="class">CORBA_Principal_out</class>
    <class kind="class">CORBA_Principal_var</class>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;, CORBA_Principal *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_Principal *&amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Principal.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Principal_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Profile.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Profile_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Profile</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Profile</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Profile.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Profile_8h.html</filename>
    <class kind="class">TAO_Profile</class>
    <class kind="class">TAO_Unknown_Profile</class>
  </compound>
  <compound kind="file">
    <name>Profile.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Profile_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Protocol_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Protocol__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Protocol_Factory</name>
      <anchor>a2</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Protocol_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Protocol_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Protocol__Factory_8h.html</filename>
    <class kind="class">TAO_Protocol_Factory</class>
  </compound>
  <compound kind="file">
    <name>Protocols_Hooks.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Protocols__Hooks_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Protocols_Hooks</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Protocols_Hooks</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Protocols_Hooks.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Protocols__Hooks_8h.html</filename>
    <class kind="class">TAO_Protocols_Hooks</class>
  </compound>
  <compound kind="file">
    <name>qt_resource.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>qt__resource_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>qt_resource.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>qt__resource_8h.html</filename>
    <class kind="class">TAO_QtResource_Factory</class>
  </compound>
  <compound kind="file">
    <name>qt_resource.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>qt__resource_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Queued_Message.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Queued__Message_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Queued_Message.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Queued__Message_8h.html</filename>
    <class kind="class">TAO_Queued_Message</class>
  </compound>
  <compound kind="file">
    <name>Queued_Message.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Queued__Message_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Reactive_Flushing_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Reactive__Flushing__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Reactive_Flushing_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Reactive_Flushing_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reactive_Flushing_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Reactive__Flushing__Strategy_8h.html</filename>
    <class kind="class">TAO_Reactive_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Remote_Object_Proxy_Broker.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Remote__Object__Proxy__Broker_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Object_Remote_Proxy_Broker</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Remote_Object_Proxy_Broker *</type>
      <name>the_tao_remote_object_proxy_broker</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Object_Remote_Proxy_Broker</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Remote_Object_Proxy_Broker.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Remote__Object__Proxy__Broker_8h.html</filename>
    <class kind="class">TAO_Remote_Object_Proxy_Broker</class>
    <member kind="function">
      <type>TAO_Remote_Object_Proxy_Broker *</type>
      <name>the_tao_remote_object_proxy_broker</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Remote_Object_Proxy_Impl.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Remote__Object__Proxy__Impl_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Remote_Object_Proxy_Impl</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Remote_Object_Proxy_Impl</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Remote_Object_Proxy_Impl.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Remote__Object__Proxy__Impl_8h.html</filename>
    <class kind="class">TAO_Remote_Object_Proxy_Impl</class>
  </compound>
  <compound kind="file">
    <name>Reply_Dispatcher.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Reply__Dispatcher_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reply_Dispatcher.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Reply__Dispatcher_8h.html</filename>
    <class kind="class">TAO_Reply_Dispatcher</class>
  </compound>
  <compound kind="file">
    <name>Reply_Dispatcher.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Reply__Dispatcher_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Request_Dispatcher.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Request__Dispatcher_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_GIOP_Message_Base</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_GIOP_Message_Base</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Request_Dispatcher.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Request__Dispatcher_8h.html</filename>
    <class kind="class">TAO_Request_Dispatcher</class>
  </compound>
  <compound kind="file">
    <name>RequestInfo_Util.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>RequestInfo__Util_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_RequestInfo_Util</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_RequestInfo_Util</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RequestInfo_Util.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>RequestInfo__Util_8h.html</filename>
    <class kind="class">TAO_RequestInfo_Util</class>
  </compound>
  <compound kind="file">
    <name>Resource_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Resource__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Resource_Factory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Resource_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Resource_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Resource__Factory_8h.html</filename>
    <class kind="class">TAO_Protocol_Item</class>
    <class kind="class">TAO_Resource_Factory</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; TAO_Protocol_Item *&gt;</type>
      <name>TAO_ProtocolFactorySet</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; TAO_Protocol_Item *&gt;</type>
      <name>TAO_ProtocolFactorySetItor</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Resume_Handle.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Resume__Handle_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Resume_Handle</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Resume_Handle</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Resume_Handle.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Resume__Handle_8h.html</filename>
    <class kind="class">TAO_Resume_Handle</class>
  </compound>
  <compound kind="file">
    <name>Resume_Handle.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Resume__Handle_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Sequence.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sequence_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::~TAO_Unbounded_Sequence</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::_tao_any_destructor</name>
      <anchor>a6</anchor>
      <arglist>(void *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a9</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;lhs, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a10</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;lhs, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Sequence</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sequence.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sequence_8h.html</filename>
    <class kind="class">TAO_Base_Sequence</class>
    <class kind="class">TAO_Bounded_Base_Sequence</class>
    <class kind="class">TAO_Unbounded_Base_Sequence</class>
    <class kind="class">TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</class>
    <class kind="class">TAO_Unbounded_String_Sequence</class>
    <class kind="class">TAO_Unbounded_WString_Sequence</class>
    <member kind="function">
      <type>TAO_Export int</type>
      <name>operator==</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;l, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export int</type>
      <name>operator!=</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;l, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sequence.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sequence_8i.html</filename>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE CORBA::Octet *</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::allocbuf</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong size)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::freebuf</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Octet *buffer)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong maximum)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE const CORBA::Octet *</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::get_buffer</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE CORBA::Octet *</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::get_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Boolean orphan)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE CORBA::Octet &amp;</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong i)</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE const CORBA::Octet &amp;</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong i) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_TEMPLATE_METHOD_SPECIALIZATION ACE_INLINE void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::replace</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sequence_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sequence__T_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Sequence_T</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Sequence_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sequence_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sequence__T_8h.html</filename>
    <class kind="class">TAO_Bounded_Array_Sequence</class>
    <class kind="class">TAO_Bounded_Object_Sequence</class>
    <class kind="class">TAO_Bounded_Pseudo_Sequence</class>
    <class kind="class">TAO_Bounded_Sequence</class>
    <class kind="class">TAO_Bounded_String_Sequence</class>
    <class kind="class">TAO_Bounded_Valuetype_Sequence</class>
    <class kind="class">TAO_Bounded_WString_Sequence</class>
    <class kind="class">TAO_Object_Manager</class>
    <class kind="class">TAO_Pseudo_Object_Manager</class>
    <class kind="class">TAO_Unbounded_Array_Sequence</class>
    <class kind="class">TAO_Unbounded_Object_Sequence</class>
    <class kind="class">TAO_Unbounded_Pseudo_Sequence</class>
    <class kind="class">TAO_Unbounded_Sequence</class>
    <class kind="class">TAO_Unbounded_Valuetype_Sequence</class>
    <class kind="class">TAO_Valuetype_Manager</class>
  </compound>
  <compound kind="file">
    <name>Sequence_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sequence__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Server_Strategy_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Server__Strategy__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Server_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Server_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Server_Strategy_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Server__Strategy__Factory_8h.html</filename>
    <class kind="class">TAO_Server_Strategy_Factory</class>
    <class kind="struct">TAO_Server_Strategy_Factory::Active_Object_Map_Creation_Parameters</class>
    <member kind="enumeration">
      <name>TAO_Demux_Strategy</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_LINEAR</name>
      <anchor>a4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_DYNAMIC_HASH</name>
      <anchor>a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ACTIVE_DEMUX</name>
      <anchor>a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_USER_DEFINED</name>
      <anchor>a4a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Callbacks.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Service__Callbacks_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Service_Callbacks</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Service_Callbacks</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Callbacks.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Service__Callbacks_8h.html</filename>
    <class kind="class">TAO_Service_Callbacks</class>
  </compound>
  <compound kind="file">
    <name>Service_Callbacks.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Service__Callbacks_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Service_Context.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Service__Context_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Service_Context</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Service_Context</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Service_Context.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Service__Context_8h.html</filename>
    <class kind="class">TAO_Service_Context</class>
  </compound>
  <compound kind="file">
    <name>Service_Context.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Service__Context_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Services.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Services_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEDETAIL__TAO_SEQ_OCTET_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEOPTION_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEOPTION_CS_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEDETAIL_CS_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEDETAIL_CS_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_ServiceDetail__tao_seq_Octet</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_sequence, sizeof(_oc_CORBA_ServiceDetail__tao_seq_Octet),(char *)&amp;_oc_CORBA_ServiceDetail__tao_seq_Octet, 0, sizeof(CORBA::ServiceDetail::_tao_seq_Octet))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ServiceDetail &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ServiceDetail *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ServiceDetail *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ServiceInformation &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ServiceInformation *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ServiceInformation *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_ServiceDetail::_tao_seq_Octet &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ServiceDetail::_tao_seq_Octet &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_ServiceDetail &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ServiceDetail &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_ServiceInformation::_tao_seq_ServiceOption &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ServiceInformation::_tao_seq_ServiceOption &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_ServiceInformation::_tao_seq_ServiceDetail &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ServiceInformation::_tao_seq_ServiceDetail &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_ServiceInformation &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ServiceInformation &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_ServiceDetail__tao_seq_Octet</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Services.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Services_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEDETAIL__TAO_SEQ_OCTET_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEOPTION_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEOPTION_CI_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__TAO_UNBOUNDED_SEQUENCE_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEDETAIL_CI_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEINFORMATION__TAO_SEQ_SERVICEDETAIL_CI_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Services_Activate.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Services__Activate_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Services_Activate</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Services_Activate</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Services_Activate.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Services__Activate_8h.html</filename>
    <class kind="class">TAO_Services_Activate</class>
  </compound>
  <compound kind="file">
    <name>skip.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>skip_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_skip</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_skip</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringSeq.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>StringSeq_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>StringSeqC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>StringSeqC_8cpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_STRINGSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WSTRINGSEQ_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_StringSeq</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_StringSeq),(char *)&amp;_oc_CORBA_StringSeq, 0, sizeof(CORBA_StringSeq))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_WStringSeq</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_CORBA_WStringSeq),(char *)&amp;_oc_CORBA_WStringSeq, 0, sizeof(CORBA_WStringSeq))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA_StringSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a8</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA_StringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA_StringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA_WStringSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA_WStringSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA_WStringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA_WStringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_StringSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_StringSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA_WStringSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_WStringSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_StringSeq</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_WStringSeq</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringSeqC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>StringSeqC_8h.html</filename>
    <class kind="class">CORBA_StringSeq</class>
    <class kind="class">CORBA_StringSeq_out</class>
    <class kind="class">CORBA_StringSeq_var</class>
    <class kind="class">CORBA_WStringSeq</class>
    <class kind="class">CORBA_WStringSeq_out</class>
    <class kind="class">CORBA_WStringSeq_var</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_STRINGSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_STRINGSEQ___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_STRINGSEQ___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WSTRINGSEQ_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WSTRINGSEQ___VAR_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WSTRINGSEQ___OUT_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA_StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, CORBA_StringSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA_StringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA_StringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA_WStringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, CORBA_WStringSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA_WStringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA_WStringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA_StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA_WStringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_WStringSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringSeqC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>StringSeqC_8i.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_STRINGSEQ_CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WSTRINGSEQ_CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA_WStringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean TAO_Export</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA_WStringSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stub.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Stub_8cpp.html</filename>
    <class kind="class">TAO_Synchronous_Cancellation_Required</class>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Stub</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Stub</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stub.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Stub_8h.html</filename>
    <class kind="struct">TAO_Exception_Data</class>
    <class kind="class">TAO_Stub</class>
    <class kind="class">TAO_Stub_Auto_Ptr</class>
    <member kind="typedef">
      <type>CORBA::Exception *(*</type>
      <name>TAO_Exception_Alloc</name>
      <anchor>a0</anchor>
      <arglist>)(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stub.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Stub_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Stub_Factory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Stub__Factory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Stub_Factory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Stub_Factory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stub_Factory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Stub__Factory_8h.html</filename>
    <class kind="class">TAO_Stub_Factory</class>
  </compound>
  <compound kind="file">
    <name>Sync_Strategies.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sync__Strategies_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Sync_Strategies</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Sync_Strategies</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sync_Strategies.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sync__Strategies_8h.html</filename>
    <class kind="class">TAO_Delayed_Buffering_Sync_Strategy</class>
    <class kind="class">TAO_Eager_Buffering_Sync_Strategy</class>
    <class kind="class">TAO_Sync_Strategy</class>
    <class kind="class">TAO_Transport_Sync_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Sync_Strategies.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Sync__Strategies_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Synch_Queued_Message.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Synch__Queued__Message_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Synch_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Synch_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synch_Queued_Message.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Synch__Queued__Message_8h.html</filename>
    <class kind="class">TAO_Synch_Queued_Message</class>
  </compound>
  <compound kind="file">
    <name>Synch_Reply_Dispatcher.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Synch__Reply__Dispatcher_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Synch_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Synch_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synch_Reply_Dispatcher.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Synch__Reply__Dispatcher_8h.html</filename>
    <class kind="class">TAO_Synch_Reply_Dispatcher</class>
  </compound>
  <compound kind="file">
    <name>Tagged_Components.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Tagged__Components_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Tagged_Components</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Tagged_Components</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tagged_Components.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Tagged__Components_8h.html</filename>
    <class kind="class">TAO_Tagged_Components</class>
  </compound>
  <compound kind="file">
    <name>Tagged_Components.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Tagged__Components_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Tagged_Profile.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Tagged__Profile_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Tagged_Profile</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Tagged_Profile</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tagged_Profile.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Tagged__Profile_8h.html</filename>
    <class kind="class">TAO_Tagged_Profile</class>
  </compound>
  <compound kind="file">
    <name>Tagged_Profile.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Tagged__Profile_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TAO.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO_8pidl.html</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>TAO_Export.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Export_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_Export</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SINGLETON_DECLARATION</name>
      <anchor>a2</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SINGLETON_DECLARE</name>
      <anchor>a3</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Internal.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Internal_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Internal</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Internal</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Internal.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Internal_8h.html</filename>
    <class kind="class">TAO_Internal</class>
  </compound>
  <compound kind="file">
    <name>TAO_Server_Request.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Server__Request_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Server_Request</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Server_Request</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Server_Request.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Server__Request_8h.html</filename>
    <class kind="class">TAO_ServerRequest</class>
  </compound>
  <compound kind="file">
    <name>TAO_Server_Request.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Server__Request_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Singleton_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Singleton</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Singleton</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Singleton_8h.html</filename>
    <class kind="class">TAO_Singleton</class>
    <class kind="class">TAO_TSS_Singleton</class>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Singleton_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Singleton__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TAO_Singleton_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Singleton_Manager_cleanup_destroyer</name>
      <anchor>a2</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TAO_Singleton_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Singleton__Manager_8h.html</filename>
    <class kind="class">TAO_Singleton_Manager</class>
    <member kind="function">
      <type>void</type>
      <name>TAO_Singleton_Manager_cleanup_destroyer</name>
      <anchor>a0</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton_Manager.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAO__Singleton__Manager_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>TAOC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOC_8cpp.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TAO_BufferingConstraintMode</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_TAO_BufferingConstraintMode),(char *)&amp;_oc_TAO_BufferingConstraintMode, 0, sizeof(TAO::BufferingConstraintMode))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(TAO) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TAO_BufferingConstraint</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_TAO_BufferingConstraint),(char *)&amp;_oc_TAO_BufferingConstraint, 0, sizeof(TAO::BufferingConstraint))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::ULong) TAO_NAMESPACE_BEGIN(TAO) TAO_NAMESPACE_DEFINE(const CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TAO_SyncScope</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_TAO_SyncScope),(char *)&amp;_oc_TAO_SyncScope, 0, sizeof(TAO::SyncScope))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TAO::BufferingConstraint *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TAO::BufferingConstraint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a8</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TAO::BufferingConstraint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_TAO_BufferingConstraintMode</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAOC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_BUFFERINGCONSTRAINTPOLICY___PTR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_BUFFERINGCONSTRAINTPOLICY___VAR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_BUFFERINGCONSTRAINTPOLICY___OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_BUFFERINGCONSTRAINTPOLICY_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, TAO::BufferingConstraint *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, TAO::BufferingConstraint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const TAO::BufferingConstraint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO::BufferingConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO::BufferingConstraint &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAOC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOC_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TAOS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOS_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>TAOS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>TAOS.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOS_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TAOS_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOS__T_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>TAOS_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOS__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>TAOS_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TAOS__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>target_specification.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>target__specification_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_target_specification</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_target_specification</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>target_specification.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>target__specification_8h.html</filename>
    <class kind="class">TAO_Target_Specification</class>
  </compound>
  <compound kind="file">
    <name>target_specification.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>target__specification_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Thread__Lane__Resources_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Thread_Lane_Resources</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Thread_Lane_Resources</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Thread__Lane__Resources_8h.html</filename>
    <class kind="class">TAO_Thread_Lane_Resources</class>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Thread__Lane__Resources_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Thread__Lane__Resources__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Thread_Lane_Resources_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Thread_Lane_Resources_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Thread__Lane__Resources__Manager_8h.html</filename>
    <class kind="class">TAO_Thread_Lane_Resources_Manager</class>
    <class kind="class">TAO_Thread_Lane_Resources_Manager_Factory</class>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources_Manager.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Thread__Lane__Resources__Manager_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TimeBase.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBase_8pidl.html</filename>
    <namespace>TimeBase</namespace>
  </compound>
  <compound kind="file">
    <name>TimeBaseC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseC_8cpp.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TimeBase_TimeT</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_TimeBase_TimeT),(char *)&amp;_oc_TimeBase_TimeT, 0, sizeof(TimeBase::TimeT))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(TimeBase) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TimeBase_InaccuracyT</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_TimeBase_InaccuracyT),(char *)&amp;_oc_TimeBase_InaccuracyT, 0, sizeof(TimeBase::InaccuracyT))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TimeBase_TdfT</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::tk_alias, sizeof(_oc_TimeBase_TdfT),(char *)&amp;_oc_TimeBase_TdfT, 0, sizeof(TimeBase::TdfT))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TimeBase_UtcT</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_TimeBase_UtcT),(char *)&amp;_oc_TimeBase_UtcT, 0, sizeof(TimeBase::UtcT))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_TimeBase_IntervalT</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_struct, sizeof(_oc_TimeBase_IntervalT),(char *)&amp;_oc_TimeBase_IntervalT, 0, sizeof(TimeBase::IntervalT))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const TimeBase::UtcT &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TimeBase::UtcT *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TimeBase::UtcT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TimeBase::UtcT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const TimeBase::IntervalT &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TimeBase::IntervalT *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TimeBase::IntervalT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TimeBase::IntervalT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_TimeBase_TimeT</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_TimeBase_IntervalT</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeBaseC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Any &amp;, TimeBase::UtcT *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::Any &amp;, TimeBase::UtcT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Any &amp;, const TimeBase::UtcT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const TimeBase::IntervalT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, TimeBase::IntervalT *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, TimeBase::IntervalT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const TimeBase::IntervalT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TimeBase::UtcT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, TimeBase::UtcT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TimeBase::IntervalT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;, TimeBase::IntervalT &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeBaseC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseC_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TimeBaseS.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseS_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>TimeBaseS.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseS_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>TimeBaseS.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseS_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>TimeBaseS_T.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseS__T_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>TimeBaseS_T.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseS__T_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>TimeBaseS_T.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TimeBaseS__T_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Timeprobe.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Timeprobe_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_PP_TIMEPROBE</name>
      <anchor>a0</anchor>
      <arglist>(id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FUNCTION_PP_TIMEPROBE</name>
      <anchor>a1</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MINIMAL_TIMEPROBE</name>
      <anchor>a2</anchor>
      <arglist>(id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Transport</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump_iov</name>
      <anchor>a2</anchor>
      <arglist>(iovec *iov, int iovcnt, int id, size_t current_transfer, const char *location)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Transport</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport_8h.html</filename>
    <class kind="class">TAO_Synch_Refcountable</class>
    <class kind="class">TAO_Transport</class>
  </compound>
  <compound kind="file">
    <name>Transport.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Transport_Cache_Manager.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Cache__Manager_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_TAO_Transport_Cache_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_TAO_Transport_Cache_Manager</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport_Cache_Manager.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Cache__Manager_8h.html</filename>
    <class kind="class">TAO_Transport_Cache_Manager</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LACKS_PRAGMA_ONCE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; ACE_Event_Handler *&gt;</type>
      <name>TAO_EventHandlerSet</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; ACE_Event_Handler *&gt;</type>
      <name>TAO_EventHandlerSetIterator</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport_Cache_Manager.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Cache__Manager_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Transport_Descriptor_Interface.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Descriptor__Interface_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Transport_Descriptor_Interface</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Transport_Descriptor_Interface</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport_Descriptor_Interface.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Descriptor__Interface_8h.html</filename>
    <class kind="class">TAO_Transport_Descriptor_Interface</class>
  </compound>
  <compound kind="file">
    <name>Transport_Descriptor_Interface.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Descriptor__Interface_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>Transport_Mux_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Mux__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Transport_Mut_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Transport_Mut_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport_Mux_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Mux__Strategy_8h.html</filename>
    <class kind="class">TAO_Transport_Mux_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Transport_Timer.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Timer_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Transport_Timer</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Transport_Timer</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport_Timer.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Transport__Timer_8h.html</filename>
    <class kind="class">TAO_Transport_Timer</class>
  </compound>
  <compound kind="file">
    <name>try_macros.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>try__macros_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>Typecode.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Typecode_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Typecode</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const CORBA::TypeCode *x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::TypeCode *&amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Typecode</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typecode.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Typecode_8h.html</filename>
    <class kind="class">CORBA_TypeCode</class>
    <class kind="class">CORBA_TypeCode::BadKind</class>
    <class kind="class">CORBA_TypeCode::Bounds</class>
    <class kind="class">CORBA_TypeCode_out</class>
    <class kind="class">CORBA_TypeCode_var</class>
    <class kind="class">TAO_TypeCodes</class>
    <class kind="class">TC_Private_State</class>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const CORBA::TypeCode *x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::TypeCode *&amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typecode.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Typecode_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>Typecode_Constants.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Typecode__Constants_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Typecode_Constants</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(CORBA</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Typecode_Constants</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCodeFactory_Adapter.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TypeCodeFactory__Adapter_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_TypeCodeFactory_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_TypeCodeFactory_Adapter</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCodeFactory_Adapter.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>TypeCodeFactory__Adapter_8h.html</filename>
    <class kind="class">TAO_TypeCodeFactory_Adapter</class>
  </compound>
  <compound kind="file">
    <name>ValueBase.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueBase_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ValueBase</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ValueBase</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ValueBase.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueBase_8h.html</filename>
    <class kind="class">CORBA_DefaultValueRefCountBase</class>
    <class kind="class">CORBA_ValueBase</class>
    <class kind="class">TAO_OBV_GIOP_Flags</class>
  </compound>
  <compound kind="file">
    <name>ValueBase.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueBase_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ValueFactory.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueFactory_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ValueFactory</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ValueFactory</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ValueFactory.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueFactory_8h.html</filename>
    <class kind="class">CORBA_ValueFactoryBase</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBV_CREATE_RETURN_TYPE</name>
      <anchor>a0</anchor>
      <arglist>(TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBV_REGISTER_FACTORY</name>
      <anchor>a1</anchor>
      <arglist>(FACTORY, VALUETYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ValueFactory.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueFactory_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>ValueFactory_Map.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueFactory__Map_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_ValueFactory_Map</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_ValueFactory_Map</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ValueFactory_Map.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueFactory__Map_8h.html</filename>
    <class kind="class">TAO_ValueFactory_Map</class>
    <member kind="typedef">
      <type>TAO_Singleton&lt; TAO_ValueFactory_Map, TAO_SYNCH_MUTEX &gt;</type>
      <name>TAO_VALUEFACTORY_MAP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ValueFactory_Map.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>ValueFactory__Map_8i.html</filename>
  </compound>
  <compound kind="file">
    <name>varbase.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>varbase_8h.html</filename>
    <class kind="class">TAO_Base_var</class>
  </compound>
  <compound kind="file">
    <name>Version.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Version_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAJOR_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MINOR_VERSION</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_BETA_VERSION</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_VERSION</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wait_On_Leader_Follower.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__On__Leader__Follower_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Wait_On_Leader_Follower</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Wait_On_Leader_Follower</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wait_On_Leader_Follower.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__On__Leader__Follower_8h.html</filename>
    <class kind="class">TAO_Wait_On_Leader_Follower</class>
  </compound>
  <compound kind="file">
    <name>Wait_On_Reactor.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__On__Reactor_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Wait_On_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Wait_On_Reactor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wait_On_Reactor.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__On__Reactor_8h.html</filename>
    <class kind="class">TAO_Wait_On_Reactor</class>
  </compound>
  <compound kind="file">
    <name>Wait_On_Read.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__On__Read_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Wait_On_Read</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Wait_On_Read</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wait_On_Read.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__On__Read_8h.html</filename>
    <class kind="class">TAO_Wait_On_Read</class>
  </compound>
  <compound kind="file">
    <name>Wait_Strategy.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__Strategy_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_Wait_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_Wait_Strategy</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wait_Strategy.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__Strategy_8h.html</filename>
    <class kind="class">TAO_Wait_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Wait_Strategy.inl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>Wait__Strategy_8inl.html</filename>
  </compound>
  <compound kind="file">
    <name>WrongTransaction.pidl</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>WrongTransaction_8pidl.html</filename>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>WrongTransactionC.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>WrongTransactionC_8cpp.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode</type>
      <name>_tc_TAO_tc_CORBA_WrongTransaction</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_except, sizeof(_oc_CORBA_WrongTransaction),(char *)&amp;_oc_CORBA_WrongTransaction, 0, sizeof(CORBA::WrongTransaction))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_NAMESPACE_TYPE</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr) TAO_NAMESPACE_BEGIN(CORBA) TAO_NAMESPACE_DEFINE(</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::WrongTransaction &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::WrongTransaction *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::WrongTransaction *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::WrongTransaction *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::Long</type>
      <name>_oc_CORBA_WrongTransaction</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WrongTransactionC.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>WrongTransactionC_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WRONGTRANSACTION_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::WrongTransaction *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::WrongTransaction *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::WrongTransaction *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::WrongTransaction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::WrongTransaction &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WrongTransactionC.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>WrongTransactionC_8i.html</filename>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::WrongTransaction &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::WrongTransaction &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>xt_resource.cpp</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>xt__resource_8cpp.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get_rcsid_tao_xt_resource</name>
      <anchor>a1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>rcsid_tao_xt_resource</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>xt_resource.h</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>xt__resource_8h.html</filename>
    <class kind="class">TAO_XT_Resource_Factory</class>
  </compound>
  <compound kind="file">
    <name>xt_resource.i</name>
    <path>/private/gmayer/soft/pkg/ACE+TAO-1.2.2/TAO/tao/</path>
    <filename>xt__resource_8i.html</filename>
  </compound>
  <compound kind="class">
    <name>_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</name>
    <filename>class__TAO__Unbounded__Sequence__TAO__IIOPEndpointSequence.html</filename>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong maximum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, TAO_IIOP_Endpoint_Info *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</name>
      <anchor>a3</anchor>
      <arglist>(const _TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const _TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOP_Endpoint_Info &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong i)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_IIOP_Endpoint_Info &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOP_Endpoint_Info *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_IIOP_Endpoint_Info *</type>
      <name>get_buffer</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, TAO_IIOP_Endpoint_Info *data, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_IIOP_Endpoint_Info *</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(TAO_IIOP_Endpoint_Info *buffer)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CONV_FRAME::CodeSetComponent</name>
    <filename>structCONV__FRAME_1_1CodeSetComponent.html</filename>
    <member kind="variable">
      <type>CodeSetId</type>
      <name>native_code_set</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sequence&lt; CodeSetId &gt;</type>
      <name>conversion_code_sets</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CONV_FRAME::CodeSetComponentInfo</name>
    <filename>structCONV__FRAME_1_1CodeSetComponentInfo.html</filename>
    <member kind="variable">
      <type>CodeSetComponent</type>
      <name>ForCharData</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CodeSetComponent</type>
      <name>ForWcharData</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CONV_FRAME::CodeSetContext</name>
    <filename>structCONV__FRAME_1_1CodeSetContext.html</filename>
    <member kind="variable">
      <type>CodeSetId</type>
      <name>char_data</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CodeSetId</type>
      <name>wchar_data</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::Bounds</name>
    <filename>exceptionCORBA_1_1Bounds.html</filename>
  </compound>
  <compound kind="interface">
    <name>CORBA::ConstructionPolicy</name>
    <filename>interfaceCORBA_1_1ConstructionPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="function">
      <type>void</type>
      <name>make_domain_manager</name>
      <anchor>a0</anchor>
      <arglist>(in InterfaceDef object_type, in boolean constr_policy)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::Current</name>
    <filename>interfaceCORBA_1_1Current.html</filename>
  </compound>
  <compound kind="interface">
    <name>CORBA::DIIPollable</name>
    <filename>interfaceCORBA_1_1DIIPollable.html</filename>
    <base>CORBA::Pollable</base>
  </compound>
  <compound kind="interface">
    <name>CORBA::DomainManager</name>
    <filename>interfaceCORBA_1_1DomainManager.html</filename>
    <member kind="function">
      <type>Policy</type>
      <name>get_domain_policy</name>
      <anchor>a0</anchor>
      <arglist>(in PolicyType policy_type)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::InvalidPolicies</name>
    <filename>exceptionCORBA_1_1InvalidPolicies.html</filename>
    <member kind="variable">
      <type>sequence&lt; unsigned short &gt;</type>
      <name>indices</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sequence&lt; unsigned short &gt;</type>
      <name>indices</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::Object</name>
    <filename>interfaceCORBA_1_1Object.html</filename>
    <member kind="function">
      <type>Policy</type>
      <name>get_policy</name>
      <anchor>a0</anchor>
      <arglist>(in PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>Policy</type>
      <name>get_client_policy</name>
      <anchor>a1</anchor>
      <arglist>(in PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>Object</type>
      <name>set_policy_overrides</name>
      <anchor>a2</anchor>
      <arglist>(in PolicyList policies, in SetOverrideType set_add)</arglist>
    </member>
    <member kind="function">
      <type>PolicyList</type>
      <name>get_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(in PolicyTypeSeq types)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>validate_connection</name>
      <anchor>a4</anchor>
      <arglist>(out PolicyList inconsistent_policies)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::ORB</name>
    <filename>interfaceCORBA_1_1ORB.html</filename>
  </compound>
  <compound kind="exception">
    <name>CORBA::ORB::InvalidName</name>
    <filename>exceptionCORBA_1_1ORB_1_1InvalidName.html</filename>
  </compound>
  <compound kind="interface">
    <name>CORBA::Policy</name>
    <filename>interfaceCORBA_1_1Policy.html</filename>
    <member kind="function">
      <type>Policy</type>
      <name>copy</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute PolicyType</type>
      <name>policy_type</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::PolicyCurrent</name>
    <filename>interfaceCORBA_1_1PolicyCurrent.html</filename>
    <base>CORBA::PolicyManager</base>
    <base>CORBA::Current</base>
  </compound>
  <compound kind="exception">
    <name>CORBA::PolicyError</name>
    <filename>exceptionCORBA_1_1PolicyError.html</filename>
    <member kind="variable">
      <type>PolicyErrorCode</type>
      <name>reason</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::PolicyManager</name>
    <filename>interfaceCORBA_1_1PolicyManager.html</filename>
    <member kind="function">
      <type>PolicyList</type>
      <name>get_policy_overrides</name>
      <anchor>a0</anchor>
      <arglist>(in PolicyTypeSeq ts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy_overrides</name>
      <anchor>a1</anchor>
      <arglist>(in PolicyList policies, in SetOverrideType set_add)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::Pollable</name>
    <filename>interfaceCORBA_1_1Pollable.html</filename>
    <member kind="function">
      <type>boolean</type>
      <name>is_ready</name>
      <anchor>a0</anchor>
      <arglist>(in unsigned long timeout)</arglist>
    </member>
    <member kind="function">
      <type>PollableSet</type>
      <name>create_pollable_set</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::PollableSet</name>
    <filename>interfaceCORBA_1_1PollableSet.html</filename>
    <member kind="function">
      <type>DIIPollable</type>
      <name>create_dii_pollable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_pollable</name>
      <anchor>a1</anchor>
      <arglist>(in Pollable potential)</arglist>
    </member>
    <member kind="function">
      <type>Pollable</type>
      <name>poll</name>
      <anchor>a2</anchor>
      <arglist>(in unsigned long timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a3</anchor>
      <arglist>(in Pollable potential)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>number_left</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::PollableSet::NoPossiblePollable</name>
    <filename>exceptionCORBA_1_1PollableSet_1_1NoPossiblePollable.html</filename>
  </compound>
  <compound kind="exception">
    <name>CORBA::PollableSet::UnknownPollable</name>
    <filename>exceptionCORBA_1_1PollableSet_1_1UnknownPollable.html</filename>
  </compound>
  <compound kind="class">
    <name>CORBA::UserException</name>
    <filename>classCORBA_1_1UserException.html</filename>
  </compound>
  <compound kind="exception">
    <name>CORBA::WrongTransaction</name>
    <filename>exceptionCORBA_1_1WrongTransaction.html</filename>
  </compound>
  <compound kind="class">
    <name>CORBA_Any</name>
    <filename>classCORBA__Any.html</filename>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_boolean</type>
      <name>from_boolean</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_octet</type>
      <name>from_octet</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_char</type>
      <name>from_char</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_wchar</type>
      <name>from_wchar</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_string</type>
      <name>from_string</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_wstring</type>
      <name>from_wstring</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_boolean</type>
      <name>to_boolean</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_char</type>
      <name>to_char</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_wchar</type>
      <name>to_wchar</name>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_octet</type>
      <name>to_octet</name>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_string</type>
      <name>to_string</name>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_wstring</type>
      <name>to_wstring</name>
      <anchor>s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>_tao_destructor</name>
      <anchor>s12</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Any_ptr</type>
      <name>_ptr_type</name>
      <anchor>s13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Any_var</type>
      <name>_var_type</name>
      <anchor>s14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNINITIALIZED_type</name>
      <anchor>s18s15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VALUE_WITHOUT_TYPE</name>
      <anchor>s18s16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSUPPORTED_OPERATION</name>
      <anchor>s18s17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr type, CORBA::UShort dummy, int byte_order, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_Any &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_Any</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Short)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::UShort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::LongLong)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULongLong)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Float)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::LongDouble)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA_Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA_Any_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Object_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Short &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::UShort &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Long &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::ULong &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::LongLong &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::ULongLong &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Float &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(CORBA::Double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::LongDouble &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA_Any &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a32</anchor>
      <arglist>(const CORBA_Any *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(CORBA::TypeCode_ptr &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a34</anchor>
      <arglist>(const char *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a35</anchor>
      <arglist>(const CORBA::WChar *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a36</anchor>
      <arglist>(from_boolean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a37</anchor>
      <arglist>(from_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a38</anchor>
      <arglist>(from_wchar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a39</anchor>
      <arglist>(from_octet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a40</anchor>
      <arglist>(from_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a41</anchor>
      <arglist>(from_wstring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a42</anchor>
      <arglist>(const CORBA_Exception &amp;exception)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a43</anchor>
      <arglist>(CORBA_Exception *exception)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a44</anchor>
      <arglist>(to_boolean) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a45</anchor>
      <arglist>(to_octet) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a46</anchor>
      <arglist>(to_char) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a47</anchor>
      <arglist>(to_wchar) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a48</anchor>
      <arglist>(to_string) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a49</anchor>
      <arglist>(to_wstring) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a50</anchor>
      <arglist>(to_object) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>type</name>
      <anchor>a51</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a52</anchor>
      <arglist>(CORBA::TypeCode_ptr type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>value</name>
      <anchor>a53</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>any_owns_data</name>
      <anchor>a54</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>_tao_get_cdr</name>
      <anchor>a55</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>_tao_byte_order</name>
      <anchor>a56</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_replace</name>
      <anchor>a57</anchor>
      <arglist>(CORBA::TypeCode_ptr, int byte_order, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_replace</name>
      <anchor>a58</anchor>
      <arglist>(CORBA::TypeCode_ptr type, int byte_order, const ACE_Message_Block *mb, CORBA::Boolean any_owns_data, void *value, CORBA::Any::_tao_destructor destructor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_replace</name>
      <anchor>a59</anchor>
      <arglist>(CORBA::TypeCode_ptr type, CORBA::Boolean any_owns_data, void *value, CORBA::Any::_tao_destructor destructor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_encode</name>
      <anchor>a60</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_decode</name>
      <anchor>a61</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_string_destructor</name>
      <anchor>d1</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_wstring_destructor</name>
      <anchor>d2</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_tc_destructor</name>
      <anchor>d3</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>free_value</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>c0</anchor>
      <arglist>(unsigned char)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>c1</anchor>
      <arglist>(unsigned char &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::TypeCode_var</type>
      <name>type_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>byte_order_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>cdr_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>any_owns_data_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>value_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Any::_tao_destructor</type>
      <name>destructor_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CORBA_NVList</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Marshal_Any</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA_Any::to_object</name>
    <filename>structCORBA__Any_1_1to__object.html</filename>
    <member kind="function">
      <type></type>
      <name>to_object</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_Object_out obj)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Object_ptr &amp;</type>
      <name>ref_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Any_out</name>
    <filename>classCORBA__Any__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Any_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_Any *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Any_var &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Any_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_Any_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Any *p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_Any *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Any *&amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any *&amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any *</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_Any_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Any *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Any_var</name>
    <filename>classCORBA__Any__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Any_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Any *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Any_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Any_var &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_Any_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Any *a)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_Any_var &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_Any *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Any *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_Any &amp;</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any *&amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Any *</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Any *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Current</name>
    <filename>classCORBA__Current.html</filename>
    <base virtualness="virtual">CORBA_Object</base>
    <member kind="typedef">
      <type>CORBA_Current_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Current_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>_tao_QueryInterface</name>
      <anchor>a0</anchor>
      <arglist>(ptr_arith_t type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Current_ptr</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Current_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Current_ptr</type>
      <name>_narrow</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Current_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>d2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Current_ptr</type>
      <name>_nil</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>_tao_class_id</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_Current</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~CORBA_Current</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_Current</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_Current &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const CORBA_Current &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Current_out</name>
    <filename>classCORBA__Current__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Current_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_Current_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Current_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Current_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Current_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Current_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_Current_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA_Current_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_Current_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Current_ptr &amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Current_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Current_var</name>
    <filename>classCORBA__Current__var.html</filename>
    <base>TAO_Base_var</base>
    <member kind="function">
      <type></type>
      <name>CORBA_Current_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Current_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Current_ptr p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Current_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Current_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_Current_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Current_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_Current_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_Current_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Current_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Current_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Current_ptr</type>
      <name>tao_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Current_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>tao_release</name>
      <anchor>d1</anchor>
      <arglist>(CORBA_Current_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Current_ptr</type>
      <name>tao_nil</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Current_ptr</type>
      <name>tao_narrow</name>
      <anchor>d3</anchor>
      <arglist>(CORBA::Object *ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object *</type>
      <name>tao_upcast</name>
      <anchor>d4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_Current_var</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Base_var &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_Current_var &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Base_var &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Current_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_DefaultValueRefCountBase</name>
    <filename>classCORBA__DefaultValueRefCountBase.html</filename>
    <base virtualness="virtual">CORBA_ValueBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>_refcount_value</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_add_ref</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_remove_ref</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_tao_refcount_value</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_DefaultValueRefCountBase</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_DefaultValueRefCountBase</name>
      <anchor>b1</anchor>
      <arglist>(const CORBA_DefaultValueRefCountBase &amp;)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~CORBA_DefaultValueRefCountBase</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_DefaultValueRefCountBase &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>_tao_reference_count_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>_tao_reference_count_lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Environment</name>
    <filename>classCORBA__Environment.html</filename>
    <member kind="typedef">
      <type>CORBA_Environment_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Environment_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment</name>
      <anchor>a1</anchor>
      <arglist>(const CORBA_Environment &amp;ACE_TRY_ENV)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Environment &amp;ACE_TRY_ENV)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_Environment</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exception_type</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>exception_id</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_exception</name>
      <anchor>a7</anchor>
      <arglist>(const char *info, FILE *f=stdout) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Environment *</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Environment *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Environment *</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Environment &amp;</type>
      <name>default_environment</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA_Exception *exception void</type>
      <name>const</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void exception CORBA_Exception *</type>
      <name>ex</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_Environment</name>
      <anchor>c0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Exception *</type>
      <name>exception_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Environment *</type>
      <name>previous_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_ORB_Core</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Environment_out</name>
    <filename>classCORBA__Environment__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_Environment_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Environment_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Environment_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_Environment_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Environment_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Environment_ptr &amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_Environment_out &amp;</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_Environment_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Environment_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Environment_var</name>
    <filename>classCORBA__Environment__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Environment_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Environment_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Environment_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_Environment_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Environment_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_Environment_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_Environment_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Environment_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Environment_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Exception</name>
    <filename>classCORBA__Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Exception</name>
      <anchor>a0</anchor>
      <arglist>(const CORBA_Exception &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Exception &amp;</type>
      <name>operator=</name>
      <anchor>a1</anchor>
      <arglist>(const CORBA_Exception &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CORBA_Exception</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>_id</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_type</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_is_a</name>
      <anchor>a6</anchor>
      <arglist>(const char *repository_id) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Exception</name>
      <anchor>a7</anchor>
      <arglist>(const char *repository_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_print_exception</name>
      <anchor>a8</anchor>
      <arglist>(const char *info, FILE *f=stdout) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CString</type>
      <name>_info</name>
      <anchor>a9</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA_Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a12</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Exception *</type>
      <name>_downcast</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Exception *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d1</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_Exception</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>id_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_LocalObject</name>
    <filename>classCORBA__LocalObject.html</filename>
    <base virtualness="virtual">CORBA_Object</base>
    <member kind="typedef">
      <type>CORBA_LocalObject_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_LocalObject_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CORBA_LocalObject</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ImplementationDef_ptr</type>
      <name>_get_implementation</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Context_ptr ctx, const CORBA::Char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Context_ptr ctx, const CORBA::Char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::ExceptionList_ptr exclist, CORBA::ContextList_ptr ctxtlist, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Request_ptr</type>
      <name>_request</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Char *operation ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_policy</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_client_policy</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>_set_policy_overrides</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>_get_policy_overrides</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_validate_connection</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::PolicyList_out inconsistent_policies ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>_hash</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong maximum ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_equivalent</name>
      <anchor>a13</anchor>
      <arglist>(CORBA_Object_ptr other_obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ObjectKey *</type>
      <name>_key</name>
      <anchor>a16</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_LocalObject_ptr</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_LocalObject_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_LocalObject_ptr</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_LocalObject_ptr</type>
      <name>_narrow</name>
      <anchor>d2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_LocalObject_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>d3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_LocalObject</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_LocalObject</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_LocalObject &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_LocalObject &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const CORBA_LocalObject &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_LocalObject_out</name>
    <filename>classCORBA__LocalObject__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_LocalObject_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_LocalObject_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_LocalObject_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_LocalObject_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_LocalObject_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_LocalObject_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_LocalObject_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA_LocalObject_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_LocalObject_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_LocalObject_ptr &amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_LocalObject_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_LocalObject_var</name>
    <filename>classCORBA__LocalObject__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_LocalObject_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_LocalObject_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_LocalObject_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_LocalObject_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_LocalObject_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_LocalObject_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_LocalObject_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_LocalObject_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_LocalObject_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_LocalObject_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_LocalObject_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_LocalObject_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_NamedValue</name>
    <filename>classCORBA__NamedValue.html</filename>
    <member kind="typedef">
      <type>CORBA_NamedValue_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_NamedValue_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any_ptr</type>
      <name>value</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Flags</type>
      <name>flags</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_NamedValue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_NamedValue *</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_NamedValue *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_NamedValue *</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_NamedValue</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Any</type>
      <name>any_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Flags</type>
      <name>flags_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>name_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CORBA_ORB</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CORBA_NVList</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CORBA_Request</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_NamedValue_out</name>
    <filename>classCORBA__NamedValue__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_NamedValue_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_NamedValue_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NamedValue_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_NamedValue_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NamedValue_out</name>
      <anchor>a2</anchor>
      <arglist>(CORBA_NamedValue_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA_NamedValue_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA_NamedValue_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_NamedValue_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_NamedValue_ptr &amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_NamedValue_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_NamedValue_var</name>
    <filename>classCORBA__NamedValue__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_NamedValue_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NamedValue_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_NamedValue_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NamedValue_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_NamedValue_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_NamedValue_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_NamedValue_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_NamedValue_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_NamedValue_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_NamedValue_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_NamedValue_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_NVList</name>
    <filename>classCORBA__NVList.html</filename>
    <member kind="typedef">
      <type>CORBA_NVList_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_NVList_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_NVList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>count</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>add_item</name>
      <anchor>a3</anchor>
      <arglist>(const char *, CORBA::Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>add_value</name>
      <anchor>a4</anchor>
      <arglist>(const char *, const CORBA::Any &amp;, CORBA::Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>add_item_consume</name>
      <anchor>a5</anchor>
      <arglist>(char *, CORBA::Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>add_value_consume</name>
      <anchor>a6</anchor>
      <arglist>(char *, CORBA::Any_ptr, CORBA::Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NamedValue_ptr</type>
      <name>item</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong n ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong n ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_incoming_cdr</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, int flag, int &amp;lazy_evaluation ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_encode</name>
      <anchor>a12</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_ORB_Core *orb_core, int flag ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_decode</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, int flag ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>ptr_arith_t</type>
      <name>_tao_target_alignment</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_lazy_has_arguments</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_NVList *</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_NVList *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_NVList *</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_NVList</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_NamedValue_ptr</type>
      <name>add_element</name>
      <anchor>c1</anchor>
      <arglist>(CORBA::Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evaluate</name>
      <anchor>c2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Unbounded_Queue&lt; CORBA_NamedValue_ptr &gt;</type>
      <name>values_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>max_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_InputCDR *</type>
      <name>incoming_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>incoming_flag_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CORBA_ORB</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CORBA_Request</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_NVList_out</name>
    <filename>classCORBA__NVList__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_NVList_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_NVList_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NVList_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_NVList_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NVList_out</name>
      <anchor>a2</anchor>
      <arglist>(CORBA_NVList_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA_NVList_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA_NVList_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_NVList_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_NVList_ptr &amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_NVList_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_NVList_var</name>
    <filename>classCORBA__NVList__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_NVList_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NVList_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_NVList_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_NVList_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_NVList_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_NVList_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_NVList_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_NVList_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_NVList_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_NVList_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_NVList_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_NVList_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Object</name>
    <filename>classCORBA__Object.html</filename>
    <member kind="typedef">
      <type>CORBA_Object_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Object_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CORBA_Object</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a1</anchor>
      <arglist>(const char *logical_type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_collocated</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_local</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Abstract_ServantBase *</type>
      <name>_servant</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ImplementationDef_ptr</type>
      <name>_get_implementation</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Context_ptr ctx, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Context_ptr ctx, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::ExceptionList_ptr exclist, CORBA::ContextList_ptr ctxtlist, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Request_ptr</type>
      <name>_request</name>
      <anchor>a11</anchor>
      <arglist>(const char *operation ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_policy</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_client_policy</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>_set_policy_overrides</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>_get_policy_overrides</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_validate_connection</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::PolicyList_out inconsistent_policies ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>_hash</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::ULong maximum ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_equivalent</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Object_ptr other_obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ObjectKey *</type>
      <name>_key</name>
      <anchor>a19</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TAO_ObjectKey &amp;</type>
      <name>_object_key</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>_tao_QueryInterface</name>
      <anchor>a21</anchor>
      <arglist>(ptr_arith_t type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Object</name>
      <anchor>a24</anchor>
      <arglist>(TAO_Stub *p=0, CORBA::Boolean collocated=0, TAO_Abstract_ServantBase *servant=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>_stubobj</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_proxy_broker</name>
      <anchor>a26</anchor>
      <arglist>(TAO_Object_Proxy_Broker *proxy_broker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Object_Proxy_Broker *</type>
      <name>_proxy_broker</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Object_ptr</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Object_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Object_ptr</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_INLINE_FOR_GNUC CORBA_Object_ptr</type>
      <name>_narrow</name>
      <anchor>d2</anchor>
      <arglist>(CORBA_Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Object_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>d3</anchor>
      <arglist>(CORBA_Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_nil_i</name>
      <anchor>d5</anchor>
      <arglist>(CORBA_Object_ptr obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>_tao_class_id</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_Object</name>
      <anchor>b0</anchor>
      <arglist>(int dummy)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>is_collocated_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Abstract_ServantBase *</type>
      <name>servant_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>is_local_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Object_Proxy_Broker *</type>
      <name>proxy_broker_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_Object</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_Object &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_Object &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const CORBA_Object &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Stub *</type>
      <name>protocol_proxy_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Object_out</name>
    <filename>classCORBA__Object__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Object_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Object_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Object_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Object_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Object_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_Object_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA_Object_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::Object_ptr &amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Object_var</name>
    <filename>classCORBA__Object__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Object_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Object_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Object_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Object_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_Object_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_Object_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::Object_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::Object_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>tao_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>tao_release</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>tao_nil</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>tao_narrow</name>
      <anchor>d3</anchor>
      <arglist>(CORBA::Object *ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object *</type>
      <name>tao_upcast</name>
      <anchor>d4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_OctetSeq</name>
    <filename>classCORBA__OctetSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</base>
    <member kind="typedef">
      <type>CORBA_OctetSeq_var</type>
      <name>_var_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_OctetSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_OctetSeq_out</name>
    <filename>classCORBA__OctetSeq__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_OctetSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_OctetSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_OctetSeq_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_OctetSeq_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_OctetSeq *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_OctetSeq *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_OctetSeq_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_OctetSeq *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_OctetSeq_var</name>
    <filename>classCORBA__OctetSeq__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_OctetSeq *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_OctetSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_OctetSeq_var</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_OctetSeq_var</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_OctetSeq *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq_var &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA_OctetSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq_var &amp;</type>
      <name>operator=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA_OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_OctetSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_OctetSeq &amp;</name>
      <anchor>a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_OctetSeq &amp;</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_OctetSeq &amp;</name>
      <anchor>a12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::ULong index) const</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_OctetSeq &amp;</type>
      <name>in</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq &amp;</type>
      <name>inout</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq *&amp;</type>
      <name>out</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq *</type>
      <name>_retn</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_OctetSeq *</type>
      <name>ptr</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_OctetSeq *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ORB</name>
    <filename>classCORBA__ORB.html</filename>
    <member kind="typedef">
      <type>char *</type>
      <name>ObjectId</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ObjectId_var</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ObjectId_out</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_ObjectIdList</type>
      <name>ObjectIdList</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_ObjectIdList_var</type>
      <name>ObjectIdList_var</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_ObjectIdList_out</type>
      <name>ObjectIdList_out</name>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>ObjectIdList_ptr</name>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_RequestSeq</type>
      <name>RequestSeq</name>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_RequestSeq_var</type>
      <name>RequestSeq_var</name>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_RequestSeq_out</type>
      <name>RequestSeq_out</name>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_ptr</type>
      <name>_ptr_type</name>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_ORB_var</type>
      <name>_var_type</name>
      <anchor>s11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>id</name>
      <anchor>a0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>string_to_object</name>
      <anchor>a1</anchor>
      <arglist>(const char *str ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>object_to_string</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ValueFactory_ptr</type>
      <name>register_value_factory</name>
      <anchor>a3</anchor>
      <arglist>(const char *repository_id, CORBA::ValueFactory_ptr factory ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_value_factory</name>
      <anchor>a4</anchor>
      <arglist>(const char *repository_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ValueFactory_ptr</type>
      <name>lookup_value_factory</name>
      <anchor>a5</anchor>
      <arglist>(const char *repository_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_list</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Long count, CORBA::NVList_ptr &amp;new_list ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_named_value</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::NamedValue_ptr &amp;nmval ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_exception_list</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ExceptionList_ptr &amp;exclist ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_environment</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Environment_ptr &amp;new_env ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_context_list</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ContextList_ptr &amp;ctxtlist ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_default_context</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Context_ptr &amp;ctx ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>get_service_information</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ServiceType service_type, CORBA::ServiceInformation_out service_information ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_multiple_requests_oneway</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA_ORB_RequestSeq &amp;req ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_multiple_requests_deferred</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA_ORB_RequestSeq &amp;req ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_next_response</name>
      <anchor>a15</anchor>
      <arglist>(CORBA_Request_ptr &amp;req ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>poll_next_response</name>
      <anchor>a16</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_struct_tc</name>
      <anchor>a17</anchor>
      <arglist>(const char *id, const char *name, const CORBA::StructMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_union_tc</name>
      <anchor>a18</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr discriminator_type, const CORBA::UnionMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_enum_tc</name>
      <anchor>a19</anchor>
      <arglist>(const char *id, const char *name, const CORBA::EnumMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_alias_tc</name>
      <anchor>a20</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr original_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_exception_tc</name>
      <anchor>a21</anchor>
      <arglist>(const char *id, const char *name, const CORBA::StructMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_interface_tc</name>
      <anchor>a22</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_string_tc</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_wstring_tc</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_fixed_tc</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::UShort digits, CORBA::UShort scale ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_sequence_tc</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::ULong bound, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_array_tc</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::ULong length, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_value_tc</name>
      <anchor>a28</anchor>
      <arglist>(const char *id, const char *name, CORBA::ValueModifier type_modifier, CORBA::TypeCode_ptr concrete_base, const CORBA::ValueMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_value_box_tc</name>
      <anchor>a29</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr boxed_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_native_tc</name>
      <anchor>a30</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_recursive_tc</name>
      <anchor>a31</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_abstract_interface_tc</name>
      <anchor>a32</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_local_interface_tc</name>
      <anchor>a33</anchor>
      <arglist>(const char *id, const char *ame ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchor>a34</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchor>a35</anchor>
      <arglist>(ACE_Time_Value &amp;tv ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchor>a36</anchor>
      <arglist>(ACE_Time_Value *tv ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>work_pending</name>
      <anchor>a37</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>work_pending</name>
      <anchor>a38</anchor>
      <arglist>(ACE_Time_Value &amp;tv ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perform_work</name>
      <anchor>a39</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perform_work</name>
      <anchor>a40</anchor>
      <arglist>(ACE_Time_Value &amp;ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perform_work</name>
      <anchor>a41</anchor>
      <arglist>(ACE_Time_Value *ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::Boolean wait_for_completion=0 ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a43</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a44</anchor>
      <arglist>(const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a45</anchor>
      <arglist>(const char *name, ACE_Time_Value *timeout ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_initial_reference</name>
      <anchor>a46</anchor>
      <arglist>(const char *id, CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList_ptr</type>
      <name>list_initial_services</name>
      <anchor>a47</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>create_policy</name>
      <anchor>a48</anchor>
      <arglist>(CORBA::PolicyType type, const CORBA::Any &amp;val ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Object_ptr</type>
      <name>resolve_root_poa</name>
      <anchor>a49</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_use_omg_ior_format</name>
      <anchor>a52</anchor>
      <arglist>(CORBA::Boolean ior)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_use_omg_ior_format</name>
      <anchor>a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_optimize_collocation_objects</name>
      <anchor>a54</anchor>
      <arglist>(CORBA::Boolean opt)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_optimize_collocation_objects</name>
      <anchor>a55</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a56</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>_tao_ft_client_id</name>
      <anchor>a57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_ft_client_id</name>
      <anchor>a58</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value *</type>
      <name>get_timeout</name>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ORB_ptr</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ORB_ptr orb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ORB_ptr</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init_orb_globals</name>
      <anchor>d2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_unexpected_exception</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tc_ObjectId</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tc_ObjectIdList</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_ORB</name>
      <anchor>b0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~CORBA_ORB</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>CORBA_Object_ptr</type>
      <name>resolve_poa_current</name>
      <anchor>b2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>CORBA_Object_ptr</type>
      <name>resolve_policy_manager</name>
      <anchor>b3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>CORBA_Object_ptr</type>
      <name>resolve_policy_current</name>
      <anchor>b4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>resolve_service</name>
      <anchor>c0</anchor>
      <arglist>(TAO_MCAST_SERVICEID service_id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>ior_string_to_object</name>
      <anchor>c1</anchor>
      <arglist>(const char *ior ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>url_ior_string_to_object</name>
      <anchor>c2</anchor>
      <arglist>(const char *ior ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_shutdown</name>
      <anchor>c3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_timeout</name>
      <anchor>c4</anchor>
      <arglist>(ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_ORB</name>
      <anchor>c5</anchor>
      <arglist>(const CORBA_ORB &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_ORB &amp;</type>
      <name>operator=</name>
      <anchor>c6</anchor>
      <arglist>(const CORBA_ORB &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int</type>
      <name>refcount_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ValueFactory_Map *</type>
      <name>valuetype_factory_map_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>use_omg_ior_format_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value *</type>
      <name>timeout_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>orb_init_count_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_ORB_Core</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend TAO_Export TAO_ORB_Core *</type>
      <name>TAO_ORB_Core_instance</name>
      <anchor>l1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ORB::InvalidName</name>
    <filename>classCORBA__ORB_1_1InvalidName.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidName &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL_NOT_USED) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidName *</type>
      <name>_downcast</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ORB_ObjectIdList</name>
    <filename>classCORBA__ORB__ObjectIdList.html</filename>
    <base>TAO_Unbounded_String_Sequence</base>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, char **buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_ORB_ObjectIdList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_ORB_ObjectIdList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ORB_ObjectIdList_out</name>
    <filename>classCORBA__ORB__ObjectIdList__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_ORB_ObjectIdList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_ORB_ObjectIdList_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_ORB_ObjectIdList_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_ORB_ObjectIdList_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_ORB_ObjectIdList *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_ORB_ObjectIdList *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong slot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_ORB_ObjectIdList_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_ORB_ObjectIdList *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ORB_ObjectIdList_var</name>
    <filename>classCORBA__ORB__ObjectIdList__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_ORB_ObjectIdList *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_ObjectIdList_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_ORB_ObjectIdList_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_ORB_ObjectIdList_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_ORB_ObjectIdList *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_ORB_ObjectIdList_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_ORB_ObjectIdList *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_ORB_ObjectIdList &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_ORB_ObjectIdList &amp;</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_ORB_ObjectIdList &amp;</name>
      <anchor>a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong slot)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_ORB_ObjectIdList &amp;</type>
      <name>in</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList &amp;</type>
      <name>inout</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList *&amp;</type>
      <name>out</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>_retn</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>ptr</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_ORB_ObjectIdList *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ORB_out</name>
    <filename>classCORBA__ORB__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ORB_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_ORB_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_ORB_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA_ORB_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA_ORB_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ORB_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::ORB_ptr &amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ORB_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ORB_var</name>
    <filename>classCORBA__ORB__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ORB_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_ORB_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_ORB_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_ORB_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ORB_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_ORB_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::ORB_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::ORB_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ORB_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Principal</name>
    <filename>classCORBA__Principal.html</filename>
    <member kind="typedef">
      <type>CORBA_Principal_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_Principal_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Principal</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Principal *</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Principal *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_Principal *</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::OctetSeq</type>
      <name>id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~CORBA_Principal</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_Principal &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const CORBA::Principal_ptr &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_Principal</name>
      <anchor>c2</anchor>
      <arglist>(const CORBA::Principal_ptr &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_mutex_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Principal_out</name>
    <filename>classCORBA__Principal__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Principal_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_Principal_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Principal_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Principal_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Principal_out</name>
      <anchor>a2</anchor>
      <arglist>(CORBA_Principal_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA_Principal_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA_Principal_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA_Principal_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Principal_ptr &amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Principal_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_Principal_var</name>
    <filename>classCORBA__Principal__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_Principal_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Principal_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_Principal_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_Principal_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_Principal_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_Principal_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_Principal_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_Principal_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_Principal_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_Principal_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Principal_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_Principal_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_String_out</name>
    <filename>classCORBA__String__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_String_out</name>
      <anchor>a0</anchor>
      <arglist>(char *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_String_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_String_var &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_String_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_String_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_String_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_String_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_String_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(char *p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_String_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const char *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char *&amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_String_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_String_var</name>
    <filename>classCORBA__String__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_String_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_String_var</name>
      <anchor>a1</anchor>
      <arglist>(char *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_String_var</name>
      <anchor>a2</anchor>
      <arglist>(const char *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_String_var</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_String_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_String_var</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_String_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(char *p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_String_var &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const char *p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_String_var &amp;</type>
      <name>operator=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA_String_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char *</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchor>a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong slot)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>in</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>inout</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>out</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>_retn</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_StringSeq</name>
    <filename>classCORBA__StringSeq.html</filename>
    <base>TAO_Unbounded_String_Sequence</base>
    <member kind="typedef">
      <type>CORBA_StringSeq_var</type>
      <name>_var_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, char **buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_StringSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_StringSeq_out</name>
    <filename>classCORBA__StringSeq__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_StringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_StringSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_StringSeq_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_StringSeq_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_StringSeq *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_StringSeq *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_StringSeq_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_StringSeq *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_StringSeq_var</name>
    <filename>classCORBA__StringSeq__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_StringSeq *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_StringSeq_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_StringSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_StringSeq_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_StringSeq *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_StringSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_StringSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_StringSeq &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_StringSeq &amp;</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_StringSeq &amp;</name>
      <anchor>a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_StringSeq *&amp;</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_StringSeq &amp;</type>
      <name>in</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq &amp;</type>
      <name>inout</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq *&amp;</type>
      <name>out</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq *</type>
      <name>_retn</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_StringSeq *</type>
      <name>ptr</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_StringSeq *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_SystemException</name>
    <filename>classCORBA__SystemException.html</filename>
    <base>CORBA_Exception</base>
    <member kind="function">
      <type></type>
      <name>CORBA_SystemException</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_SystemException</name>
      <anchor>a1</anchor>
      <arglist>(const CORBA_SystemException &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_SystemException</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_SystemException &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_SystemException &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>minor</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minor</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong m)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::CompletionStatus</type>
      <name>completed</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completed</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::CompletionStatus c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_is_a</name>
      <anchor>a8</anchor>
      <arglist>(const char *type_id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_print_system_exception</name>
      <anchor>a9</anchor>
      <arglist>(FILE *f=stdout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CString</type>
      <name>_info</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_SystemException *</type>
      <name>_downcast</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Exception *exception)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ULong</type>
      <name>_tao_minor_code</name>
      <anchor>d1</anchor>
      <arglist>(u_int location, int errno_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ULong</type>
      <name>_tao_errno</name>
      <anchor>d2</anchor>
      <arglist>(int errno_value)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_SystemException</name>
      <anchor>b0</anchor>
      <arglist>(const char *repository_id, CORBA::ULong code, CORBA::CompletionStatus completed)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>const char *</type>
      <name>_tao_get_omg_exception_description</name>
      <anchor>e0</anchor>
      <arglist>(const CORBA::SystemException &amp;exc, CORBA::ULong minor_code)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>minor_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::CompletionStatus</type>
      <name>completed_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_TypeCode</name>
    <filename>classCORBA__TypeCode.html</filename>
    <member kind="typedef">
      <type>CORBA_TypeCode_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA_TypeCode_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>traverse_status</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_STOP</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_CONTINUE</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>equal</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TypeCode_ptr ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>equivalent</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TCKind</type>
      <name>kind</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>id</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>member_count</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>member_name</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>member_type</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong slot ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any_ptr</type>
      <name>member_label</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong n ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>discriminator_type</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Long</type>
      <name>default_index</name>
      <anchor>a10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>length</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>content_type</name>
      <anchor>a12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>concrete_base_type</name>
      <anchor>a13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::TCKind kind)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::TCKind kind, size_t length, const char *buffer, CORBA::Boolean orb_owns_tc, CORBA::ULong size, CORBA::TypeCode_ptr parent=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_TypeCode</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any_ptr</type>
      <name>parameter</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Long slot ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>param_count</name>
      <anchor>a20</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_nil</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_decode</name>
      <anchor>d2</anchor>
      <arglist>(const CORBA_TypeCode *parent, TAO_InputCDR &amp;cdr, CORBA_TypeCode *&amp;child ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>skip_typecode</name>
      <anchor>d3</anchor>
      <arglist>(TAO_InputCDR &amp;stream)</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>length_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>buffer_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>byte_order_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>kind_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>parent_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>tc_base_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>root_tc_base_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tc_Bounds</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tc_BadKind</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>equ_common</name>
      <anchor>c0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal</name>
      <anchor>c1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>private_id</name>
      <anchor>c2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>private_name</name>
      <anchor>c3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::ULong</type>
      <name>private_member_count</name>
      <anchor>c4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::TypeCode_ptr</type>
      <name>private_member_type</name>
      <anchor>c5</anchor>
      <arglist>(CORBA::ULong slot ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>private_member_name</name>
      <anchor>c6</anchor>
      <arglist>(CORBA::ULong slot ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Any_ptr</type>
      <name>private_member_label</name>
      <anchor>c7</anchor>
      <arglist>(CORBA::ULong n ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::TypeCode_ptr</type>
      <name>private_discriminator_type</name>
      <anchor>c8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::TypeCode_ptr</type>
      <name>private_discriminator_type_i</name>
      <anchor>c9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Long</type>
      <name>private_default_index</name>
      <anchor>c10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Long</type>
      <name>private_default_index_i</name>
      <anchor>c11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Long</type>
      <name>private_length</name>
      <anchor>c12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::TypeCode_ptr</type>
      <name>private_content_type</name>
      <anchor>c13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::TypeCode_ptr</type>
      <name>private_concrete_base_type</name>
      <anchor>c14</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_objref</name>
      <anchor>c15</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_struct</name>
      <anchor>c16</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_union</name>
      <anchor>c17</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_enum</name>
      <anchor>c18</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_string</name>
      <anchor>c19</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_wstring</name>
      <anchor>c20</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_sequence</name>
      <anchor>c21</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_array</name>
      <anchor>c22</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_alias</name>
      <anchor>c23</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_except</name>
      <anchor>c24</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>private_equal_valuetype</name>
      <anchor>c25</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, CORBA::Boolean equiv_only ACE_ENV_ARG_DECL_WITH_DEFAULTS) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CORBA_TypeCode</name>
      <anchor>c26</anchor>
      <arglist>(const CORBA::TypeCode &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_TypeCode &amp;</type>
      <name>operator=</name>
      <anchor>c27</anchor>
      <arglist>(const CORBA::TypeCode &amp;src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>orb_owns_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TC_Private_State *</type>
      <name>private_state_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>non_aligned_buffer_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_TypeCode::BadKind</name>
    <filename>classCORBA__TypeCode_1_1BadKind.html</filename>
    <base>CORBA_UserException</base>
    <member kind="function">
      <type></type>
      <name>BadKind</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>BadKind *</type>
      <name>_downcast</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Exception *ex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_TypeCode::Bounds</name>
    <filename>classCORBA__TypeCode_1_1Bounds.html</filename>
    <base>CORBA_UserException</base>
    <member kind="function">
      <type></type>
      <name>Bounds</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Bounds *</type>
      <name>_downcast</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Exception *ex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_TypeCode_out</name>
    <filename>classCORBA__TypeCode__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_TypeCode_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_TypeCode_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_TypeCode_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_TypeCode_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_TypeCode_ptr &amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr &amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_TypeCode_out &amp;</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_TypeCode_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_TypeCode_ptr &amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_TypeCode_var</name>
    <filename>classCORBA__TypeCode__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_TypeCode_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_TypeCode_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_TypeCode_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_TypeCode_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_TypeCode_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_TypeCode_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_TypeCode_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_TypeCode_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_UserException</name>
    <filename>classCORBA__UserException.html</filename>
    <base>CORBA_Exception</base>
    <member kind="function">
      <type></type>
      <name>CORBA_UserException</name>
      <anchor>a0</anchor>
      <arglist>(const CORBA_UserException &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_UserException</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_UserException &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_UserException &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_UserException</name>
      <anchor>a3</anchor>
      <arglist>(const char *repository_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_is_a</name>
      <anchor>a4</anchor>
      <arglist>(const char *interface_id) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CString</type>
      <name>_info</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_UserException</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_UserException *</type>
      <name>_downcast</name>
      <anchor>d0</anchor>
      <arglist>(CORBA_Exception *exception)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ValueBase</name>
    <filename>classCORBA__ValueBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>_refcount_value</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>_tao_obv_repository_id</name>
      <anchor>a3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_tao_unmarshal_post</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;strm)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>_tao_obv_narrow</name>
      <anchor>a5</anchor>
      <arglist>(ptr_arith_t)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_marshal_v</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_unmarshal_v</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ValueBase *</type>
      <name>_downcast</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ValueBase *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>_tao_marshal</name>
      <anchor>d1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, CORBA_ValueBase *_this, ptr_arith_t formal_type_id=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>_tao_unmarshal</name>
      <anchor>d2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ValueBase *&amp;_this)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>_tao_unmarshal_pre</name>
      <anchor>d3</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA_ValueFactory_ptr &amp;, CORBA_ValueBase *&amp;, const char *const repo_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_ValueBase</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>CORBA_ValueBase</name>
      <anchor>b1</anchor>
      <arglist>(const CORBA_ValueBase &amp;)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~CORBA_ValueBase</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_ValueBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_ValueFactoryBase</name>
    <filename>classCORBA__ValueFactoryBase.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_ValueFactoryBase</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CORBA_ValueFactoryBase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_add_ref</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_remove_ref</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA_ValueBase *</type>
      <name>create_for_unmarshal</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>_tao_reference_count_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>_tao_reference_count_lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_WString_out</name>
    <filename>classCORBA__WString__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_WString_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::WChar *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WString_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_WString_var &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WString_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_WString_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WString_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_WString_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WString_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::WChar *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_WString_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::WChar *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_WString_var</name>
    <filename>classCORBA__WString__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_WString_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WString_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WString_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WString_var</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_WString_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_WString_var</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WString_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WString_var &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WString_var &amp;</type>
      <name>operator=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA_WString_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::WChar *</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::WChar *</name>
      <anchor>a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar &amp;</type>
      <name>operator[]</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong slot)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar</type>
      <name>operator[]</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar *</type>
      <name>in</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>inout</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>out</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *</type>
      <name>_retn</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::WChar *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_WStringSeq</name>
    <filename>classCORBA__WStringSeq.html</filename>
    <base>TAO_Unbounded_WString_Sequence</base>
    <member kind="typedef">
      <type>CORBA_WStringSeq_var</type>
      <name>_var_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::WChar **buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_WStringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_WStringSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_WStringSeq_out</name>
    <filename>classCORBA__WStringSeq__out.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA_WStringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_WStringSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq_out</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_WStringSeq_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA_WStringSeq_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_WStringSeq *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_WStringSeq *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const CORBA_WStringSeq_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_WStringSeq *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA_WStringSeq_var</name>
    <filename>classCORBA__WStringSeq__var.html</filename>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA_WStringSeq *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CORBA_WStringSeq_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA_WStringSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CORBA_WStringSeq_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA_WStringSeq *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA_WStringSeq_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_WStringSeq *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA_WStringSeq &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_WStringSeq &amp;</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_WStringSeq &amp;</name>
      <anchor>a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA_WStringSeq *&amp;</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager</type>
      <name>operator[]</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA_WStringSeq &amp;</type>
      <name>in</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq &amp;</type>
      <name>inout</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq *&amp;</type>
      <name>out</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq *</type>
      <name>_retn</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_WStringSeq *</type>
      <name>ptr</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_WStringSeq *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dynamic::Parameter</name>
    <filename>structDynamic_1_1Parameter.html</filename>
    <member kind="variable">
      <type>any</type>
      <name>argument</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ParameterMode</type>
      <name>mode</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GIOP::IORAddressingInfo</name>
    <filename>structGIOP_1_1IORAddressingInfo.html</filename>
    <member kind="variable">
      <type>unsigned long</type>
      <name>selected_profile_index</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::IOR</type>
      <name>ior</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GIOP::Version</name>
    <filename>structGIOP_1_1Version.html</filename>
    <member kind="variable">
      <type>octet</type>
      <name>major</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>octet</type>
      <name>minor</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IIOP::BiDirIIOPServiceContext</name>
    <filename>structIIOP_1_1BiDirIIOPServiceContext.html</filename>
    <member kind="variable">
      <type>ListenPointList</type>
      <name>listen_points</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IIOP::ListenPoint</name>
    <filename>structIIOP_1_1ListenPoint.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>host</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>port</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>IOP::Codec</name>
    <filename>interfaceIOP_1_1Codec.html</filename>
    <member kind="function">
      <type>CORBA::OctetSeq</type>
      <name>encode</name>
      <anchor>a0</anchor>
      <arglist>(in any data)</arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>decode</name>
      <anchor>a1</anchor>
      <arglist>(in CORBA::OctetSeq data)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::OctetSeq</type>
      <name>encode_value</name>
      <anchor>a2</anchor>
      <arglist>(in any data)</arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>decode_value</name>
      <anchor>a3</anchor>
      <arglist>(in CORBA::OctetSeq data, in CORBA::TypeCode tc)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::FormatMismatch</name>
    <filename>exceptionIOP_1_1Codec_1_1FormatMismatch.html</filename>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::InvalidTypeForEncoding</name>
    <filename>exceptionIOP_1_1Codec_1_1InvalidTypeForEncoding.html</filename>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::TypeMismatch</name>
    <filename>exceptionIOP_1_1Codec_1_1TypeMismatch.html</filename>
  </compound>
  <compound kind="interface">
    <name>IOP::CodecFactory</name>
    <filename>interfaceIOP_1_1CodecFactory.html</filename>
    <member kind="function">
      <type>Codec</type>
      <name>create_codec</name>
      <anchor>a0</anchor>
      <arglist>(in Encoding enc)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::CodecFactory::UnknownEncoding</name>
    <filename>exceptionIOP_1_1CodecFactory_1_1UnknownEncoding.html</filename>
  </compound>
  <compound kind="struct">
    <name>IOP::Encoding</name>
    <filename>structIOP_1_1Encoding.html</filename>
    <member kind="variable">
      <type>EncodingFormat</type>
      <name>format</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>octet</type>
      <name>major_version</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>octet</type>
      <name>minor_version</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::IOR</name>
    <filename>structIOP_1_1IOR.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>type_id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sequence&lt; TaggedProfile &gt;</type>
      <name>profiles</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::ServiceContext</name>
    <filename>structIOP_1_1ServiceContext.html</filename>
    <member kind="variable">
      <type>ServiceId</type>
      <name>context_id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sequence&lt; octet &gt;</type>
      <name>context_data</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::TaggedComponent</name>
    <filename>structIOP_1_1TaggedComponent.html</filename>
    <member kind="variable">
      <type>ComponentId</type>
      <name>tag</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sequence&lt; octet &gt;</type>
      <name>component_data</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::TaggedProfile</name>
    <filename>structIOP_1_1TaggedProfile.html</filename>
    <member kind="variable">
      <type>ProfileId</type>
      <name>tag</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sequence&lt; octet &gt;</type>
      <name>profile_data</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::ExceptionHolder</name>
    <filename>interfaceMessaging_1_1ExceptionHolder.html</filename>
    <member kind="variable">
      <type>public boolean</type>
      <name>is_system_exception</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>public boolean</type>
      <name>byte_order</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>public sequence&lt; octet &gt;</type>
      <name>marshaled_exception</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::MaxHopsPolicy</name>
    <filename>interfaceMessaging_1_1MaxHopsPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute unsigned short</type>
      <name>max_hops</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Messaging::PolicyValue</name>
    <filename>structMessaging_1_1PolicyValue.html</filename>
    <member kind="variable">
      <type>CORBA::PolicyType</type>
      <name>ptype</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sequence&lt; octet &gt;</type>
      <name>pvalue</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Messaging::PriorityRange</name>
    <filename>structMessaging_1_1PriorityRange.html</filename>
    <member kind="variable">
      <type>Priority</type>
      <name>min</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Priority</type>
      <name>max</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::QueueOrderPolicy</name>
    <filename>interfaceMessaging_1_1QueueOrderPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute Ordering</type>
      <name>allowed_orders</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::RebindPolicy</name>
    <filename>interfaceMessaging_1_1RebindPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute RebindMode</type>
      <name>rebind_mode</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::RelativeRequestTimeoutPolicy</name>
    <filename>interfaceMessaging_1_1RelativeRequestTimeoutPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute TimeBase::TimeT</type>
      <name>relative_expiry</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::RelativeRoundtripTimeoutPolicy</name>
    <filename>interfaceMessaging_1_1RelativeRoundtripTimeoutPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute TimeBase::TimeT</type>
      <name>relative_expiry</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::ReplyEndTimePolicy</name>
    <filename>interfaceMessaging_1_1ReplyEndTimePolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute TimeBase::UtcT</type>
      <name>end_time</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::ReplyHandler</name>
    <filename>interfaceMessaging_1_1ReplyHandler.html</filename>
  </compound>
  <compound kind="interface">
    <name>Messaging::ReplyPriorityPolicy</name>
    <filename>interfaceMessaging_1_1ReplyPriorityPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute PriorityRange</type>
      <name>priority_range</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::ReplyStartTimePolicy</name>
    <filename>interfaceMessaging_1_1ReplyStartTimePolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute TimeBase::UtcT</type>
      <name>start_time</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::RequestEndTimePolicy</name>
    <filename>interfaceMessaging_1_1RequestEndTimePolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute TimeBase::UtcT</type>
      <name>end_time</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::RequestPriorityPolicy</name>
    <filename>interfaceMessaging_1_1RequestPriorityPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute PriorityRange</type>
      <name>priority_range</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::RequestStartTimePolicy</name>
    <filename>interfaceMessaging_1_1RequestStartTimePolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute TimeBase::UtcT</type>
      <name>start_time</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::RoutingPolicy</name>
    <filename>interfaceMessaging_1_1RoutingPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute RoutingTypeRange</type>
      <name>routing_range</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Messaging::RoutingTypeRange</name>
    <filename>structMessaging_1_1RoutingTypeRange.html</filename>
    <member kind="variable">
      <type>RoutingType</type>
      <name>min</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingType</type>
      <name>max</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Messaging::SyncScopePolicy</name>
    <filename>interfaceMessaging_1_1SyncScopePolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute SyncScope</type>
      <name>synchronization</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ClientRequestInfo</name>
    <filename>interfacePortableInterceptor_1_1ClientRequestInfo.html</filename>
    <base>PortableInterceptor::RequestInfo</base>
    <member kind="function">
      <type>IOP::TaggedComponent</type>
      <name>get_effective_component</name>
      <anchor>a0</anchor>
      <arglist>(in IOP::ComponentId id)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedComponentSeq</type>
      <name>get_effective_components</name>
      <anchor>a1</anchor>
      <arglist>(in IOP::ComponentId id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy</type>
      <name>get_request_policy</name>
      <anchor>a2</anchor>
      <arglist>(in CORBA::PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_request_service_context</name>
      <anchor>a3</anchor>
      <arglist>(in IOP::ServiceContext service_context, in boolean replace)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Object</type>
      <name>target</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Object</type>
      <name>effective_target</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute IOP::TaggedProfile</type>
      <name>effective_profile</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute any</type>
      <name>received_exception</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::RepositoryId</type>
      <name>received_exception_id</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ClientRequestInterceptor</name>
    <filename>interfacePortableInterceptor_1_1ClientRequestInterceptor.html</filename>
    <base>PortableInterceptor::Interceptor</base>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchor>a0</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_poll</name>
      <anchor>a1</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_reply</name>
      <anchor>a2</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_exception</name>
      <anchor>a3</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_other</name>
      <anchor>a4</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::Current</name>
    <filename>interfacePortableInterceptor_1_1Current.html</filename>
    <base>CORBA::Current</base>
    <member kind="function">
      <type>any</type>
      <name>get_slot</name>
      <anchor>a0</anchor>
      <arglist>(in SlotId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slot</name>
      <anchor>a1</anchor>
      <arglist>(in SlotId id, in any data)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ForwardRequest</name>
    <filename>exceptionPortableInterceptor_1_1ForwardRequest.html</filename>
    <member kind="variable">
      <type>Object</type>
      <name>forward</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>permanent</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::Interceptor</name>
    <filename>interfacePortableInterceptor_1_1Interceptor.html</filename>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute string</type>
      <name>name</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::InvalidSlot</name>
    <filename>exceptionPortableInterceptor_1_1InvalidSlot.html</filename>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::IORInfo</name>
    <filename>interfacePortableInterceptor_1_1IORInfo.html</filename>
    <member kind="function">
      <type>CORBA::Policy</type>
      <name>get_effective_policy</name>
      <anchor>a0</anchor>
      <arglist>(in CORBA::PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_ior_component</name>
      <anchor>a1</anchor>
      <arglist>(in IOP::TaggedComponent component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_ior_component_to_profile</name>
      <anchor>a2</anchor>
      <arglist>(in IOP::TaggedComponent component, in IOP::ProfileId profile_id)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute AdapterManagerId</type>
      <name>manager_id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute AdapterState</type>
      <name>state</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ObjectReferenceTemplate</type>
      <name>adapter_template</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>attribute ObjectReferenceFactory</type>
      <name>current_factory</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::IORInterceptor</name>
    <filename>interfacePortableInterceptor_1_1IORInterceptor.html</filename>
    <base>PortableInterceptor::Interceptor</base>
    <member kind="function">
      <type>void</type>
      <name>establish_components</name>
      <anchor>a0</anchor>
      <arglist>(in IORInfo info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>components_established</name>
      <anchor>a1</anchor>
      <arglist>(in IORInfo info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adapter_manager_state_changed</name>
      <anchor>a2</anchor>
      <arglist>(in AdapterManagerId id, in AdapterState state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adapter_state_changed</name>
      <anchor>a3</anchor>
      <arglist>(in ObjectReferenceTemplateSeq templates, in AdapterState state)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ObjectReferenceFactory</name>
    <filename>interfacePortableInterceptor_1_1ObjectReferenceFactory.html</filename>
    <member kind="function">
      <type>Object</type>
      <name>make_object</name>
      <anchor>a0</anchor>
      <arglist>(in string repository_id, in ObjectId id)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ObjectReferenceTemplate</name>
    <filename>interfacePortableInterceptor_1_1ObjectReferenceTemplate.html</filename>
    <base>PortableInterceptor::ObjectReferenceFactory</base>
    <member kind="variable">
      <type>readonly attribute ServerId</type>
      <name>server_id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ORBId</type>
      <name>orb_id</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute AdapterName</type>
      <name>adapter_name</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ORBInitializer</name>
    <filename>interfacePortableInterceptor_1_1ORBInitializer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>pre_init</name>
      <anchor>a0</anchor>
      <arglist>(in ORBInitInfo info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post_init</name>
      <anchor>a1</anchor>
      <arglist>(in ORBInitInfo info)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ORBInitInfo</name>
    <filename>interfacePortableInterceptor_1_1ORBInitInfo.html</filename>
    <member kind="typedef">
      <type>string</type>
      <name>ObjectId</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_initial_reference</name>
      <anchor>a0</anchor>
      <arglist>(in ObjectId id, in Object obj)</arglist>
    </member>
    <member kind="function">
      <type>Object</type>
      <name>resolve_initial_references</name>
      <anchor>a1</anchor>
      <arglist>(in ObjectId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_client_request_interceptor</name>
      <anchor>a2</anchor>
      <arglist>(in ClientRequestInterceptor interceptor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_server_request_interceptor</name>
      <anchor>a3</anchor>
      <arglist>(in ServerRequestInterceptor interceptor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_ior_interceptor</name>
      <anchor>a4</anchor>
      <arglist>(in IORInterceptor interceptor)</arglist>
    </member>
    <member kind="function">
      <type>SlotId</type>
      <name>allocate_slot_id</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_policy_factory</name>
      <anchor>a6</anchor>
      <arglist>(in CORBA::PolicyType type, in PolicyFactory policy_factory)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::StringSeq</type>
      <name>arguments</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute string</type>
      <name>orb_id</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute IOP::CodecFactory</type>
      <name>codec_factory</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ORBInitInfo::DuplicateName</name>
    <filename>exceptionPortableInterceptor_1_1ORBInitInfo_1_1DuplicateName.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>name</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ORBInitInfo::InvalidName</name>
    <filename>exceptionPortableInterceptor_1_1ORBInitInfo_1_1InvalidName.html</filename>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::PolicyFactory</name>
    <filename>interfacePortableInterceptor_1_1PolicyFactory.html</filename>
    <member kind="function">
      <type>CORBA::Policy</type>
      <name>create_policy</name>
      <anchor>a0</anchor>
      <arglist>(in CORBA::PolicyType type, in any value)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::RequestInfo</name>
    <filename>interfacePortableInterceptor_1_1RequestInfo.html</filename>
    <member kind="function">
      <type>any</type>
      <name>get_slot</name>
      <anchor>a0</anchor>
      <arglist>(in SlotId id)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext</type>
      <name>get_request_service_context</name>
      <anchor>a1</anchor>
      <arglist>(in IOP::ServiceId id)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext</type>
      <name>get_reply_service_context</name>
      <anchor>a2</anchor>
      <arglist>(in IOP::ServiceId id)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute unsigned long</type>
      <name>request_id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute string</type>
      <name>operation</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::ParameterList</type>
      <name>arguments</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::ExceptionList</type>
      <name>exceptions</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::ContextList</type>
      <name>contexts</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::RequestContext</type>
      <name>operation_context</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute any</type>
      <name>result</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute boolean</type>
      <name>response_expected</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Messaging::SyncScope</type>
      <name>sync_scope</name>
      <anchor>m8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ReplyStatus</type>
      <name>reply_status</name>
      <anchor>m9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Object</type>
      <name>forward_reference</name>
      <anchor>m10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ServerRequestInfo</name>
    <filename>interfacePortableInterceptor_1_1ServerRequestInfo.html</filename>
    <base>PortableInterceptor::RequestInfo</base>
    <member kind="function">
      <type>CORBA::Policy</type>
      <name>get_server_policy</name>
      <anchor>a0</anchor>
      <arglist>(in CORBA::PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slot</name>
      <anchor>a1</anchor>
      <arglist>(in SlotId id, in any data)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>target_is_a</name>
      <anchor>a2</anchor>
      <arglist>(in CORBA::RepositoryId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_reply_service_context</name>
      <anchor>a3</anchor>
      <arglist>(in IOP::ServiceContext service_context, in boolean replace)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute any</type>
      <name>sending_exception</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ServerId</type>
      <name>server_id</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ORBId</type>
      <name>orb_id</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute AdapterName</type>
      <name>adapter_name</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::OctetSeq</type>
      <name>object_id</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::OctetSeq</type>
      <name>adapter_id</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::RepositoryId</type>
      <name>target_most_derived_interface</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ServerRequestInterceptor</name>
    <filename>interfacePortableInterceptor_1_1ServerRequestInterceptor.html</filename>
    <base>PortableInterceptor::Interceptor</base>
    <member kind="function">
      <type>void</type>
      <name>receive_request_service_contexts</name>
      <anchor>a0</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_request</name>
      <anchor>a1</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_reply</name>
      <anchor>a2</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_exception</name>
      <anchor>a3</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_other</name>
      <anchor>a4</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Service_Context</name>
    <filename>classService__Context.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::BufferingConstraint</name>
    <filename>structTAO_1_1BufferingConstraint.html</filename>
    <member kind="variable">
      <type>BufferingConstraintMode</type>
      <name>mode</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeBase::TimeT</type>
      <name>timeout</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>message_count</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>message_bytes</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>TAO::BufferingConstraintPolicy</name>
    <filename>interfaceTAO_1_1BufferingConstraintPolicy.html</filename>
    <base>CORBA::Policy</base>
    <member kind="variable">
      <type>readonly attribute BufferingConstraint</type>
      <name>buffering_constraint</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Abstract_ServantBase</name>
    <filename>classTAO__Abstract__ServantBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Abstract_ServantBase</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a1</anchor>
      <arglist>(const char *logical_type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA_InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>_downcast</name>
      <anchor>a6</anchor>
      <arglist>(const char *repository_id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Stub *</type>
      <name>_create_stub</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Abstract_ServantBase</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Abstract_ServantBase</name>
      <anchor>b1</anchor>
      <arglist>(const TAO_Abstract_ServantBase &amp;)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_Abstract_ServantBase &amp;</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(const TAO_Abstract_ServantBase &amp;)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>_dispatch</name>
      <anchor>b3</anchor>
      <arglist>(TAO_ServerRequest &amp;request, void *servant_upcall ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>synchronous_upcall_dispatch</name>
      <anchor>b4</anchor>
      <arglist>(TAO_ServerRequest &amp;req, void *servant_upcall, void *derived_this ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual int</type>
      <name>_find</name>
      <anchor>b5</anchor>
      <arglist>(const char *opname, TAO_Skeleton &amp;skelfunc, const unsigned int length=0)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual int</type>
      <name>_bind</name>
      <anchor>b6</anchor>
      <arglist>(const char *opname, const TAO_Skeleton skel_ptr)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>b7</anchor>
      <arglist>(void) const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Accept_Strategy</name>
    <filename>classTAO__Accept__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <base>ACE_Accept_Strategy&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TAO_Accept_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;local_addr, int restart=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept_svc_handler</name>
      <anchor>a2</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Accept_Strategy&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt;</type>
      <name>ACCEPT_STRATEGY_BASE</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Acceptor</name>
    <filename>classTAO__Acceptor.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int version_major, int version_minor, const char *address, const char *options=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open_default</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ORB_Core *, ACE_Reactor *reactor, int version_major, int version_minor, const char *options=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>create_profile</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_collocated</name>
      <anchor>a7</anchor>
      <arglist>(const TAO_Endpoint *endpoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>endpoint_count</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>object_key</name>
      <anchor>a9</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile, TAO_ObjectKey &amp;key)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Acceptor_Filter</name>
    <filename>classTAO__Acceptor__Filter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Acceptor_Filter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>fill_profile</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, TAO_Acceptor **acceptors_begin, TAO_Acceptor **acceptors_end, CORBA::Short priority=TAO_INVALID_PRIORITY)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>a2</anchor>
      <arglist>(TAO_MProfile &amp;mprofile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Acceptor_Registry</name>
    <filename>classTAO__Acceptor__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Acceptor_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Acceptor_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int ignore_address ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_all</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>endpoint_count</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Acceptor *</type>
      <name>get_acceptor</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function">
      <type>TAO_AcceptorSetIterator</type>
      <name>begin</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_AcceptorSetIterator</type>
      <name>end</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>open_default</name>
      <anchor>c0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, const char *options)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>open_default</name>
      <anchor>c1</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int major, int minor, TAO_ProtocolFactorySetItor &amp;factory, const char *options)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extract_endpoint_options</name>
      <anchor>c2</anchor>
      <arglist>(ACE_CString &amp;addrs, ACE_CString &amp;options, TAO_Protocol_Factory *factory)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extract_endpoint_version</name>
      <anchor>c3</anchor>
      <arglist>(ACE_CString &amp;address, int &amp;major, int &amp;minor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>open_i</name>
      <anchor>c4</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, ACE_CString &amp;address, TAO_ProtocolFactorySetItor &amp;factory, int ignore_address ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Acceptor_Registry</name>
      <anchor>c5</anchor>
      <arglist>(const TAO_Acceptor_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c6</anchor>
      <arglist>(const TAO_Acceptor_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Acceptor **</type>
      <name>acceptors_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Adapter</name>
    <filename>classTAO__Adapter.html</filename>
    <member kind="enumvalue">
      <name>DS_OK</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DS_FAILED</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DS_MISMATCHED_KEY</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DS_FORWARD</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>check_close</name>
      <anchor>a3</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>priority</name>
      <anchor>a4</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ObjectKey &amp;key, TAO_ServerRequest &amp;request, CORBA::Object_out forward_to ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>name</name>
      <anchor>a6</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>root</name>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>create_collocated_object</name>
      <anchor>a8</anchor>
      <arglist>(TAO_Stub *, const TAO_MProfile &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Adapter_Factory</name>
    <filename>classTAO__Adapter__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Adapter_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Adapter *</type>
      <name>create</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Adapter_Registry</name>
    <filename>classTAO__Adapter__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Adapter_Registry</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Adapter_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_close</name>
      <anchor>a3</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Adapter *adapter ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatch</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ObjectKey &amp;key, TAO_ServerRequest &amp;request, CORBA::Object_out forward_to ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>create_collocated_object</name>
      <anchor>a6</anchor>
      <arglist>(TAO_Stub *, const TAO_MProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Adapter *</type>
      <name>find_adapter</name>
      <anchor>a7</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>adapters_capacity_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>adapters_count_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Adapter **</type>
      <name>adapters_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Asynch_Queued_Message</name>
    <filename>classTAO__Asynch__Queued__Message.html</filename>
    <base>TAO_Queued_Message</base>
    <member kind="function">
      <type></type>
      <name>TAO_Asynch_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Message_Block *contents)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Asynch_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>all_data_sent</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fill_iov</name>
      <anchor>a4</anchor>
      <arglist>(int iovcnt_max, int &amp;iovcnt, iovec iov[]) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bytes_transferred</name>
      <anchor>a5</anchor>
      <arglist>(size_t &amp;byte_count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>offset_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>buffer_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Asynch_Reply_Dispatcher</name>
    <filename>classTAO__Asynch__Reply__Dispatcher.html</filename>
    <base>TAO_Asynch_Reply_Dispatcher_Base</base>
    <member kind="function">
      <type></type>
      <name>TAO_Asynch_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Reply_Handler_Skeleton &amp;reply_handler_skel, Messaging::ReplyHandler_ptr reply_handler_ptr, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Asynch_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reply_timed_out</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>schedule_timer</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong request_id, const ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TAO_Reply_Handler_Skeleton</type>
      <name>reply_handler_skel_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Messaging::ReplyHandler_var</type>
      <name>reply_handler_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Asynch_Timeout_Handler</type>
      <name>timeout_handler_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Asynch_Reply_Dispatcher_Base</name>
    <filename>classTAO__Asynch__Reply__Dispatcher__Base.html</filename>
    <base>TAO_Reply_Dispatcher</base>
    <member kind="function">
      <type></type>
      <name>TAO_Asynch_Reply_Dispatcher_Base</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Asynch_Reply_Dispatcher_Base</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transport</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reply_timed_out</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong request_id, const ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IOP::ServiceContextList</type>
      <name>reply_service_info_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char</type>
      <name>buf_</name>
      <anchor>n1</anchor>
      <arglist>[ACE_CDR::DEFAULT_BUFSIZE]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Data_Block</type>
      <name>db_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_InputCDR</type>
      <name>reply_cdr_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Asynch_Timeout_Handler</name>
    <filename>classTAO__Asynch__Timeout__Handler.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function">
      <type></type>
      <name>TAO_Asynch_Timeout_Handler</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Asynch_Reply_Dispatcher_Base *rd, ACE_Reactor *reactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Asynch_Timeout_Handler</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>schedule_timer</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport_Mux_Strategy *tms, CORBA::ULong request_id, const ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, const void *act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancel</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Asynch_Reply_Dispatcher_Base *</type>
      <name>rd_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Transport_Mux_Strategy *</type>
      <name>tms_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Base_Sequence</name>
    <filename>classTAO__Base__Sequence.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Base_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>maximum</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_downcast</name>
      <anchor>a5</anchor>
      <arglist>(void *target, CORBA_Object *src ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_Object *</type>
      <name>_upcast</name>
      <anchor>a6</anchor>
      <arglist>(void *src) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>a7</anchor>
      <arglist>(const TAO_Base_Sequence &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Base_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a8</anchor>
      <arglist>(const TAO_Base_Sequence &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, void *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::ULong maximum, void *buffer)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>CORBA::Boolean</type>
      <name>release</name>
      <anchor>b3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>maximum_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>length_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>buffer_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Marshal_Sequence</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Base_Transport_Property</name>
    <filename>classTAO__Base__Transport__Property.html</filename>
    <base>TAO_Transport_Descriptor_Interface</base>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Transport_Property</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Transport_Property</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Endpoint *endpoint, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Base_Transport_Property</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Transport_Property</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Base_Transport_Property &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Transport_Descriptor_Interface *</type>
      <name>duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Transport_Descriptor_Interface *other_prop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Base_var</name>
    <filename>classTAO__Base__var.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Base_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_BiDir_Adapter</name>
    <filename>classTAO__BiDir__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_BiDir_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ORB_ptr, int argc, char *argv[] ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>load_policy_validators</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Policy_Validator &amp;validator)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bind_Dispatcher_Guard</name>
    <filename>classTAO__Bind__Dispatcher__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Bind_Dispatcher_Guard</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rd, TAO_Transport_Mux_Strategy *tms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bind_Dispatcher_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>status</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>status_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Reply_Dispatcher *</type>
      <name>rd_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport_Mux_Strategy *</type>
      <name>tms_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Block_Flushing_Strategy</name>
    <filename>classTAO__Block__Flushing__Strategy.html</filename>
    <base>TAO_Flushing_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Array_Sequence</name>
    <filename>classTAO__Bounded__Array__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Array_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Array_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T *value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Array_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Array_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Array_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Array_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Bounded_Array_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Base_Sequence</name>
    <filename>classTAO__Bounded__Base__Sequence.html</filename>
    <base>TAO_Base_Sequence</base>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>length</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Bounded_Base_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Bounded_Base_Sequence</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Bounded_Base_Sequence</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, void *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Bounded_Base_Sequence</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::ULong maximum, void *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Object_Sequence</name>
    <filename>classTAO__Bounded__Object__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Object_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Object_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Object_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Object_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Object_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Object_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Bounded_Object_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_downcast</name>
      <anchor>a9</anchor>
      <arglist>(void *target, CORBA_Object *src ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_Object *</type>
      <name>_upcast</name>
      <anchor>a10</anchor>
      <arglist>(void *src) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Pseudo_Sequence</name>
    <filename>classTAO__Bounded__Pseudo__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Pseudo_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Pseudo_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Bounded_Pseudo_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Sequence</name>
    <filename>classTAO__Bounded__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Sequence&lt; T, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Sequence&lt; T, MAX &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Bounded_Sequence&lt; T, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_String_Sequence</name>
    <filename>classTAO__Bounded__String__Sequence.html</filename>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_String_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_String_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, char **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_String_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_String_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_String_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Bounded_String_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_String_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(char **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Valuetype_Sequence</name>
    <filename>classTAO__Bounded__Valuetype__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Valuetype_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Valuetype_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Valuetype_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Valuetype_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Valuetype_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Valuetype_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Bounded_Valuetype_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Valuetype_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_WString_Sequence</name>
    <filename>classTAO__Bounded__WString__Sequence.html</filename>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_WString_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_WString_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, CORBA::WChar **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_WString_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_WString_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_WString_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Bounded_WString_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_WString_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::WChar **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::WChar **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Buffering_Constraint_Policy</name>
    <filename>classTAO__Buffering__Constraint__Policy.html</filename>
    <base>TAO::BufferingConstraintPolicy</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Buffering_Constraint_Policy</name>
      <anchor>a0</anchor>
      <arglist>(const TAO::BufferingConstraint &amp;buffering_constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Buffering_Constraint_Policy</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Buffering_Constraint_Policy &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Buffering_Constraint_Policy *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::BufferingConstraint</type>
      <name>buffering_constraint</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_buffering_constraint</name>
      <anchor>a4</anchor>
      <arglist>(TAO::BufferingConstraint &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyType</type>
      <name>policy_type</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>copy</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Cached_Policy_Type</type>
      <name>_tao_cached_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Policy_ptr</type>
      <name>create</name>
      <anchor>d0</anchor>
      <arglist>(const CORBA::Any &amp;val ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::BufferingConstraint</type>
      <name>buffering_constraint_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Cache_ExtId</name>
    <filename>classTAO__Cache__ExtId.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Cache_ExtId</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Cache_ExtId</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Cache_ExtId</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Cache_ExtId</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Cache_ExtId &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>hash</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duplicate</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>index</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>index</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>index</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Descriptor_Interface *</type>
      <name>property</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport_Descriptor_Interface *</type>
      <name>transport_property_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>is_delete_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>index_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Cache_IntId</name>
    <filename>classTAO__Cache__IntId.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Cache_IntId</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Cache_IntId</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Cache_IntId</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Cache_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Cache_IntId</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Cache_IntId &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Cache_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Cache_IntId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_Cache_IntId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>transport</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Transport *</type>
      <name>transport</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recycle_state</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Recyclable_State new_state)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Recyclable_State</type>
      <name>recycle_state</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>relinquish_transport</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Recyclable_State</type>
      <name>recycle_state_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CDR_Encaps_Codec</name>
    <filename>classTAO__CDR__Encaps__Codec.html</filename>
    <base virtualness="virtual">IOP::Codec</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_CDR_Encaps_Codec</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::OctetSeq *</type>
      <name>encode</name>
      <anchor>a1</anchor>
      <arglist>(const CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>decode</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::OctetSeq &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::OctetSeq *</type>
      <name>encode_value</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>decode_value</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::OctetSeq &amp;data, CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~TAO_CDR_Encaps_Codec</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>check_type_for_encoding</name>
      <anchor>b1</anchor>
      <arglist>(const CORBA::Any &amp;data ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_CDR_Encaps_Codec</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_CDR_Encaps_Codec &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_CDR_Encaps_Codec &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>major_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>minor_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Cleanup_Func_Registry</name>
    <filename>classTAO__Cleanup__Func__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Cleanup_Func_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Cleanup_Func_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>register_cleanup_function</name>
      <anchor>b0</anchor>
      <arglist>(ACE_CLEANUP_FUNC func, size_t &amp;slot_id)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>cleanup</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Array_Base&lt; void *&gt; &amp;ts_objects)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Cleanup_Func_Registry</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Cleanup_Func_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Cleanup_Func_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Array_Base&lt; ACE_CLEANUP_FUNC &gt;</type>
      <name>cleanup_funcs_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_ORBInitInfo</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_ORB_Core_TSS_Resources</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_ORB_Core</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Client_Strategy_Factory</name>
    <filename>classTAO__Client__Strategy__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Client_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Client_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_profile_lock</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Transport_Mux_Strategy *</type>
      <name>create_transport_mux_strategy</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Wait_Strategy *</type>
      <name>create_wait_strategy</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>allow_callback</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_ft_service_retention_id_lock</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo</name>
    <filename>classTAO__ClientRequestInfo.html</filename>
    <base virtualness="virtual">PortableInterceptor::ClientRequestInfo</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>operation</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ContextList *</type>
      <name>contexts</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::RequestContext *</type>
      <name>operation_context</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>result</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Short</type>
      <name>sync_scope</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PortableInterceptor::ReplyStatus</type>
      <name>reply_status</name>
      <anchor>a10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>forward_reference</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a12</anchor>
      <arglist>(PortableInterceptor::SlotId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::ServiceContext *</type>
      <name>get_request_service_context</name>
      <anchor>a13</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::ServiceContext *</type>
      <name>get_reply_service_context</name>
      <anchor>a14</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>target</name>
      <anchor>a15</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>effective_target</name>
      <anchor>a16</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedProfile *</type>
      <name>effective_profile</name>
      <anchor>a17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>received_exception</name>
      <anchor>a18</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>received_exception_id</name>
      <anchor>a19</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedComponent *</type>
      <name>get_effective_component</name>
      <anchor>a20</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedComponentSeq *</type>
      <name>get_effective_components</name>
      <anchor>a21</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>get_request_policy</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_request_service_context</name>
      <anchor>a23</anchor>
      <arglist>(const IOP::ServiceContext &amp;service_context, CORBA::Boolean replace ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchor>a24</anchor>
      <arglist>(TAO_ClientRequestInfo_i *info)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ClientRequestInfo_i *</type>
      <name>info</name>
      <anchor>a25</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_validity</name>
      <anchor>c0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ClientRequestInfo_i *</type>
      <name>info_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo_CORBA_Policy_copy</name>
    <filename>classTAO__ClientRequestInfo__CORBA__Policy__copy.html</filename>
    <base>TAO_ClientRequestInfo_i</base>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo_CORBA_Policy_copy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_GIOP_Invocation *_tao_invocation, CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>result</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>result</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Policy_ptr result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ClientRequestInfo_CORBA_Policy_copy</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ClientRequestInfo_CORBA_Policy_copy &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_ClientRequestInfo_CORBA_Policy_copy &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Policy_ptr</type>
      <name>_result</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo_CORBA_Policy_destroy</name>
    <filename>classTAO__ClientRequestInfo__CORBA__Policy__destroy.html</filename>
    <base>TAO_ClientRequestInfo_i</base>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo_CORBA_Policy_destroy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_GIOP_Invocation *_tao_invocation, CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>result</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ClientRequestInfo_CORBA_Policy_destroy</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ClientRequestInfo_CORBA_Policy_destroy &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_ClientRequestInfo_CORBA_Policy_destroy &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo_Guard</name>
    <filename>classTAO__ClientRequestInfo__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo_Guard</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ClientRequestInfo *info, TAO_ClientRequestInfo_i *ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ClientRequestInfo_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ClientRequestInfo *</type>
      <name>info_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ClientRequestInfo_i *</type>
      <name>previous_info_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo_i</name>
    <filename>classTAO__ClientRequestInfo__i.html</filename>
    <member kind="function">
      <type>void</type>
      <name>response_expected</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reply_status</name>
      <anchor>a26</anchor>
      <arglist>(int invoke_status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_reference</name>
      <anchor>a27</anchor>
      <arglist>(PortableInterceptor::ForwardRequest &amp;exc)</arglist>
    </member>
    <member kind="variable">
      <type>void exception CORBA::Exception *</type>
      <name>exception</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo_i</name>
      <anchor>a0</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation, CORBA::Object_ptr target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_ClientRequestInfo_i</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>operation</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>Dynamic::ContextList *</type>
      <name>contexts</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>Dynamic::RequestContext *</type>
      <name>operation_context</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>result</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>sync_scope</name>
      <anchor>a10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ReplyStatus</type>
      <name>reply_status</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>forward_reference</name>
      <anchor>a12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a13</anchor>
      <arglist>(PortableInterceptor::SlotId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext *</type>
      <name>get_request_service_context</name>
      <anchor>a14</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext *</type>
      <name>get_reply_service_context</name>
      <anchor>a15</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>target</name>
      <anchor>a16</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>effective_target</name>
      <anchor>a17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedProfile *</type>
      <name>effective_profile</name>
      <anchor>a18</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any *</type>
      <name>received_exception</name>
      <anchor>a19</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>received_exception_id</name>
      <anchor>a20</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedComponent *</type>
      <name>get_effective_component</name>
      <anchor>a21</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedComponentSeq *</type>
      <name>get_effective_components</name>
      <anchor>a22</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_request_policy</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_request_service_context</name>
      <anchor>a24</anchor>
      <arglist>(const IOP::ServiceContext &amp;service_context, CORBA::Boolean replace ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>IOP::ServiceContext *</type>
      <name>get_service_context_i</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Service_Context &amp;service_context_list, IOP::ServiceId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_GIOP_Invocation *</type>
      <name>invocation_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_ptr</type>
      <name>target_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Exception *</type>
      <name>caught_exception_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>response_expected_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>PortableInterceptor::ReplyStatus</type>
      <name>reply_status_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_PICurrent_Impl</type>
      <name>rs_pi_current_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInterceptor_Adapter</name>
    <filename>classTAO__ClientRequestInterceptor__Adapter.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInterceptor_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ClientRequestInterceptor_List::TYPE &amp;interceptors, TAO_GIOP_Invocation *invocation, int &amp;_invoke_status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ClientRequestInterceptor_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_reply</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_exception</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_other</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>process_forward_request</name>
      <anchor>b0</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri, PortableInterceptor::ForwardRequest &amp;exc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ClientRequestInterceptor_List::TYPE &amp;</type>
      <name>interceptors_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_GIOP_Invocation *</type>
      <name>invocation_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int &amp;</type>
      <name>invoke_status_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>len_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>stack_size_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ClientRequestInfo *</type>
      <name>info_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInterceptor_List</name>
    <filename>classTAO__ClientRequestInterceptor__List.html</filename>
    <base>TAO_Interceptor_List</base>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; PortableInterceptor::ClientRequestInterceptor_ptr &gt;</type>
      <name>TYPE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInterceptor_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ClientRequestInterceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr i ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>interceptors</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual size_t</type>
      <name>length</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>length</name>
      <anchor>b1</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual PortableInterceptor::Interceptor_ptr</type>
      <name>interceptor</name>
      <anchor>b2</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>interceptors_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CodecFactory</name>
    <filename>classTAO__CodecFactory.html</filename>
    <base virtualness="virtual">IOP::CodecFactory</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_CodecFactory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::Codec_ptr</type>
      <name>create_codec</name>
      <anchor>a1</anchor>
      <arglist>(const IOP::Encoding &amp;enc ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_CodecFactory</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_CodecFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_CodecFactory &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CodecFactory_ORBInitializer</name>
    <filename>classTAO__CodecFactory__ORBInitializer.html</filename>
    <base virtualness="virtual">PortableInterceptor::ORBInitializer</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre_init</name>
      <anchor>a0</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_init</name>
      <anchor>a1</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::CodecFactory_var</type>
      <name>codec_factory_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Collocation_Resolver</name>
    <filename>classTAO__Collocation__Resolver.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Collocation_Resolver</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_collocated</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL) const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Collocation_Strategies</name>
    <filename>classTAO__Collocation__Strategies.html</filename>
    <member kind="enumvalue">
      <name>CS_REMOTE_STRATEGY</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CS_THRU_POA_STRATEGY</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CS_DIRECT_STRATEGY</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CS_LAST</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Concurrency_Strategy</name>
    <filename>classTAO__Concurrency__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Concurrency_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>activate_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connect_Concurrency_Strategy</name>
    <filename>classTAO__Connect__Concurrency__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Connect_Concurrency_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>activate_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connect_Creation_Strategy</name>
    <filename>classTAO__Connect__Creation__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Creation_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Connect_Creation_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *=0, TAO_ORB_Core *orb_core=0, void *arg=0, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>arg_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>lite_flag_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connection_Handler</name>
    <filename>classTAO__Connection__Handler.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connection_Handler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Connection_Handler</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Connection_Handler</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>transport</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transport</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_ORB_Core_TSS_Resources *</type>
      <name>tss_resources</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>set_socket_option</name>
      <anchor>b2</anchor>
      <arglist>(ACE_SOCK &amp;sock, int snd_size, int rcv_size)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>svc_i</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>incr_pending_upcalls</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>decr_pending_upcalls</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>pending_upcalls</name>
      <anchor>b6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core_TSS_Resources *</type>
      <name>tss_resources_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>pending_upcalls_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock *</type>
      <name>pending_upcall_lock_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connection_Purging_Strategy</name>
    <filename>classTAO__Connection__Purging__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connection_Purging_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(int cache_maximum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Connection_Purging_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_maximum</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update_item</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cache_maximum_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connector</name>
    <filename>classTAO__Connector.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connector</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Connector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_mprofile</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ORB_Core *orb_core)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>connect</name>
      <anchor>a6</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation, TAO_Transport_Descriptor_Interface *desc ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>preconnect</name>
      <anchor>a7</anchor>
      <arglist>(const char *preconnections)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Profile *</type>
      <name>create_profile</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>check_prefix</name>
      <anchor>a9</anchor>
      <arglist>(const char *endpoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a10</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual TAO_Profile *</type>
      <name>make_profile</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>orb_core</name>
      <anchor>b1</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connector_Registry</name>
    <filename>classTAO__Connector__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connector_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Connector_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Connector *</type>
      <name>get_connector</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_all</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preconnect</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_EndpointSet &amp;preconnections)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a6</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation, TAO_Transport_Descriptor_Interface *desc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_mprofile</name>
      <anchor>a7</anchor>
      <arglist>(const char *ior, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>create_profile</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>object_key_delimiter</name>
      <anchor>a9</anchor>
      <arglist>(const char *ior)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ConnectorSetIterator</type>
      <name>begin</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ConnectorSetIterator</type>
      <name>end</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>preprocess_preconnects</name>
      <anchor>c0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_EndpointSet &amp;preconnects)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Connector_Registry</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Connector_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c2</anchor>
      <arglist>(const TAO_Connector_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Connector **</type>
      <name>connectors_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CORBALOC_Parser</name>
    <filename>classTAO__CORBALOC__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_CORBALOC_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_CORBALOC_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>check_prefix</name>
      <anchor>c0</anchor>
      <arglist>(const char *endpoint ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string_count_helper</name>
      <anchor>c1</anchor>
      <arglist>(const char *corbaloc_name, CORBA::ULong &amp;addr_list_length, CORBA::ULong &amp;count_addr ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string_mprofile_helper</name>
      <anchor>c2</anchor>
      <arglist>(const char *end_point, CORBA::ORB_ptr orb, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>make_stub_from_mprofile</name>
      <anchor>c3</anchor>
      <arglist>(CORBA::ORB_ptr orb, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string_rir_helper</name>
      <anchor>c4</anchor>
      <arglist>(const char *&amp;corbaloc_name, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string_assign_helper</name>
      <anchor>c5</anchor>
      <arglist>(CORBA::ULong &amp;addr_list_length, ACE_CString &amp;key_string, ACE_CString &amp;cloc_name, CORBA::ORB_ptr orb, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>assign_key_string</name>
      <anchor>c6</anchor>
      <arglist>(char *&amp;cloc_name_ptr, ACE_CString &amp;key_string, CORBA::ULong &amp;addr_list_length, CORBA::ORB_ptr orb, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CORBANAME_Parser</name>
    <filename>classTAO__CORBANAME__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_CORBANAME_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_CORBANAME_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string_dynamic_request_helper</name>
      <anchor>c0</anchor>
      <arglist>(CORBA::Object_ptr naming_context, ACE_CString &amp;key_string ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Creation_Strategy</name>
    <filename>classTAO__Creation__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Creation_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Creation_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, void *arg=0, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>void *</type>
      <name>arg_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>lite_flag_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Client_Strategy_Factory</name>
    <filename>classTAO__Default__Client__Strategy__Factory.html</filename>
    <base>TAO_Client_Strategy_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Client_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Client_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_args</name>
      <anchor>a3</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_profile_lock</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Transport_Mux_Strategy *</type>
      <name>create_transport_mux_strategy</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>allow_callback</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Wait_Strategy *</type>
      <name>create_wait_strategy</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_ft_service_retention_id_lock</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>report_option_value_error</name>
      <anchor>b0</anchor>
      <arglist>(const char *option_name, const char *option_value)</arglist>
    </member>
    <member kind="enumeration">
      <name>Lock_Type</name>
      <anchor>u7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_NULL_LOCK</name>
      <anchor>u7u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_THREAD_LOCK</name>
      <anchor>u7u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Transport_Mux_Strategy</name>
      <anchor>u8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_MUXED_TMS</name>
      <anchor>u8u2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_EXCLUSIVE_TMS</name>
      <anchor>u8u3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Wait_Strategy</name>
      <anchor>u9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_WAIT_ON_LEADER_FOLLOWER</name>
      <anchor>u9u4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_WAIT_ON_REACTOR</name>
      <anchor>u9u5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_WAIT_ON_READ</name>
      <anchor>u9u6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Lock_Type</type>
      <name>profile_lock_type_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transport_Mux_Strategy</type>
      <name>transport_mux_strategy_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Wait_Strategy</type>
      <name>wait_strategy_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Collocation_Resolver</name>
    <filename>classTAO__Default__Collocation__Resolver.html</filename>
    <base>TAO_Collocation_Resolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_collocated</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Endpoint_Selector</name>
    <filename>classTAO__Default__Endpoint__Selector.html</filename>
    <base>TAO_Invocation_Endpoint_Selector</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Endpoint_Selector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Endpoint_Selector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>select_endpoint</name>
      <anchor>a2</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forward</name>
      <anchor>a4</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation, const TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>success</name>
      <anchor>a5</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close_connection</name>
      <anchor>a6</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>endpoint_from_profile</name>
      <anchor>b0</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Endpoint_Selector_Factory</name>
    <filename>classTAO__Default__Endpoint__Selector__Factory.html</filename>
    <base>TAO_Endpoint_Selector_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Endpoint_Selector_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Endpoint_Selector_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Invocation_Endpoint_Selector *</type>
      <name>get_selector</name>
      <anchor>a2</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Default_Endpoint_Selector *</type>
      <name>default_endpoint_selector_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Protocols_Hooks</name>
    <filename>classTAO__Default__Protocols__Hooks.html</filename>
    <base>TAO_Protocols_Hooks</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Protocols_Hooks</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init_hooks</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>call_client_protocols_hook</name>
      <anchor>a2</anchor>
      <arglist>(int &amp;send_buffer_size, int &amp;recv_buffer_size, int &amp;no_delay, const char *protocol_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>call_server_protocols_hook</name>
      <anchor>a3</anchor>
      <arglist>(int &amp;send_buffer_size, int &amp;recv_buffer_size, int &amp;no_delay, const char *protocol_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rt_service_context</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Stub *stub, TAO_Service_Context &amp;service_context, CORBA::Boolean restart ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_rt_service_context_hook</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Service_Context &amp;service_context, CORBA::Policy *model_policy, CORBA::Short &amp;client_priority ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_selector_hook</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Policy *model_policy, CORBA::Boolean &amp;is_client_propagated, CORBA::Short &amp;server_priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_selector_bands_policy_hook</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Policy *bands_policy, CORBA::Short &amp;min_priority, CORBA::Short &amp;max_priority, CORBA::Short &amp;p, int &amp;in_range)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_thread_CORBA_priority</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_thread_native_priority</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_thread_CORBA_and_native_priority</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Short &amp;, CORBA::Short &amp;ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_thread_CORBA_priority</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_thread_native_priority</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_default_policies</name>
      <anchor>a13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_default_server_protocol_policy</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Acceptor_Registry &amp;acceptor_registry ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Resource_Factory</name>
    <filename>classTAO__Default__Resource__Factory.html</filename>
    <base>TAO_Resource_Factory</base>
    <member kind="enumvalue">
      <name>TAO_ALLOCATOR_THREAD_LOCK</name>
      <anchor>s1s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_parser_names</name>
      <anchor>a4</anchor>
      <arglist>(char **&amp;names, int &amp;number_of_names)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cdr_allocator_source</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>use_tss_resources</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>use_locked_data_blocks</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor *</type>
      <name>get_reactor</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reclaim_reactor</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Reactor *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor_Registry *</type>
      <name>get_acceptor_registry</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector_Registry *</type>
      <name>get_connector_registry</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>input_cdr_allocator_type_locked</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ProtocolFactorySet *</type>
      <name>get_protocol_factories</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init_protocol_factories</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Resource_Factory::Caching_Strategy</type>
      <name>connection_caching_strategy_type</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_maximum</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_percentage</name>
      <anchor>a23</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_cached_connection_lock</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Flushing_Strategy *</type>
      <name>create_flushing_strategy</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connection_Purging_Strategy *</type>
      <name>create_purging_strategy</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_LF_Strategy *</type>
      <name>create_lf_strategy</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable_factory</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Resource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Resource_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_args</name>
      <anchor>a3</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>allocate_reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>add_to_ior_parser_names</name>
      <anchor>b1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>report_option_value_error</name>
      <anchor>b2</anchor>
      <arglist>(const char *option_name, const char *option_value)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>load_default_protocols</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>use_tss_resources_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>use_locked_data_blocks_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>parser_names_count_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char **</type>
      <name>parser_names_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>index_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ProtocolFactorySet</type>
      <name>protocol_factories_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Resource_Factory::Caching_Strategy</type>
      <name>connection_caching_type_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>cache_maximum_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>purge_percentage_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>reactor_mask_signals_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>dynamically_allocated_reactor_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>options_processed_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>factory_disabled_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Lock_Type</name>
      <anchor>u5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_NULL_LOCK</name>
      <anchor>u5u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_THREAD_LOCK</name>
      <anchor>u5u1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Flushing_Strategy_Type</name>
      <anchor>u6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_LEADER_FOLLOWER_FLUSHING</name>
      <anchor>u6u2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_REACTIVE_FLUSHING</name>
      <anchor>u6u3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_BLOCKING_FLUSHING</name>
      <anchor>u6u4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Lock_Type</type>
      <name>cached_connection_lock_type_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>flushing_strategy_type_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Server_Strategy_Factory</name>
    <filename>classTAO__Default__Server__Strategy__Factory.html</filename>
    <base>TAO_Server_Strategy_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Server_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Server_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enable_poa_locking</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_server_connections</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>thread_per_connection_timeout</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Time_Value &amp;timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_flags</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_count</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_args</name>
      <anchor>a9</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="enumeration">
      <name>Lock_Type</name>
      <anchor>t2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_NULL_LOCK</name>
      <anchor>t2t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_THREAD_LOCK</name>
      <anchor>t2t1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>tokenize</name>
      <anchor>b0</anchor>
      <arglist>(char *flag_string)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>report_option_value_error</name>
      <anchor>b1</anchor>
      <arglist>(const char *option_name, const char *option_value)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>activate_server_connections_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_long</type>
      <name>thread_flags_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Lock_Type</type>
      <name>poa_lock_type_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>thread_per_connection_use_timeout_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>thread_per_connection_timeout_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Stub_Factory</name>
    <filename>classTAO__Default__Stub__Factory.html</filename>
    <base>TAO_Stub_Factory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Stub_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>create_stub</name>
      <anchor>a1</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles, TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Thread_Lane_Resources_Manager</name>
    <filename>classTAO__Default__Thread__Lane__Resources__Manager.html</filename>
    <base>TAO_Thread_Lane_Resources_Manager</base>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources &amp;</type>
      <name>lane_resources</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources &amp;</type>
      <name>default_lane_resources</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Thread_Lane_Resources_Manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Default_Thread_Lane_Resources_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open_default_resources</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown_reactor</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Thread_Lane_Resources *</type>
      <name>lane_resources_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Thread_Lane_Resources_Manager_Factory</name>
    <filename>classTAO__Default__Thread__Lane__Resources__Manager__Factory.html</filename>
    <base>TAO_Thread_Lane_Resources_Manager_Factory</base>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources_Manager *</type>
      <name>create_thread_lane_resources_manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;core)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Delayed_Buffering_Sync_Strategy</name>
    <filename>classTAO__Delayed__Buffering__Sync__Strategy.html</filename>
    <base>TAO_Eager_Buffering_Sync_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a0</anchor>
      <arglist>(int queue_empty)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_DLL_ORB</name>
    <filename>classTAO__DLL__ORB.html</filename>
    <base>ACE_Task_Base</base>
    <member kind="function">
      <type></type>
      <name>TAO_DLL_ORB</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_DLL_ORB</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>orb</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ORB_var</type>
      <name>orb_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_DLL_Parser</name>
    <filename>classTAO__DLL__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_DLL_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_DLL_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Dynamic_Adapter</name>
    <filename>classTAO__Dynamic__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Dynamic_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>create_request</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr obj, CORBA::ORB_ptr orb, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::ExceptionList_ptr exceptions, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Request_ptr</type>
      <name>request</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr obj, CORBA::ORB_ptr orb, const char *op ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>context_is_nil</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Context_ptr ctx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>request_is_nil</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Request_ptr req)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>server_request_is_nil</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ServerRequest_ptr req)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>context_release</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Context_ptr ctx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>request_release</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Request_ptr req)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>server_request_release</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ServerRequest_ptr req)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>create_exception_list</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ExceptionList_ptr &amp;ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Eager_Buffering_Sync_Strategy</name>
    <filename>classTAO__Eager__Buffering__Sync__Strategy.html</filename>
    <base>TAO_Sync_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a0</anchor>
      <arglist>(int queue_empty)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buffering_constraints_reached</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub *stub, size_t msg_count, size_t total_bytes, int &amp;must_flush, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;new_deadline)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>timer_check</name>
      <anchor>c0</anchor>
      <arglist>(const TAO::BufferingConstraint &amp;buffering_constraint, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;new_deadline)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Time_Value</type>
      <name>time_conversion</name>
      <anchor>c1</anchor>
      <arglist>(const TimeBase::TimeT &amp;time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Encodable</name>
    <filename>classTAO__Encodable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Encodable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_encode</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;out_cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_decode</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;in_cdr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Endpoint</name>
    <filename>classTAO__Endpoint.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Endpoint</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, CORBA::Short priority=TAO_INVALID_PRIORITY)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Endpoint</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>priority</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Short priority)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>priority</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Endpoint *other_endpoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Endpoint *</type>
      <name>next</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a7</anchor>
      <arglist>(char *buffer, size_t length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset_hint</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Endpoint *</type>
      <name>duplicate</name>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>a10</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_SYNCH_MUTEX</type>
      <name>addr_lookup_lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Endpoint</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Endpoint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Endpoint &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Short</type>
      <name>priority_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Endpoint_Selector_Factory</name>
    <filename>classTAO__Endpoint__Selector__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Endpoint_Selector_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Invocation_Endpoint_Selector *</type>
      <name>get_selector</name>
      <anchor>a1</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO_Exception_Data</name>
    <filename>structTAO__Exception__Data.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Exception_Alloc</type>
      <name>alloc</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Exceptions</name>
    <filename>classTAO__Exceptions.html</filename>
    <member kind="function" static="yes">
      <type>void</type>
      <name>make_standard_typecode</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::TypeCode_ptr &amp;tcp, const char *name, char *buf, size_t buflen ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>make_unknown_user_typecode</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::TypeCode_ptr &amp;tcp ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init</name>
      <anchor>d2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>fini</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA_SystemException *</type>
      <name>create_system_exception</name>
      <anchor>d4</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>ACE_Allocator *</type>
      <name>global_allocator_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>initialized_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Exclusive_TMS</name>
    <filename>classTAO__Exclusive__TMS.html</filename>
    <base>TAO_Transport_Mux_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Exclusive_TMS</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Exclusive_TMS</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_dispatcher</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unbind_dispatcher</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong request_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idle_after_send</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idle_after_reply</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>request_id_generator_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>has_request_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Reply_Dispatcher *</type>
      <name>rd_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Fault_Tolerance_Service</name>
    <filename>classTAO__Fault__Tolerance__Service.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Fault_Tolerance_Service</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Fault_Tolerance_Service</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Callbacks *</type>
      <name>service_callback</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>client_id</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_id</name>
      <anchor>a5</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Long</type>
      <name>retention_id</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Service_Callbacks *</type>
      <name>ft_service_callback_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CString</type>
      <name>ft_object_id_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Long</type>
      <name>ft_object_retention_id_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock *</type>
      <name>ft_object_retention_id_lock_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_FILE_Parser</name>
    <filename>classTAO__FILE__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_FILE_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_FILE_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Flushing_Strategy</name>
    <filename>classTAO__Flushing__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Flushing_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Asynch_Invocation</name>
    <filename>classTAO__GIOP__Asynch__Invocation.html</filename>
    <base>TAO_GIOP_Invocation</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Asynch_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Asynch_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub *stub, const char *operation, CORBA::ULong opname_len, CORBA::Boolean argument_flag, TAO_ORB_Core *orb_core, int byte_order=TAO_ENCAP_BYTE_ORDER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>invoke</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual int</type>
      <name>invoke_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Asynch_Reply_Dispatcher_Base *</type>
      <name>rd_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Invocation</name>
    <filename>classTAO__GIOP__Invocation.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub *data, const char *operation, CORBA::ULong opname_len, CORBA::Boolean argument_flag, TAO_ORB_Core *orb_core, int byte_order=TAO_ENCAP_BYTE_ORDER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Invocation</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepare_header</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Octet response_flags ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operation</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_OutputCDR &amp;</type>
      <name>out_stream</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart_flag</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_connection</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>perform_call</name>
      <anchor>a12</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface &amp;desc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_inconsistent_policies</name>
      <anchor>a13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>get_inconsistent_policies</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>location_forward</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Object_ptr forward ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>forward_reference</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>received_location_forward</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>stub</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *&amp;</type>
      <name>transport</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList_var &amp;</type>
      <name>inconsistent_policies</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endpoint</name>
      <anchor>a22</anchor>
      <arglist>(TAO_Endpoint *ep)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>profile</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>profile</name>
      <anchor>a24</anchor>
      <arglist>(TAO_Profile *p)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value *</type>
      <name>max_wait_time</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong &amp;</type>
      <name>profile_index</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>invoke</name>
      <anchor>b0</anchor>
      <arglist>(CORBA::Boolean is_synchronous ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>location_forward</name>
      <anchor>b1</anchor>
      <arglist>(TAO_InputCDR &amp;inp_stream ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>location_forward_i</name>
      <anchor>b2</anchor>
      <arglist>(TAO_Stub *stubobj ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Stub *</type>
      <name>stub_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char</type>
      <name>buffer_</name>
      <anchor>n1</anchor>
      <arglist>[ACE_CDR::DEFAULT_BUFSIZE]</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Operation_Details</type>
      <name>op_details_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Target_Specification</type>
      <name>target_spec_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_OutputCDR</type>
      <name>out_stream_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Invocation_Endpoint_Selector *</type>
      <name>endpoint_selector_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::PolicyList_var</type>
      <name>inconsistent_policies_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Profile *</type>
      <name>profile_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Endpoint *</type>
      <name>endpoint_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Countdown_Time *</type>
      <name>countdown_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>restart_flag_</name>
      <anchor>n14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_var</type>
      <name>forward_reference_</name>
      <anchor>n15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>received_location_forward_</name>
      <anchor>n16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>profile_index_</name>
      <anchor>n17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>max_wait_time_value_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value *</type>
      <name>max_wait_time_</name>
      <anchor>n13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Locate_Request_Header</name>
    <filename>classTAO__GIOP__Locate__Request__Header.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Locate_Request_Header</name>
      <anchor>a0</anchor>
      <arglist>(TAO_InputCDR &amp;msg, TAO_ORB_Core *core)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_id</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Tagged_Profile &amp;</type>
      <name>profile</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_InputCDR &amp;</type>
      <name>incoming_stream</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Tagged_Profile</type>
      <name>profile_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ObjectKey</type>
      <name>object_key_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_InputCDR *</type>
      <name>incoming_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Locate_Request_Invocation</name>
    <filename>classTAO__GIOP__Locate__Request__Invocation.html</filename>
    <base>TAO_GIOP_Synch_Invocation</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Locate_Request_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Stub *data, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_GIOP_Locate_Request_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invoke</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Locate_Status_Msg</name>
    <filename>classTAO__GIOP__Locate__Status__Msg.html</filename>
    <member kind="variable">
      <type>CORBA::Object_var</type>
      <name>forward_location_var</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Locate_Status_Type</type>
      <name>status</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Base</name>
    <filename>classTAO__GIOP__Message__Base.html</filename>
    <base>TAO_Pluggable_Messaging</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Base</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, size_t input_cdr_size=ACE_CDR::DEFAULT_BUFSIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Message_Base</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_request_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_reply_header</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read_message</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Transport *transport, int block=0, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>format_message</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_incoming_messages</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>missing_data</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>extract_next_message</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Queued_Data *&amp;qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_node</name>
      <anchor>a12</anchor>
      <arglist>(TAO_Queued_Data *qd, ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_message_data</name>
      <anchor>a13</anchor>
      <arglist>(TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_fragments</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Queued_Data *dqd, const TAO_Queued_Data *sqd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_request_message</name>
      <anchor>a15</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_reply_message</name>
      <anchor>a16</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;reply_info, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_exception_reply</name>
      <anchor>a17</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params, CORBA::Exception &amp;x)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>process_request</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>process_locate_request</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>set_state</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>dump_msg</name>
      <anchor>b3</anchor>
      <arglist>(const char *label, const u_char *ptr, size_t len)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_Pluggable_Message_Type</type>
      <name>message_type</name>
      <anchor>b4</anchor>
      <arglist>(TAO_GIOP_Message_State &amp;state)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_GIOP_Message_Generator_Parser *</type>
      <name>generator_parser_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write_protocol_header</name>
      <anchor>c0</anchor>
      <arglist>(TAO_GIOP_Message_Type t, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>make_send_locate_reply</name>
      <anchor>c1</anchor>
      <arglist>(TAO_Transport *transport, TAO_GIOP_Locate_Request_Header &amp;request, TAO_GIOP_Locate_Status_Msg &amp;status, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>send_error</name>
      <anchor>c2</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>send_close_connection</name>
      <anchor>c3</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;version, TAO_Transport *transport, void *ctx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>send_reply_exception</name>
      <anchor>c4</anchor>
      <arglist>(TAO_Transport *transport, TAO_ORB_Core *orb_core, CORBA::ULong request_id, IOP::ServiceContextList *svc_info, CORBA::Exception *x)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_reply_header</name>
      <anchor>c5</anchor>
      <arglist>(TAO_OutputCDR &amp;, TAO_Pluggable_Reply_Params_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Queued_Data *</type>
      <name>make_queued_data</name>
      <anchor>c7</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_GIOP_Message_State</type>
      <name>message_state_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_GIOP_Message_Generator_Parser_Impl</type>
      <name>tao_giop_impl_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser</name>
    <filename>classTAO__GIOP__Message__Generator__Parser.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_request_header</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_locate_request_header</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_reply_header</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parse_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ServerRequest &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parse_locate_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_reply</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_reply</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Octet</type>
      <name>major_version</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>marshal_reply_status</name>
      <anchor>b0</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_10</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__10.html</filename>
    <base>TAO_GIOP_Message_Generator_Parser</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_request_header</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_request_header</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_reply_header</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_reply</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_reply</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>major_version</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_11</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__11.html</filename>
    <base>TAO_GIOP_Message_Generator_Parser_10</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_12</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__12.html</filename>
    <base>TAO_GIOP_Message_Generator_Parser</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_request_header</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_request_header</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_reply_header</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_reply</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_reply</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>major_version</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>marshall_target_spec</name>
      <anchor>c0</anchor>
      <arglist>(TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>check_bidirectional_context</name>
      <anchor>c1</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_bidir_context</name>
      <anchor>c2</anchor>
      <arglist>(TAO_Service_Context &amp;, TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_Impl</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__Impl.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>check_revision</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::Octet incoming_major, CORBA::Octet incoming_minor)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Message_Generator_Parser_10</type>
      <name>tao_giop_10</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Message_Generator_Parser_11</type>
      <name>tao_giop_11</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Message_Generator_Parser_12</type>
      <name>tao_giop_12</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Lite</name>
    <filename>classTAO__GIOP__Message__Lite.html</filename>
    <base>TAO_Pluggable_Messaging</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Lite</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, size_t input_cdr_size=ACE_CDR::DEFAULT_BUFSIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Message_Lite</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Octet, CORBA::Octet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_request_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_reply_header</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read_message</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Transport *transport, int block=0, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>format_message</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_incoming_messages</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pluggable_Message_Type</type>
      <name>message_type</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>missing_data</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>extract_next_message</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Queued_Data *&amp;qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_node</name>
      <anchor>a13</anchor>
      <arglist>(TAO_Queued_Data *qd, ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_message_data</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_fragments</name>
      <anchor>a15</anchor>
      <arglist>(TAO_Queued_Data *dqd, const TAO_Queued_Data *sqd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_request_message</name>
      <anchor>a16</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_reply_message</name>
      <anchor>a17</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;reply_info, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_exception_reply</name>
      <anchor>a18</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params, CORBA::Exception &amp;x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write_protocol_header</name>
      <anchor>c0</anchor>
      <arglist>(TAO_GIOP_Message_Type t, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_request</name>
      <anchor>c1</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_locate_request</name>
      <anchor>c2</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>make_send_locate_reply</name>
      <anchor>c3</anchor>
      <arglist>(TAO_Transport *transport, TAO_OutputCDR &amp;output, TAO_GIOP_Locate_Request_Header &amp;request, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>send_error</name>
      <anchor>c4</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>send_close_connection</name>
      <anchor>c5</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;version, TAO_Transport *transport, void *ctx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>send_reply_exception</name>
      <anchor>c6</anchor>
      <arglist>(TAO_Transport *transport, TAO_ORB_Core *orb_core, CORBA::ULong request_id, IOP::ServiceContextList *svc_info, CORBA::Exception *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dump_msg</name>
      <anchor>c7</anchor>
      <arglist>(const char *label, const u_char *ptr, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Queued_Data *</type>
      <name>make_queued_data</name>
      <anchor>c8</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_reply_header</name>
      <anchor>c9</anchor>
      <arglist>(TAO_OutputCDR &amp;, TAO_Pluggable_Reply_Params_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>c10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write_request_header</name>
      <anchor>c11</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write_locate_request_header</name>
      <anchor>c12</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write_reply_header</name>
      <anchor>c13</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>c14</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_request_header</name>
      <anchor>c15</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_locate_header</name>
      <anchor>c16</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_reply</name>
      <anchor>c17</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_locate_reply</name>
      <anchor>c18</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>message_type_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>message_size_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>byte_order_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_State</name>
    <filename>classTAO__GIOP__Message__State.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_State</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_GIOP_Message_Base *base)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_message_header</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>message_size</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>payload_size</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet</type>
      <name>byte_order</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_message_header_i</name>
      <anchor>c0</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_magic_bytes</name>
      <anchor>c1</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_version_info</name>
      <anchor>c2</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_byte_order_info</name>
      <anchor>c3</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_payload_size</name>
      <anchor>c4</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_fragment_header</name>
      <anchor>c5</anchor>
      <arglist>(char *buf, size_t length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::ULong</type>
      <name>read_ulong</name>
      <anchor>c6</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_GIOP_Message_Base *</type>
      <name>base_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_GIOP_Message_Version</type>
      <name>giop_version_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>byte_order_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>message_type_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>message_size_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>more_fragments_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>missing_data_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_GIOP_Message_Base</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Version</name>
    <filename>classTAO__GIOP__Message__Version.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Version</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Version</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Octet maj=TAO_DEF_GIOP_MAJOR, CORBA::Octet min=TAO_DEF_GIOP_MINOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_GIOP_Message_Version</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_version</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Octet maj, CORBA::Octet min)</arglist>
    </member>
    <member kind="function">
      <type>TAO_GIOP_Message_Version &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>major</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>minor</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Oneway_Invocation</name>
    <filename>classTAO__GIOP__Oneway__Invocation.html</filename>
    <base>TAO_GIOP_Synch_Invocation</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Oneway_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Stub *stub, const char *operation, CORBA::ULong opname_len, CORBA::Boolean argument_flag, TAO_ORB_Core *orb_core, int byte_order=TAO_ENCAP_BYTE_ORDER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Oneway_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invoke</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO::SyncScope</type>
      <name>sync_scope</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::SyncScope</type>
      <name>sync_scope_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_ReplyHeader</name>
    <filename>classTAO__GIOP__ReplyHeader.html</filename>
    <member kind="variable">
      <type>IOP::ServiceContextList</type>
      <name>service_info</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Reply_Status_Type</type>
      <name>reply_status</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Synch_Invocation</name>
    <filename>classTAO__GIOP__Synch__Invocation.html</filename>
    <base>TAO_GIOP_Invocation</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Synch_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Synch_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub *stub, const char *operation, CORBA::ULong opname_len, CORBA::Boolean argument_flag, TAO_ORB_Core *orb_core, int byte_order=TAO_ENCAP_BYTE_ORDER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Synch_Invocation</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_InputCDR &amp;</type>
      <name>inp_stream</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>invoke_i</name>
      <anchor>b0</anchor>
      <arglist>(CORBA::Boolean is_locate_request ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Synch_Reply_Dispatcher</type>
      <name>rd_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Twoway_Asynch_Invocation</name>
    <filename>classTAO__GIOP__Twoway__Asynch__Invocation.html</filename>
    <base>TAO_GIOP_Asynch_Invocation</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Twoway_Asynch_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Stub *stub, const char *operation, CORBA::ULong opname_len_, CORBA::Boolean argument_flag, TAO_ORB_Core *orb_core, const TAO_Reply_Handler_Skeleton &amp;reply_handler_skel, Messaging::ReplyHandler_ptr reply_handler_ptr)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>invoke_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Twoway_Invocation</name>
    <filename>classTAO__GIOP__Twoway__Invocation.html</filename>
    <base>TAO_GIOP_Synch_Invocation</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Twoway_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Stub *stub, const char *operation, CORBA::ULong opname_len, CORBA::Boolean argument_flag, TAO_ORB_Core *orb_core, int byte_order=TAO_ENCAP_BYTE_ORDER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Twoway_Invocation</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invoke</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Exception_Data *excepts, CORBA::ULong except_count ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_states</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Utils</name>
    <filename>classTAO__GIOP__Utils.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>read_bytes_input</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;cdr, CORBA::ULong buf_size, ACE_Time_Value *value=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>read_buffer</name>
      <anchor>d1</anchor>
      <arglist>(TAO_Transport *transport, char *buf, size_t len, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IFR_Client_Adapter</name>
    <filename>classTAO__IFR__Client__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IFR_Client_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>interfacedef_cdr_insert</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, CORBA_InterfaceDef_ptr object_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interfacedef_any_insert</name>
      <anchor>a2</anchor>
      <arglist>(CORBA_Any &amp;any, CORBA_InterfaceDef_ptr object_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dispose</name>
      <anchor>a3</anchor>
      <arglist>(CORBA_InterfaceDef_ptr orphan)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_InterfaceDef_ptr</type>
      <name>get_interface</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ORB_ptr orb, const char *repo_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_InterfaceDef_ptr</type>
      <name>get_interface_remote</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Acceptor</name>
    <filename>classTAO__IIOP__Acceptor.html</filename>
    <base>TAO_Acceptor</base>
    <member kind="typedef">
      <type>ACE_Strategy_Acceptor&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_ACCEPTOR &gt;</type>
      <name>TAO_IIOP_BASE_ACCEPTOR</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Creation_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>TAO_IIOP_CREATION_STRATEGY</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Concurrency_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>TAO_IIOP_CONCURRENCY_STRATEGY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Accept_Strategy&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_ACCEPTOR &gt;</type>
      <name>TAO_IIOP_ACCEPT_STRATEGY</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr &amp;</type>
      <name>address</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr *</type>
      <name>endpoints</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int version_major, int version_minor, const char *address, const char *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open_default</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int version_major, int version_minor, const char *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create_profile</name>
      <anchor>a7</anchor>
      <arglist>(const TAO_ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_collocated</name>
      <anchor>a8</anchor>
      <arglist>(const TAO_Endpoint *endpoint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>endpoint_count</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>object_key</name>
      <anchor>a10</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile, TAO_ObjectKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hostname</name>
      <anchor>a11</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_INET_Addr &amp;addr, char *&amp;host, const char *specified_hostname=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dotted_decimal_address</name>
      <anchor>a12</anchor>
      <arglist>(ACE_INET_Addr &amp;addr, char *&amp;host)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>open_i</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, ACE_Reactor *reactor)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>probe_interfaces</name>
      <anchor>b1</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_options</name>
      <anchor>b2</anchor>
      <arglist>(const char *options)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>init_tcp_properties</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>create_new_profile</name>
      <anchor>b4</anchor>
      <arglist>(const TAO_ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>create_shared_profile</name>
      <anchor>b5</anchor>
      <arglist>(const TAO_ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_INET_Addr *</type>
      <name>addrs_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>u_short</type>
      <name>port_span_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char **</type>
      <name>hosts_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>endpoint_count_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_GIOP_Message_Version</type>
      <name>version_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_IIOP_Properties</type>
      <name>tcp_properties_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>lite_flag_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_BASE_ACCEPTOR</type>
      <name>base_acceptor_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_CREATION_STRATEGY *</type>
      <name>creation_strategy_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_CONCURRENCY_STRATEGY *</type>
      <name>concurrency_strategy_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_ACCEPT_STRATEGY *</type>
      <name>accept_strategy_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Connection_Handler</name>
    <filename>classTAO__IIOP__Connection__Handler.html</filename>
    <base>ACE_Svc_Handler&lt; ACE_SOCK_STREAM, ACE_NULL_SYNCH &gt;</base>
    <base>TAO_Connection_Handler</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Connection_Handler</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *t=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Connection_Handler</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core, CORBA::Boolean flag, void *arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Connection_Handler</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a4</anchor>
      <arglist>(long flags=THR_NEW_LWP, int n_threads=1, int force_active=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, ACE_Task_Base *task=0, ACE_hthread_t thread_handles[]=0, void *stack[]=0, size_t stack_size[]=0, ACE_thread_t thread_names[]=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>a6</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE, ACE_Reactor_Mask=ACE_Event_Handler::NULL_MASK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_output</name>
      <anchor>a8</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_transport_to_cache</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>process_listen_point_list</name>
      <anchor>a10</anchor>
      <arglist>(IIOP::ListenPointList &amp;listen_list)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>b0</anchor>
      <arglist>(ACE_HANDLE=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handle_close_i</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_Properties *</type>
      <name>tcp_properties_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Connector</name>
    <filename>classTAO__IIOP__Connector.html</filename>
    <base>TAO_Connector</base>
    <member kind="typedef">
      <type>TAO_Connect_Concurrency_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>TAO_IIOP_CONNECT_CONCURRENCY_STRATEGY</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Connect_Creation_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>TAO_IIOP_CONNECT_CREATION_STRATEGY</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Connect_Strategy&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_CONNECTOR &gt;</type>
      <name>TAO_IIOP_CONNECT_STRATEGY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Strategy_Connector&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_CONNECTOR &gt;</type>
      <name>TAO_IIOP_BASE_CONNECTOR</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Connector</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Connector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchor>a4</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation, TAO_Transport_Descriptor_Interface *desc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preconnect</name>
      <anchor>a5</anchor>
      <arglist>(const char *preconnections)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>create_profile</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>check_prefix</name>
      <anchor>a7</anchor>
      <arglist>(const char *endpoint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual TAO_Profile *</type>
      <name>make_profile</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>init_tcp_properties</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_IIOP_Properties</type>
      <name>tcp_properties_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>lite_flag_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_CONNECT_STRATEGY</type>
      <name>connect_strategy_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_BASE_CONNECTOR</type>
      <name>base_connector_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Endpoint</name>
    <filename>classTAO__IIOP__Endpoint.html</filename>
    <base>TAO_Endpoint</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a1</anchor>
      <arglist>(const char *host, CORBA::UShort port, const ACE_INET_Addr &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, int use_dotted_decimal_addresses)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a3</anchor>
      <arglist>(const char *host, CORBA::UShort port, CORBA::Short priority)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Endpoint</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>next</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a6</anchor>
      <arglist>(char *buffer, size_t length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_hint</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>duplicate</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a9</anchor>
      <arglist>(const TAO_Endpoint *other_endpoint)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>hash</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr &amp;</type>
      <name>object_addr</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>host</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>host</name>
      <anchor>a13</anchor>
      <arglist>(const char *h)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::UShort</type>
      <name>port</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::UShort</type>
      <name>port</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::UShort p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>set</name>
      <anchor>c0</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, int use_dotted_decimal_addresses)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::String_var</type>
      <name>host_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::UShort</type>
      <name>port_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INET_Addr</type>
      <name>object_addr_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_Endpoint *</type>
      <name>next_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_IIOP_Profile</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_SSLIOP_Profile</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO_IIOP_Endpoint_Info</name>
    <filename>structTAO__IIOP__Endpoint__Info.html</filename>
    <member kind="typedef">
      <type>TAO_IIOP_Endpoint_Info_var</type>
      <name>_var_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_String_Manager</type>
      <name>host</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Short</type>
      <name>port</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Short</type>
      <name>priority</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>host</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>port</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>priority</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Lite_Protocol_Factory</name>
    <filename>classTAO__IIOP__Lite__Protocol__Factory.html</filename>
    <base>TAO_Protocol_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Lite_Protocol_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IIOP_Lite_Protocol_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_CString &amp;prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>prefix</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>options_delimiter</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor *</type>
      <name>make_acceptor</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector *</type>
      <name>make_connector</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>requires_explicit_endpoint</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>major_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>minor_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Profile</name>
    <filename>classTAO__IIOP__Profile.html</filename>
    <base>TAO_Profile</base>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Profile</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, const TAO_ObjectKey &amp;object_key, const TAO_GIOP_Message_Version &amp;version, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Profile</name>
      <anchor>a2</anchor>
      <arglist>(const char *host, CORBA::UShort port, const TAO_ObjectKey &amp;object_key, const ACE_INET_Addr &amp;addr, const TAO_GIOP_Message_Version &amp;version, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Profile</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Profile</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string</name>
      <anchor>a5</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>to_string</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;stream) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ObjectKey *</type>
      <name>_key</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>endpoint_count</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_endpoint</name>
      <anchor>a14</anchor>
      <arglist>(TAO_IIOP_Endpoint *endp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a15</anchor>
      <arglist>(const TAO_Profile *other_profile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedProfile &amp;</type>
      <name>create_tagged_profile</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>prefix</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>object_key_delimiter_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_IIOP_Endpoint</type>
      <name>endpoint_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>count_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>create_profile_body</name>
      <anchor>c0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>decode_endpoints</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ObjectKey</type>
      <name>object_key_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::TaggedProfile</type>
      <name>tagged_profile_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Properties</name>
    <filename>classTAO__IIOP__Properties.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>send_buffer_size</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>recv_buffer_size</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>no_delay</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Protocol_Factory</name>
    <filename>classTAO__IIOP__Protocol__Factory.html</filename>
    <base>TAO_Protocol_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Protocol_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IIOP_Protocol_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_CString &amp;prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>prefix</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>options_delimiter</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor *</type>
      <name>make_acceptor</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector *</type>
      <name>make_connector</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>requires_explicit_endpoint</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>major_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>minor_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Transport</name>
    <filename>classTAO__IIOP__Transport.html</filename>
    <base>TAO_Transport</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send_request</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Stub *stub, TAO_ORB_Core *orb_core, TAO_OutputCDR &amp;stream, int twoway, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send_message</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;stream, TAO_Stub *stub=0, int twoway=1, ACE_Time_Value *max_time_wait=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>messaging_init</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tear_listen_point_list</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Event_Handler *</type>
      <name>event_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual TAO_Pluggable_Messaging *</type>
      <name>messaging_object</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>send_i</name>
      <anchor>b2</anchor>
      <arglist>(iovec *iov, int iovcnt, size_t &amp;bytes_transferred, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>recv_i</name>
      <anchor>b3</anchor>
      <arglist>(char *buf, size_t len, const ACE_Time_Value *s=0)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>transition_handler_state_i</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Transport</name>
      <anchor>a0</anchor>
      <arglist>(TAO_IIOP_Connection_Handler *handler, TAO_ORB_Core *orb_core, CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Transport</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_bidir_context_info</name>
      <anchor>c0</anchor>
      <arglist>(TAO_Operation_Details &amp;opdetails)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_listen_point</name>
      <anchor>c1</anchor>
      <arglist>(IIOP::ListenPointList &amp;listen_point_list, TAO_Acceptor *acceptor)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_Connection_Handler *</type>
      <name>connection_handler_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Pluggable_Messaging *</type>
      <name>messaging_object_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOPEndpointSequence</name>
    <filename>classTAO__IIOPEndpointSequence.html</filename>
    <base>_TAO_Unbounded_Sequence_TAO_IIOPEndpointSequence</base>
    <member kind="typedef">
      <type>TAO_IIOPEndpointSequence_var</type>
      <name>_var_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOPEndpointSequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOPEndpointSequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOPEndpointSequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, TAO_IIOP_Endpoint_Info *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOPEndpointSequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_IIOPEndpointSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOPEndpointSequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOPEndpointSequence_var</name>
    <filename>classTAO__IIOPEndpointSequence__var.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_IIOPEndpointSequence_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOPEndpointSequence_var</name>
      <anchor>a1</anchor>
      <arglist>(TAO_IIOPEndpointSequence *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOPEndpointSequence_var</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_IIOPEndpointSequence_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOPEndpointSequence_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOPEndpointSequence_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(TAO_IIOPEndpointSequence *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOPEndpointSequence_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_IIOPEndpointSequence_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOPEndpointSequence *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_IIOPEndpointSequence *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const TAO_IIOPEndpointSequence &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_IIOPEndpointSequence &amp;</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_IIOPEndpointSequence &amp;</name>
      <anchor>a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_IIOPEndpointSequence *&amp;</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOP_Endpoint_Info &amp;</type>
      <name>operator[]</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_IIOPEndpointSequence &amp;</type>
      <name>in</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOPEndpointSequence &amp;</type>
      <name>inout</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOPEndpointSequence *&amp;</type>
      <name>out</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOPEndpointSequence *</type>
      <name>_retn</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IIOPEndpointSequence *</type>
      <name>ptr</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOPEndpointSequence *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Incoming_Message_Queue</name>
    <filename>classTAO__Incoming__Message__Queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Incoming_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Incoming_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Queued_Data *</type>
      <name>dequeue_head</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Queued_Data *</type>
      <name>dequeue_tail</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enqueue_tail</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Queued_Data *nd)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>copy_tail</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block &amp;block)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>queue_length</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_tail_complete</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_head_complete</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_tail_fragmented</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>missing_data_tail</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Queued_Data *</type>
      <name>get_node</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Queued_Data *</type>
      <name>queued_data_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Transport</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_InputCDR</name>
    <filename>classTAO__InputCDR.html</filename>
    <base>ACE_InputCDR</base>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a0</anchor>
      <arglist>(const char *buf, size_t bufsiz, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a1</anchor>
      <arglist>(size_t bufsiz, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Message_Block *data, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Data_Block *data, ACE_Message_Block::Message_Flags flag=0, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Data_Block *data, ACE_Message_Block::Message_Flags flag, size_t read_pointer_position, size_t write_pointer_position, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_InputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_InputCDR &amp;rhs, size_t size, ACE_CDR::Long offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a7</anchor>
      <arglist>(const TAO_InputCDR &amp;rhs, size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a8</anchor>
      <arglist>(const TAO_OutputCDR &amp;rhs, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a9</anchor>
      <arglist>(ACE_InputCDR::Transfer_Contents rhs, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_InputCDR</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_translators</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Interceptor_List</name>
    <filename>classTAO__Interceptor__List.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Interceptor_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Interceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>size_t</type>
      <name>add_interceptor_i</name>
      <anchor>b0</anchor>
      <arglist>(PortableInterceptor::Interceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual size_t</type>
      <name>length</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>length</name>
      <anchor>b2</anchor>
      <arglist>(size_t)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual PortableInterceptor::Interceptor_ptr</type>
      <name>interceptor</name>
      <anchor>b3</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Internal</name>
    <filename>classTAO__Internal.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>open_services</name>
      <anchor>d0</anchor>
      <arglist>(int &amp;argc, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>close_services</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>default_svc_conf_entries</name>
      <anchor>d2</anchor>
      <arglist>(const char *resource_factory_args, const char *server_strategy_factory_args, const char *client_strategy_factory_args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Internal</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>open_services_i</name>
      <anchor>f0</anchor>
      <arglist>(int &amp;argc, char **argv, int ignore_default_svc_conf_file=0, int skip_service_config_open=0)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>service_open_count_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const char *</type>
      <name>resource_factory_args_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const char *</type>
      <name>server_strategy_factory_args_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>const char *</type>
      <name>client_strategy_factory_args_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Invocation_Endpoint_Selector</name>
    <filename>classTAO__Invocation__Endpoint__Selector.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Invocation_Endpoint_Selector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Invocation_Endpoint_Selector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>select_endpoint</name>
      <anchor>a2</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a3</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forward</name>
      <anchor>a4</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation, const TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>success</name>
      <anchor>a5</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close_connection</name>
      <anchor>a6</anchor>
      <arglist>(TAO_GIOP_Invocation *invocation)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IOP_IOR</name>
    <filename>classTAO__IOP__IOR.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>type_id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_IOP_Tagged_Profile_Sequence</type>
      <name>profiles</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IOP_Tagged_Profile</name>
    <filename>classTAO__IOP__Tagged__Profile.html</filename>
    <member kind="variable">
      <type>TAO_IOP_Profile_ID</type>
      <name>tag</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_opaque</type>
      <name>profile_data</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IOP_TaggedComponent</name>
    <filename>classTAO__IOP__TaggedComponent.html</filename>
    <member kind="variable">
      <type>TAO_IOP_ComponentId</type>
      <name>tag</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_opaque</type>
      <name>component_data</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IOR_Parser</name>
    <filename>classTAO__IOR__Parser.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IOR_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a1</anchor>
      <arglist>(const char *ior_string) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IORInterceptor_List</name>
    <filename>classTAO__IORInterceptor__List.html</filename>
    <base>TAO_Interceptor_List</base>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; PortableInterceptor::IORInterceptor_ptr &gt;</type>
      <name>TYPE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IORInterceptor_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IORInterceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr i ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>interceptors</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual size_t</type>
      <name>length</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>length</name>
      <anchor>b1</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual PortableInterceptor::Interceptor_ptr</type>
      <name>interceptor</name>
      <anchor>b2</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>interceptors_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Leader_Follower</name>
    <filename>classTAO__Leader__Follower.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Leader_Follower</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_New_Leader_Generator *new_leader_generator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Leader_Follower</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_event_loop_thread</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_event_loop_thread</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_upcall_thread</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>leader_available</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_client_thread</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_client_thread</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait_for_event</name>
      <anchor>a8</anchor>
      <arglist>(TAO_LF_Event *event, TAO_Transport *transport, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_client_leader_thread</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_client_leader_thread</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_client_leader_thread</name>
      <anchor>a11</anchor>
      <arglist>(ACE_thread_t thread_ID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_client_leader_thread</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elect_new_leader</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SYNCH_MUTEX &amp;</type>
      <name>lock</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Lock&lt; TAO_SYNCH_MUTEX &gt; &amp;</type>
      <name>reverse_lock</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>has_clients</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reactor *</type>
      <name>reactor</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>no_leaders_available</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Follower *</type>
      <name>allocate_follower</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_follower</name>
      <anchor>a15</anchor>
      <arglist>(TAO_LF_Follower *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_follower</name>
      <anchor>a16</anchor>
      <arglist>(TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_follower</name>
      <anchor>a17</anchor>
      <arglist>(TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>follower_available</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Intrusive_List&lt; TAO_LF_Follower &gt;</type>
      <name>Follower_Set</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_ORB_Core_TSS_Resources *</type>
      <name>get_tss_resources</name>
      <anchor>c0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>wait_for_client_leader_to_complete</name>
      <anchor>c1</anchor>
      <arglist>(ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_event_loop_thread_i</name>
      <anchor>c2</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources *tss)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>elect_new_leader_i</name>
      <anchor>c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Reverse_Lock&lt; TAO_SYNCH_MUTEX &gt;</type>
      <name>reverse_lock_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Follower_Set</type>
      <name>follower_set_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Follower_Set</type>
      <name>follower_free_list_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>leaders_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>clients_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>client_thread_is_leader_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>event_loop_threads_waiting_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_CONDITION</type>
      <name>event_loop_threads_condition_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_New_Leader_Generator *</type>
      <name>new_leader_generator_</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Leader_Follower_Flushing_Strategy</name>
    <filename>classTAO__Leader__Follower__Flushing__Strategy.html</filename>
    <base>TAO_Flushing_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Client_Leader_Thread_Helper</name>
    <filename>classTAO__LF__Client__Leader__Thread__Helper.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Client_Leader_Thread_Helper</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Client_Leader_Thread_Helper</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Client_Thread_Helper</name>
    <filename>classTAO__LF__Client__Thread__Helper.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Client_Thread_Helper</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Client_Thread_Helper</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Event</name>
    <filename>classTAO__LF__Event.html</filename>
    <member kind="enumvalue">
      <name>LFS_IDLE</name>
      <anchor>s6s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_ACTIVE</name>
      <anchor>s6s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_SUCCESS</name>
      <anchor>s6s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_FAILURE</name>
      <anchor>s6s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_TIMEOUT</name>
      <anchor>s6s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_CONNECTION_CLOSED</name>
      <anchor>s6s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state_changed</name>
      <anchor>a4</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>successful</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error_detected</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Event</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_Event</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a2</anchor>
      <arglist>(TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>keep_waiting</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_state</name>
      <anchor>a8</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>state_changed_i</name>
      <anchor>b0</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>is_state_final</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_state</name>
      <anchor>c1</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_LF_Follower *</type>
      <name>follower_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Leader_Follower</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Event_Binder</name>
    <filename>classTAO__LF__Event__Binder.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Event_Binder</name>
      <anchor>a0</anchor>
      <arglist>(TAO_LF_Event *event, TAO_LF_Follower *folloer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Event_Binder</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_LF_Event *</type>
      <name>event_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Event_Loop_Thread_Helper</name>
    <filename>classTAO__LF__Event__Loop__Thread__Helper.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Event_Loop_Thread_Helper</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower, TAO_LF_Strategy &amp;lf_strategy, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Event_Loop_Thread_Helper</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>event_loop_return</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_LF_Strategy &amp;</type>
      <name>lf_strategy_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>event_loop_return_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Follower</name>
    <filename>classTAO__LF__Follower.html</filename>
    <base>ACE_Intrusive_List_Node&lt; TAO_LF_Follower &gt;</base>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Follower</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Follower</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_SYNCH_CONDITION</type>
      <name>condition_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Follower_Auto_Adder</name>
    <filename>classTAO__LF__Follower__Auto__Adder.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Follower_Auto_Adder</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;, TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Follower_Auto_Adder</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_LF_Follower *</type>
      <name>follower_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Follower_Auto_Ptr</name>
    <filename>classTAO__LF__Follower__Auto__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Follower_Auto_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Follower_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Follower *</type>
      <name>get</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Follower *</type>
      <name>operator-&gt;</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_LF_Follower *</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_LF_Follower *</type>
      <name>follower_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Strategy</name>
    <filename>classTAO__LF__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_upcall_thread</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Leader_Follower &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_event_loop_thread</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Leader_Follower &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset_event_loop_thread</name>
      <anchor>a3</anchor>
      <arglist>(int call_reset, TAO_Leader_Follower &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Strategy_Complete</name>
    <filename>classTAO__LF__Strategy__Complete.html</filename>
    <base>TAO_LF_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Strategy_Complete</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_Strategy_Complete</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_upcall_thread</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Leader_Follower &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_event_loop_thread</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Leader_Follower &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_event_loop_thread</name>
      <anchor>a4</anchor>
      <arglist>(int call_reset, TAO_Leader_Follower &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Local_RefCounted_Object</name>
    <filename>classTAO__Local__RefCounted__Object.html</filename>
    <base virtualness="virtual">CORBA_LocalObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Local_RefCounted_Object</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Local_RefCounted_Object</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Local_RefCounted_Object &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Local_RefCounted_Object &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Local_RefCounted_Object &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LRU_Connection_Purging_Strategy</name>
    <filename>classTAO__LRU__Connection__Purging__Strategy.html</filename>
    <base>TAO_Connection_Purging_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_LRU_Connection_Purging_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(int cache_maximum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LRU_Connection_Purging_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update_item</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>order_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Alias</name>
    <filename>classTAO__Marshal__Alias.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Alias</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Any</name>
    <filename>classTAO__Marshal__Any.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Any</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Array</name>
    <filename>classTAO__Marshal__Array.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Array</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Except</name>
    <filename>classTAO__Marshal__Except.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Except</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Object</name>
    <filename>classTAO__Marshal__Object.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Object</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Marshal_Object</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode::traverse_status</type>
      <name>perform_skip</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode::traverse_status</type>
      <name>perform_append</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_ObjRef</name>
    <filename>classTAO__Marshal__ObjRef.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_ObjRef</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Primitive</name>
    <filename>classTAO__Marshal__Primitive.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Primitive</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Principal</name>
    <filename>classTAO__Marshal__Principal.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Principal</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Sequence</name>
    <filename>classTAO__Marshal__Sequence.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_String</name>
    <filename>classTAO__Marshal__String.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_String</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Struct</name>
    <filename>classTAO__Marshal__Struct.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Struct</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_TypeCode</name>
    <filename>classTAO__Marshal__TypeCode.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_TypeCode</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Union</name>
    <filename>classTAO__Marshal__Union.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Union</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Value</name>
    <filename>classTAO__Marshal__Value.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Value</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>nested_processing_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_WString</name>
    <filename>classTAO__Marshal__WString.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_WString</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_MCAST_Parser</name>
    <filename>classTAO__MCAST__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_MCAST_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_MCAST_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA_Object_ptr</type>
      <name>multicast_to_service</name>
      <anchor>c0</anchor>
      <arglist>(const char *service_name, CORBA::UShort port, const char *mcast_address, const char *mcast_ttl, const char *mcast_nic, CORBA::ORB_ptr orb, ACE_Time_Value *timeout ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>multicast_query</name>
      <anchor>c1</anchor>
      <arglist>(char *&amp;buf, const char *service_name, u_short port, const char *mcast_address, const char *mcast_ttl, const char *mcast_nic, ACE_Time_Value *timeout, CORBA::ORB_ptr orb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign_to_variables</name>
      <anchor>c2</anchor>
      <arglist>(const char *&amp;mcast_name_ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::String_var</type>
      <name>mcast_address_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::String_var</type>
      <name>mcast_port_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::String_var</type>
      <name>mcast_nic_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::String_var</type>
      <name>mcast_ttl_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::String_var</type>
      <name>service_name_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Messaging_ORBInitializer</name>
    <filename>classTAO__Messaging__ORBInitializer.html</filename>
    <base virtualness="virtual">PortableInterceptor::ORBInitializer</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre_init</name>
      <anchor>a0</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_init</name>
      <anchor>a1</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>register_policy_factories</name>
      <anchor>c0</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PortableInterceptor::PolicyFactory_var</type>
      <name>policy_factory_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Messaging_PolicyFactory</name>
    <filename>classTAO__Messaging__PolicyFactory.html</filename>
    <base virtualness="virtual">PortableInterceptor::PolicyFactory</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>create_policy</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::PolicyType type, const CORBA::Any &amp;value ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_MProfile</name>
    <filename>classTAO__MProfile.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_MProfile</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong sz=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_MProfile</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_MProfile</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong sz)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>grow</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong sz)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_cnext</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_next</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_cprev</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_prev</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_current_profile</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_profile</name>
      <anchor>a12</anchor>
      <arglist>(TAO_PHandle handle)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PHandle</type>
      <name>get_current_handle</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PHandle</type>
      <name>get_current_handle</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>profile_count</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>size</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Profile *</type>
      <name>get_profile</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_profile</name>
      <anchor>a19</anchor>
      <arglist>(TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>give_profile</name>
      <anchor>a20</anchor>
      <arglist>(TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_profiles</name>
      <anchor>a21</anchor>
      <arglist>(TAO_MProfile *pfiles)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_profile</name>
      <anchor>a22</anchor>
      <arglist>(const TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_profiles</name>
      <anchor>a23</anchor>
      <arglist>(const TAO_MProfile *pfiles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_from</name>
      <anchor>a24</anchor>
      <arglist>(TAO_MProfile *mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile *</type>
      <name>forward_from</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a26</anchor>
      <arglist>(const TAO_MProfile *rhs)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>hash</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>policy_list</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::PolicyList *policy_list)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>policy_list</name>
      <anchor>a29</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>create_policy_list</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>init_policy_list</name>
      <anchor>b1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_Profile **</type>
      <name>pfiles</name>
      <anchor>b2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::PolicyList *</type>
      <name>policy_list_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>is_policy_list_initialized_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_SYNCH_RECURSIVE_MUTEX</type>
      <name>mutex_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_MProfile *</type>
      <name>forward_from_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Profile **</type>
      <name>pfiles_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PHandle</type>
      <name>current_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PHandle</type>
      <name>size_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PHandle</type>
      <name>last_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="public">
      <type>friend class</type>
      <name>TAO_Profile</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Muxed_TMS</name>
    <filename>classTAO__Muxed__TMS.html</filename>
    <base>TAO_Transport_Mux_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Muxed_TMS</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Muxed_TMS</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_dispatcher</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unbind_dispatcher</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong request_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idle_after_send</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idle_after_reply</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="public">
      <type>ACE_Hash_Map_Manager_Ex&lt; CORBA::ULong, TAO_Reply_Dispatcher *, ACE_Hash&lt; CORBA::ULong &gt;, ACE_Equal_To&lt; CORBA::ULong &gt;, ACE_Null_Mutex &gt;</type>
      <name>REQUEST_DISPATCHER_TABLE</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>request_id_generator_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>REQUEST_DISPATCHER_TABLE</type>
      <name>dispatcher_table_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_New_Leader_Generator</name>
    <filename>classTAO__New__Leader__Generator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>no_leaders_available</name>
      <anchor>a0</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Loader</name>
    <filename>classTAO__Object__Loader.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Object_Loader</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>create_object</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ORB_ptr orb, int argc, char *argv[] ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Manager</name>
    <filename>classTAO__Object__Manager.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Object_Manager</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Object_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Object_Manager</name>
      <anchor>a1</anchor>
      <arglist>(T **, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Object_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Object_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T_var</name>
      <anchor>a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>in</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>inout</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>out</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>_retn</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T **</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Unbounded_Object_Sequence&lt; T, T_var &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Proxy_Broker</name>
    <filename>classTAO__Object__Proxy__Broker.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Object_Proxy_Broker</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Object_Proxy_Impl &amp;</type>
      <name>select_proxy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Object_Proxy_Broker</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Proxy_Impl</name>
    <filename>classTAO__Object__Proxy__Impl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Object_Proxy_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a1</anchor>
      <arglist>(const CORBA::Object_ptr target, const CORBA::Char *logical_type_id ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA_InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Object_Proxy_Impl</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Ref_Table</name>
    <filename>classTAO__Object__Ref__Table.html</filename>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; const char *, CORBA::Object_ptr, ACE_Hash&lt; const char *&gt;, ACE_Equal_To&lt; const char *&gt;, TAO_SYNCH_MUTEX &gt;</type>
      <name>Table</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Table::iterator</type>
      <name>Iterator</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Object_Ref_Table</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Object_Ref_Table</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_initial_reference</name>
      <anchor>a2</anchor>
      <arglist>(const char *id, CORBA::Object_ptr obj ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a3</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Object_Ref_Table</name>
      <anchor>c3</anchor>
      <arglist>(const TAO_Object_Ref_Table &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c4</anchor>
      <arglist>(const TAO_Object_Ref_Table &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>bind</name>
      <anchor>c0</anchor>
      <arglist>(const char *orb_id, CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>find</name>
      <anchor>c1</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unbind</name>
      <anchor>c2</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Table</type>
      <name>table_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ObjectKey</name>
    <filename>classTAO__ObjectKey.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</base>
    <member kind="typedef">
      <type>TAO_ObjectKey_var</type>
      <name>_var_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_ObjectKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_ObjectKey &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>encode_sequence_to_string</name>
      <anchor>d0</anchor>
      <arglist>(char *&amp;str, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;seq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>decode_string_to_sequence</name>
      <anchor>d1</anchor>
      <arglist>(TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;seq, const char *str)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ObjectKey_out</name>
    <filename>classTAO__ObjectKey__out.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey_out</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ObjectKey *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey_out</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ObjectKey_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey_out</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ObjectKey_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ObjectKey_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ObjectKey *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_ObjectKey *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ObjectKey_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ObjectKey *&amp;</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ObjectKey_var</name>
    <filename>classTAO__ObjectKey__var.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey_var</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ObjectKey *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ObjectKey_var</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_ObjectKey_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ObjectKey_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ObjectKey *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_ObjectKey_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_ObjectKey *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const TAO_ObjectKey &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_ObjectKey &amp;</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_ObjectKey &amp;</name>
      <anchor>a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_ObjectKey &amp;</type>
      <name>in</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey &amp;</type>
      <name>inout</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey *&amp;</type>
      <name>out</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey *</type>
      <name>_retn</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey *</type>
      <name>ptr</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ObjectKey *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_OBV_GIOP_Flags</name>
    <filename>classTAO__OBV__GIOP__Flags.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_null_ref</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_value_tag</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>has_codebase_url</name>
      <anchor>d2</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>has_no_type_info</name>
      <anchor>d3</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>has_single_type_info</name>
      <anchor>d4</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>has_list_type_info</name>
      <anchor>d5</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_chunked</name>
      <anchor>d6</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_indirection_tag</name>
      <anchor>d7</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_indirection</name>
      <anchor>d8</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_block_size</name>
      <anchor>d9</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_end_tag</name>
      <anchor>d10</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>Value_tag_base</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>Value_tag_sigbits</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>Codebase_url</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>Type_info_sigbits</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>Type_info_none</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>Type_info_single</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>Type_info_list</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Operation_Details</name>
    <filename>classTAO__Operation__Details.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Operation_Details</name>
      <anchor>a0</anchor>
      <arglist>(const char *name, CORBA::ULong len, CORBA::Boolean argument_flag)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>opname</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>opname_len</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>argument_flag</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>response_flags</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Octet flags)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet</type>
      <name>response_flags</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet</type>
      <name>response_flags</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>request_service_info</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::ServiceContextList &amp;</type>
      <name>request_service_info</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>reply_service_info</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::ServiceContextList &amp;</type>
      <name>reply_service_info</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_id</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::ULong id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>modify_request_id</name>
      <anchor>a16</anchor>
      <arglist>(int originator)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Target_Specification::TAO_Target_Address</type>
      <name>addressing_mode</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Target_Specification::TAO_Target_Address</type>
      <name>addressing_mode</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addressing_mode</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Short addr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>opname_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>opname_len_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>argument_flag_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>response_flags_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Service_Context</type>
      <name>request_service_info_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Service_Context</type>
      <name>reply_service_info_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Target_Specification::TAO_Target_Address</type>
      <name>addressing_mode_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Core</name>
    <filename>classTAO__ORB__Core.html</filename>
    <member kind="enumvalue">
      <name>ORB_CONTROL</name>
      <anchor>s6s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THRU_POA</name>
      <anchor>s6s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECT</name>
      <anchor>s6s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>collocation_strategy</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>Timeout_Hook</name>
      <anchor>s0</anchor>
      <arglist>)(TAO_ORB_Core *, TAO_Stub *, int &amp;, ACE_Time_Value &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>Sync_Scope_Hook</name>
      <anchor>s1</anchor>
      <arglist>)(TAO_ORB_Core *, TAO_Stub *, int &amp;, int &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager&lt; ACE_CString, ACE_CString, ACE_Null_Mutex &gt;</type>
      <name>InitRefMap</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core</name>
      <anchor>a0</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Parameters *</type>
      <name>orb_params</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Connector_Registry *</type>
      <name>connector_registry</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Parser_Registry *</type>
      <name>parser_registry</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PolicyFactory_Registry *</type>
      <name>policy_factory_registry</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ProtocolFactorySet *</type>
      <name>protocol_factories</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>orb</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reactor *</type>
      <name>reactor</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>root_poa</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Adapter_Registry *</type>
      <name>adapter_registry</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Adapter *</type>
      <name>poa_adapter</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inherit_from_parent_thread</name>
      <anchor>a23</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources *tss_resources)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Protocols_Hooks *</type>
      <name>get_protocols_hooks</name>
      <anchor>a32</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a33</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator</name>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator</name>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator</name>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator</name>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator</name>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator</name>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>message_block_dblock_allocator</name>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>message_block_buffer_allocator</name>
      <anchor>a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>message_block_msgblock_allocator</name>
      <anchor>a42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>create_input_cdr_data_block</name>
      <anchor>a43</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>locking_strategy</name>
      <anchor>a44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>data_block_for_message_block</name>
      <anchor>a45</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Set *</type>
      <name>get_default_policies</name>
      <anchor>a46</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>get_cached_policy</name>
      <anchor>a47</anchor>
      <arglist>(TAO_Cached_Policy_Type type)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Manager *</type>
      <name>policy_manager</name>
      <anchor>a50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Current &amp;</type>
      <name>policy_current</name>
      <anchor>a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_timeout_hook</name>
      <anchor>a52</anchor>
      <arglist>(TAO_Stub *stub, int &amp;has_timeout, ACE_Time_Value &amp;time_value)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>stubless_relative_roundtrip_timeout</name>
      <anchor>a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_sync_scope_hook</name>
      <anchor>a54</anchor>
      <arglist>(TAO_Stub *stub, int &amp;has_synchronization, int &amp;scope)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Sync_Strategy &amp;</type>
      <name>get_sync_strategy</name>
      <anchor>a55</anchor>
      <arglist>(TAO_Stub *stub, int &amp;scope)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stubless_sync_scope</name>
      <anchor>a56</anchor>
      <arglist>(CORBA::Policy *&amp;result)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>default_buffering_constraint</name>
      <anchor>a57</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Sync_Strategy &amp;</type>
      <name>transport_sync_strategy</name>
      <anchor>a60</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core_TSS_Resources *</type>
      <name>get_tss_resources</name>
      <anchor>a61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_tss_resource</name>
      <anchor>a62</anchor>
      <arglist>(size_t slot_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_tss_resource</name>
      <anchor>a63</anchor>
      <arglist>(size_t slot_id, void *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_tss_cleanup_func</name>
      <anchor>a64</anchor>
      <arglist>(ACE_CLEANUP_FUNC cleanup, size_t &amp;slot_id)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Cleanup_Func_Registry *</type>
      <name>tss_cleanup_funcs</name>
      <anchor>a65</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower</name>
      <anchor>a66</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Strategy &amp;</type>
      <name>lf_strategy</name>
      <anchor>a67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources &amp;</type>
      <name>lane_resources</name>
      <anchor>a68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchor>a69</anchor>
      <arglist>(ACE_Time_Value *tv, int perform_work ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchor>a70</anchor>
      <arglist>(CORBA::Boolean wait_for_completion ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>has_shutdown</name>
      <anchor>a71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a72</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_shutdown</name>
      <anchor>a73</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thread_per_connection_timeout</name>
      <anchor>a74</anchor>
      <arglist>(ACE_Time_Value &amp;timeout) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>create_stub_object</name>
      <anchor>a75</anchor>
      <arglist>(TAO_MProfile &amp;mprofile, const char *type_id, CORBA::PolicyList *policy_list ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>create_stub</name>
      <anchor>a76</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>create_object</name>
      <anchor>a77</anchor>
      <arglist>(TAO_Stub *the_stub)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>orbid</name>
      <anchor>a78</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_typecodefactory</name>
      <anchor>a81</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_dynanyfactory</name>
      <anchor>a82</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_ior_manipulation</name>
      <anchor>a83</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_ior_table</name>
      <anchor>a84</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_rir</name>
      <anchor>a85</anchor>
      <arglist>(const char *name ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_rt_orb</name>
      <anchor>a86</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>server_id</name>
      <anchor>a87</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_rt_current</name>
      <anchor>a88</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_POA_PortableGroup_Hooks *</type>
      <name>portable_group_poa_hooks</name>
      <anchor>a89</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>portable_group_poa_hooks</name>
      <anchor>a90</anchor>
      <arglist>(TAO_POA_PortableGroup_Hooks *poa_hooks)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_ORB_ObjectIdList_ptr</type>
      <name>list_initial_references</name>
      <anchor>a91</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a92</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a93</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_handle</name>
      <anchor>a94</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_handle</name>
      <anchor>a95</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Cache_Manager *</type>
      <name>transport_cache</name>
      <anchor>a115</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>bidir_giop_policy</name>
      <anchor>a116</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bidir_giop_policy</name>
      <anchor>a117</anchor>
      <arglist>(CORBA::Boolean)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Ref_Table &amp;</type>
      <name>object_ref_table</name>
      <anchor>a118</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Request_Dispatcher *</type>
      <name>request_dispatcher</name>
      <anchor>a119</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_dispatcher</name>
      <anchor>a120</anchor>
      <arglist>(TAO_Request_Dispatcher *rd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_policy_validators</name>
      <anchor>a121</anchor>
      <arglist>(TAO_Policy_Validator &amp;validator)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Flushing_Strategy *</type>
      <name>flushing_strategy</name>
      <anchor>a122</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InitRefMap *</type>
      <name>init_ref_map</name>
      <anchor>a123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>poa_current</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poa_current</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Object_ptr poa_current)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>from_iso8859</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>to_iso8859</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>from_unicode</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>to_unicode</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimize_collocation_objects</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Boolean opt)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>optimize_collocation_objects</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use_global_collocation</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Boolean opt)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>use_global_collocation</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>get_collocation_strategy</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Resource_Factory *</type>
      <name>resource_factory</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Client_Strategy_Factory *</type>
      <name>client_factory</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Server_Strategy_Factory *</type>
      <name>server_factory</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Protocols_Hooks *</type>
      <name>protocols_hooks</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources_Manager &amp;</type>
      <name>thread_lane_resources_manager</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Collocation_Resolver &amp;</type>
      <name>collocation_resolver</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub_Factory *</type>
      <name>stub_factory</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Endpoint_Selector_Factory *</type>
      <name>endpoint_selector_factory</name>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA_Environment *</type>
      <name>default_environment</name>
      <anchor>a48</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_environment</name>
      <anchor>a49</anchor>
      <arglist>(CORBA_Environment *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Eager_Buffering_Sync_Strategy &amp;</type>
      <name>eager_buffering_sync_strategy</name>
      <anchor>a58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Delayed_Buffering_Sync_Strategy &amp;</type>
      <name>delayed_buffering_sync_strategy</name>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>implrepo_service</name>
      <anchor>a79</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implrepo_service</name>
      <anchor>a80</anchor>
      <arglist>(const CORBA::Object_ptr ir)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>service_profile_selection</name>
      <anchor>a96</anchor>
      <arglist>(TAO_MProfile &amp;mprofile, TAO_Profile *&amp;profile)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>service_profile_reselection</name>
      <anchor>a97</anchor>
      <arglist>(TAO_Stub *stub, TAO_Profile *&amp;profile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_service_profile_flags</name>
      <anchor>a98</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>object_is_nil</name>
      <anchor>a99</anchor>
      <arglist>(CORBA::Object_ptr object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>service_context_list</name>
      <anchor>a100</anchor>
      <arglist>(TAO_Stub *stub, TAO_Service_Context &amp;service_context, CORBA::Boolean retstart ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Fault_Tolerance_Service &amp;</type>
      <name>fault_tolerance_service</name>
      <anchor>a101</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>service_raise_comm_failure</name>
      <anchor>a102</anchor>
      <arglist>(TAO_GIOP_Invocation *invoke, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>service_raise_transient_failure</name>
      <anchor>a103</anchor>
      <arglist>(TAO_GIOP_Invocation *invoke, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>services_log_msg_rcv</name>
      <anchor>a104</anchor>
      <arglist>(TAO_Message_State_Factory &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>services_log_msg_pre_upcall</name>
      <anchor>a105</anchor>
      <arglist>(TAO_ServerRequest &amp;req)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>services_log_msg_post_upcall</name>
      <anchor>a106</anchor>
      <arglist>(TAO_ServerRequest &amp;req)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PICurrent *</type>
      <name>pi_current</name>
      <anchor>a107</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pi_current</name>
      <anchor>a108</anchor>
      <arglist>(TAO_PICurrent *current)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a109</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a110</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ClientRequestInterceptor_List::TYPE &amp;</type>
      <name>client_request_interceptors</name>
      <anchor>a111</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ServerRequestInterceptor_List::TYPE &amp;</type>
      <name>server_request_interceptors</name>
      <anchor>a112</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a113</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IORInterceptor_List::TYPE &amp;</type>
      <name>ior_interceptors</name>
      <anchor>a114</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_thread_lane_resources_manager_factory</name>
      <anchor>d1</anchor>
      <arglist>(const char *thread_lane_resources_manager_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_collocation_resolver</name>
      <anchor>d2</anchor>
      <arglist>(const char *collocation_resolver_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_stub_factory</name>
      <anchor>d3</anchor>
      <arglist>(const char *stub_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_resource_factory</name>
      <anchor>d4</anchor>
      <arglist>(const char *resource_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_protocols_hooks</name>
      <anchor>d5</anchor>
      <arglist>(const char *protocols_hooks_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_endpoint_selector_factory</name>
      <anchor>d6</anchor>
      <arglist>(const char *endpoint_selector_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_poa_factory</name>
      <anchor>d7</anchor>
      <arglist>(const char *poa_factory_name, const char *poa_factory_directive)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dynamic_adapter_name</name>
      <anchor>d8</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>dynamic_adapter_name</name>
      <anchor>d9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>ifr_client_adapter_name</name>
      <anchor>d10</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>ifr_client_adapter_name</name>
      <anchor>d11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>typecodefactory_adapter_name</name>
      <anchor>d12</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>typecodefactory_adapter_name</name>
      <anchor>d13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_timeout_hook</name>
      <anchor>d14</anchor>
      <arglist>(Timeout_Hook hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_sync_scope_hook</name>
      <anchor>d15</anchor>
      <arglist>(Sync_Scope_Hook hook)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Protocols_Hooks *</type>
      <name>protocols_hooks_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>Sync_Scope_Hook</type>
      <name>sync_scope_hook_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>protocols_hooks_name_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~TAO_ORB_Core</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>init</name>
      <anchor>b1</anchor>
      <arglist>(int &amp;argc, char **argv ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>fini</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Data_Block *</type>
      <name>create_data_block_i</name>
      <anchor>b6</anchor>
      <arglist>(size_t size, ACE_Allocator *buffer_allocator, ACE_Allocator *dblock_allocator, ACE_Lock *lock)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>resolve_typecodefactory_i</name>
      <anchor>b7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>resolve_dynanyfactory_i</name>
      <anchor>b8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>resolve_iormanipulation_i</name>
      <anchor>b9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>bidirectional_giop_init</name>
      <anchor>b10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>services_callbacks_init</name>
      <anchor>b11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>destroy_interceptors</name>
      <anchor>b12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>set_endpoint_helper</name>
      <anchor>b13</anchor>
      <arglist>(const char *current_arg ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TSS_TYPE</name>
      <anchor>b14</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources) tss_resources_</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator_i</name>
      <anchor>b3</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources *)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator_i</name>
      <anchor>b4</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources *)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator_i</name>
      <anchor>b5</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources *)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Connector_Registry *</type>
      <name>connector_registry_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Thread_Lane_Resources_Manager *</type>
      <name>thread_lane_resources_manager_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Collocation_Resolver *</type>
      <name>collocation_resolver_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Stub_Factory *</type>
      <name>stub_factory_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ProtocolFactorySet *</type>
      <name>protocol_factories_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_ptr</type>
      <name>implrepo_service_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>use_implrepo_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_ptr</type>
      <name>typecode_factory_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_ptr</type>
      <name>dynany_factory_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_ptr</type>
      <name>ior_manip_factory_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_ptr</type>
      <name>ior_table_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_var</type>
      <name>rt_orb_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_var</type>
      <name>rt_current_</name>
      <anchor>n13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ORB_var</type>
      <name>orb_</name>
      <anchor>n14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_var</type>
      <name>root_poa_</name>
      <anchor>n15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_POA_PortableGroup_Hooks *</type>
      <name>portable_group_poa_hooks_</name>
      <anchor>n16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Parameters</type>
      <name>orb_params_</name>
      <anchor>n17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>InitRefMap</type>
      <name>init_ref_map_</name>
      <anchor>n18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Object_Ref_Table</type>
      <name>object_ref_table_</name>
      <anchor>n19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>char *</type>
      <name>orbid_</name>
      <anchor>n20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Resource_Factory *</type>
      <name>resource_factory_</name>
      <anchor>n21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>const char *</type>
      <name>server_id_</name>
      <anchor>n25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Client_Strategy_Factory *</type>
      <name>client_factory_</name>
      <anchor>n26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Server_Strategy_Factory *</type>
      <name>server_factory_</name>
      <anchor>n27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>opt_for_collocation_</name>
      <anchor>n29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>use_global_collocation_</name>
      <anchor>n30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>collocation_strategy_</name>
      <anchor>n31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Policy_Manager *</type>
      <name>policy_manager_</name>
      <anchor>n32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Policy_Set *</type>
      <name>default_policies_</name>
      <anchor>n33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Policy_Current *</type>
      <name>policy_current_</name>
      <anchor>n34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Request_Dispatcher *</type>
      <name>request_dispatcher_</name>
      <anchor>n35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Object_var</type>
      <name>poa_current_</name>
      <anchor>n36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Adapter_Registry</type>
      <name>adapter_registry_</name>
      <anchor>n37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Adapter *</type>
      <name>poa_adapter_</name>
      <anchor>n38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Thread_Manager</type>
      <name>tm_</name>
      <anchor>n39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock_Adapter&lt; TAO_SYNCH_MUTEX &gt;</type>
      <name>data_block_lock_</name>
      <anchor>n40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Cleanup_Func_Registry</type>
      <name>tss_cleanup_funcs_</name>
      <anchor>n45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>use_tss_resources_</name>
      <anchor>n46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core_TSS_Resources</type>
      <name>orb_resources_</name>
      <anchor>n47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>has_shutdown_</name>
      <anchor>n48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_SYNCH_MUTEX</type>
      <name>open_lock_</name>
      <anchor>n51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>open_called_</name>
      <anchor>n52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Endpoint_Selector_Factory *</type>
      <name>endpoint_selector_factory_</name>
      <anchor>n53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Eager_Buffering_Sync_Strategy *</type>
      <name>eager_buffering_sync_strategy_</name>
      <anchor>n54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Delayed_Buffering_Sync_Strategy *</type>
      <name>delayed_buffering_sync_strategy_</name>
      <anchor>n55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport_Sync_Strategy *</type>
      <name>transport_sync_strategy_</name>
      <anchor>n56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>n57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_PolicyFactory_Registry</type>
      <name>policy_factory_registry_</name>
      <anchor>n58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_PICurrent *</type>
      <name>pi_current_</name>
      <anchor>n59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ClientRequestInterceptor_List</type>
      <name>client_request_interceptors_</name>
      <anchor>n60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ServerRequestInterceptor_List</type>
      <name>server_request_interceptors_</name>
      <anchor>n61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_IORInterceptor_List</type>
      <name>ior_interceptors_</name>
      <anchor>n62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Parser_Registry</type>
      <name>parser_registry_</name>
      <anchor>n63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_BiDir_Adapter *</type>
      <name>bidir_adapter_</name>
      <anchor>n64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>bidir_giop_policy_</name>
      <anchor>n65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Flushing_Strategy *</type>
      <name>flushing_strategy_</name>
      <anchor>n66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>message_block_dblock_allocator_</name>
      <anchor>n22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>message_block_buffer_allocator_</name>
      <anchor>n23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Allocator *</type>
      <name>message_block_msgblock_allocator_</name>
      <anchor>n24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Fault_Tolerance_Service</type>
      <name>ft_service_</name>
      <anchor>n28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>from_iso8859_</name>
      <anchor>n41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>to_iso8859_</name>
      <anchor>n42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>from_unicode_</name>
      <anchor>n43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>to_unicode_</name>
      <anchor>n44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>thread_per_connection_use_timeout_</name>
      <anchor>n49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>thread_per_connection_timeout_</name>
      <anchor>n50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>endpoint_selector_factory_name_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>thread_lane_resources_manager_factory_name_</name>
      <anchor>q1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>collocation_resolver_name_</name>
      <anchor>q2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>stub_factory_name_</name>
      <anchor>q3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>resource_factory_name_</name>
      <anchor>q4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>dynamic_adapter_name_</name>
      <anchor>q5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>ifr_client_adapter_name_</name>
      <anchor>q6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>typecodefactory_adapter_name_</name>
      <anchor>q7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>poa_factory_name_</name>
      <anchor>q8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>const char *</type>
      <name>poa_factory_directive_</name>
      <anchor>q9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolve_ior_table_i</name>
      <anchor>c2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>create_collocated_object</name>
      <anchor>c3</anchor>
      <arglist>(TAO_Stub *the_stub, TAO_ORB_Core *other_orb, const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ORB_Core</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ORB_Core &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_ORB_Core &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>Timeout_Hook</type>
      <name>timeout_hook_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_ORB_Core_Auto_Ptr</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_ORB_Table</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend CORBA::ORB_ptr</type>
      <name>CORBA::ORB_init</name>
      <anchor>l2</anchor>
      <arglist>(int &amp;, char *argv[], const char *, CORBA_Environment &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Core_Auto_Ptr</name>
    <filename>classTAO__ORB__Core__Auto__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core_Auto_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core_Auto_Ptr &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core_Auto_Ptr &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core_Auto_Ptr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORB_Core_Auto_Ptr</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core &amp;</type>
      <name>operator *</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>get</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>release</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a7</anchor>
      <arglist>(TAO_ORB_Core *p=0)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>p_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Core_TSS_Resources</name>
    <filename>classTAO__ORB__Core__TSS__Resources.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core_TSS_Resources</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORB_Core_TSS_Resources</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>event_loop_thread_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>client_leader_thread_</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>lane_</name>
      <anchor>m8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Array_Base&lt; void *&gt;</type>
      <name>ts_objects_</name>
      <anchor>m9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>m10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_PICurrent_Impl</type>
      <name>pi_current_</name>
      <anchor>m11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_ClientRequestInfo *</type>
      <name>client_request_info_</name>
      <anchor>m12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ORB_Core_TSS_Resources</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ORB_Core_TSS_Resources &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_ORB_Core_TSS_Resources &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Parameters</name>
    <filename>classTAO__ORB__Parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Parameters</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORB_Parameters</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preconnects</name>
      <anchor>a2</anchor>
      <arglist>(ACE_CString &amp;preconnects)</arglist>
    </member>
    <member kind="function">
      <type>TAO_EndpointSet &amp;</type>
      <name>preconnects</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_preconnect</name>
      <anchor>a4</anchor>
      <arglist>(ACE_CString &amp;preconnect)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endpoints</name>
      <anchor>a5</anchor>
      <arglist>(ACE_CString &amp;endpoints)</arglist>
    </member>
    <member kind="function">
      <type>TAO_EndpointSet &amp;</type>
      <name>endpoints</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_endpoint</name>
      <anchor>a7</anchor>
      <arglist>(ACE_CString &amp;endpoint)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::UShort</type>
      <name>service_port</name>
      <anchor>a8</anchor>
      <arglist>(TAO_MCAST_SERVICEID service_id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>service_port</name>
      <anchor>a9</anchor>
      <arglist>(TAO_MCAST_SERVICEID service_id, CORBA::UShort port)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>mcast_discovery_endpoint</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mcast_discovery_endpoint</name>
      <anchor>a11</anchor>
      <arglist>(const char *mde)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sock_rcvbuf_size</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sock_rcvbuf_size</name>
      <anchor>a13</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sock_sndbuf_size</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sock_sndbuf_size</name>
      <anchor>a15</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodelay</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodelay</name>
      <anchor>a17</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cdr_memcpy_tradeoff</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cdr_memcpy_tradeoff</name>
      <anchor>a19</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>use_dotted_decimal_addresses</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use_dotted_decimal_addresses</name>
      <anchor>a21</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>default_init_ref</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_init_ref</name>
      <anchor>a23</anchor>
      <arglist>(const char *default_init_ref)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>std_profile_components</name>
      <anchor>a24</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>std_profile_components</name>
      <anchor>a25</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>sched_policy</name>
      <anchor>a26</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sched_policy</name>
      <anchor>a27</anchor>
      <arglist>(long x)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>scope_policy</name>
      <anchor>a28</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scope_policy</name>
      <anchor>a29</anchor>
      <arglist>(long x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_endpoints</name>
      <anchor>c0</anchor>
      <arglist>(ACE_CString &amp;endpoints, TAO_EndpointSet &amp;endpoints_list)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_EndpointSet</type>
      <name>preconnects_list_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_EndpointSet</type>
      <name>endpoints_list_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::UShort</type>
      <name>service_port_</name>
      <anchor>o2</anchor>
      <arglist>[TAO_NO_OF_MCAST_SERVICES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::String_var</type>
      <name>mcast_discovery_endpoint_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CString</type>
      <name>default_init_ref_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sock_rcvbuf_size_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sock_sndbuf_size_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodelay_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cdr_memcpy_tradeoff_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>use_lite_protocol_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>use_dotted_decimal_addresses_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>std_profile_components_</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>sched_policy_</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>scope_policy_</name>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Table</name>
    <filename>classTAO__ORB__Table.html</filename>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; const char *, TAO_ORB_Core *, ACE_Hash&lt; const char *&gt;, ACE_Equal_To&lt; const char *&gt;, ACE_Null_Mutex &gt;</type>
      <name>Table</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Table::iterator</type>
      <name>Iterator</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORB_Table</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>first_orb</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a3</anchor>
      <arglist>(const char *orb_id, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>find</name>
      <anchor>a4</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a5</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORB_Table *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_ORB_Table</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ORB_Table</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ORB_Table &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_ORB_Table &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Table</type>
      <name>table_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>first_orb_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Singleton&lt; TAO_ORB_Table, TAO_SYNCH_MUTEX &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORBInitializer_Registry</name>
    <filename>classTAO__ORBInitializer__Registry.html</filename>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_ORBInitializer_Registry</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~TAO_ORBInitializer_Registry</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>register_orb_initializer</name>
      <anchor>b2</anchor>
      <arglist>(PortableInterceptor::ORBInitializer_ptr init ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>pre_init</name>
      <anchor>b3</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>post_init</name>
      <anchor>b4</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>TAO_ORBInitializer_Registry *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ORBInitializer_Registry</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ORBInitializer_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_ORBInitializer_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Array_Base&lt; PortableInterceptor::ORBInitializer_ptr &gt;</type>
      <name>initializers_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Singleton&lt; TAO_ORBInitializer_Registry, TAO_SYNCH_MUTEX &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend void</type>
      <name>PortableInterceptor::register_orb_initializer</name>
      <anchor>l1</anchor>
      <arglist>(PortableInterceptor::ORBInitializer_ptr init ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend CORBA::ORB_ptr</type>
      <name>CORBA::ORB_init</name>
      <anchor>l2</anchor>
      <arglist>(int &amp;, char *argv[], const char *, CORBA_Environment &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORBInitInfo</name>
    <filename>classTAO__ORBInitInfo.html</filename>
    <base virtualness="virtual">PortableInterceptor::ORBInitInfo</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="typedef">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_ptr_type</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_ORBInitInfo_var</type>
      <name>_var_type</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>_tao_QueryInterface</name>
      <anchor>a13</anchor>
      <arglist>(ptr_arith_t type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(TAO_ORBInitInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_narrow</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>d2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_nil</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORBInitInfo</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, int argc, char *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::StringSeq *</type>
      <name>arguments</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>orb_id</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::CodecFactory_ptr</type>
      <name>codec_factory</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_initial_reference</name>
      <anchor>a4</anchor>
      <arglist>(const char *id, CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a5</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_client_request_interceptor</name>
      <anchor>a6</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_server_request_interceptor</name>
      <anchor>a7</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_ior_interceptor</name>
      <anchor>a8</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PortableInterceptor::SlotId</type>
      <name>allocate_slot_id</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_policy_factory</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::PolicyType type, PortableInterceptor::PolicyFactory_ptr policy_factory ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>allocate_tss_slot_id</name>
      <anchor>a11</anchor>
      <arglist>(ACE_CLEANUP_FUNC cleanup ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~TAO_ORBInitInfo</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>void</type>
      <name>check_validity</name>
      <anchor>b1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ORBInitInfo</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_ORBInitInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_ORBInitInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>argc_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char **</type>
      <name>argv_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::CodecFactory_var</type>
      <name>codec_factory_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend CORBA::ORB_ptr</type>
      <name>CORBA::ORB_init</name>
      <anchor>l0</anchor>
      <arglist>(int &amp;, char *argv[], const char *, CORBA_Environment &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORBInitInfo_var</name>
    <filename>classTAO__ORBInitInfo__var.html</filename>
    <base>TAO_Base_var</base>
    <member kind="function">
      <type></type>
      <name>TAO_ORBInitInfo_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORBInitInfo_var</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORBInitInfo_ptr p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORBInitInfo_var</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_ORBInitInfo_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORBInitInfo_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_ORBInitInfo_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const TAO_ORBInitInfo_ptr &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_ORBInitInfo_ptr &amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr &amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>duplicate</name>
      <anchor>d0</anchor>
      <arglist>(TAO_ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>d1</anchor>
      <arglist>(TAO_ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>nil</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>narrow</name>
      <anchor>d3</anchor>
      <arglist>(CORBA::Object *ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object *</type>
      <name>upcast</name>
      <anchor>d4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_ORBInitInfo_var</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Base_var &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_ORBInitInfo_var &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Base_var &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_OutputCDR</name>
    <filename>classTAO__OutputCDR.html</filename>
    <base>ACE_OutputCDR</base>
    <member kind="function">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=0, int byte_order=ACE_CDR_BYTE_ORDER, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, size_t memcpy_tradeoff=0, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, ACE_Char_Codeset_Translator *char_translator=0, ACE_WChar_Codeset_Translator *wchar_translator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>a1</anchor>
      <arglist>(char *data, size_t size, int byte_order=ACE_CDR_BYTE_ORDER, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, size_t memcpy_tradeoff=0, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, ACE_Char_Codeset_Translator *char_translator=0, ACE_WChar_Codeset_Translator *wchar_translator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *data, int byte_order=ACE_CDR_BYTE_ORDER, size_t memcpy_tradeoff=0, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, ACE_Char_Codeset_Translator *char_translator=0, ACE_WChar_Codeset_Translator *wchar_translator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_OutputCDR</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_OutputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_OutputCDR &amp;</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_OutputCDR &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_InputCDR</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Parser_Registry</name>
    <filename>classTAO__Parser__Registry.html</filename>
    <member kind="typedef">
      <type>TAO_IOR_Parser **</type>
      <name>Parser_Iterator</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Parser_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Parser_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IOR_Parser *</type>
      <name>match_parser</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior_string)</arglist>
    </member>
    <member kind="function">
      <type>Parser_Iterator</type>
      <name>begin</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Parser_Iterator</type>
      <name>end</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Parser_Registry</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Parser_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Parser_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IOR_Parser **</type>
      <name>parsers_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_PICurrent</name>
    <filename>classTAO__PICurrent.html</filename>
    <base virtualness="virtual">PortableInterceptor::Current</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_PICurrent</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::SlotId</type>
      <name>allocate_slot_id</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::SlotId</type>
      <name>slot_count</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_PICurrent_Impl *</type>
      <name>tsc</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_validity</name>
      <anchor>a6</anchor>
      <arglist>(const PortableInterceptor::SlotId &amp;id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a1</anchor>
      <arglist>(PortableInterceptor::SlotId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_slot</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::SlotId id, const CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>~TAO_PICurrent</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_PICurrent</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_PICurrent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_PICurrent &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PortableInterceptor::SlotId</type>
      <name>slot_count_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_PICurrent_Guard</name>
    <filename>classTAO__PICurrent__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_PICurrent_Guard</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ServerRequest &amp;server_request, CORBA::Boolean tsc_to_rsc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_PICurrent_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PICurrent_Impl *</type>
      <name>src_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PICurrent_Impl *</type>
      <name>dest_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>tsc_to_rsc_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_PICurrent_Impl</name>
    <filename>classTAO__PICurrent__Impl.html</filename>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; CORBA::Any &gt;</type>
      <name>Table</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_PICurrent_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_PICurrent_Impl</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::SlotId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slot</name>
      <anchor>a3</anchor>
      <arglist>(PortableInterceptor::SlotId id, const CORBA::Any &amp;data ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PICurrent_Impl *</type>
      <name>pi_peer</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pi_peer</name>
      <anchor>a5</anchor>
      <arglist>(TAO_PICurrent_Impl *peer)</arglist>
    </member>
    <member kind="function">
      <type>Table &amp;</type>
      <name>slot_table</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dirty</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Boolean dirty)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>dirty</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchor>a9</anchor>
      <arglist>(TAO_PICurrent_Impl &amp;rhs, CORBA::Boolean deep_copy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_PICurrent_Impl</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_PICurrent_Impl &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_PICurrent_Impl &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PICurrent_Impl *</type>
      <name>pi_peer_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Table</type>
      <name>slot_table_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Table *</type>
      <name>lc_slot_table_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>dirty_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_PICurrent_ORBInitializer</name>
    <filename>classTAO__PICurrent__ORBInitializer.html</filename>
    <base virtualness="virtual">PortableInterceptor::ORBInitializer</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre_init</name>
      <anchor>a0</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_init</name>
      <anchor>a1</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pluggable_Messaging</name>
    <filename>classTAO__Pluggable__Messaging.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Pluggable_Messaging</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_locate_request_header</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_reply_header</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_locate_reply_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read_message</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Transport *transport, int block=0, ACE_Time_Value *max_wait_time=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>format_message</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parse_incoming_messages</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>missing_data</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get_message_data</name>
      <anchor>a10</anchor>
      <arglist>(TAO_Queued_Data *qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>extract_next_message</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Queued_Data *&amp;qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>consolidate_node</name>
      <anchor>a12</anchor>
      <arglist>(TAO_Queued_Data *qd, ACE_Message_Block &amp;incoming)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>consolidate_fragments</name>
      <anchor>a13</anchor>
      <arglist>(TAO_Queued_Data *dqd, const TAO_Queued_Data *sqd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>process_request_message</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Data *qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>process_reply_message</name>
      <anchor>a15</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;reply_info, TAO_Queued_Data *qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_exception_reply</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params, CORBA::Exception &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>a17</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a18</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pluggable_Reply_Params</name>
    <filename>classTAO__Pluggable__Reply__Params.html</filename>
    <base>TAO_Pluggable_Reply_Params_Base</base>
    <member kind="function">
      <type></type>
      <name>TAO_Pluggable_Reply_Params</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_InputCDR</type>
      <name>input_cdr_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pluggable_Reply_Params_Base</name>
    <filename>classTAO__Pluggable__Reply__Params__Base.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Pluggable_Reply_Params_Base</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>service_context_notowned</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>service_context_notowned</name>
      <anchor>a2</anchor>
      <arglist>(IOP::ServiceContextList *svc)</arglist>
    </member>
    <member kind="variable">
      <type>IOP::ServiceContextList</type>
      <name>svc_ctx_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>reply_status_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>is_dsi_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ptr_arith_t</type>
      <name>dsi_nvlist_align_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>argument_flag_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IOP::ServiceContextList *</type>
      <name>service_context_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Current</name>
    <filename>classTAO__Policy__Current.html</filename>
    <base>CORBA::PolicyCurrent</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Current</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;ts ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Cached_Policy_Type type)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Current_Impl &amp;</type>
      <name>implementation</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Current_Impl &amp;</type>
      <name>implementation</name>
      <anchor>a6</anchor>
      <arglist>(TAO_Policy_Current_Impl &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Current_Impl</name>
    <filename>classTAO__Policy__Current__Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Current_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;ts ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Cached_Policy_Type type)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Set</type>
      <name>manager_impl_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Manager</name>
    <filename>classTAO__Policy__Manager.html</filename>
    <base>CORBA::PolicyManager</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;ts ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Cached_Policy_Type type)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>mutex_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Set</type>
      <name>impl_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Set</name>
    <filename>classTAO__Policy__Set.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Set</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Policy_Scope scope)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Set</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Policy_Set &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Policy_Set</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_from</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Policy_Set *source ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy_overrides</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_const_policy</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Cached_Policy_Type type) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a8</anchor>
      <arglist>(TAO_Cached_Policy_Type type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Policy_ptr policy ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>get_policy_by_index</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>num_policies</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Policy_Set</type>
      <name>operator=</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Policy_Set &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup_i</name>
      <anchor>c1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>compatible_scope</name>
      <anchor>c2</anchor>
      <arglist>(TAO_Policy_Scope policy_scope) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::PolicyList</type>
      <name>policy_list_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Policy *</type>
      <name>cached_policies_</name>
      <anchor>o1</anchor>
      <arglist>[TAO_CACHED_POLICY_MAX_CACHED]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Scope</type>
      <name>scope_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Validator</name>
    <filename>classTAO__Policy__Validator.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Validator</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Policy_Validator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_policies</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>legal_policy</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_validator</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Policy_Validator *validator)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>validate_impl</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>merge_policies_impl</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>legal_policy_impl</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::PolicyType type)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core &amp;</type>
      <name>orb_core_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Validator *</type>
      <name>next_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>TAO_Policy_Validator *</type>
      <name>last_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_PolicyFactory_Registry</name>
    <filename>classTAO__PolicyFactory__Registry.html</filename>
    <member kind="typedef">
      <type>ACE_Map_Manager&lt; CORBA::PolicyType, PortableInterceptor::PolicyFactory_ptr, ACE_Null_Mutex &gt;</type>
      <name>TABLE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_PolicyFactory_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_PolicyFactory_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_policy_factory</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::PolicyType type, PortableInterceptor::PolicyFactory_ptr policy_factory ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>create_policy</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::PolicyType type, const CORBA::Any &amp;value ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TABLE</type>
      <name>factories_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Profile</name>
    <filename>classTAO__Profile.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Profile</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, TAO_ORB_Core *orb_core, const TAO_GIOP_Message_Version &amp;version)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Profile</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const TAO_GIOP_Message_Version &amp;</type>
      <name>version</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_to</name>
      <anchor>a7</anchor>
      <arglist>(TAO_MProfile *mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile *</type>
      <name>forward_to</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Tagged_Components &amp;</type>
      <name>tagged_components</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Tagged_Components &amp;</type>
      <name>tagged_components</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_tagged_component</name>
      <anchor>a11</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a12</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse_string</name>
      <anchor>a13</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>to_string</name>
      <anchor>a14</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>decode</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>encode</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;stream) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>a17</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a18</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_ObjectKey *</type>
      <name>_key</name>
      <anchor>a19</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a20</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>endpoint_count</name>
      <anchor>a21</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a22</anchor>
      <arglist>(const TAO_Profile *other_profile)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IOP::TaggedProfile &amp;</type>
      <name>create_tagged_profile</name>
      <anchor>a24</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>policies</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::PolicyList *policy_list ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList &amp;</type>
      <name>policies</name>
      <anchor>a26</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>the_stub</name>
      <anchor>a27</anchor>
      <arglist>(TAO_Stub *stub)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>the_stub</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>supports_multicast</name>
      <anchor>a29</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addressing_mode</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::Short addr_mode ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>addressing_mode</name>
      <anchor>a31</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_GIOP_Message_Version</type>
      <name>version_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Tagged_Components</type>
      <name>tagged_components_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>are_policies_parsed_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Stub *</type>
      <name>stub_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::PolicyList *</type>
      <name>policy_list_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Short</type>
      <name>addressing_mode_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_MProfile *</type>
      <name>forward_to_i</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>verify_orb_configuration</name>
      <anchor>c1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>verify_profile_version</name>
      <anchor>c2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Profile</name>
      <anchor>c3</anchor>
      <arglist>(const TAO_Profile &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c4</anchor>
      <arglist>(const TAO_Profile &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_MProfile *</type>
      <name>forward_to_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Protocol_Factory</name>
    <filename>classTAO__Protocol__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Protocol_Factory</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Protocol_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_CString &amp;prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>prefix</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>options_delimiter</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor *</type>
      <name>make_acceptor</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector *</type>
      <name>make_connector</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>requires_explicit_endpoint</name>
      <anchor>a9</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Protocol_Item</name>
    <filename>classTAO__Protocol__Item.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Protocol_Item</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_CString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Protocol_Item</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>protocol_name</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Protocol_Factory *</type>
      <name>factory</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factory</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Protocol_Factory *factory, int owner=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Protocol_Item</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_Protocol_Item &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Protocol_Item &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CString</type>
      <name>name_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Protocol_Factory *</type>
      <name>factory_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>factory_owner_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Protocols_Hooks</name>
    <filename>classTAO__Protocols__Hooks.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Protocols_Hooks</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init_hooks</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>call_client_protocols_hook</name>
      <anchor>a2</anchor>
      <arglist>(int &amp;send_buffer_size, int &amp;recv_buffer_size, int &amp;no_delay, const char *protocol_type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>call_server_protocols_hook</name>
      <anchor>a3</anchor>
      <arglist>(int &amp;send_buffer_size, int &amp;recv_buffer_size, int &amp;no_delay, const char *protocol_type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rt_service_context</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Stub *stub, TAO_Service_Context &amp;service_context, CORBA::Boolean restart ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_rt_service_context_hook</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Service_Context &amp;service_context, CORBA::Policy *model_policy, CORBA::Short &amp;client_priority ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get_selector_hook</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Policy *model_policy, CORBA::Boolean &amp;is_client_propagated, CORBA::Short &amp;server_priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get_selector_bands_policy_hook</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Policy *bands_policy, CORBA::Short &amp;min_priority, CORBA::Short &amp;max_priority, CORBA::Short &amp;p, int &amp;in_range)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_default_policies</name>
      <anchor>a13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_default_server_protocol_policy</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Acceptor_Registry &amp;acceptor_registry ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_thread_CORBA_priority</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_thread_native_priority</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_thread_CORBA_and_native_priority</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Short &amp;, CORBA::Short &amp;ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_thread_CORBA_priority</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_thread_native_priority</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pseudo_Object_Manager</name>
    <filename>classTAO__Pseudo__Object__Manager.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Object_Manager</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Pseudo_Object_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Object_Manager</name>
      <anchor>a1</anchor>
      <arglist>(T **, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Pseudo_Object_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Pseudo_Object_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T **</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Unbounded_Pseudo_Sequence&lt; T, T_var &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_QtResource_Factory</name>
    <filename>classTAO__QtResource__Factory.html</filename>
    <base>TAO_Default_Resource_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_QtResource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_context</name>
      <anchor>d0</anchor>
      <arglist>(QApplication *qapp)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>allocate_reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>QApplication *</type>
      <name>qapp_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Queued_Data</name>
    <filename>classTAO__Queued__Data.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Data</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Data</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Data</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Queued_Data &amp;qd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_Queued_Data *</type>
      <name>get_queued_data</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>d1</anchor>
      <arglist>(TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_Queued_Data *</type>
      <name>duplicate</name>
      <anchor>d2</anchor>
      <arglist>(TAO_Queued_Data &amp;qd)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Message_Block *</type>
      <name>msg_block_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>missing_data_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>byte_order_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>major_version_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>minor_version_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>more_fragments_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Pluggable_Message_Type</type>
      <name>msg_type_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Queued_Data *</type>
      <name>next_</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Queued_Message</name>
    <filename>classTAO__Queued__Message.html</filename>
    <base>TAO_LF_Event</base>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Queued_Message *</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Queued_Message *</type>
      <name>prev</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_from_list</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Queued_Message *&amp;head, TAO_Queued_Message *&amp;tail)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push_back</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Queued_Message *&amp;head, TAO_Queued_Message *&amp;tail)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push_front</name>
      <anchor>a6</anchor>
      <arglist>(TAO_Queued_Message *&amp;head, TAO_Queued_Message *&amp;tail)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>a7</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>all_data_sent</name>
      <anchor>a8</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fill_iov</name>
      <anchor>a9</anchor>
      <arglist>(int iovcnt_max, int &amp;iovcnt, iovec iov[]) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bytes_transferred</name>
      <anchor>a10</anchor>
      <arglist>(size_t &amp;byte_count)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a11</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Queued_Message *</type>
      <name>next_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Queued_Message *</type>
      <name>prev_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Reactive_Flushing_Strategy</name>
    <filename>classTAO__Reactive__Flushing__Strategy.html</filename>
    <base>TAO_Flushing_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_RelativeRoundtripTimeoutPolicy</name>
    <filename>classTAO__RelativeRoundtripTimeoutPolicy.html</filename>
    <base>Messaging::RelativeRoundtripTimeoutPolicy</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_RelativeRoundtripTimeoutPolicy</name>
      <anchor>a0</anchor>
      <arglist>(const TimeBase::TimeT &amp;relative_expiry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_RelativeRoundtripTimeoutPolicy</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_RelativeRoundtripTimeoutPolicy &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_RelativeRoundtripTimeoutPolicy *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeBase::TimeT</type>
      <name>relative_expiry</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyType</type>
      <name>policy_type</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>copy</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time_value</name>
      <anchor>a7</anchor>
      <arglist>(ACE_Time_Value &amp;time_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Cached_Policy_Type</type>
      <name>_tao_cached_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>hook</name>
      <anchor>d0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_Stub *stub, int &amp;has_timeout, ACE_Time_Value &amp;time_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Policy_ptr</type>
      <name>create</name>
      <anchor>d1</anchor>
      <arglist>(const CORBA::Any &amp;val ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeBase::TimeT</type>
      <name>relative_expiry_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Remote_Object_Proxy_Broker</name>
    <filename>classTAO__Remote__Object__Proxy__Broker.html</filename>
    <base>TAO_Object_Proxy_Broker</base>
    <member kind="function">
      <type></type>
      <name>TAO_Remote_Object_Proxy_Broker</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Remote_Object_Proxy_Broker</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Object_Proxy_Impl &amp;</type>
      <name>select_proxy</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Remote_Object_Proxy_Impl</type>
      <name>remote_proxy_impl_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Remote_Object_Proxy_Impl</name>
    <filename>classTAO__Remote__Object__Proxy__Impl.html</filename>
    <base virtualness="virtual">TAO_Object_Proxy_Impl</base>
    <member kind="function">
      <type></type>
      <name>TAO_Remote_Object_Proxy_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Remote_Object_Proxy_Impl</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::Object_ptr target, const CORBA::Char *logical_type_id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Reply_Dispatcher</name>
    <filename>classTAO__Reply__Dispatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)=0</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>reply_status</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>reply_status_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Request_Dispatcher</name>
    <filename>classTAO__Request__Dispatcher.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Request_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dispatch</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_ServerRequest &amp;request, CORBA::Object_out forward_to ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_RequestInfo_Util</name>
    <filename>classTAO__RequestInfo__Util.html</filename>
    <member kind="function" static="yes">
      <type>Dynamic::ParameterList *</type>
      <name>make_parameter_list</name>
      <anchor>d0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Dynamic::ExceptionList *</type>
      <name>make_exception_list</name>
      <anchor>d1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Dynamic::ContextList *</type>
      <name>make_context_list</name>
      <anchor>d2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Dynamic::RequestContext *</type>
      <name>make_request_context</name>
      <anchor>d3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Any *</type>
      <name>make_any</name>
      <anchor>d4</anchor>
      <arglist>(CORBA::Boolean tk_void_any ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Resource_Factory</name>
    <filename>classTAO__Resource__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="enumeration">
      <name>Caching_Strategy</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LRU</name>
      <anchor>s4s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFU</name>
      <anchor>s4s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIFO</name>
      <anchor>s4s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOOP</name>
      <anchor>s4s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Resource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Resource_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>use_tss_resources</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>use_locked_data_blocks</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor *</type>
      <name>get_reactor</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reclaim_reactor</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Reactor *reactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor_Registry *</type>
      <name>get_acceptor_registry</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector_Registry *</type>
      <name>get_connector_registry</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>input_cdr_allocator_type_locked</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ProtocolFactorySet *</type>
      <name>get_protocol_factories</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init_protocol_factories</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Caching_Strategy</type>
      <name>connection_caching_strategy_type</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_maximum</name>
      <anchor>a18</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_percentage</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_parser_names</name>
      <anchor>a20</anchor>
      <arglist>(char **&amp;names, int &amp;number_of_names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_cached_connection_lock</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Flushing_Strategy *</type>
      <name>create_flushing_strategy</name>
      <anchor>a22</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Connection_Purging_Strategy *</type>
      <name>create_purging_strategy</name>
      <anchor>a23</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_LF_Strategy *</type>
      <name>create_lf_strategy</name>
      <anchor>a24</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disable_factory</name>
      <anchor>a25</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>load_default_protocols</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Resume_Handle</name>
    <filename>classTAO__Resume__Handle.html</filename>
    <member kind="enumeration">
      <name>TAO_Handle_Resume_Flag</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_HANDLE_RESUMABLE</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_HANDLE_ALREADY_RESUMED</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_HANDLE_LEAVE_SUSPENDED</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Resume_Handle</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core=0, ACE_HANDLE h=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Resume_Handle</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flag</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Handle_Resume_Flag fl)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Resume_Handle &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Resume_Handle &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume_handle</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Handle_Resume_Flag</type>
      <name>flag_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_RT_New_Leader_Generator</name>
    <filename>classTAO__RT__New__Leader__Generator.html</filename>
  </compound>
  <compound kind="class">
    <name>TAO_SeqElem_String_Manager</name>
    <filename>classTAO__SeqElem__String__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_String_Manager</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_SeqElem_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_String_Manager</name>
      <anchor>a1</anchor>
      <arglist>(char **buffer, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_SeqElem_String_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_SeqElem_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_SeqElem_String_Manager</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char **</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_SeqElem_WString_Manager</name>
    <filename>classTAO__SeqElem__WString__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_WString_Manager</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::WChar **buffer, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_WString_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_SeqElem_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_SeqElem_WString_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_SeqElem_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::WChar *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_SeqElem_WString_Manager</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::WChar **</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Server_Strategy_Factory</name>
    <filename>classTAO__Server__Strategy__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Server_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Server_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enable_poa_locking</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_server_connections</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>thread_per_connection_timeout</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value &amp;timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_flags</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_count</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Active_Object_Map_Creation_Parameters &amp;</type>
      <name>active_object_map_creation_parameters</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>Active_Object_Map_Creation_Parameters</type>
      <name>active_object_map_creation_parameters_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO_Server_Strategy_Factory::Active_Object_Map_Creation_Parameters</name>
    <filename>structTAO__Server__Strategy__Factory_1_1Active__Object__Map__Creation__Parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Active_Object_Map_Creation_Parameters</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>active_object_map_size_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>object_lookup_strategy_for_user_id_policy_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>object_lookup_strategy_for_system_id_policy_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>reverse_object_lookup_strategy_for_unique_id_policy_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>use_active_hint_in_ids_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>allow_reactivation_of_system_ids_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>poa_map_size_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>poa_lookup_strategy_for_transient_id_policy_</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>poa_lookup_strategy_for_persistent_id_policy_</name>
      <anchor>m8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>use_active_hint_in_poa_names_</name>
      <anchor>m9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ServerRequest</name>
    <filename>classTAO__ServerRequest.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ServerRequest</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Pluggable_Messaging *mesg_base, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output, TAO_Transport *transport, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ServerRequest</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Pluggable_Messaging *mesg_base, CORBA::ULong request_id, CORBA::Boolean response_expected, CORBA::Boolean deferred_flag, TAO_ObjectKey &amp;object_key, const char *operation, TAO_OutputCDR &amp;output, TAO_Transport *transport, TAO_ORB_Core *orb_core, int &amp;parse_error)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_ServerRequest</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>orb</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_reply</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_InputCDR &amp;</type>
      <name>incoming</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_OutputCDR &amp;</type>
      <name>outgoing</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>deferred_reply</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>response_expected</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Boolean response)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>sync_with_server</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_with_server</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Boolean sync_flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_no_exception_reply</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>transport</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_location</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Object_ptr forward_reference)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>forward_location</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>exception_type</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exception_type</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::ULong except_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requesting_principal</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA_OctetSeq &amp;principal)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Tagged_Profile &amp;</type>
      <name>profile</name>
      <anchor>a30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_send_reply</name>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_send_reply_exception</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Exception &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_dsi</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsi_nvlist_align</name>
      <anchor>a34</anchor>
      <arglist>(ptr_arith_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>argument_flag</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>argument_flag</name>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>interceptor_count</name>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PICurrent_Impl &amp;</type>
      <name>rs_pi_current</name>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operation</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operation</name>
      <anchor>a4</anchor>
      <arglist>(const char *operation, size_t length, int release)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>operation_length</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>request_service_info</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>reply_service_info</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_id</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::ULong req)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Pluggable_Messaging *</type>
      <name>mesg_base_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CString</type>
      <name>operation_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_var</type>
      <name>forward_location_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_InputCDR *</type>
      <name>incoming_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_OutputCDR *</type>
      <name>outgoing_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>response_expected_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>deferred_reply_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>sync_with_server_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>exception_type_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Service_Context</type>
      <name>request_service_context_</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Service_Context</type>
      <name>reply_service_context_</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Tagged_Profile</type>
      <name>profile_</name>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA_OctetSeq_var</type>
      <name>requesting_principal_</name>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>is_dsi_</name>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ptr_arith_t</type>
      <name>dsi_nvlist_align_</name>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>argument_flag_</name>
      <anchor>o18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>interceptor_count_</name>
      <anchor>o19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PICurrent_Impl</type>
      <name>rs_pi_current_</name>
      <anchor>o20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_AMH_Response_Handler</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ServerRequestInterceptor_List</name>
    <filename>classTAO__ServerRequestInterceptor__List.html</filename>
    <base>TAO_Interceptor_List</base>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; PortableInterceptor::ServerRequestInterceptor_ptr &gt;</type>
      <name>TYPE</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ServerRequestInterceptor_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ServerRequestInterceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr i ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>interceptors</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual size_t</type>
      <name>length</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>length</name>
      <anchor>b1</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual PortableInterceptor::Interceptor_ptr</type>
      <name>interceptor</name>
      <anchor>b2</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>interceptors_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Service_Callbacks</name>
    <filename>classTAO__Service__Callbacks.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Service_Callbacks</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>select_profile</name>
      <anchor>a1</anchor>
      <arglist>(TAO_MProfile *mprofile, TAO_Profile *&amp;pfile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>reselect_profile</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Stub *stub, TAO_Profile *&amp;pfile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_profile_flags</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>object_is_nil</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>service_context_list</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Stub *&amp;stub, IOP::ServiceContextList &amp;service_list, CORBA::Boolean restart ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>raise_comm_failure</name>
      <anchor>a6</anchor>
      <arglist>(TAO_GIOP_Invocation *invoke, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>raise_transient_failure</name>
      <anchor>a7</anchor>
      <arglist>(TAO_GIOP_Invocation *invoke, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>service_log_msg_rcv</name>
      <anchor>a8</anchor>
      <arglist>(TAO_Message_State_Factory &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>service_log_msg_pre_upcall</name>
      <anchor>a9</anchor>
      <arglist>(TAO_ServerRequest &amp;req)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>service_log_msg_post_upcall</name>
      <anchor>a10</anchor>
      <arglist>(TAO_ServerRequest &amp;req)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Service_Context</name>
    <filename>classTAO__Service__Context.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Service_Context</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a1</anchor>
      <arglist>(const IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_context</name>
      <anchor>a2</anchor>
      <arglist>(const IOP::ServiceContext &amp;context, CORBA::Boolean replace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a3</anchor>
      <arglist>(IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_context</name>
      <anchor>a4</anchor>
      <arglist>(IOP::ServiceContext &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_context</name>
      <anchor>a5</anchor>
      <arglist>(IOP::ServiceId id, const IOP::ServiceContext **context) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_context</name>
      <anchor>a6</anchor>
      <arglist>(IOP::ServiceId id, IOP::ServiceContext_out context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a7</anchor>
      <arglist>(IOP::ServiceId id, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a8</anchor>
      <arglist>(IOP::ServiceContext &amp;context, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_service_id</name>
      <anchor>a9</anchor>
      <arglist>(IOP::ServiceId id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encode</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>service_info</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::ServiceContextList &amp;</type>
      <name>service_info</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>c0</anchor>
      <arglist>(const IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>c1</anchor>
      <arglist>(IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_context_i</name>
      <anchor>c2</anchor>
      <arglist>(const IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_context_i</name>
      <anchor>c3</anchor>
      <arglist>(IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>c4</anchor>
      <arglist>(IOP::ServiceId id, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>c5</anchor>
      <arglist>(IOP::ServiceContext &amp;context, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_context_i</name>
      <anchor>c6</anchor>
      <arglist>(IOP::ServiceContext &amp;context) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::ServiceContextList</type>
      <name>service_context_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Services_Activate</name>
    <filename>classTAO__Services__Activate.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Services_Activate</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Service_Callbacks *</type>
      <name>activate_services</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Singleton</name>
    <filename>classTAO__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Cleanup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>TAO_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TYPE</type>
      <name>instance_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>TAO_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Singleton_Manager</name>
    <filename>classTAO__Singleton__Manager.html</filename>
    <base>ACE_Object_Manager_Base</base>
    <member kind="enumeration">
      <name>Preallocated_Object</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_EMPTY_PREALLOCATED_OBJECT</name>
      <anchor>s2s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PREALLOCATED_OBJECTS</name>
      <anchor>s2s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a1</anchor>
      <arglist>(int register_with_object_manager)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>starting_up</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shutting_down</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>sigset_t *</type>
      <name>default_mask</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>d4</anchor>
      <arglist>(ACE_Thread_Hook *new_thread_hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_Singleton_Manager *</type>
      <name>instance</name>
      <anchor>d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>at_exit</name>
      <anchor>d6</anchor>
      <arglist>(ACE_Cleanup *object, void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>at_exit</name>
      <anchor>d7</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>at_exit_i</name>
      <anchor>c4</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Singleton_Manager</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TAO_Singleton_Manager</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Singleton_Manager</name>
      <anchor>c2</anchor>
      <arglist>(const TAO_Singleton_Manager &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Singleton_Manager &amp;</type>
      <name>operator=</name>
      <anchor>c3</anchor>
      <arglist>(const TAO_Singleton_Manager &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sigset_t *</type>
      <name>default_mask_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_OS_Exit_Info</type>
      <name>exit_info_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>registered_with_object_manager_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>TAO_Singleton_Manager *</type>
      <name>instance_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>void *</type>
      <name>preallocated_object</name>
      <anchor>r1</anchor>
      <arglist>[TAO_PREALLOCATED_OBJECTS]</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend void</type>
      <name>TAO_Singleton_Manager_cleanup_destroyer</name>
      <anchor>l0</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_String_Manager</name>
    <filename>classTAO__String__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_String_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_String_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_String_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Stub</name>
    <filename>classTAO__Stub.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>get_client_policy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>set_policy_overrides</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>validate_connection</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::PolicyList_out inconsistent_policies ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>relative_roundtrip_timeout</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>sync_scope</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>buffering_constraint</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Sync_Strategy &amp;</type>
      <name>sync_strategy</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>hash</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong maximum ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Object_ptr other_obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Stub</name>
      <anchor>a11</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>profile_lock</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>profile_in_use</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile *</type>
      <name>make_profiles</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_MProfile &amp;</type>
      <name>base_profiles</name>
      <anchor>a17</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile &amp;</type>
      <name>base_profiles</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_MProfile *</type>
      <name>forward_profiles</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>next_profile</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>next_profile_i</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_profiles</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_profiles_i</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>valid_forward_profile</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_valid_profile</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>valid_profile</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>base_profiles</name>
      <anchor>a27</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_forward_profiles</name>
      <anchor>a28</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>next_profile_retry</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a30</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>servant_orb_ptr</name>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_var &amp;</type>
      <name>servant_orb_var</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>servant_orb</name>
      <anchor>a33</anchor>
      <arglist>(CORBA::ORB_ptr orb)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>service_profile_selection</name>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>create_ior_info</name>
      <anchor>a35</anchor>
      <arglist>(IOP::IOR *&amp;ior_info, CORBA::ULong &amp;index ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::String_var</type>
      <name>type_id</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Stub</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Stub</name>
      <anchor>b1</anchor>
      <arglist>(const TAO_Stub &amp;)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_Stub &amp;</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(const TAO_Stub &amp;)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core_Auto_Ptr</type>
      <name>orb_core_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ORB_var</type>
      <name>orb_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ORB_var</type>
      <name>servant_orb_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_MProfile</type>
      <name>base_profiles_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_MProfile *</type>
      <name>forward_profiles_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Profile *</type>
      <name>profile_in_use_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock *</type>
      <name>profile_lock_ptr_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>size_t</type>
      <name>profile_success_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Policy_Set *</type>
      <name>policies_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IOP::IOR *</type>
      <name>ior_info_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IOP::IOR *</type>
      <name>forwarded_ior_info_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Profile *</type>
      <name>set_profile_in_use_i</name>
      <anchor>c0</anchor>
      <arglist>(TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_base</name>
      <anchor>c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forward_back_one</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_forward</name>
      <anchor>c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Profile *</type>
      <name>next_forward_profile</name>
      <anchor>c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_profile_ior_info</name>
      <anchor>c5</anchor>
      <arglist>(TAO_MProfile &amp;profile, IOP::IOR *&amp;ior_info ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Stub_Auto_Ptr</name>
    <filename>classTAO__Stub__Auto__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Stub_Auto_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Stub *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Stub_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub_Auto_Ptr &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub_Auto_Ptr &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Stub_Auto_Ptr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Stub_Auto_Ptr</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub &amp;</type>
      <name>operator *</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>get</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>release</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Stub *p=0)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Stub *</type>
      <name>p_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Stub_Factory</name>
    <filename>classTAO__Stub__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Stub_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Stub *</type>
      <name>create_stub</name>
      <anchor>a1</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles, TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Sync_Scope_Policy</name>
    <filename>classTAO__Sync__Scope__Policy.html</filename>
    <base>Messaging::SyncScopePolicy</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Sync_Scope_Policy</name>
      <anchor>a0</anchor>
      <arglist>(Messaging::SyncScope synchronization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Sync_Scope_Policy</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Sync_Scope_Policy &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Sync_Scope_Policy *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Messaging::SyncScope</type>
      <name>synchronization</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_synchronization</name>
      <anchor>a4</anchor>
      <arglist>(Messaging::SyncScope &amp;synchronization) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyType</type>
      <name>policy_type</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>copy</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Cached_Policy_Type</type>
      <name>_tao_cached_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>hook</name>
      <anchor>d0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_Stub *stub, int &amp;has_synchronization, int &amp;scope)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Policy_ptr</type>
      <name>create</name>
      <anchor>d1</anchor>
      <arglist>(const CORBA::Any &amp;val ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Messaging::SyncScope</type>
      <name>synchronization_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Sync_Strategy</name>
    <filename>classTAO__Sync__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Sync_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a1</anchor>
      <arglist>(int queue_empty)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>buffering_constraints_reached</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Stub *stub, size_t msg_count, size_t total_bytes, int &amp;must_flush, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;interval)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synch_Queued_Message</name>
    <filename>classTAO__Synch__Queued__Message.html</filename>
    <base>TAO_Queued_Message</base>
    <member kind="function">
      <type></type>
      <name>TAO_Synch_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Message_Block *contents)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Synch_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Message_Block *</type>
      <name>current_block</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>all_data_sent</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fill_iov</name>
      <anchor>a5</anchor>
      <arglist>(int iovcnt_max, int &amp;iovcnt, iovec iov[]) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bytes_transferred</name>
      <anchor>a6</anchor>
      <arglist>(size_t &amp;byte_count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>contents_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>current_block_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synch_Refcountable</name>
    <filename>classTAO__Synch__Refcountable.html</filename>
    <base protection="private">ACE_Refcountable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Synch_Refcountable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>increment</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decrement</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>refcount</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Synch_Refcountable</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Lock *lock, int refcount)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock *</type>
      <name>refcount_lock_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synch_Reply_Dispatcher</name>
    <filename>classTAO__Synch__Reply__Dispatcher.html</filename>
    <base>TAO_Reply_Dispatcher</base>
    <base>TAO_LF_Event</base>
    <member kind="function">
      <type></type>
      <name>TAO_Synch_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, IOP::ServiceContextList &amp;sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Synch_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_InputCDR &amp;</type>
      <name>reply_cdr</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>IOP::ServiceContextList &amp;</type>
      <name>reply_service_info_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>buf_</name>
      <anchor>o1</anchor>
      <arglist>[ACE_CDR::DEFAULT_BUFSIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Data_Block</type>
      <name>db_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_InputCDR</type>
      <name>reply_cdr_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synchronous_Cancellation_Required</name>
    <filename>classTAO__Synchronous__Cancellation__Required.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Synchronous_Cancellation_Required</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Synchronous_Cancellation_Required</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>old_type_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Tagged_Components</name>
    <filename>classTAO__Tagged__Components.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Tagged_Components</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_orb_type</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong orb_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_orb_type</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong &amp;orb_type) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_code_sets</name>
      <anchor>a3</anchor>
      <arglist>(const CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_code_sets</name>
      <anchor>a4</anchor>
      <arglist>(CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_code_sets</name>
      <anchor>a5</anchor>
      <arglist>(const CONV_FRAME::CodeSetComponentInfo *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_code_sets</name>
      <anchor>a6</anchor>
      <arglist>(CONV_FRAME::CodeSetComponentInfo &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_component</name>
      <anchor>a7</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_component</name>
      <anchor>a8</anchor>
      <arglist>(IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_component</name>
      <anchor>a9</anchor>
      <arglist>(IOP::TaggedComponent &amp;component) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encode</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>IOP::MultipleComponentProfile &amp;</type>
      <name>components</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_code_sets_i</name>
      <anchor>c0</anchor>
      <arglist>(CONV_FRAME::CodeSetComponent &amp;lhs, CONV_FRAME::CodeSetComponent &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_known_component_i</name>
      <anchor>c1</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_component_i</name>
      <anchor>c2</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_component_i</name>
      <anchor>c3</anchor>
      <arglist>(IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_component_i</name>
      <anchor>c4</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_component_i</name>
      <anchor>c5</anchor>
      <arglist>(IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_component_i</name>
      <anchor>c6</anchor>
      <arglist>(IOP::ComponentId tag, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_known_component_i</name>
      <anchor>c7</anchor>
      <arglist>(IOP::TaggedComponent &amp;component) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_component_i</name>
      <anchor>c8</anchor>
      <arglist>(IOP::TaggedComponent &amp;component) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>known_tag</name>
      <anchor>c9</anchor>
      <arglist>(IOP::ComponentId tag) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unique_tag</name>
      <anchor>c10</anchor>
      <arglist>(IOP::ComponentId tag) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>orb_type_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CONV_FRAME::CodeSetComponentInfo</type>
      <name>code_sets_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::MultipleComponentProfile</type>
      <name>components_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>orb_type_set_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Octet</type>
      <name>code_sets_set_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Tagged_Profile</name>
    <filename>classTAO__Tagged__Profile.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Tagged_Profile</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>unmarshall_target_address</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>unmarshall_object_key</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>object_key</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ObjectKey &amp;object_key)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const IOP::TaggedProfile &amp;</type>
      <name>tagged_profile</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>profile_index</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>type_id</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>discriminator</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>extract_object_key</name>
      <anchor>c0</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>unmarshall_object_key_i</name>
      <anchor>c1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>unmarshall_iop_profile_i</name>
      <anchor>c2</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Boolean</type>
      <name>unmarshall_ref_addr_i</name>
      <anchor>c3</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Short</type>
      <name>discriminator_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>object_key_extracted_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ObjectKey</type>
      <name>object_key_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::TaggedProfile</type>
      <name>profile_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>profile_index_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CString</type>
      <name>type_id_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Target_Specification</name>
    <filename>classTAO__Target__Specification.html</filename>
    <member kind="enumeration">
      <name>TAO_Target_Address</name>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Key_Addr</name>
      <anchor>s3s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Profile_Addr</name>
      <anchor>s3s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reference_Addr</name>
      <anchor>s3s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Target_Specification</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target_specifier</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_ObjectKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target_specifier</name>
      <anchor>a2</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target_specifier</name>
      <anchor>a3</anchor>
      <arglist>(IOP::IOR &amp;ior, CORBA::ULong prof_index)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_ObjectKey *</type>
      <name>object_key</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::TaggedProfile *</type>
      <name>profile</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>iop_ior</name>
      <anchor>a6</anchor>
      <arglist>(IOP::IOR *&amp;ior)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Target_Address</type>
      <name>specifier</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Target_Specification::@7</type>
      <name>u_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Target_Address</type>
      <name>specifier_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>profile_index_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Thread_Lane_Resources</name>
    <filename>classTAO__Thread__Lane__Resources.html</filename>
    <member kind="function">
      <type>TAO_Acceptor_Registry &amp;</type>
      <name>acceptor_registry</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Cache_Manager &amp;</type>
      <name>transport_cache</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Thread_Lane_Resources</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core, TAO_New_Leader_Generator *new_leader_generator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Thread_Lane_Resources</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open_acceptor_registry</name>
      <anchor>a3</anchor>
      <arglist>(int ignore_address ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown_reactor</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>has_acceptor_registry_been_created</name>
      <anchor>c0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core &amp;</type>
      <name>orb_core_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Acceptor_Registry *</type>
      <name>acceptor_registry_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport_Cache_Manager *</type>
      <name>transport_cache_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Leader_Follower *</type>
      <name>leader_follower_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_New_Leader_Generator *</type>
      <name>new_leader_generator_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Thread_Lane_Resources_Manager</name>
    <filename>classTAO__Thread__Lane__Resources__Manager.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Thread_Lane_Resources &amp;</type>
      <name>lane_resources</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Thread_Lane_Resources &amp;</type>
      <name>default_lane_resources</name>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Strategy &amp;</type>
      <name>lf_strategy</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Thread_Lane_Resources_Manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Thread_Lane_Resources_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open_default_resources</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown_reactor</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_collocated</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_LF_Strategy *</type>
      <name>lf_strategy_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Thread_Lane_Resources_Manager_Factory</name>
    <filename>classTAO__Thread__Lane__Resources__Manager__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Thread_Lane_Resources_Manager_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Thread_Lane_Resources_Manager *</type>
      <name>create_thread_lane_resources_manager</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core &amp;core)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport</name>
    <filename>classTAO__Transport.html</filename>
    <base protection="private">TAO_Synch_Refcountable</base>
    <member kind="function">
      <type></type>
      <name>TAO_Transport</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Transport</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Mux_Strategy *</type>
      <name>tms</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TAO_Wait_Strategy *</type>
      <name>wait_strategy</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handle_output</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>messaging_init</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bidirectional_flag</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bidirectional_flag</name>
      <anchor>a9</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>provide_handle</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Handle_Set &amp;reactor_registered, TAO_EventHandlerSet &amp;unregistered)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tear_listen_point_list</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dequeue_all</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queue_is_empty</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_handler</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>send</name>
      <anchor>a18</anchor>
      <arglist>(iovec *iov, int iovcnt, size_t &amp;bytes_transferred, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>recv</name>
      <anchor>a19</anchor>
      <arglist>(char *buffer, size_t len, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchor>a20</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>id</name>
      <anchor>a21</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>purging_order</name>
      <anchor>a22</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purging_order</name>
      <anchor>a23</anchor>
      <arglist>(unsigned long value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generate_locate_request</name>
      <anchor>a24</anchor>
      <arglist>(TAO_Target_Specification &amp;spec, TAO_Operation_Details &amp;opdetails, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a25</anchor>
      <arglist>(TAO_Operation_Details &amp;opd, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input_i</name>
      <anchor>a26</anchor>
      <arglist>(TAO_Resume_Handle &amp;rh, ACE_Time_Value *max_wait_time=0, int block=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>send_request</name>
      <anchor>a27</anchor>
      <arglist>(TAO_Stub *stub, TAO_ORB_Core *orb_core, TAO_OutputCDR &amp;stream, int is_synchronous, ACE_Time_Value *max_time_wait)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>send_message</name>
      <anchor>a28</anchor>
      <arglist>(TAO_OutputCDR &amp;stream, TAO_Stub *stub=0, int is_synchronous=1, ACE_Time_Value *max_time_wait=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_handler_closing</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recache_transport</name>
      <anchor>a30</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache_map_entry</name>
      <anchor>a31</anchor>
      <arglist>(TAO_Transport_Cache_Manager::HASH_MAP_ENTRY *entry)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Cache_Manager::HASH_MAP_ENTRY *</type>
      <name>cache_map_entry</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_message_block_chain</name>
      <anchor>a33</anchor>
      <arglist>(const ACE_Message_Block *message_block, size_t &amp;bytes_transferred, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_message_i</name>
      <anchor>a34</anchor>
      <arglist>(TAO_Stub *stub, int is_synchronous, const ACE_Message_Block *message_block, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_message_block_chain_i</name>
      <anchor>a35</anchor>
      <arglist>(const ACE_Message_Block *message_block, size_t &amp;bytes_transferred, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge_entry</name>
      <anchor>a36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_idle</name>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handle_timeout</name>
      <anchor>a38</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, const void *act)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idle_after_send</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idle_after_reply</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close_connection</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_Transport *</type>
      <name>_duplicate</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>d1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ACE_Event_Handler *</type>
      <name>event_handler_i</name>
      <anchor>b0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual TAO_Pluggable_Messaging *</type>
      <name>messaging_object</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>send_i</name>
      <anchor>b2</anchor>
      <arglist>(iovec *iov, int iovcnt, size_t &amp;bytes_transferred, const ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>recv_i</name>
      <anchor>b3</anchor>
      <arglist>(char *buffer, size_t len, const ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual void</type>
      <name>close_connection_i</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler_i</name>
      <anchor>b5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public" virtualness="pure">
      <type>virtual void</type>
      <name>transition_handler_state_i</name>
      <anchor>b6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>parse_consolidate_messages</name>
      <anchor>b7</anchor>
      <arglist>(ACE_Message_Block &amp;bl, TAO_Resume_Handle &amp;rh, ACE_Time_Value *time=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>parse_incoming_messages</name>
      <anchor>b8</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>size_t</type>
      <name>missing_data</name>
      <anchor>b9</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_message</name>
      <anchor>b10</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, ssize_t missing_data, TAO_Resume_Handle &amp;rh, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>consolidate_fragments</name>
      <anchor>b11</anchor>
      <arglist>(TAO_Queued_Data *qd, TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>consolidate_message_queue</name>
      <anchor>b12</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, ssize_t missing_data, TAO_Resume_Handle &amp;rh, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>consolidate_extra_messages</name>
      <anchor>b13</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>int</type>
      <name>process_parsed_messages</name>
      <anchor>b14</anchor>
      <arglist>(TAO_Queued_Data *qd, TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="public">
      <type>TAO_Queued_Data *</type>
      <name>make_queued_data</name>
      <anchor>b15</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport_Cache_Manager::HASH_MAP_ENTRY *</type>
      <name>cache_map_entry_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport_Mux_Strategy *</type>
      <name>tms_</name>
      <anchor>n3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Wait_Strategy *</type>
      <name>ws_</name>
      <anchor>n4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>bidirectional_flag_</name>
      <anchor>n5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Queued_Message *</type>
      <name>head_</name>
      <anchor>n6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Queued_Message *</type>
      <name>tail_</name>
      <anchor>n7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Incoming_Message_Queue</type>
      <name>incoming_message_queue_</name>
      <anchor>n8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Time_Value</type>
      <name>current_deadline_</name>
      <anchor>n9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>long</type>
      <name>flush_timer_id_</name>
      <anchor>n10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport_Timer</type>
      <name>transport_timer_</name>
      <anchor>n11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>ACE_Lock *</type>
      <name>handler_lock_</name>
      <anchor>n12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>id_</name>
      <anchor>n13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>unsigned long</type>
      <name>purging_order_</name>
      <anchor>n14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>drain_queue</name>
      <anchor>c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>drain_queue_i</name>
      <anchor>c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>queue_is_empty_i</name>
      <anchor>c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>drain_queue_helper</name>
      <anchor>c3</anchor>
      <arglist>(int &amp;iovcnt, iovec iov[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>schedule_output_i</name>
      <anchor>c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>cancel_output_i</name>
      <anchor>c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup_queue</name>
      <anchor>c6</anchor>
      <arglist>(size_t byte_count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>check_buffering_constraints_i</name>
      <anchor>c7</anchor>
      <arglist>(TAO_Stub *stub, int &amp;must_flush)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>send_synchronous_message_i</name>
      <anchor>c8</anchor>
      <arglist>(const ACE_Message_Block *message_block, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>flush_timer_pending</name>
      <anchor>c9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_flush_timer</name>
      <anchor>c10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>check_event_handler_i</name>
      <anchor>c11</anchor>
      <arglist>(const char *caller)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_invalid_event_handler</name>
      <anchor>c12</anchor>
      <arglist>(const char *caller)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_queue_head</name>
      <anchor>c13</anchor>
      <arglist>(TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Transport</name>
      <anchor>c14</anchor>
      <arglist>(const TAO_Transport &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c15</anchor>
      <arglist>(const TAO_Transport &amp;)</arglist>
    </member>
    <member kind="friend" protection="public">
      <type>friend class</type>
      <name>TAO_Transport_Cache_Manager</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Block_Flushing_Strategy</name>
      <anchor>l1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Reactive_Flushing_Strategy</name>
      <anchor>l2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Leader_Follower_Flushing_Strategy</name>
      <anchor>l3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Cache_Manager</name>
    <filename>classTAO__Transport__Cache__Manager.html</filename>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager&lt; TAO_Cache_ExtId, TAO_Cache_IntId, ACE_Null_Mutex &gt;</type>
      <name>HASH_MAP</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Iterator&lt; TAO_Cache_ExtId, TAO_Cache_IntId, ACE_Null_Mutex &gt;</type>
      <name>HASH_MAP_ITER</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; TAO_Cache_ExtId, TAO_Cache_IntId &gt;</type>
      <name>HASH_MAP_ENTRY</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Transport_Cache_Manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Transport_Cache_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cache_transport</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *prop, TAO_Transport *transport)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *prop, TAO_Transport *&amp;transport)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>purge</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>purge_entry</name>
      <anchor>a5</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_invalid</name>
      <anchor>a6</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_idle</name>
      <anchor>a7</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Handle_Set &amp;reactor_registered, TAO_EventHandlerSet &amp;unregistered)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_size</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>HASH_MAP_ENTRY **</type>
      <name>DESCRIPTOR_SET</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>bind</name>
      <anchor>c0</anchor>
      <arglist>(TAO_Cache_ExtId &amp;ext_id, TAO_Cache_IntId &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>find</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key, TAO_Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>rebind</name>
      <anchor>c2</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key, const TAO_Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unbind</name>
      <anchor>c3</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unbind</name>
      <anchor>c4</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key, TAO_Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>bind_i</name>
      <anchor>c5</anchor>
      <arglist>(TAO_Cache_ExtId &amp;ext_id, TAO_Cache_IntId &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>find_i</name>
      <anchor>c6</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key, TAO_Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>rebind_i</name>
      <anchor>c7</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key, const TAO_Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>c8</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>c9</anchor>
      <arglist>(const TAO_Cache_ExtId &amp;key, TAO_Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>make_idle_i</name>
      <anchor>c10</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>close_i</name>
      <anchor>c11</anchor>
      <arglist>(ACE_Handle_Set &amp;reactor_registered, TAO_EventHandlerSet &amp;unregistered)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>purge_entry_i</name>
      <anchor>c12</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mark_invalid_i</name>
      <anchor>c13</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_last_index_bind</name>
      <anchor>c14</anchor>
      <arglist>(TAO_Cache_ExtId &amp;key, TAO_Cache_IntId &amp;val, HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>is_entry_idle</name>
      <anchor>c15</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sort_set</name>
      <anchor>c16</anchor>
      <arglist>(DESCRIPTOR_SET &amp;entries, int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>fill_set_i</name>
      <anchor>c17</anchor>
      <arglist>(DESCRIPTOR_SET &amp;sorted_set)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>close_entries</name>
      <anchor>c18</anchor>
      <arglist>(DESCRIPTOR_SET &amp;sorted_set, int size)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>int</type>
      <name>cpscmp</name>
      <anchor>f0</anchor>
      <arglist>(const void *a, const void *b)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>percent_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Connection_Purging_Strategy *</type>
      <name>purging_strategy_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HASH_MAP</type>
      <name>cache_map_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock *</type>
      <name>cache_lock_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Descriptor_Interface</name>
    <filename>classTAO__Transport__Descriptor__Interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Transport_Descriptor_Interface</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Transport_Descriptor_Interface *</type>
      <name>duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Transport_Descriptor_Interface *other_prop)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a3</anchor>
      <arglist>(void) const=0</arglist>
    </member>
    <member kind="function">
      <type>TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bidir_flag</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Transport_Descriptor_Interface</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Transport_Descriptor_Interface</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Endpoint *endpoint, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Endpoint *</type>
      <name>endpoint_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>bidir_flag_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>CORBA::Boolean</type>
      <name>endpoint_from_heap_</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Mux_Strategy</name>
    <filename>classTAO__Transport__Mux__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Transport_Mux_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Transport_Mux_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind_dispatcher</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unbind_dispatcher</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong request_id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>idle_after_send</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>idle_after_reply</name>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Sync_Strategy</name>
    <filename>classTAO__Transport__Sync__Strategy.html</filename>
    <base>TAO_Sync_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a0</anchor>
      <arglist>(int queue_empty)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buffering_constraints_reached</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub *stub, size_t msg_count, size_t total_bytes, int &amp;must_flush, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;interval)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Timer</name>
    <filename>classTAO__Transport__Timer.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function">
      <type></type>
      <name>TAO_Transport_Timer</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, const void *act)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_TSS_Resources</name>
    <filename>classTAO__TSS__Resources.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_TSS_Resources</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_TSS_Resources</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>poa_current_impl_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA_Environment *</type>
      <name>default_environment_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA_Environment</type>
      <name>tss_environment_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Policy_Current_Impl</type>
      <name>initial_policy_current_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Policy_Current_Impl *</type>
      <name>policy_current_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_TSS_Resources</name>
      <anchor>c0</anchor>
      <arglist>(const TAO_TSS_Resources &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchor>c1</anchor>
      <arglist>(const TAO_TSS_Resources &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_TSS_Singleton</name>
    <filename>classTAO__TSS__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Cleanup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_TSS_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>ACE_TSS_TYPE</name>
      <anchor>b1</anchor>
      <arglist>(TYPE) instance_</arglist>
    </member>
    <member kind="function" protection="public" static="yes">
      <type>TAO_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="public" static="yes">
      <type>TAO_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>q0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_TypeCodeFactory_Adapter</name>
    <filename>classTAO__TypeCodeFactory__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_TypeCodeFactory_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_struct_tc</name>
      <anchor>a1</anchor>
      <arglist>(const char *id, const char *name, const CORBA_StructMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_union_tc</name>
      <anchor>a2</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr discriminator_type, const CORBA_UnionMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_enum_tc</name>
      <anchor>a3</anchor>
      <arglist>(const char *id, const char *name, const CORBA_EnumMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_alias_tc</name>
      <anchor>a4</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr original_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_exception_tc</name>
      <anchor>a5</anchor>
      <arglist>(const char *id, const char *name, const CORBA_StructMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_interface_tc</name>
      <anchor>a6</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_string_tc</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_wstring_tc</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_fixed_tc</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::UShort digits, CORBA::UShort scale ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_sequence_tc</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong bound, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_array_tc</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong length, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_value_tc</name>
      <anchor>a12</anchor>
      <arglist>(const char *id, const char *name, CORBA::ValueModifier type_modifier, CORBA::TypeCode_ptr concrete_base, const CORBA_ValueMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_value_box_tc</name>
      <anchor>a13</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr boxed_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_native_tc</name>
      <anchor>a14</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_recursive_tc</name>
      <anchor>a15</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_abstract_interface_tc</name>
      <anchor>a16</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_local_interface_tc</name>
      <anchor>a17</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_TypeCodes</name>
    <filename>classTAO__TypeCodes.html</filename>
    <member kind="function" static="yes">
      <type>void</type>
      <name>init</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>fini</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>int</type>
      <name>initialized_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Array_Sequence</name>
    <filename>classTAO__Unbounded__Array__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Array_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Array_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Array_Sequence&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Array_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Base_Sequence</name>
    <filename>classTAO__Unbounded__Base__Sequence.html</filename>
    <base>TAO_Base_Sequence</base>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>length</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Unbounded_Base_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Unbounded_Base_Sequence</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Unbounded_Base_Sequence</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, void *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" protection="public">
      <type></type>
      <name>TAO_Unbounded_Base_Sequence</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::ULong maximum, void *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Object_Sequence</name>
    <filename>classTAO__Unbounded__Object__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, T **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Object_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Object_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Object_Sequence&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Object_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_downcast</name>
      <anchor>a10</anchor>
      <arglist>(void *target, CORBA_Object *src ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA_Object *</type>
      <name>_upcast</name>
      <anchor>a11</anchor>
      <arglist>(void *src) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T **)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Pseudo_Sequence</name>
    <filename>classTAO__Unbounded__Pseudo__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, T **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Pseudo_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Pseudo_Sequence&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Pseudo_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T **)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Sequence</name>
    <filename>classTAO__Unbounded__Sequence.html</filename>
    <templarg>T</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Sequence&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Sequence</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</name>
    <filename>classTAO__Unbounded__Sequence_3_01CORBA_1_1Octet_01_4.html</filename>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Unbounded_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::Octet *</type>
      <name>get_buffer</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>mb</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>d0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Octet *</type>
      <name>allocbuf</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d2</anchor>
      <arglist>(CORBA::Octet *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Message_Block *</type>
      <name>mb_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Marshal_Sequence</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_String_Sequence</name>
    <filename>classTAO__Unbounded__String__Sequence.html</filename>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong maximum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, char **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_String_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_String_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_String_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_String_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>get_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>get_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(char **)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Valuetype_Sequence</name>
    <filename>classTAO__Unbounded__Valuetype__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Valuetype_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Valuetype_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Valuetype_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, T **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Valuetype_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Valuetype_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Valuetype_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Valuetype_Sequence&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Valuetype_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Valuetype_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(T **)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_WString_Sequence</name>
    <filename>classTAO__Unbounded__WString__Sequence.html</filename>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong maximum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, CORBA::WChar **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_WString_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_WString_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_WString_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_WString_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar **</type>
      <name>get_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar **</type>
      <name>get_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::WChar **</type>
      <name>allocbuf</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::WChar **)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unknown_Profile</name>
    <filename>classTAO__Unknown__Profile.html</filename>
    <base>TAO_Profile</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unknown_Profile</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string</name>
      <anchor>a1</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>to_string</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;stream) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TAO_ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ObjectKey *</type>
      <name>_key</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>endpoint_count</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a11</anchor>
      <arglist>(const TAO_Profile *other_profile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedProfile &amp;</type>
      <name>create_tagged_profile</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_opaque</type>
      <name>body_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::TaggedProfile</type>
      <name>tagged_profile_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ValueFactory_Map</name>
    <filename>classTAO__ValueFactory__Map.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ValueFactory_Map</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ValueFactory_Map</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rebind</name>
      <anchor>a2</anchor>
      <arglist>(const char *repo_id, CORBA_ValueFactory_ptr &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a3</anchor>
      <arglist>(const char *repo_id, CORBA_ValueFactory_ptr &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchor>a4</anchor>
      <arglist>(const char *repo_id, CORBA_ValueFactory_ptr &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Hash_Map_Manager_Ex&lt; const char *, CORBA_ValueFactory_ptr, ACE_Hash&lt; const char *&gt;, ACE_Equal_To&lt; const char *&gt;, TAO_SYNCH_RW_MUTEX &gt;</type>
      <name>FACTORY_MAP_MANAGER</name>
      <anchor>u0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FACTORY_MAP_MANAGER</type>
      <name>map_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Valuetype_Manager</name>
    <filename>classTAO__Valuetype__Manager.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Valuetype_Manager</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Valuetype_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Valuetype_Manager</name>
      <anchor>a1</anchor>
      <arglist>(T **, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Valuetype_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Valuetype_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Valuetype_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Valuetype_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Valuetype_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T_var</name>
      <anchor>a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>in</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>inout</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>out</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>_retn</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T **</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Unbounded_Valuetype_Sequence&lt; T, T_var &gt;</name>
      <anchor>l0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_On_Leader_Follower</name>
    <filename>classTAO__Wait__On__Leader__Follower.html</filename>
    <base>TAO_Wait_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_On_Leader_Follower</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_On_Leader_Follower</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sending_request</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core, int two_way)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>non_blocking</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_On_Reactor</name>
    <filename>classTAO__Wait__On__Reactor.html</filename>
    <base>TAO_Wait_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_On_Reactor</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_On_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>non_blocking</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_On_Read</name>
    <filename>classTAO__Wait__On__Read.html</filename>
    <base>TAO_Wait_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_On_Read</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_On_Read</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>non_blocking</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_Strategy</name>
    <filename>classTAO__Wait__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sending_request</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core, int two_way)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>non_blocking</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_registered</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_registered</name>
      <anchor>a7</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="variable" protection="public">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="public">
      <type>int</type>
      <name>is_registered_</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_WString_Manager</name>
    <filename>classTAO__WString__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_WString_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_WString_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_WString_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::WChar *</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::WChar *</type>
      <name>ptr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_XT_Resource_Factory</name>
    <filename>classTAO__XT__Resource__Factory.html</filename>
    <base>TAO_Default_Resource_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_XT_Resource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_context</name>
      <anchor>d0</anchor>
      <arglist>(XtAppContext context)</arglist>
    </member>
    <member kind="function" protection="public" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>allocate_reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>XtAppContext</type>
      <name>context_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TC_Private_State</name>
    <filename>classTC__Private__State.html</filename>
    <member kind="function">
      <type></type>
      <name>TC_Private_State</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TCKind kind)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TC_Private_State</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_SYNCH_MUTEX</type>
      <name>mutex_</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TCKind</type>
      <name>tc_kind_</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_id_known_</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_name_known_</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_member_count_known_</name>
      <anchor>m4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_member_type_list_known_</name>
      <anchor>m5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_member_name_list_known_</name>
      <anchor>m6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_member_label_list_known_</name>
      <anchor>m7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_discriminator_type_known_</name>
      <anchor>m8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_default_index_used_known_</name>
      <anchor>m9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_length_known_</name>
      <anchor>m10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_content_type_known_</name>
      <anchor>m11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_discrim_pad_size_known_</name>
      <anchor>m12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>tc_concrete_base_type_known_</name>
      <anchor>m13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>tc_id_</name>
      <anchor>m14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>tc_name_</name>
      <anchor>m15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>tc_member_count_</name>
      <anchor>m16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr *</type>
      <name>tc_member_type_list_</name>
      <anchor>m17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>tc_member_name_list_</name>
      <anchor>m18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Any_ptr *</type>
      <name>tc_member_label_list_</name>
      <anchor>m19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_discriminator_type_</name>
      <anchor>m20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>tc_default_index_used_</name>
      <anchor>m21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>tc_length_</name>
      <anchor>m22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_content_type_</name>
      <anchor>m23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_concrete_base_type_</name>
      <anchor>m24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TimeBase::IntervalT</name>
    <filename>structTimeBase_1_1IntervalT.html</filename>
    <member kind="variable">
      <type>TimeT</type>
      <name>lower_bound</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeT</type>
      <name>upper_bound</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TimeBase::UtcT</name>
    <filename>structTimeBase_1_1UtcT.html</filename>
    <member kind="variable">
      <type>TimeT</type>
      <name>time</name>
      <anchor>m0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>inacclo</name>
      <anchor>m1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>inacchi</name>
      <anchor>m2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TdfT</type>
      <name>tdf</name>
      <anchor>m3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>PP_Memory_Management</name>
    <title>Memory Management Rules for TAO's Pluggable Protocol Framework</title>
    <filename>PP_Memory_Management</filename>
    <docanchor>rules</docanchor>
    <docanchor>requirements</docanchor>
    <docanchor>background</docanchor>
    <docanchor>data</docanchor>
  </compound>
  <compound kind="namespace">
    <name>CONV_FRAME</name>
    <filename>namespaceCONV__FRAME.html</filename>
    <class kind="struct">CONV_FRAME::CodeSetComponent</class>
    <class kind="struct">CONV_FRAME::CodeSetComponentInfo</class>
    <class kind="struct">CONV_FRAME::CodeSetContext</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>CodeSetId</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CORBA</name>
    <filename>namespaceCORBA.html</filename>
    <class kind="exception">CORBA::Bounds</class>
    <class kind="interface">CORBA::ConstructionPolicy</class>
    <class kind="interface">CORBA::Current</class>
    <class kind="interface">CORBA::DIIPollable</class>
    <class kind="interface">CORBA::DomainManager</class>
    <class kind="exception">CORBA::InvalidPolicies</class>
    <class kind="interface">CORBA::Object</class>
    <class kind="interface">CORBA::ORB</class>
    <class kind="exception">CORBA::ORB::InvalidName</class>
    <class kind="interface">CORBA::Policy</class>
    <class kind="interface">CORBA::PolicyCurrent</class>
    <class kind="exception">CORBA::PolicyError</class>
    <class kind="interface">CORBA::PolicyManager</class>
    <class kind="interface">CORBA::Pollable</class>
    <class kind="interface">CORBA::PollableSet</class>
    <class kind="exception">CORBA::PollableSet::NoPossiblePollable</class>
    <class kind="exception">CORBA::PollableSet::UnknownPollable</class>
    <class kind="exception">CORBA::WrongTransaction</class>
    <member kind="typedef">
      <type>sequence&lt; DomainManager &gt;</type>
      <name>DomainManagerList</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>PolicyType</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; Policy &gt;</type>
      <name>PolicyList</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; PolicyType &gt;</type>
      <name>PolicyTypeSeq</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; octet &gt;</type>
      <name>OctetSeq</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>PolicyErrorCode</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; string &gt;</type>
      <name>StringSeq</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; wstring &gt;</type>
      <name>WStringSeq</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SetOverrideType</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_OVERRIDE</name>
      <anchor>a18a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_OVERRIDE</name>
      <anchor>a18a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SetOverrideType</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_OVERRIDE</name>
      <anchor>a18a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_OVERRIDE</name>
      <anchor>a18a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyType</type>
      <name>SecConstruction</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>UNSUPPORTED_POLICY</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY_TYPE</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY_VALUE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>UNSUPPORTED_POLICY_VALUE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>local interface</type>
      <name>PollableSet</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dynamic</name>
    <filename>namespaceDynamic.html</filename>
    <class kind="struct">Dynamic::Parameter</class>
    <member kind="typedef">
      <type>sequence&lt; Parameter &gt;</type>
      <name>ParameterList</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>ContextList</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::TypeCode</type>
      <name>TypeCode</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TypeCode &gt;</type>
      <name>ExceptionList</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>RequestContext</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>GIOP</name>
    <filename>namespaceGIOP.html</filename>
    <class kind="struct">GIOP::IORAddressingInfo</class>
    <class kind="struct">GIOP::Version</class>
    <member kind="typedef">
      <type>short</type>
      <name>AddressingDisposition</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TargetAddress</type>
      <name>switch</name>
      <anchor>a4</anchor>
      <arglist>(AddressingDisposition)</arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>KeyAddr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>ProfileAddr</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>ReferenceAddr</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IIOP</name>
    <filename>namespaceIIOP.html</filename>
    <class kind="struct">IIOP::BiDirIIOPServiceContext</class>
    <class kind="struct">IIOP::ListenPoint</class>
    <member kind="typedef">
      <type>sequence&lt; ListenPoint &gt;</type>
      <name>ListenPointList</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IOP</name>
    <filename>namespaceIOP.html</filename>
    <class kind="interface">IOP::Codec</class>
    <class kind="exception">IOP::Codec::FormatMismatch</class>
    <class kind="exception">IOP::Codec::InvalidTypeForEncoding</class>
    <class kind="exception">IOP::Codec::TypeMismatch</class>
    <class kind="interface">IOP::CodecFactory</class>
    <class kind="exception">IOP::CodecFactory::UnknownEncoding</class>
    <class kind="struct">IOP::Encoding</class>
    <class kind="struct">IOP::IOR</class>
    <class kind="struct">IOP::ServiceContext</class>
    <class kind="struct">IOP::TaggedComponent</class>
    <class kind="struct">IOP::TaggedProfile</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ProfileId</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ComponentId</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>MultipleComponentProfile</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>TaggedComponentList</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>TaggedComponentSeq</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ServiceId</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ServiceContext &gt;</type>
      <name>ServiceContextList</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>EncodingFormat</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_INTERNET_IOP</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_MULTIPLE_COMPONENTS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ORB_TYPE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_CODE_SETS</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_POLICIES</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ALTERNATE_IIOP_ADDRESS</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_COMPLETE_OBJECT_KEY</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ENDPOINT_ID_POSITION</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_LOCATION_POLICY</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_STRING_BINDING</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_BINDING_NAME</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_NO_PIPES</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>TransactionService</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>CodeSets</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>ChainBypassCheck</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>ChainBypassInfo</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>LogicalThreadId</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>BI_DIR_IIOP</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>SendingContextRunTime</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>INVOCATION_POLICIES</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>UnknownExceptionInfo</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>RTCorbaPriority</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>RTCorbaPriorityRange</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_GROUP</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_PRIMARY</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_HEARTBEAT_ENABLED</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>FT_GROUP_VERSION</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>FT_REQUEST</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_UIPMC</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_GROUP</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_GROUP_IIOP</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const EncodingFormat</type>
      <name>ENCODING_CDR_ENCAPS</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Messaging</name>
    <filename>namespaceMessaging.html</filename>
    <class kind="interface">Messaging::ExceptionHolder</class>
    <class kind="interface">Messaging::MaxHopsPolicy</class>
    <class kind="struct">Messaging::PolicyValue</class>
    <class kind="struct">Messaging::PriorityRange</class>
    <class kind="interface">Messaging::QueueOrderPolicy</class>
    <class kind="interface">Messaging::RebindPolicy</class>
    <class kind="interface">Messaging::RelativeRequestTimeoutPolicy</class>
    <class kind="interface">Messaging::RelativeRoundtripTimeoutPolicy</class>
    <class kind="interface">Messaging::ReplyEndTimePolicy</class>
    <class kind="interface">Messaging::ReplyHandler</class>
    <class kind="interface">Messaging::ReplyPriorityPolicy</class>
    <class kind="interface">Messaging::ReplyStartTimePolicy</class>
    <class kind="interface">Messaging::RequestEndTimePolicy</class>
    <class kind="interface">Messaging::RequestPriorityPolicy</class>
    <class kind="interface">Messaging::RequestStartTimePolicy</class>
    <class kind="interface">Messaging::RoutingPolicy</class>
    <class kind="struct">Messaging::RoutingTypeRange</class>
    <class kind="interface">Messaging::SyncScopePolicy</class>
    <member kind="typedef">
      <type>short</type>
      <name>RebindMode</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>SyncScope</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>RoutingType</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeBase::TimeT</type>
      <name>Timeout</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>Priority</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>Ordering</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; PolicyValue &gt;</type>
      <name>PolicyValueSeq</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RebindMode</type>
      <name>TRANSPARENT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RebindMode</type>
      <name>NO_REBIND</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RebindMode</type>
      <name>NO_RECONNECT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_NONE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TRANSPORT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_SERVER</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TARGET</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_EAGER_BUFFERING</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_DELAYED_BUFFERING</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RoutingType</type>
      <name>ROUTE_NONE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RoutingType</type>
      <name>ROUTE_FORWARD</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RoutingType</type>
      <name>ROUTE_STORE_AND_FORWARD</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ordering</type>
      <name>ORDER_ANY</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ordering</type>
      <name>ORDER_TEMPORAL</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ordering</type>
      <name>ORDER_PRIORITY</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ordering</type>
      <name>ORDER_DEADLINE</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>REBIND_POLICY_TYPE</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>SYNC_SCOPE_POLICY_TYPE</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>REQUEST_PRIORITY_POLICY_TYPE</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>REPLY_PRIORITY_POLICY_TYPE</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>REQUEST_START_TIME_POLICY_TYPE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>REQUEST_END_TIME_POLICY_TYPE</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>REPLY_START_TIME_POLICY_TYPE</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>REPLY_END_TIME_POLICY_TYPE</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>RELATIVE_REQ_TIMEOUT_POLICY_TYPE</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>RELATIVE_RT_TIMEOUT_POLICY_TYPE</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>ROUTING_POLICY_TYPE</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>MAX_HOPS_POLICY_TYPE</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>QUEUE_ORDER_POLICY_TYPE</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IOP::ComponentId</type>
      <name>TAG_POLICIES</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IOP::ServiceId</type>
      <name>INVOCATION_POLICIES</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PortableInterceptor</name>
    <filename>namespacePortableInterceptor.html</filename>
    <class kind="interface">PortableInterceptor::ClientRequestInfo</class>
    <class kind="interface">PortableInterceptor::ClientRequestInterceptor</class>
    <class kind="interface">PortableInterceptor::Current</class>
    <class kind="exception">PortableInterceptor::ForwardRequest</class>
    <class kind="interface">PortableInterceptor::Interceptor</class>
    <class kind="exception">PortableInterceptor::InvalidSlot</class>
    <class kind="interface">PortableInterceptor::IORInfo</class>
    <class kind="interface">PortableInterceptor::IORInterceptor</class>
    <class kind="interface">PortableInterceptor::ObjectReferenceFactory</class>
    <class kind="interface">PortableInterceptor::ObjectReferenceTemplate</class>
    <class kind="interface">PortableInterceptor::ORBInitializer</class>
    <class kind="interface">PortableInterceptor::ORBInitInfo</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::DuplicateName</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::InvalidName</class>
    <class kind="interface">PortableInterceptor::PolicyFactory</class>
    <class kind="interface">PortableInterceptor::RequestInfo</class>
    <class kind="interface">PortableInterceptor::ServerRequestInfo</class>
    <class kind="interface">PortableInterceptor::ServerRequestInterceptor</class>
    <member kind="typedef">
      <type>string</type>
      <name>ServerId</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>ORBId</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>AdapterName</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::OctetSeq</type>
      <name>ObjectId</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ObjectReferenceTemplate &gt;</type>
      <name>ObjectReferenceTemplateSeq</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>AdapterManagerId</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>AdapterState</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>ReplyStatus</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>SlotId</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>HOLDING</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>ACTIVE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>DISCARDING</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>INACTIVE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>NON_EXISTENT</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>SUCCESSFUL</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>SYSTEM_EXCEPTION</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>USER_EXCEPTION</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>LOCATION_FORWARD</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>LOCATION_FORWARD_PERMANENT</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>TRANSPORT_RETRY</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TAO</name>
    <filename>namespaceTAO.html</filename>
    <class kind="struct">TAO::BufferingConstraint</class>
    <class kind="interface">TAO::BufferingConstraintPolicy</class>
    <member kind="typedef">
      <type>sequence&lt; octet &gt;</type>
      <name>ObjectKey</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>BufferingConstraintMode</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>SyncScope</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_FLUSH</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_TIMEOUT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_MESSAGE_COUNT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_MESSAGE_BYTES</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>BUFFERING_CONSTRAINT_POLICY_TYPE</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_NONE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TRANSPORT</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_SERVER</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TARGET</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_EAGER_BUFFERING</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_DELAYED_BUFFERING</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TAO_Messaging_Helper</name>
    <filename>namespaceTAO__Messaging__Helper.html</filename>
    <member kind="function">
      <type>void TAO_Export</type>
      <name>exception_holder_raise</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Exception_Data *exception_data, CORBA::ULong exception_count, CORBA::Octet *marshaled_data, CORBA::ULong marshaled_data_length, CORBA::Boolean byte_order, CORBA::Boolean is_system_exception ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TimeBase</name>
    <filename>namespaceTimeBase.html</filename>
    <class kind="struct">TimeBase::IntervalT</class>
    <class kind="struct">TimeBase::UtcT</class>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>TimeT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeT</type>
      <name>InaccuracyT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>TdfT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
